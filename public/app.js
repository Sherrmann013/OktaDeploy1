"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __typeError = (msg) => {
    throw TypeError(msg);
  };
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
  var __objRest = (source, exclude) => {
    var target = {};
    for (var prop in source)
      if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
        target[prop] = source[prop];
    if (source != null && __getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(source)) {
        if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
          target[prop] = source[prop];
      }
    return target;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
  var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
  var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
  var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
  var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
  var __privateWrapper = (obj, member, setter, getter) => ({
    set _(value) {
      __privateSet(obj, member, value, setter);
    },
    get _() {
      return __privateGet(obj, member, getter);
    }
  });

  // node_modules/react/cjs/react.production.min.js
  var require_react_production_min = __commonJS({
    "node_modules/react/cjs/react.production.min.js"(exports) {
      "use strict";
      var l = Symbol.for("react.element");
      var n2 = Symbol.for("react.portal");
      var p2 = Symbol.for("react.fragment");
      var q = Symbol.for("react.strict_mode");
      var r3 = Symbol.for("react.profiler");
      var t3 = Symbol.for("react.provider");
      var u2 = Symbol.for("react.context");
      var v = Symbol.for("react.forward_ref");
      var w = Symbol.for("react.suspense");
      var x = Symbol.for("react.memo");
      var y = Symbol.for("react.lazy");
      var z2 = Symbol.iterator;
      function A(a) {
        if (null === a || "object" !== typeof a) return null;
        a = z2 && a[z2] || a["@@iterator"];
        return "function" === typeof a ? a : null;
      }
      __name(A, "A");
      var B3 = { isMounted: /* @__PURE__ */ __name(function() {
        return false;
      }, "isMounted"), enqueueForceUpdate: /* @__PURE__ */ __name(function() {
      }, "enqueueForceUpdate"), enqueueReplaceState: /* @__PURE__ */ __name(function() {
      }, "enqueueReplaceState"), enqueueSetState: /* @__PURE__ */ __name(function() {
      }, "enqueueSetState") };
      var C = Object.assign;
      var D2 = {};
      function E(a, b, e) {
        this.props = a;
        this.context = b;
        this.refs = D2;
        this.updater = e || B3;
      }
      __name(E, "E");
      E.prototype.isReactComponent = {};
      E.prototype.setState = function(a, b) {
        if ("object" !== typeof a && "function" !== typeof a && null != a) throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
        this.updater.enqueueSetState(this, a, b, "setState");
      };
      E.prototype.forceUpdate = function(a) {
        this.updater.enqueueForceUpdate(this, a, "forceUpdate");
      };
      function F() {
      }
      __name(F, "F");
      F.prototype = E.prototype;
      function G2(a, b, e) {
        this.props = a;
        this.context = b;
        this.refs = D2;
        this.updater = e || B3;
      }
      __name(G2, "G");
      var H2 = G2.prototype = new F();
      H2.constructor = G2;
      C(H2, E.prototype);
      H2.isPureReactComponent = true;
      var I = Array.isArray;
      var J2 = Object.prototype.hasOwnProperty;
      var K3 = { current: null };
      var L2 = { key: true, ref: true, __self: true, __source: true };
      function M(a, b, e) {
        var d, c = {}, k3 = null, h = null;
        if (null != b) for (d in void 0 !== b.ref && (h = b.ref), void 0 !== b.key && (k3 = "" + b.key), b) J2.call(b, d) && !L2.hasOwnProperty(d) && (c[d] = b[d]);
        var g = arguments.length - 2;
        if (1 === g) c.children = e;
        else if (1 < g) {
          for (var f = Array(g), m2 = 0; m2 < g; m2++) f[m2] = arguments[m2 + 2];
          c.children = f;
        }
        if (a && a.defaultProps) for (d in g = a.defaultProps, g) void 0 === c[d] && (c[d] = g[d]);
        return { $$typeof: l, type: a, key: k3, ref: h, props: c, _owner: K3.current };
      }
      __name(M, "M");
      function N2(a, b) {
        return { $$typeof: l, type: a.type, key: b, ref: a.ref, props: a.props, _owner: a._owner };
      }
      __name(N2, "N");
      function O(a) {
        return "object" === typeof a && null !== a && a.$$typeof === l;
      }
      __name(O, "O");
      function escape(a) {
        var b = { "=": "=0", ":": "=2" };
        return "$" + a.replace(/[=:]/g, function(a2) {
          return b[a2];
        });
      }
      __name(escape, "escape");
      var P2 = /\/+/g;
      function Q(a, b) {
        return "object" === typeof a && null !== a && null != a.key ? escape("" + a.key) : b.toString(36);
      }
      __name(Q, "Q");
      function R(a, b, e, d, c) {
        var k3 = typeof a;
        if ("undefined" === k3 || "boolean" === k3) a = null;
        var h = false;
        if (null === a) h = true;
        else switch (k3) {
          case "string":
          case "number":
            h = true;
            break;
          case "object":
            switch (a.$$typeof) {
              case l:
              case n2:
                h = true;
            }
        }
        if (h) return h = a, c = c(h), a = "" === d ? "." + Q(h, 0) : d, I(c) ? (e = "", null != a && (e = a.replace(P2, "$&/") + "/"), R(c, b, e, "", function(a2) {
          return a2;
        })) : null != c && (O(c) && (c = N2(c, e + (!c.key || h && h.key === c.key ? "" : ("" + c.key).replace(P2, "$&/") + "/") + a)), b.push(c)), 1;
        h = 0;
        d = "" === d ? "." : d + ":";
        if (I(a)) for (var g = 0; g < a.length; g++) {
          k3 = a[g];
          var f = d + Q(k3, g);
          h += R(k3, b, e, f, c);
        }
        else if (f = A(a), "function" === typeof f) for (a = f.call(a), g = 0; !(k3 = a.next()).done; ) k3 = k3.value, f = d + Q(k3, g++), h += R(k3, b, e, f, c);
        else if ("object" === k3) throw b = String(a), Error("Objects are not valid as a React child (found: " + ("[object Object]" === b ? "object with keys {" + Object.keys(a).join(", ") + "}" : b) + "). If you meant to render a collection of children, use an array instead.");
        return h;
      }
      __name(R, "R");
      function S(a, b, e) {
        if (null == a) return a;
        var d = [], c = 0;
        R(a, d, "", "", function(a2) {
          return b.call(e, a2, c++);
        });
        return d;
      }
      __name(S, "S");
      function T2(a) {
        if (-1 === a._status) {
          var b = a._result;
          b = b();
          b.then(function(b2) {
            if (0 === a._status || -1 === a._status) a._status = 1, a._result = b2;
          }, function(b2) {
            if (0 === a._status || -1 === a._status) a._status = 2, a._result = b2;
          });
          -1 === a._status && (a._status = 0, a._result = b);
        }
        if (1 === a._status) return a._result.default;
        throw a._result;
      }
      __name(T2, "T");
      var U2 = { current: null };
      var V = { transition: null };
      var W2 = { ReactCurrentDispatcher: U2, ReactCurrentBatchConfig: V, ReactCurrentOwner: K3 };
      function X5() {
        throw Error("act(...) is not supported in production builds of React.");
      }
      __name(X5, "X");
      exports.Children = { map: S, forEach: /* @__PURE__ */ __name(function(a, b, e) {
        S(a, function() {
          b.apply(this, arguments);
        }, e);
      }, "forEach"), count: /* @__PURE__ */ __name(function(a) {
        var b = 0;
        S(a, function() {
          b++;
        });
        return b;
      }, "count"), toArray: /* @__PURE__ */ __name(function(a) {
        return S(a, function(a2) {
          return a2;
        }) || [];
      }, "toArray"), only: /* @__PURE__ */ __name(function(a) {
        if (!O(a)) throw Error("React.Children.only expected to receive a single React element child.");
        return a;
      }, "only") };
      exports.Component = E;
      exports.Fragment = p2;
      exports.Profiler = r3;
      exports.PureComponent = G2;
      exports.StrictMode = q;
      exports.Suspense = w;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = W2;
      exports.act = X5;
      exports.cloneElement = function(a, b, e) {
        if (null === a || void 0 === a) throw Error("React.cloneElement(...): The argument must be a React element, but you passed " + a + ".");
        var d = C({}, a.props), c = a.key, k3 = a.ref, h = a._owner;
        if (null != b) {
          void 0 !== b.ref && (k3 = b.ref, h = K3.current);
          void 0 !== b.key && (c = "" + b.key);
          if (a.type && a.type.defaultProps) var g = a.type.defaultProps;
          for (f in b) J2.call(b, f) && !L2.hasOwnProperty(f) && (d[f] = void 0 === b[f] && void 0 !== g ? g[f] : b[f]);
        }
        var f = arguments.length - 2;
        if (1 === f) d.children = e;
        else if (1 < f) {
          g = Array(f);
          for (var m2 = 0; m2 < f; m2++) g[m2] = arguments[m2 + 2];
          d.children = g;
        }
        return { $$typeof: l, type: a.type, key: c, ref: k3, props: d, _owner: h };
      };
      exports.createContext = function(a) {
        a = { $$typeof: u2, _currentValue: a, _currentValue2: a, _threadCount: 0, Provider: null, Consumer: null, _defaultValue: null, _globalName: null };
        a.Provider = { $$typeof: t3, _context: a };
        return a.Consumer = a;
      };
      exports.createElement = M;
      exports.createFactory = function(a) {
        var b = M.bind(null, a);
        b.type = a;
        return b;
      };
      exports.createRef = function() {
        return { current: null };
      };
      exports.forwardRef = function(a) {
        return { $$typeof: v, render: a };
      };
      exports.isValidElement = O;
      exports.lazy = function(a) {
        return { $$typeof: y, _payload: { _status: -1, _result: a }, _init: T2 };
      };
      exports.memo = function(a, b) {
        return { $$typeof: x, type: a, compare: void 0 === b ? null : b };
      };
      exports.startTransition = function(a) {
        var b = V.transition;
        V.transition = {};
        try {
          a();
        } finally {
          V.transition = b;
        }
      };
      exports.unstable_act = X5;
      exports.useCallback = function(a, b) {
        return U2.current.useCallback(a, b);
      };
      exports.useContext = function(a) {
        return U2.current.useContext(a);
      };
      exports.useDebugValue = function() {
      };
      exports.useDeferredValue = function(a) {
        return U2.current.useDeferredValue(a);
      };
      exports.useEffect = function(a, b) {
        return U2.current.useEffect(a, b);
      };
      exports.useId = function() {
        return U2.current.useId();
      };
      exports.useImperativeHandle = function(a, b, e) {
        return U2.current.useImperativeHandle(a, b, e);
      };
      exports.useInsertionEffect = function(a, b) {
        return U2.current.useInsertionEffect(a, b);
      };
      exports.useLayoutEffect = function(a, b) {
        return U2.current.useLayoutEffect(a, b);
      };
      exports.useMemo = function(a, b) {
        return U2.current.useMemo(a, b);
      };
      exports.useReducer = function(a, b, e) {
        return U2.current.useReducer(a, b, e);
      };
      exports.useRef = function(a) {
        return U2.current.useRef(a);
      };
      exports.useState = function(a) {
        return U2.current.useState(a);
      };
      exports.useSyncExternalStore = function(a, b, e) {
        return U2.current.useSyncExternalStore(a, b, e);
      };
      exports.useTransition = function() {
        return U2.current.useTransition();
      };
      exports.version = "18.3.1";
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.production.min.js
  var require_scheduler_production_min = __commonJS({
    "node_modules/scheduler/cjs/scheduler.production.min.js"(exports) {
      "use strict";
      function f(a, b) {
        var c = a.length;
        a.push(b);
        a: for (; 0 < c; ) {
          var d = c - 1 >>> 1, e = a[d];
          if (0 < g(e, b)) a[d] = b, a[c] = e, c = d;
          else break a;
        }
      }
      __name(f, "f");
      function h(a) {
        return 0 === a.length ? null : a[0];
      }
      __name(h, "h");
      function k3(a) {
        if (0 === a.length) return null;
        var b = a[0], c = a.pop();
        if (c !== b) {
          a[0] = c;
          a: for (var d = 0, e = a.length, w = e >>> 1; d < w; ) {
            var m2 = 2 * (d + 1) - 1, C = a[m2], n2 = m2 + 1, x = a[n2];
            if (0 > g(C, c)) n2 < e && 0 > g(x, C) ? (a[d] = x, a[n2] = c, d = n2) : (a[d] = C, a[m2] = c, d = m2);
            else if (n2 < e && 0 > g(x, c)) a[d] = x, a[n2] = c, d = n2;
            else break a;
          }
        }
        return b;
      }
      __name(k3, "k");
      function g(a, b) {
        var c = a.sortIndex - b.sortIndex;
        return 0 !== c ? c : a.id - b.id;
      }
      __name(g, "g");
      if ("object" === typeof performance && "function" === typeof performance.now) {
        l = performance;
        exports.unstable_now = function() {
          return l.now();
        };
      } else {
        p2 = Date, q = p2.now();
        exports.unstable_now = function() {
          return p2.now() - q;
        };
      }
      var l;
      var p2;
      var q;
      var r3 = [];
      var t3 = [];
      var u2 = 1;
      var v = null;
      var y = 3;
      var z2 = false;
      var A = false;
      var B3 = false;
      var D2 = "function" === typeof setTimeout ? setTimeout : null;
      var E = "function" === typeof clearTimeout ? clearTimeout : null;
      var F = "undefined" !== typeof setImmediate ? setImmediate : null;
      "undefined" !== typeof navigator && void 0 !== navigator.scheduling && void 0 !== navigator.scheduling.isInputPending && navigator.scheduling.isInputPending.bind(navigator.scheduling);
      function G2(a) {
        for (var b = h(t3); null !== b; ) {
          if (null === b.callback) k3(t3);
          else if (b.startTime <= a) k3(t3), b.sortIndex = b.expirationTime, f(r3, b);
          else break;
          b = h(t3);
        }
      }
      __name(G2, "G");
      function H2(a) {
        B3 = false;
        G2(a);
        if (!A) if (null !== h(r3)) A = true, I(J2);
        else {
          var b = h(t3);
          null !== b && K3(H2, b.startTime - a);
        }
      }
      __name(H2, "H");
      function J2(a, b) {
        A = false;
        B3 && (B3 = false, E(L2), L2 = -1);
        z2 = true;
        var c = y;
        try {
          G2(b);
          for (v = h(r3); null !== v && (!(v.expirationTime > b) || a && !M()); ) {
            var d = v.callback;
            if ("function" === typeof d) {
              v.callback = null;
              y = v.priorityLevel;
              var e = d(v.expirationTime <= b);
              b = exports.unstable_now();
              "function" === typeof e ? v.callback = e : v === h(r3) && k3(r3);
              G2(b);
            } else k3(r3);
            v = h(r3);
          }
          if (null !== v) var w = true;
          else {
            var m2 = h(t3);
            null !== m2 && K3(H2, m2.startTime - b);
            w = false;
          }
          return w;
        } finally {
          v = null, y = c, z2 = false;
        }
      }
      __name(J2, "J");
      var N2 = false;
      var O = null;
      var L2 = -1;
      var P2 = 5;
      var Q = -1;
      function M() {
        return exports.unstable_now() - Q < P2 ? false : true;
      }
      __name(M, "M");
      function R() {
        if (null !== O) {
          var a = exports.unstable_now();
          Q = a;
          var b = true;
          try {
            b = O(true, a);
          } finally {
            b ? S() : (N2 = false, O = null);
          }
        } else N2 = false;
      }
      __name(R, "R");
      var S;
      if ("function" === typeof F) S = /* @__PURE__ */ __name(function() {
        F(R);
      }, "S");
      else if ("undefined" !== typeof MessageChannel) {
        T2 = new MessageChannel(), U2 = T2.port2;
        T2.port1.onmessage = R;
        S = /* @__PURE__ */ __name(function() {
          U2.postMessage(null);
        }, "S");
      } else S = /* @__PURE__ */ __name(function() {
        D2(R, 0);
      }, "S");
      var T2;
      var U2;
      function I(a) {
        O = a;
        N2 || (N2 = true, S());
      }
      __name(I, "I");
      function K3(a, b) {
        L2 = D2(function() {
          a(exports.unstable_now());
        }, b);
      }
      __name(K3, "K");
      exports.unstable_IdlePriority = 5;
      exports.unstable_ImmediatePriority = 1;
      exports.unstable_LowPriority = 4;
      exports.unstable_NormalPriority = 3;
      exports.unstable_Profiling = null;
      exports.unstable_UserBlockingPriority = 2;
      exports.unstable_cancelCallback = function(a) {
        a.callback = null;
      };
      exports.unstable_continueExecution = function() {
        A || z2 || (A = true, I(J2));
      };
      exports.unstable_forceFrameRate = function(a) {
        0 > a || 125 < a ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : P2 = 0 < a ? Math.floor(1e3 / a) : 5;
      };
      exports.unstable_getCurrentPriorityLevel = function() {
        return y;
      };
      exports.unstable_getFirstCallbackNode = function() {
        return h(r3);
      };
      exports.unstable_next = function(a) {
        switch (y) {
          case 1:
          case 2:
          case 3:
            var b = 3;
            break;
          default:
            b = y;
        }
        var c = y;
        y = b;
        try {
          return a();
        } finally {
          y = c;
        }
      };
      exports.unstable_pauseExecution = function() {
      };
      exports.unstable_requestPaint = function() {
      };
      exports.unstable_runWithPriority = function(a, b) {
        switch (a) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            a = 3;
        }
        var c = y;
        y = a;
        try {
          return b();
        } finally {
          y = c;
        }
      };
      exports.unstable_scheduleCallback = function(a, b, c) {
        var d = exports.unstable_now();
        "object" === typeof c && null !== c ? (c = c.delay, c = "number" === typeof c && 0 < c ? d + c : d) : c = d;
        switch (a) {
          case 1:
            var e = -1;
            break;
          case 2:
            e = 250;
            break;
          case 5:
            e = 1073741823;
            break;
          case 4:
            e = 1e4;
            break;
          default:
            e = 5e3;
        }
        e = c + e;
        a = { id: u2++, callback: b, priorityLevel: a, startTime: c, expirationTime: e, sortIndex: -1 };
        c > d ? (a.sortIndex = c, f(t3, a), null === h(r3) && a === h(t3) && (B3 ? (E(L2), L2 = -1) : B3 = true, K3(H2, c - d))) : (a.sortIndex = e, f(r3, a), A || z2 || (A = true, I(J2)));
        return a;
      };
      exports.unstable_shouldYield = M;
      exports.unstable_wrapCallback = function(a) {
        var b = y;
        return function() {
          var c = y;
          y = b;
          try {
            return a.apply(this, arguments);
          } finally {
            y = c;
          }
        };
      };
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_scheduler_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.production.min.js
  var require_react_dom_production_min = __commonJS({
    "node_modules/react-dom/cjs/react-dom.production.min.js"(exports) {
      "use strict";
      var aa = require_react();
      var ca = require_scheduler();
      function p2(a) {
        for (var b = "https://reactjs.org/docs/error-decoder.html?invariant=" + a, c = 1; c < arguments.length; c++) b += "&args[]=" + encodeURIComponent(arguments[c]);
        return "Minified React error #" + a + "; visit " + b + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      __name(p2, "p");
      var da = /* @__PURE__ */ new Set();
      var ea = {};
      function fa(a, b) {
        ha(a, b);
        ha(a + "Capture", b);
      }
      __name(fa, "fa");
      function ha(a, b) {
        ea[a] = b;
        for (a = 0; a < b.length; a++) da.add(b[a]);
      }
      __name(ha, "ha");
      var ia = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
      var ja = Object.prototype.hasOwnProperty;
      var ka = /^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/;
      var la = {};
      var ma = {};
      function oa(a) {
        if (ja.call(ma, a)) return true;
        if (ja.call(la, a)) return false;
        if (ka.test(a)) return ma[a] = true;
        la[a] = true;
        return false;
      }
      __name(oa, "oa");
      function pa(a, b, c, d) {
        if (null !== c && 0 === c.type) return false;
        switch (typeof b) {
          case "function":
          case "symbol":
            return true;
          case "boolean":
            if (d) return false;
            if (null !== c) return !c.acceptsBooleans;
            a = a.toLowerCase().slice(0, 5);
            return "data-" !== a && "aria-" !== a;
          default:
            return false;
        }
      }
      __name(pa, "pa");
      function qa(a, b, c, d) {
        if (null === b || "undefined" === typeof b || pa(a, b, c, d)) return true;
        if (d) return false;
        if (null !== c) switch (c.type) {
          case 3:
            return !b;
          case 4:
            return false === b;
          case 5:
            return isNaN(b);
          case 6:
            return isNaN(b) || 1 > b;
        }
        return false;
      }
      __name(qa, "qa");
      function v(a, b, c, d, e, f, g) {
        this.acceptsBooleans = 2 === b || 3 === b || 4 === b;
        this.attributeName = d;
        this.attributeNamespace = e;
        this.mustUseProperty = c;
        this.propertyName = a;
        this.type = b;
        this.sanitizeURL = f;
        this.removeEmptyString = g;
      }
      __name(v, "v");
      var z2 = {};
      "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a) {
        z2[a] = new v(a, 0, false, a, null, false, false);
      });
      [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(a) {
        var b = a[0];
        z2[b] = new v(b, 1, false, a[1], null, false, false);
      });
      ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(a) {
        z2[a] = new v(a, 2, false, a.toLowerCase(), null, false, false);
      });
      ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(a) {
        z2[a] = new v(a, 2, false, a, null, false, false);
      });
      "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a) {
        z2[a] = new v(a, 3, false, a.toLowerCase(), null, false, false);
      });
      ["checked", "multiple", "muted", "selected"].forEach(function(a) {
        z2[a] = new v(a, 3, true, a, null, false, false);
      });
      ["capture", "download"].forEach(function(a) {
        z2[a] = new v(a, 4, false, a, null, false, false);
      });
      ["cols", "rows", "size", "span"].forEach(function(a) {
        z2[a] = new v(a, 6, false, a, null, false, false);
      });
      ["rowSpan", "start"].forEach(function(a) {
        z2[a] = new v(a, 5, false, a.toLowerCase(), null, false, false);
      });
      var ra = /[\-:]([a-z])/g;
      function sa(a) {
        return a[1].toUpperCase();
      }
      __name(sa, "sa");
      "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a) {
        var b = a.replace(
          ra,
          sa
        );
        z2[b] = new v(b, 1, false, a, null, false, false);
      });
      "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a) {
        var b = a.replace(ra, sa);
        z2[b] = new v(b, 1, false, a, "http://www.w3.org/1999/xlink", false, false);
      });
      ["xml:base", "xml:lang", "xml:space"].forEach(function(a) {
        var b = a.replace(ra, sa);
        z2[b] = new v(b, 1, false, a, "http://www.w3.org/XML/1998/namespace", false, false);
      });
      ["tabIndex", "crossOrigin"].forEach(function(a) {
        z2[a] = new v(a, 1, false, a.toLowerCase(), null, false, false);
      });
      z2.xlinkHref = new v("xlinkHref", 1, false, "xlink:href", "http://www.w3.org/1999/xlink", true, false);
      ["src", "href", "action", "formAction"].forEach(function(a) {
        z2[a] = new v(a, 1, false, a.toLowerCase(), null, true, true);
      });
      function ta(a, b, c, d) {
        var e = z2.hasOwnProperty(b) ? z2[b] : null;
        if (null !== e ? 0 !== e.type : d || !(2 < b.length) || "o" !== b[0] && "O" !== b[0] || "n" !== b[1] && "N" !== b[1]) qa(b, c, e, d) && (c = null), d || null === e ? oa(b) && (null === c ? a.removeAttribute(b) : a.setAttribute(b, "" + c)) : e.mustUseProperty ? a[e.propertyName] = null === c ? 3 === e.type ? false : "" : c : (b = e.attributeName, d = e.attributeNamespace, null === c ? a.removeAttribute(b) : (e = e.type, c = 3 === e || 4 === e && true === c ? "" : "" + c, d ? a.setAttributeNS(d, b, c) : a.setAttribute(b, c)));
      }
      __name(ta, "ta");
      var ua = aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
      var va = Symbol.for("react.element");
      var wa = Symbol.for("react.portal");
      var ya = Symbol.for("react.fragment");
      var za = Symbol.for("react.strict_mode");
      var Aa = Symbol.for("react.profiler");
      var Ba = Symbol.for("react.provider");
      var Ca = Symbol.for("react.context");
      var Da = Symbol.for("react.forward_ref");
      var Ea = Symbol.for("react.suspense");
      var Fa = Symbol.for("react.suspense_list");
      var Ga = Symbol.for("react.memo");
      var Ha = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      Symbol.for("react.debug_trace_mode");
      var Ia = Symbol.for("react.offscreen");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.cache");
      Symbol.for("react.tracing_marker");
      var Ja = Symbol.iterator;
      function Ka(a) {
        if (null === a || "object" !== typeof a) return null;
        a = Ja && a[Ja] || a["@@iterator"];
        return "function" === typeof a ? a : null;
      }
      __name(Ka, "Ka");
      var A = Object.assign;
      var La;
      function Ma(a) {
        if (void 0 === La) try {
          throw Error();
        } catch (c) {
          var b = c.stack.trim().match(/\n( *(at )?)/);
          La = b && b[1] || "";
        }
        return "\n" + La + a;
      }
      __name(Ma, "Ma");
      var Na = false;
      function Oa(a, b) {
        if (!a || Na) return "";
        Na = true;
        var c = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          if (b) if (b = /* @__PURE__ */ __name(function() {
            throw Error();
          }, "b"), Object.defineProperty(b.prototype, "props", { set: /* @__PURE__ */ __name(function() {
            throw Error();
          }, "set") }), "object" === typeof Reflect && Reflect.construct) {
            try {
              Reflect.construct(b, []);
            } catch (l) {
              var d = l;
            }
            Reflect.construct(a, [], b);
          } else {
            try {
              b.call();
            } catch (l) {
              d = l;
            }
            a.call(b.prototype);
          }
          else {
            try {
              throw Error();
            } catch (l) {
              d = l;
            }
            a();
          }
        } catch (l) {
          if (l && d && "string" === typeof l.stack) {
            for (var e = l.stack.split("\n"), f = d.stack.split("\n"), g = e.length - 1, h = f.length - 1; 1 <= g && 0 <= h && e[g] !== f[h]; ) h--;
            for (; 1 <= g && 0 <= h; g--, h--) if (e[g] !== f[h]) {
              if (1 !== g || 1 !== h) {
                do
                  if (g--, h--, 0 > h || e[g] !== f[h]) {
                    var k3 = "\n" + e[g].replace(" at new ", " at ");
                    a.displayName && k3.includes("<anonymous>") && (k3 = k3.replace("<anonymous>", a.displayName));
                    return k3;
                  }
                while (1 <= g && 0 <= h);
              }
              break;
            }
          }
        } finally {
          Na = false, Error.prepareStackTrace = c;
        }
        return (a = a ? a.displayName || a.name : "") ? Ma(a) : "";
      }
      __name(Oa, "Oa");
      function Pa(a) {
        switch (a.tag) {
          case 5:
            return Ma(a.type);
          case 16:
            return Ma("Lazy");
          case 13:
            return Ma("Suspense");
          case 19:
            return Ma("SuspenseList");
          case 0:
          case 2:
          case 15:
            return a = Oa(a.type, false), a;
          case 11:
            return a = Oa(a.type.render, false), a;
          case 1:
            return a = Oa(a.type, true), a;
          default:
            return "";
        }
      }
      __name(Pa, "Pa");
      function Qa(a) {
        if (null == a) return null;
        if ("function" === typeof a) return a.displayName || a.name || null;
        if ("string" === typeof a) return a;
        switch (a) {
          case ya:
            return "Fragment";
          case wa:
            return "Portal";
          case Aa:
            return "Profiler";
          case za:
            return "StrictMode";
          case Ea:
            return "Suspense";
          case Fa:
            return "SuspenseList";
        }
        if ("object" === typeof a) switch (a.$$typeof) {
          case Ca:
            return (a.displayName || "Context") + ".Consumer";
          case Ba:
            return (a._context.displayName || "Context") + ".Provider";
          case Da:
            var b = a.render;
            a = a.displayName;
            a || (a = b.displayName || b.name || "", a = "" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
            return a;
          case Ga:
            return b = a.displayName || null, null !== b ? b : Qa(a.type) || "Memo";
          case Ha:
            b = a._payload;
            a = a._init;
            try {
              return Qa(a(b));
            } catch (c) {
            }
        }
        return null;
      }
      __name(Qa, "Qa");
      function Ra(a) {
        var b = a.type;
        switch (a.tag) {
          case 24:
            return "Cache";
          case 9:
            return (b.displayName || "Context") + ".Consumer";
          case 10:
            return (b._context.displayName || "Context") + ".Provider";
          case 18:
            return "DehydratedFragment";
          case 11:
            return a = b.render, a = a.displayName || a.name || "", b.displayName || ("" !== a ? "ForwardRef(" + a + ")" : "ForwardRef");
          case 7:
            return "Fragment";
          case 5:
            return b;
          case 4:
            return "Portal";
          case 3:
            return "Root";
          case 6:
            return "Text";
          case 16:
            return Qa(b);
          case 8:
            return b === za ? "StrictMode" : "Mode";
          case 22:
            return "Offscreen";
          case 12:
            return "Profiler";
          case 21:
            return "Scope";
          case 13:
            return "Suspense";
          case 19:
            return "SuspenseList";
          case 25:
            return "TracingMarker";
          case 1:
          case 0:
          case 17:
          case 2:
          case 14:
          case 15:
            if ("function" === typeof b) return b.displayName || b.name || null;
            if ("string" === typeof b) return b;
        }
        return null;
      }
      __name(Ra, "Ra");
      function Sa(a) {
        switch (typeof a) {
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return a;
          case "object":
            return a;
          default:
            return "";
        }
      }
      __name(Sa, "Sa");
      function Ta(a) {
        var b = a.type;
        return (a = a.nodeName) && "input" === a.toLowerCase() && ("checkbox" === b || "radio" === b);
      }
      __name(Ta, "Ta");
      function Ua(a) {
        var b = Ta(a) ? "checked" : "value", c = Object.getOwnPropertyDescriptor(a.constructor.prototype, b), d = "" + a[b];
        if (!a.hasOwnProperty(b) && "undefined" !== typeof c && "function" === typeof c.get && "function" === typeof c.set) {
          var e = c.get, f = c.set;
          Object.defineProperty(a, b, { configurable: true, get: /* @__PURE__ */ __name(function() {
            return e.call(this);
          }, "get"), set: /* @__PURE__ */ __name(function(a2) {
            d = "" + a2;
            f.call(this, a2);
          }, "set") });
          Object.defineProperty(a, b, { enumerable: c.enumerable });
          return { getValue: /* @__PURE__ */ __name(function() {
            return d;
          }, "getValue"), setValue: /* @__PURE__ */ __name(function(a2) {
            d = "" + a2;
          }, "setValue"), stopTracking: /* @__PURE__ */ __name(function() {
            a._valueTracker = null;
            delete a[b];
          }, "stopTracking") };
        }
      }
      __name(Ua, "Ua");
      function Va(a) {
        a._valueTracker || (a._valueTracker = Ua(a));
      }
      __name(Va, "Va");
      function Wa(a) {
        if (!a) return false;
        var b = a._valueTracker;
        if (!b) return true;
        var c = b.getValue();
        var d = "";
        a && (d = Ta(a) ? a.checked ? "true" : "false" : a.value);
        a = d;
        return a !== c ? (b.setValue(a), true) : false;
      }
      __name(Wa, "Wa");
      function Xa(a) {
        a = a || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof a) return null;
        try {
          return a.activeElement || a.body;
        } catch (b) {
          return a.body;
        }
      }
      __name(Xa, "Xa");
      function Ya(a, b) {
        var c = b.checked;
        return A({}, b, { defaultChecked: void 0, defaultValue: void 0, value: void 0, checked: null != c ? c : a._wrapperState.initialChecked });
      }
      __name(Ya, "Ya");
      function Za(a, b) {
        var c = null == b.defaultValue ? "" : b.defaultValue, d = null != b.checked ? b.checked : b.defaultChecked;
        c = Sa(null != b.value ? b.value : c);
        a._wrapperState = { initialChecked: d, initialValue: c, controlled: "checkbox" === b.type || "radio" === b.type ? null != b.checked : null != b.value };
      }
      __name(Za, "Za");
      function ab(a, b) {
        b = b.checked;
        null != b && ta(a, "checked", b, false);
      }
      __name(ab, "ab");
      function bb(a, b) {
        ab(a, b);
        var c = Sa(b.value), d = b.type;
        if (null != c) if ("number" === d) {
          if (0 === c && "" === a.value || a.value != c) a.value = "" + c;
        } else a.value !== "" + c && (a.value = "" + c);
        else if ("submit" === d || "reset" === d) {
          a.removeAttribute("value");
          return;
        }
        b.hasOwnProperty("value") ? cb(a, b.type, c) : b.hasOwnProperty("defaultValue") && cb(a, b.type, Sa(b.defaultValue));
        null == b.checked && null != b.defaultChecked && (a.defaultChecked = !!b.defaultChecked);
      }
      __name(bb, "bb");
      function db(a, b, c) {
        if (b.hasOwnProperty("value") || b.hasOwnProperty("defaultValue")) {
          var d = b.type;
          if (!("submit" !== d && "reset" !== d || void 0 !== b.value && null !== b.value)) return;
          b = "" + a._wrapperState.initialValue;
          c || b === a.value || (a.value = b);
          a.defaultValue = b;
        }
        c = a.name;
        "" !== c && (a.name = "");
        a.defaultChecked = !!a._wrapperState.initialChecked;
        "" !== c && (a.name = c);
      }
      __name(db, "db");
      function cb(a, b, c) {
        if ("number" !== b || Xa(a.ownerDocument) !== a) null == c ? a.defaultValue = "" + a._wrapperState.initialValue : a.defaultValue !== "" + c && (a.defaultValue = "" + c);
      }
      __name(cb, "cb");
      var eb = Array.isArray;
      function fb(a, b, c, d) {
        a = a.options;
        if (b) {
          b = {};
          for (var e = 0; e < c.length; e++) b["$" + c[e]] = true;
          for (c = 0; c < a.length; c++) e = b.hasOwnProperty("$" + a[c].value), a[c].selected !== e && (a[c].selected = e), e && d && (a[c].defaultSelected = true);
        } else {
          c = "" + Sa(c);
          b = null;
          for (e = 0; e < a.length; e++) {
            if (a[e].value === c) {
              a[e].selected = true;
              d && (a[e].defaultSelected = true);
              return;
            }
            null !== b || a[e].disabled || (b = a[e]);
          }
          null !== b && (b.selected = true);
        }
      }
      __name(fb, "fb");
      function gb(a, b) {
        if (null != b.dangerouslySetInnerHTML) throw Error(p2(91));
        return A({}, b, { value: void 0, defaultValue: void 0, children: "" + a._wrapperState.initialValue });
      }
      __name(gb, "gb");
      function hb(a, b) {
        var c = b.value;
        if (null == c) {
          c = b.children;
          b = b.defaultValue;
          if (null != c) {
            if (null != b) throw Error(p2(92));
            if (eb(c)) {
              if (1 < c.length) throw Error(p2(93));
              c = c[0];
            }
            b = c;
          }
          null == b && (b = "");
          c = b;
        }
        a._wrapperState = { initialValue: Sa(c) };
      }
      __name(hb, "hb");
      function ib(a, b) {
        var c = Sa(b.value), d = Sa(b.defaultValue);
        null != c && (c = "" + c, c !== a.value && (a.value = c), null == b.defaultValue && a.defaultValue !== c && (a.defaultValue = c));
        null != d && (a.defaultValue = "" + d);
      }
      __name(ib, "ib");
      function jb(a) {
        var b = a.textContent;
        b === a._wrapperState.initialValue && "" !== b && null !== b && (a.value = b);
      }
      __name(jb, "jb");
      function kb(a) {
        switch (a) {
          case "svg":
            return "http://www.w3.org/2000/svg";
          case "math":
            return "http://www.w3.org/1998/Math/MathML";
          default:
            return "http://www.w3.org/1999/xhtml";
        }
      }
      __name(kb, "kb");
      function lb(a, b) {
        return null == a || "http://www.w3.org/1999/xhtml" === a ? kb(b) : "http://www.w3.org/2000/svg" === a && "foreignObject" === b ? "http://www.w3.org/1999/xhtml" : a;
      }
      __name(lb, "lb");
      var mb;
      var nb = function(a) {
        return "undefined" !== typeof MSApp && MSApp.execUnsafeLocalFunction ? function(b, c, d, e) {
          MSApp.execUnsafeLocalFunction(function() {
            return a(b, c, d, e);
          });
        } : a;
      }(function(a, b) {
        if ("http://www.w3.org/2000/svg" !== a.namespaceURI || "innerHTML" in a) a.innerHTML = b;
        else {
          mb = mb || document.createElement("div");
          mb.innerHTML = "<svg>" + b.valueOf().toString() + "</svg>";
          for (b = mb.firstChild; a.firstChild; ) a.removeChild(a.firstChild);
          for (; b.firstChild; ) a.appendChild(b.firstChild);
        }
      });
      function ob(a, b) {
        if (b) {
          var c = a.firstChild;
          if (c && c === a.lastChild && 3 === c.nodeType) {
            c.nodeValue = b;
            return;
          }
        }
        a.textContent = b;
      }
      __name(ob, "ob");
      var pb = {
        animationIterationCount: true,
        aspectRatio: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true
      };
      var qb = ["Webkit", "ms", "Moz", "O"];
      Object.keys(pb).forEach(function(a) {
        qb.forEach(function(b) {
          b = b + a.charAt(0).toUpperCase() + a.substring(1);
          pb[b] = pb[a];
        });
      });
      function rb(a, b, c) {
        return null == b || "boolean" === typeof b || "" === b ? "" : c || "number" !== typeof b || 0 === b || pb.hasOwnProperty(a) && pb[a] ? ("" + b).trim() : b + "px";
      }
      __name(rb, "rb");
      function sb(a, b) {
        a = a.style;
        for (var c in b) if (b.hasOwnProperty(c)) {
          var d = 0 === c.indexOf("--"), e = rb(c, b[c], d);
          "float" === c && (c = "cssFloat");
          d ? a.setProperty(c, e) : a[c] = e;
        }
      }
      __name(sb, "sb");
      var tb = A({ menuitem: true }, { area: true, base: true, br: true, col: true, embed: true, hr: true, img: true, input: true, keygen: true, link: true, meta: true, param: true, source: true, track: true, wbr: true });
      function ub(a, b) {
        if (b) {
          if (tb[a] && (null != b.children || null != b.dangerouslySetInnerHTML)) throw Error(p2(137, a));
          if (null != b.dangerouslySetInnerHTML) {
            if (null != b.children) throw Error(p2(60));
            if ("object" !== typeof b.dangerouslySetInnerHTML || !("__html" in b.dangerouslySetInnerHTML)) throw Error(p2(61));
          }
          if (null != b.style && "object" !== typeof b.style) throw Error(p2(62));
        }
      }
      __name(ub, "ub");
      function vb(a, b) {
        if (-1 === a.indexOf("-")) return "string" === typeof b.is;
        switch (a) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      __name(vb, "vb");
      var wb = null;
      function xb(a) {
        a = a.target || a.srcElement || window;
        a.correspondingUseElement && (a = a.correspondingUseElement);
        return 3 === a.nodeType ? a.parentNode : a;
      }
      __name(xb, "xb");
      var yb = null;
      var zb = null;
      var Ab = null;
      function Bb(a) {
        if (a = Cb(a)) {
          if ("function" !== typeof yb) throw Error(p2(280));
          var b = a.stateNode;
          b && (b = Db(b), yb(a.stateNode, a.type, b));
        }
      }
      __name(Bb, "Bb");
      function Eb(a) {
        zb ? Ab ? Ab.push(a) : Ab = [a] : zb = a;
      }
      __name(Eb, "Eb");
      function Fb() {
        if (zb) {
          var a = zb, b = Ab;
          Ab = zb = null;
          Bb(a);
          if (b) for (a = 0; a < b.length; a++) Bb(b[a]);
        }
      }
      __name(Fb, "Fb");
      function Gb(a, b) {
        return a(b);
      }
      __name(Gb, "Gb");
      function Hb() {
      }
      __name(Hb, "Hb");
      var Ib = false;
      function Jb(a, b, c) {
        if (Ib) return a(b, c);
        Ib = true;
        try {
          return Gb(a, b, c);
        } finally {
          if (Ib = false, null !== zb || null !== Ab) Hb(), Fb();
        }
      }
      __name(Jb, "Jb");
      function Kb(a, b) {
        var c = a.stateNode;
        if (null === c) return null;
        var d = Db(c);
        if (null === d) return null;
        c = d[b];
        a: switch (b) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (d = !d.disabled) || (a = a.type, d = !("button" === a || "input" === a || "select" === a || "textarea" === a));
            a = !d;
            break a;
          default:
            a = false;
        }
        if (a) return null;
        if (c && "function" !== typeof c) throw Error(p2(231, b, typeof c));
        return c;
      }
      __name(Kb, "Kb");
      var Lb = false;
      if (ia) try {
        Mb = {};
        Object.defineProperty(Mb, "passive", { get: /* @__PURE__ */ __name(function() {
          Lb = true;
        }, "get") });
        window.addEventListener("test", Mb, Mb);
        window.removeEventListener("test", Mb, Mb);
      } catch (a) {
        Lb = false;
      }
      var Mb;
      function Nb(a, b, c, d, e, f, g, h, k3) {
        var l = Array.prototype.slice.call(arguments, 3);
        try {
          b.apply(c, l);
        } catch (m2) {
          this.onError(m2);
        }
      }
      __name(Nb, "Nb");
      var Ob = false;
      var Pb = null;
      var Qb = false;
      var Rb = null;
      var Sb = { onError: /* @__PURE__ */ __name(function(a) {
        Ob = true;
        Pb = a;
      }, "onError") };
      function Tb(a, b, c, d, e, f, g, h, k3) {
        Ob = false;
        Pb = null;
        Nb.apply(Sb, arguments);
      }
      __name(Tb, "Tb");
      function Ub(a, b, c, d, e, f, g, h, k3) {
        Tb.apply(this, arguments);
        if (Ob) {
          if (Ob) {
            var l = Pb;
            Ob = false;
            Pb = null;
          } else throw Error(p2(198));
          Qb || (Qb = true, Rb = l);
        }
      }
      __name(Ub, "Ub");
      function Vb(a) {
        var b = a, c = a;
        if (a.alternate) for (; b.return; ) b = b.return;
        else {
          a = b;
          do
            b = a, 0 !== (b.flags & 4098) && (c = b.return), a = b.return;
          while (a);
        }
        return 3 === b.tag ? c : null;
      }
      __name(Vb, "Vb");
      function Wb(a) {
        if (13 === a.tag) {
          var b = a.memoizedState;
          null === b && (a = a.alternate, null !== a && (b = a.memoizedState));
          if (null !== b) return b.dehydrated;
        }
        return null;
      }
      __name(Wb, "Wb");
      function Xb(a) {
        if (Vb(a) !== a) throw Error(p2(188));
      }
      __name(Xb, "Xb");
      function Yb(a) {
        var b = a.alternate;
        if (!b) {
          b = Vb(a);
          if (null === b) throw Error(p2(188));
          return b !== a ? null : a;
        }
        for (var c = a, d = b; ; ) {
          var e = c.return;
          if (null === e) break;
          var f = e.alternate;
          if (null === f) {
            d = e.return;
            if (null !== d) {
              c = d;
              continue;
            }
            break;
          }
          if (e.child === f.child) {
            for (f = e.child; f; ) {
              if (f === c) return Xb(e), a;
              if (f === d) return Xb(e), b;
              f = f.sibling;
            }
            throw Error(p2(188));
          }
          if (c.return !== d.return) c = e, d = f;
          else {
            for (var g = false, h = e.child; h; ) {
              if (h === c) {
                g = true;
                c = e;
                d = f;
                break;
              }
              if (h === d) {
                g = true;
                d = e;
                c = f;
                break;
              }
              h = h.sibling;
            }
            if (!g) {
              for (h = f.child; h; ) {
                if (h === c) {
                  g = true;
                  c = f;
                  d = e;
                  break;
                }
                if (h === d) {
                  g = true;
                  d = f;
                  c = e;
                  break;
                }
                h = h.sibling;
              }
              if (!g) throw Error(p2(189));
            }
          }
          if (c.alternate !== d) throw Error(p2(190));
        }
        if (3 !== c.tag) throw Error(p2(188));
        return c.stateNode.current === c ? a : b;
      }
      __name(Yb, "Yb");
      function Zb(a) {
        a = Yb(a);
        return null !== a ? $b(a) : null;
      }
      __name(Zb, "Zb");
      function $b(a) {
        if (5 === a.tag || 6 === a.tag) return a;
        for (a = a.child; null !== a; ) {
          var b = $b(a);
          if (null !== b) return b;
          a = a.sibling;
        }
        return null;
      }
      __name($b, "$b");
      var ac = ca.unstable_scheduleCallback;
      var bc = ca.unstable_cancelCallback;
      var cc = ca.unstable_shouldYield;
      var dc = ca.unstable_requestPaint;
      var B3 = ca.unstable_now;
      var ec = ca.unstable_getCurrentPriorityLevel;
      var fc = ca.unstable_ImmediatePriority;
      var gc = ca.unstable_UserBlockingPriority;
      var hc = ca.unstable_NormalPriority;
      var ic = ca.unstable_LowPriority;
      var jc = ca.unstable_IdlePriority;
      var kc = null;
      var lc = null;
      function mc(a) {
        if (lc && "function" === typeof lc.onCommitFiberRoot) try {
          lc.onCommitFiberRoot(kc, a, void 0, 128 === (a.current.flags & 128));
        } catch (b) {
        }
      }
      __name(mc, "mc");
      var oc = Math.clz32 ? Math.clz32 : nc;
      var pc = Math.log;
      var qc = Math.LN2;
      function nc(a) {
        a >>>= 0;
        return 0 === a ? 32 : 31 - (pc(a) / qc | 0) | 0;
      }
      __name(nc, "nc");
      var rc = 64;
      var sc = 4194304;
      function tc(a) {
        switch (a & -a) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return a & 4194240;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return a & 130023424;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 1073741824;
          default:
            return a;
        }
      }
      __name(tc, "tc");
      function uc(a, b) {
        var c = a.pendingLanes;
        if (0 === c) return 0;
        var d = 0, e = a.suspendedLanes, f = a.pingedLanes, g = c & 268435455;
        if (0 !== g) {
          var h = g & ~e;
          0 !== h ? d = tc(h) : (f &= g, 0 !== f && (d = tc(f)));
        } else g = c & ~e, 0 !== g ? d = tc(g) : 0 !== f && (d = tc(f));
        if (0 === d) return 0;
        if (0 !== b && b !== d && 0 === (b & e) && (e = d & -d, f = b & -b, e >= f || 16 === e && 0 !== (f & 4194240))) return b;
        0 !== (d & 4) && (d |= c & 16);
        b = a.entangledLanes;
        if (0 !== b) for (a = a.entanglements, b &= d; 0 < b; ) c = 31 - oc(b), e = 1 << c, d |= a[c], b &= ~e;
        return d;
      }
      __name(uc, "uc");
      function vc(a, b) {
        switch (a) {
          case 1:
          case 2:
          case 4:
            return b + 250;
          case 8:
          case 16:
          case 32:
          case 64:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return b + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
          case 67108864:
            return -1;
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      __name(vc, "vc");
      function wc(a, b) {
        for (var c = a.suspendedLanes, d = a.pingedLanes, e = a.expirationTimes, f = a.pendingLanes; 0 < f; ) {
          var g = 31 - oc(f), h = 1 << g, k3 = e[g];
          if (-1 === k3) {
            if (0 === (h & c) || 0 !== (h & d)) e[g] = vc(h, b);
          } else k3 <= b && (a.expiredLanes |= h);
          f &= ~h;
        }
      }
      __name(wc, "wc");
      function xc(a) {
        a = a.pendingLanes & -1073741825;
        return 0 !== a ? a : a & 1073741824 ? 1073741824 : 0;
      }
      __name(xc, "xc");
      function yc() {
        var a = rc;
        rc <<= 1;
        0 === (rc & 4194240) && (rc = 64);
        return a;
      }
      __name(yc, "yc");
      function zc(a) {
        for (var b = [], c = 0; 31 > c; c++) b.push(a);
        return b;
      }
      __name(zc, "zc");
      function Ac(a, b, c) {
        a.pendingLanes |= b;
        536870912 !== b && (a.suspendedLanes = 0, a.pingedLanes = 0);
        a = a.eventTimes;
        b = 31 - oc(b);
        a[b] = c;
      }
      __name(Ac, "Ac");
      function Bc(a, b) {
        var c = a.pendingLanes & ~b;
        a.pendingLanes = b;
        a.suspendedLanes = 0;
        a.pingedLanes = 0;
        a.expiredLanes &= b;
        a.mutableReadLanes &= b;
        a.entangledLanes &= b;
        b = a.entanglements;
        var d = a.eventTimes;
        for (a = a.expirationTimes; 0 < c; ) {
          var e = 31 - oc(c), f = 1 << e;
          b[e] = 0;
          d[e] = -1;
          a[e] = -1;
          c &= ~f;
        }
      }
      __name(Bc, "Bc");
      function Cc(a, b) {
        var c = a.entangledLanes |= b;
        for (a = a.entanglements; c; ) {
          var d = 31 - oc(c), e = 1 << d;
          e & b | a[d] & b && (a[d] |= b);
          c &= ~e;
        }
      }
      __name(Cc, "Cc");
      var C = 0;
      function Dc(a) {
        a &= -a;
        return 1 < a ? 4 < a ? 0 !== (a & 268435455) ? 16 : 536870912 : 4 : 1;
      }
      __name(Dc, "Dc");
      var Ec;
      var Fc;
      var Gc;
      var Hc;
      var Ic;
      var Jc = false;
      var Kc = [];
      var Lc = null;
      var Mc = null;
      var Nc = null;
      var Oc = /* @__PURE__ */ new Map();
      var Pc = /* @__PURE__ */ new Map();
      var Qc = [];
      var Rc = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");
      function Sc(a, b) {
        switch (a) {
          case "focusin":
          case "focusout":
            Lc = null;
            break;
          case "dragenter":
          case "dragleave":
            Mc = null;
            break;
          case "mouseover":
          case "mouseout":
            Nc = null;
            break;
          case "pointerover":
          case "pointerout":
            Oc.delete(b.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            Pc.delete(b.pointerId);
        }
      }
      __name(Sc, "Sc");
      function Tc(a, b, c, d, e, f) {
        if (null === a || a.nativeEvent !== f) return a = { blockedOn: b, domEventName: c, eventSystemFlags: d, nativeEvent: f, targetContainers: [e] }, null !== b && (b = Cb(b), null !== b && Fc(b)), a;
        a.eventSystemFlags |= d;
        b = a.targetContainers;
        null !== e && -1 === b.indexOf(e) && b.push(e);
        return a;
      }
      __name(Tc, "Tc");
      function Uc(a, b, c, d, e) {
        switch (b) {
          case "focusin":
            return Lc = Tc(Lc, a, b, c, d, e), true;
          case "dragenter":
            return Mc = Tc(Mc, a, b, c, d, e), true;
          case "mouseover":
            return Nc = Tc(Nc, a, b, c, d, e), true;
          case "pointerover":
            var f = e.pointerId;
            Oc.set(f, Tc(Oc.get(f) || null, a, b, c, d, e));
            return true;
          case "gotpointercapture":
            return f = e.pointerId, Pc.set(f, Tc(Pc.get(f) || null, a, b, c, d, e)), true;
        }
        return false;
      }
      __name(Uc, "Uc");
      function Vc(a) {
        var b = Wc(a.target);
        if (null !== b) {
          var c = Vb(b);
          if (null !== c) {
            if (b = c.tag, 13 === b) {
              if (b = Wb(c), null !== b) {
                a.blockedOn = b;
                Ic(a.priority, function() {
                  Gc(c);
                });
                return;
              }
            } else if (3 === b && c.stateNode.current.memoizedState.isDehydrated) {
              a.blockedOn = 3 === c.tag ? c.stateNode.containerInfo : null;
              return;
            }
          }
        }
        a.blockedOn = null;
      }
      __name(Vc, "Vc");
      function Xc(a) {
        if (null !== a.blockedOn) return false;
        for (var b = a.targetContainers; 0 < b.length; ) {
          var c = Yc(a.domEventName, a.eventSystemFlags, b[0], a.nativeEvent);
          if (null === c) {
            c = a.nativeEvent;
            var d = new c.constructor(c.type, c);
            wb = d;
            c.target.dispatchEvent(d);
            wb = null;
          } else return b = Cb(c), null !== b && Fc(b), a.blockedOn = c, false;
          b.shift();
        }
        return true;
      }
      __name(Xc, "Xc");
      function Zc(a, b, c) {
        Xc(a) && c.delete(b);
      }
      __name(Zc, "Zc");
      function $c() {
        Jc = false;
        null !== Lc && Xc(Lc) && (Lc = null);
        null !== Mc && Xc(Mc) && (Mc = null);
        null !== Nc && Xc(Nc) && (Nc = null);
        Oc.forEach(Zc);
        Pc.forEach(Zc);
      }
      __name($c, "$c");
      function ad(a, b) {
        a.blockedOn === b && (a.blockedOn = null, Jc || (Jc = true, ca.unstable_scheduleCallback(ca.unstable_NormalPriority, $c)));
      }
      __name(ad, "ad");
      function bd(a) {
        function b(b2) {
          return ad(b2, a);
        }
        __name(b, "b");
        if (0 < Kc.length) {
          ad(Kc[0], a);
          for (var c = 1; c < Kc.length; c++) {
            var d = Kc[c];
            d.blockedOn === a && (d.blockedOn = null);
          }
        }
        null !== Lc && ad(Lc, a);
        null !== Mc && ad(Mc, a);
        null !== Nc && ad(Nc, a);
        Oc.forEach(b);
        Pc.forEach(b);
        for (c = 0; c < Qc.length; c++) d = Qc[c], d.blockedOn === a && (d.blockedOn = null);
        for (; 0 < Qc.length && (c = Qc[0], null === c.blockedOn); ) Vc(c), null === c.blockedOn && Qc.shift();
      }
      __name(bd, "bd");
      var cd = ua.ReactCurrentBatchConfig;
      var dd = true;
      function ed(a, b, c, d) {
        var e = C, f = cd.transition;
        cd.transition = null;
        try {
          C = 1, fd(a, b, c, d);
        } finally {
          C = e, cd.transition = f;
        }
      }
      __name(ed, "ed");
      function gd(a, b, c, d) {
        var e = C, f = cd.transition;
        cd.transition = null;
        try {
          C = 4, fd(a, b, c, d);
        } finally {
          C = e, cd.transition = f;
        }
      }
      __name(gd, "gd");
      function fd(a, b, c, d) {
        if (dd) {
          var e = Yc(a, b, c, d);
          if (null === e) hd(a, b, d, id, c), Sc(a, d);
          else if (Uc(e, a, b, c, d)) d.stopPropagation();
          else if (Sc(a, d), b & 4 && -1 < Rc.indexOf(a)) {
            for (; null !== e; ) {
              var f = Cb(e);
              null !== f && Ec(f);
              f = Yc(a, b, c, d);
              null === f && hd(a, b, d, id, c);
              if (f === e) break;
              e = f;
            }
            null !== e && d.stopPropagation();
          } else hd(a, b, d, null, c);
        }
      }
      __name(fd, "fd");
      var id = null;
      function Yc(a, b, c, d) {
        id = null;
        a = xb(d);
        a = Wc(a);
        if (null !== a) if (b = Vb(a), null === b) a = null;
        else if (c = b.tag, 13 === c) {
          a = Wb(b);
          if (null !== a) return a;
          a = null;
        } else if (3 === c) {
          if (b.stateNode.current.memoizedState.isDehydrated) return 3 === b.tag ? b.stateNode.containerInfo : null;
          a = null;
        } else b !== a && (a = null);
        id = a;
        return null;
      }
      __name(Yc, "Yc");
      function jd(a) {
        switch (a) {
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 1;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "toggle":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 4;
          case "message":
            switch (ec()) {
              case fc:
                return 1;
              case gc:
                return 4;
              case hc:
              case ic:
                return 16;
              case jc:
                return 536870912;
              default:
                return 16;
            }
          default:
            return 16;
        }
      }
      __name(jd, "jd");
      var kd = null;
      var ld = null;
      var md = null;
      function nd() {
        if (md) return md;
        var a, b = ld, c = b.length, d, e = "value" in kd ? kd.value : kd.textContent, f = e.length;
        for (a = 0; a < c && b[a] === e[a]; a++) ;
        var g = c - a;
        for (d = 1; d <= g && b[c - d] === e[f - d]; d++) ;
        return md = e.slice(a, 1 < d ? 1 - d : void 0);
      }
      __name(nd, "nd");
      function od(a) {
        var b = a.keyCode;
        "charCode" in a ? (a = a.charCode, 0 === a && 13 === b && (a = 13)) : a = b;
        10 === a && (a = 13);
        return 32 <= a || 13 === a ? a : 0;
      }
      __name(od, "od");
      function pd() {
        return true;
      }
      __name(pd, "pd");
      function qd() {
        return false;
      }
      __name(qd, "qd");
      function rd(a) {
        function b(b2, d, e, f, g) {
          this._reactName = b2;
          this._targetInst = e;
          this.type = d;
          this.nativeEvent = f;
          this.target = g;
          this.currentTarget = null;
          for (var c in a) a.hasOwnProperty(c) && (b2 = a[c], this[c] = b2 ? b2(f) : f[c]);
          this.isDefaultPrevented = (null != f.defaultPrevented ? f.defaultPrevented : false === f.returnValue) ? pd : qd;
          this.isPropagationStopped = qd;
          return this;
        }
        __name(b, "b");
        A(b.prototype, { preventDefault: /* @__PURE__ */ __name(function() {
          this.defaultPrevented = true;
          var a2 = this.nativeEvent;
          a2 && (a2.preventDefault ? a2.preventDefault() : "unknown" !== typeof a2.returnValue && (a2.returnValue = false), this.isDefaultPrevented = pd);
        }, "preventDefault"), stopPropagation: /* @__PURE__ */ __name(function() {
          var a2 = this.nativeEvent;
          a2 && (a2.stopPropagation ? a2.stopPropagation() : "unknown" !== typeof a2.cancelBubble && (a2.cancelBubble = true), this.isPropagationStopped = pd);
        }, "stopPropagation"), persist: /* @__PURE__ */ __name(function() {
        }, "persist"), isPersistent: pd });
        return b;
      }
      __name(rd, "rd");
      var sd = { eventPhase: 0, bubbles: 0, cancelable: 0, timeStamp: /* @__PURE__ */ __name(function(a) {
        return a.timeStamp || Date.now();
      }, "timeStamp"), defaultPrevented: 0, isTrusted: 0 };
      var td = rd(sd);
      var ud = A({}, sd, { view: 0, detail: 0 });
      var vd = rd(ud);
      var wd;
      var xd;
      var yd;
      var Ad = A({}, ud, { screenX: 0, screenY: 0, clientX: 0, clientY: 0, pageX: 0, pageY: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, getModifierState: zd, button: 0, buttons: 0, relatedTarget: /* @__PURE__ */ __name(function(a) {
        return void 0 === a.relatedTarget ? a.fromElement === a.srcElement ? a.toElement : a.fromElement : a.relatedTarget;
      }, "relatedTarget"), movementX: /* @__PURE__ */ __name(function(a) {
        if ("movementX" in a) return a.movementX;
        a !== yd && (yd && "mousemove" === a.type ? (wd = a.screenX - yd.screenX, xd = a.screenY - yd.screenY) : xd = wd = 0, yd = a);
        return wd;
      }, "movementX"), movementY: /* @__PURE__ */ __name(function(a) {
        return "movementY" in a ? a.movementY : xd;
      }, "movementY") });
      var Bd = rd(Ad);
      var Cd = A({}, Ad, { dataTransfer: 0 });
      var Dd = rd(Cd);
      var Ed = A({}, ud, { relatedTarget: 0 });
      var Fd = rd(Ed);
      var Gd = A({}, sd, { animationName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Hd = rd(Gd);
      var Id = A({}, sd, { clipboardData: /* @__PURE__ */ __name(function(a) {
        return "clipboardData" in a ? a.clipboardData : window.clipboardData;
      }, "clipboardData") });
      var Jd = rd(Id);
      var Kd = A({}, sd, { data: 0 });
      var Ld = rd(Kd);
      var Md = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var Nd = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      var Od = { Alt: "altKey", Control: "ctrlKey", Meta: "metaKey", Shift: "shiftKey" };
      function Pd(a) {
        var b = this.nativeEvent;
        return b.getModifierState ? b.getModifierState(a) : (a = Od[a]) ? !!b[a] : false;
      }
      __name(Pd, "Pd");
      function zd() {
        return Pd;
      }
      __name(zd, "zd");
      var Qd = A({}, ud, { key: /* @__PURE__ */ __name(function(a) {
        if (a.key) {
          var b = Md[a.key] || a.key;
          if ("Unidentified" !== b) return b;
        }
        return "keypress" === a.type ? (a = od(a), 13 === a ? "Enter" : String.fromCharCode(a)) : "keydown" === a.type || "keyup" === a.type ? Nd[a.keyCode] || "Unidentified" : "";
      }, "key"), code: 0, location: 0, ctrlKey: 0, shiftKey: 0, altKey: 0, metaKey: 0, repeat: 0, locale: 0, getModifierState: zd, charCode: /* @__PURE__ */ __name(function(a) {
        return "keypress" === a.type ? od(a) : 0;
      }, "charCode"), keyCode: /* @__PURE__ */ __name(function(a) {
        return "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
      }, "keyCode"), which: /* @__PURE__ */ __name(function(a) {
        return "keypress" === a.type ? od(a) : "keydown" === a.type || "keyup" === a.type ? a.keyCode : 0;
      }, "which") });
      var Rd = rd(Qd);
      var Sd = A({}, Ad, { pointerId: 0, width: 0, height: 0, pressure: 0, tangentialPressure: 0, tiltX: 0, tiltY: 0, twist: 0, pointerType: 0, isPrimary: 0 });
      var Td = rd(Sd);
      var Ud = A({}, ud, { touches: 0, targetTouches: 0, changedTouches: 0, altKey: 0, metaKey: 0, ctrlKey: 0, shiftKey: 0, getModifierState: zd });
      var Vd = rd(Ud);
      var Wd = A({}, sd, { propertyName: 0, elapsedTime: 0, pseudoElement: 0 });
      var Xd = rd(Wd);
      var Yd = A({}, Ad, {
        deltaX: /* @__PURE__ */ __name(function(a) {
          return "deltaX" in a ? a.deltaX : "wheelDeltaX" in a ? -a.wheelDeltaX : 0;
        }, "deltaX"),
        deltaY: /* @__PURE__ */ __name(function(a) {
          return "deltaY" in a ? a.deltaY : "wheelDeltaY" in a ? -a.wheelDeltaY : "wheelDelta" in a ? -a.wheelDelta : 0;
        }, "deltaY"),
        deltaZ: 0,
        deltaMode: 0
      });
      var Zd = rd(Yd);
      var $d = [9, 13, 27, 32];
      var ae = ia && "CompositionEvent" in window;
      var be2 = null;
      ia && "documentMode" in document && (be2 = document.documentMode);
      var ce2 = ia && "TextEvent" in window && !be2;
      var de2 = ia && (!ae || be2 && 8 < be2 && 11 >= be2);
      var ee2 = String.fromCharCode(32);
      var fe2 = false;
      function ge(a, b) {
        switch (a) {
          case "keyup":
            return -1 !== $d.indexOf(b.keyCode);
          case "keydown":
            return 229 !== b.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      __name(ge, "ge");
      function he2(a) {
        a = a.detail;
        return "object" === typeof a && "data" in a ? a.data : null;
      }
      __name(he2, "he");
      var ie = false;
      function je(a, b) {
        switch (a) {
          case "compositionend":
            return he2(b);
          case "keypress":
            if (32 !== b.which) return null;
            fe2 = true;
            return ee2;
          case "textInput":
            return a = b.data, a === ee2 && fe2 ? null : a;
          default:
            return null;
        }
      }
      __name(je, "je");
      function ke2(a, b) {
        if (ie) return "compositionend" === a || !ae && ge(a, b) ? (a = nd(), md = ld = kd = null, ie = false, a) : null;
        switch (a) {
          case "paste":
            return null;
          case "keypress":
            if (!(b.ctrlKey || b.altKey || b.metaKey) || b.ctrlKey && b.altKey) {
              if (b.char && 1 < b.char.length) return b.char;
              if (b.which) return String.fromCharCode(b.which);
            }
            return null;
          case "compositionend":
            return de2 && "ko" !== b.locale ? null : b.data;
          default:
            return null;
        }
      }
      __name(ke2, "ke");
      var le2 = { color: true, date: true, datetime: true, "datetime-local": true, email: true, month: true, number: true, password: true, range: true, search: true, tel: true, text: true, time: true, url: true, week: true };
      function me2(a) {
        var b = a && a.nodeName && a.nodeName.toLowerCase();
        return "input" === b ? !!le2[a.type] : "textarea" === b ? true : false;
      }
      __name(me2, "me");
      function ne(a, b, c, d) {
        Eb(d);
        b = oe(b, "onChange");
        0 < b.length && (c = new td("onChange", "change", null, c, d), a.push({ event: c, listeners: b }));
      }
      __name(ne, "ne");
      var pe2 = null;
      var qe = null;
      function re(a) {
        se(a, 0);
      }
      __name(re, "re");
      function te(a) {
        var b = ue2(a);
        if (Wa(b)) return a;
      }
      __name(te, "te");
      function ve2(a, b) {
        if ("change" === a) return b;
      }
      __name(ve2, "ve");
      var we2 = false;
      if (ia) {
        if (ia) {
          ye2 = "oninput" in document;
          if (!ye2) {
            ze = document.createElement("div");
            ze.setAttribute("oninput", "return;");
            ye2 = "function" === typeof ze.oninput;
          }
          xe2 = ye2;
        } else xe2 = false;
        we2 = xe2 && (!document.documentMode || 9 < document.documentMode);
      }
      var xe2;
      var ye2;
      var ze;
      function Ae() {
        pe2 && (pe2.detachEvent("onpropertychange", Be), qe = pe2 = null);
      }
      __name(Ae, "Ae");
      function Be(a) {
        if ("value" === a.propertyName && te(qe)) {
          var b = [];
          ne(b, qe, a, xb(a));
          Jb(re, b);
        }
      }
      __name(Be, "Be");
      function Ce2(a, b, c) {
        "focusin" === a ? (Ae(), pe2 = b, qe = c, pe2.attachEvent("onpropertychange", Be)) : "focusout" === a && Ae();
      }
      __name(Ce2, "Ce");
      function De2(a) {
        if ("selectionchange" === a || "keyup" === a || "keydown" === a) return te(qe);
      }
      __name(De2, "De");
      function Ee2(a, b) {
        if ("click" === a) return te(b);
      }
      __name(Ee2, "Ee");
      function Fe(a, b) {
        if ("input" === a || "change" === a) return te(b);
      }
      __name(Fe, "Fe");
      function Ge(a, b) {
        return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
      }
      __name(Ge, "Ge");
      var He = "function" === typeof Object.is ? Object.is : Ge;
      function Ie2(a, b) {
        if (He(a, b)) return true;
        if ("object" !== typeof a || null === a || "object" !== typeof b || null === b) return false;
        var c = Object.keys(a), d = Object.keys(b);
        if (c.length !== d.length) return false;
        for (d = 0; d < c.length; d++) {
          var e = c[d];
          if (!ja.call(b, e) || !He(a[e], b[e])) return false;
        }
        return true;
      }
      __name(Ie2, "Ie");
      function Je(a) {
        for (; a && a.firstChild; ) a = a.firstChild;
        return a;
      }
      __name(Je, "Je");
      function Ke(a, b) {
        var c = Je(a);
        a = 0;
        for (var d; c; ) {
          if (3 === c.nodeType) {
            d = a + c.textContent.length;
            if (a <= b && d >= b) return { node: c, offset: b - a };
            a = d;
          }
          a: {
            for (; c; ) {
              if (c.nextSibling) {
                c = c.nextSibling;
                break a;
              }
              c = c.parentNode;
            }
            c = void 0;
          }
          c = Je(c);
        }
      }
      __name(Ke, "Ke");
      function Le(a, b) {
        return a && b ? a === b ? true : a && 3 === a.nodeType ? false : b && 3 === b.nodeType ? Le(a, b.parentNode) : "contains" in a ? a.contains(b) : a.compareDocumentPosition ? !!(a.compareDocumentPosition(b) & 16) : false : false;
      }
      __name(Le, "Le");
      function Me2() {
        for (var a = window, b = Xa(); b instanceof a.HTMLIFrameElement; ) {
          try {
            var c = "string" === typeof b.contentWindow.location.href;
          } catch (d) {
            c = false;
          }
          if (c) a = b.contentWindow;
          else break;
          b = Xa(a.document);
        }
        return b;
      }
      __name(Me2, "Me");
      function Ne(a) {
        var b = a && a.nodeName && a.nodeName.toLowerCase();
        return b && ("input" === b && ("text" === a.type || "search" === a.type || "tel" === a.type || "url" === a.type || "password" === a.type) || "textarea" === b || "true" === a.contentEditable);
      }
      __name(Ne, "Ne");
      function Oe(a) {
        var b = Me2(), c = a.focusedElem, d = a.selectionRange;
        if (b !== c && c && c.ownerDocument && Le(c.ownerDocument.documentElement, c)) {
          if (null !== d && Ne(c)) {
            if (b = d.start, a = d.end, void 0 === a && (a = b), "selectionStart" in c) c.selectionStart = b, c.selectionEnd = Math.min(a, c.value.length);
            else if (a = (b = c.ownerDocument || document) && b.defaultView || window, a.getSelection) {
              a = a.getSelection();
              var e = c.textContent.length, f = Math.min(d.start, e);
              d = void 0 === d.end ? f : Math.min(d.end, e);
              !a.extend && f > d && (e = d, d = f, f = e);
              e = Ke(c, f);
              var g = Ke(
                c,
                d
              );
              e && g && (1 !== a.rangeCount || a.anchorNode !== e.node || a.anchorOffset !== e.offset || a.focusNode !== g.node || a.focusOffset !== g.offset) && (b = b.createRange(), b.setStart(e.node, e.offset), a.removeAllRanges(), f > d ? (a.addRange(b), a.extend(g.node, g.offset)) : (b.setEnd(g.node, g.offset), a.addRange(b)));
            }
          }
          b = [];
          for (a = c; a = a.parentNode; ) 1 === a.nodeType && b.push({ element: a, left: a.scrollLeft, top: a.scrollTop });
          "function" === typeof c.focus && c.focus();
          for (c = 0; c < b.length; c++) a = b[c], a.element.scrollLeft = a.left, a.element.scrollTop = a.top;
        }
      }
      __name(Oe, "Oe");
      var Pe2 = ia && "documentMode" in document && 11 >= document.documentMode;
      var Qe = null;
      var Re2 = null;
      var Se2 = null;
      var Te2 = false;
      function Ue(a, b, c) {
        var d = c.window === c ? c.document : 9 === c.nodeType ? c : c.ownerDocument;
        Te2 || null == Qe || Qe !== Xa(d) || (d = Qe, "selectionStart" in d && Ne(d) ? d = { start: d.selectionStart, end: d.selectionEnd } : (d = (d.ownerDocument && d.ownerDocument.defaultView || window).getSelection(), d = { anchorNode: d.anchorNode, anchorOffset: d.anchorOffset, focusNode: d.focusNode, focusOffset: d.focusOffset }), Se2 && Ie2(Se2, d) || (Se2 = d, d = oe(Re2, "onSelect"), 0 < d.length && (b = new td("onSelect", "select", null, b, c), a.push({ event: b, listeners: d }), b.target = Qe)));
      }
      __name(Ue, "Ue");
      function Ve(a, b) {
        var c = {};
        c[a.toLowerCase()] = b.toLowerCase();
        c["Webkit" + a] = "webkit" + b;
        c["Moz" + a] = "moz" + b;
        return c;
      }
      __name(Ve, "Ve");
      var We = { animationend: Ve("Animation", "AnimationEnd"), animationiteration: Ve("Animation", "AnimationIteration"), animationstart: Ve("Animation", "AnimationStart"), transitionend: Ve("Transition", "TransitionEnd") };
      var Xe = {};
      var Ye = {};
      ia && (Ye = document.createElement("div").style, "AnimationEvent" in window || (delete We.animationend.animation, delete We.animationiteration.animation, delete We.animationstart.animation), "TransitionEvent" in window || delete We.transitionend.transition);
      function Ze(a) {
        if (Xe[a]) return Xe[a];
        if (!We[a]) return a;
        var b = We[a], c;
        for (c in b) if (b.hasOwnProperty(c) && c in Ye) return Xe[a] = b[c];
        return a;
      }
      __name(Ze, "Ze");
      var $e = Ze("animationend");
      var af = Ze("animationiteration");
      var bf = Ze("animationstart");
      var cf = Ze("transitionend");
      var df = /* @__PURE__ */ new Map();
      var ef = "abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
      function ff(a, b) {
        df.set(a, b);
        fa(b, [a]);
      }
      __name(ff, "ff");
      for (gf = 0; gf < ef.length; gf++) {
        hf = ef[gf], jf = hf.toLowerCase(), kf = hf[0].toUpperCase() + hf.slice(1);
        ff(jf, "on" + kf);
      }
      var hf;
      var jf;
      var kf;
      var gf;
      ff($e, "onAnimationEnd");
      ff(af, "onAnimationIteration");
      ff(bf, "onAnimationStart");
      ff("dblclick", "onDoubleClick");
      ff("focusin", "onFocus");
      ff("focusout", "onBlur");
      ff(cf, "onTransitionEnd");
      ha("onMouseEnter", ["mouseout", "mouseover"]);
      ha("onMouseLeave", ["mouseout", "mouseover"]);
      ha("onPointerEnter", ["pointerout", "pointerover"]);
      ha("onPointerLeave", ["pointerout", "pointerover"]);
      fa("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
      fa("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
      fa("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
      fa("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
      fa("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
      var lf = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
      var mf = new Set("cancel close invalid load scroll toggle".split(" ").concat(lf));
      function nf(a, b, c) {
        var d = a.type || "unknown-event";
        a.currentTarget = c;
        Ub(d, b, void 0, a);
        a.currentTarget = null;
      }
      __name(nf, "nf");
      function se(a, b) {
        b = 0 !== (b & 4);
        for (var c = 0; c < a.length; c++) {
          var d = a[c], e = d.event;
          d = d.listeners;
          a: {
            var f = void 0;
            if (b) for (var g = d.length - 1; 0 <= g; g--) {
              var h = d[g], k3 = h.instance, l = h.currentTarget;
              h = h.listener;
              if (k3 !== f && e.isPropagationStopped()) break a;
              nf(e, h, l);
              f = k3;
            }
            else for (g = 0; g < d.length; g++) {
              h = d[g];
              k3 = h.instance;
              l = h.currentTarget;
              h = h.listener;
              if (k3 !== f && e.isPropagationStopped()) break a;
              nf(e, h, l);
              f = k3;
            }
          }
        }
        if (Qb) throw a = Rb, Qb = false, Rb = null, a;
      }
      __name(se, "se");
      function D2(a, b) {
        var c = b[of];
        void 0 === c && (c = b[of] = /* @__PURE__ */ new Set());
        var d = a + "__bubble";
        c.has(d) || (pf(b, a, 2, false), c.add(d));
      }
      __name(D2, "D");
      function qf(a, b, c) {
        var d = 0;
        b && (d |= 4);
        pf(c, a, d, b);
      }
      __name(qf, "qf");
      var rf = "_reactListening" + Math.random().toString(36).slice(2);
      function sf(a) {
        if (!a[rf]) {
          a[rf] = true;
          da.forEach(function(b2) {
            "selectionchange" !== b2 && (mf.has(b2) || qf(b2, false, a), qf(b2, true, a));
          });
          var b = 9 === a.nodeType ? a : a.ownerDocument;
          null === b || b[rf] || (b[rf] = true, qf("selectionchange", false, b));
        }
      }
      __name(sf, "sf");
      function pf(a, b, c, d) {
        switch (jd(b)) {
          case 1:
            var e = ed;
            break;
          case 4:
            e = gd;
            break;
          default:
            e = fd;
        }
        c = e.bind(null, b, c, a);
        e = void 0;
        !Lb || "touchstart" !== b && "touchmove" !== b && "wheel" !== b || (e = true);
        d ? void 0 !== e ? a.addEventListener(b, c, { capture: true, passive: e }) : a.addEventListener(b, c, true) : void 0 !== e ? a.addEventListener(b, c, { passive: e }) : a.addEventListener(b, c, false);
      }
      __name(pf, "pf");
      function hd(a, b, c, d, e) {
        var f = d;
        if (0 === (b & 1) && 0 === (b & 2) && null !== d) a: for (; ; ) {
          if (null === d) return;
          var g = d.tag;
          if (3 === g || 4 === g) {
            var h = d.stateNode.containerInfo;
            if (h === e || 8 === h.nodeType && h.parentNode === e) break;
            if (4 === g) for (g = d.return; null !== g; ) {
              var k3 = g.tag;
              if (3 === k3 || 4 === k3) {
                if (k3 = g.stateNode.containerInfo, k3 === e || 8 === k3.nodeType && k3.parentNode === e) return;
              }
              g = g.return;
            }
            for (; null !== h; ) {
              g = Wc(h);
              if (null === g) return;
              k3 = g.tag;
              if (5 === k3 || 6 === k3) {
                d = f = g;
                continue a;
              }
              h = h.parentNode;
            }
          }
          d = d.return;
        }
        Jb(function() {
          var d2 = f, e2 = xb(c), g2 = [];
          a: {
            var h2 = df.get(a);
            if (void 0 !== h2) {
              var k4 = td, n2 = a;
              switch (a) {
                case "keypress":
                  if (0 === od(c)) break a;
                case "keydown":
                case "keyup":
                  k4 = Rd;
                  break;
                case "focusin":
                  n2 = "focus";
                  k4 = Fd;
                  break;
                case "focusout":
                  n2 = "blur";
                  k4 = Fd;
                  break;
                case "beforeblur":
                case "afterblur":
                  k4 = Fd;
                  break;
                case "click":
                  if (2 === c.button) break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  k4 = Bd;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  k4 = Dd;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  k4 = Vd;
                  break;
                case $e:
                case af:
                case bf:
                  k4 = Hd;
                  break;
                case cf:
                  k4 = Xd;
                  break;
                case "scroll":
                  k4 = vd;
                  break;
                case "wheel":
                  k4 = Zd;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  k4 = Jd;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  k4 = Td;
              }
              var t3 = 0 !== (b & 4), J2 = !t3 && "scroll" === a, x = t3 ? null !== h2 ? h2 + "Capture" : null : h2;
              t3 = [];
              for (var w = d2, u2; null !== w; ) {
                u2 = w;
                var F = u2.stateNode;
                5 === u2.tag && null !== F && (u2 = F, null !== x && (F = Kb(w, x), null != F && t3.push(tf(w, F, u2))));
                if (J2) break;
                w = w.return;
              }
              0 < t3.length && (h2 = new k4(h2, n2, null, c, e2), g2.push({ event: h2, listeners: t3 }));
            }
          }
          if (0 === (b & 7)) {
            a: {
              h2 = "mouseover" === a || "pointerover" === a;
              k4 = "mouseout" === a || "pointerout" === a;
              if (h2 && c !== wb && (n2 = c.relatedTarget || c.fromElement) && (Wc(n2) || n2[uf])) break a;
              if (k4 || h2) {
                h2 = e2.window === e2 ? e2 : (h2 = e2.ownerDocument) ? h2.defaultView || h2.parentWindow : window;
                if (k4) {
                  if (n2 = c.relatedTarget || c.toElement, k4 = d2, n2 = n2 ? Wc(n2) : null, null !== n2 && (J2 = Vb(n2), n2 !== J2 || 5 !== n2.tag && 6 !== n2.tag)) n2 = null;
                } else k4 = null, n2 = d2;
                if (k4 !== n2) {
                  t3 = Bd;
                  F = "onMouseLeave";
                  x = "onMouseEnter";
                  w = "mouse";
                  if ("pointerout" === a || "pointerover" === a) t3 = Td, F = "onPointerLeave", x = "onPointerEnter", w = "pointer";
                  J2 = null == k4 ? h2 : ue2(k4);
                  u2 = null == n2 ? h2 : ue2(n2);
                  h2 = new t3(F, w + "leave", k4, c, e2);
                  h2.target = J2;
                  h2.relatedTarget = u2;
                  F = null;
                  Wc(e2) === d2 && (t3 = new t3(x, w + "enter", n2, c, e2), t3.target = u2, t3.relatedTarget = J2, F = t3);
                  J2 = F;
                  if (k4 && n2) b: {
                    t3 = k4;
                    x = n2;
                    w = 0;
                    for (u2 = t3; u2; u2 = vf(u2)) w++;
                    u2 = 0;
                    for (F = x; F; F = vf(F)) u2++;
                    for (; 0 < w - u2; ) t3 = vf(t3), w--;
                    for (; 0 < u2 - w; ) x = vf(x), u2--;
                    for (; w--; ) {
                      if (t3 === x || null !== x && t3 === x.alternate) break b;
                      t3 = vf(t3);
                      x = vf(x);
                    }
                    t3 = null;
                  }
                  else t3 = null;
                  null !== k4 && wf(g2, h2, k4, t3, false);
                  null !== n2 && null !== J2 && wf(g2, J2, n2, t3, true);
                }
              }
            }
            a: {
              h2 = d2 ? ue2(d2) : window;
              k4 = h2.nodeName && h2.nodeName.toLowerCase();
              if ("select" === k4 || "input" === k4 && "file" === h2.type) var na = ve2;
              else if (me2(h2)) if (we2) na = Fe;
              else {
                na = De2;
                var xa = Ce2;
              }
              else (k4 = h2.nodeName) && "input" === k4.toLowerCase() && ("checkbox" === h2.type || "radio" === h2.type) && (na = Ee2);
              if (na && (na = na(a, d2))) {
                ne(g2, na, c, e2);
                break a;
              }
              xa && xa(a, h2, d2);
              "focusout" === a && (xa = h2._wrapperState) && xa.controlled && "number" === h2.type && cb(h2, "number", h2.value);
            }
            xa = d2 ? ue2(d2) : window;
            switch (a) {
              case "focusin":
                if (me2(xa) || "true" === xa.contentEditable) Qe = xa, Re2 = d2, Se2 = null;
                break;
              case "focusout":
                Se2 = Re2 = Qe = null;
                break;
              case "mousedown":
                Te2 = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                Te2 = false;
                Ue(g2, c, e2);
                break;
              case "selectionchange":
                if (Pe2) break;
              case "keydown":
              case "keyup":
                Ue(g2, c, e2);
            }
            var $a;
            if (ae) b: {
              switch (a) {
                case "compositionstart":
                  var ba = "onCompositionStart";
                  break b;
                case "compositionend":
                  ba = "onCompositionEnd";
                  break b;
                case "compositionupdate":
                  ba = "onCompositionUpdate";
                  break b;
              }
              ba = void 0;
            }
            else ie ? ge(a, c) && (ba = "onCompositionEnd") : "keydown" === a && 229 === c.keyCode && (ba = "onCompositionStart");
            ba && (de2 && "ko" !== c.locale && (ie || "onCompositionStart" !== ba ? "onCompositionEnd" === ba && ie && ($a = nd()) : (kd = e2, ld = "value" in kd ? kd.value : kd.textContent, ie = true)), xa = oe(d2, ba), 0 < xa.length && (ba = new Ld(ba, a, null, c, e2), g2.push({ event: ba, listeners: xa }), $a ? ba.data = $a : ($a = he2(c), null !== $a && (ba.data = $a))));
            if ($a = ce2 ? je(a, c) : ke2(a, c)) d2 = oe(d2, "onBeforeInput"), 0 < d2.length && (e2 = new Ld("onBeforeInput", "beforeinput", null, c, e2), g2.push({ event: e2, listeners: d2 }), e2.data = $a);
          }
          se(g2, b);
        });
      }
      __name(hd, "hd");
      function tf(a, b, c) {
        return { instance: a, listener: b, currentTarget: c };
      }
      __name(tf, "tf");
      function oe(a, b) {
        for (var c = b + "Capture", d = []; null !== a; ) {
          var e = a, f = e.stateNode;
          5 === e.tag && null !== f && (e = f, f = Kb(a, c), null != f && d.unshift(tf(a, f, e)), f = Kb(a, b), null != f && d.push(tf(a, f, e)));
          a = a.return;
        }
        return d;
      }
      __name(oe, "oe");
      function vf(a) {
        if (null === a) return null;
        do
          a = a.return;
        while (a && 5 !== a.tag);
        return a ? a : null;
      }
      __name(vf, "vf");
      function wf(a, b, c, d, e) {
        for (var f = b._reactName, g = []; null !== c && c !== d; ) {
          var h = c, k3 = h.alternate, l = h.stateNode;
          if (null !== k3 && k3 === d) break;
          5 === h.tag && null !== l && (h = l, e ? (k3 = Kb(c, f), null != k3 && g.unshift(tf(c, k3, h))) : e || (k3 = Kb(c, f), null != k3 && g.push(tf(c, k3, h))));
          c = c.return;
        }
        0 !== g.length && a.push({ event: b, listeners: g });
      }
      __name(wf, "wf");
      var xf = /\r\n?/g;
      var yf = /\u0000|\uFFFD/g;
      function zf(a) {
        return ("string" === typeof a ? a : "" + a).replace(xf, "\n").replace(yf, "");
      }
      __name(zf, "zf");
      function Af(a, b, c) {
        b = zf(b);
        if (zf(a) !== b && c) throw Error(p2(425));
      }
      __name(Af, "Af");
      function Bf() {
      }
      __name(Bf, "Bf");
      var Cf = null;
      var Df = null;
      function Ef(a, b) {
        return "textarea" === a || "noscript" === a || "string" === typeof b.children || "number" === typeof b.children || "object" === typeof b.dangerouslySetInnerHTML && null !== b.dangerouslySetInnerHTML && null != b.dangerouslySetInnerHTML.__html;
      }
      __name(Ef, "Ef");
      var Ff = "function" === typeof setTimeout ? setTimeout : void 0;
      var Gf = "function" === typeof clearTimeout ? clearTimeout : void 0;
      var Hf = "function" === typeof Promise ? Promise : void 0;
      var Jf = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof Hf ? function(a) {
        return Hf.resolve(null).then(a).catch(If);
      } : Ff;
      function If(a) {
        setTimeout(function() {
          throw a;
        });
      }
      __name(If, "If");
      function Kf(a, b) {
        var c = b, d = 0;
        do {
          var e = c.nextSibling;
          a.removeChild(c);
          if (e && 8 === e.nodeType) if (c = e.data, "/$" === c) {
            if (0 === d) {
              a.removeChild(e);
              bd(b);
              return;
            }
            d--;
          } else "$" !== c && "$?" !== c && "$!" !== c || d++;
          c = e;
        } while (c);
        bd(b);
      }
      __name(Kf, "Kf");
      function Lf(a) {
        for (; null != a; a = a.nextSibling) {
          var b = a.nodeType;
          if (1 === b || 3 === b) break;
          if (8 === b) {
            b = a.data;
            if ("$" === b || "$!" === b || "$?" === b) break;
            if ("/$" === b) return null;
          }
        }
        return a;
      }
      __name(Lf, "Lf");
      function Mf(a) {
        a = a.previousSibling;
        for (var b = 0; a; ) {
          if (8 === a.nodeType) {
            var c = a.data;
            if ("$" === c || "$!" === c || "$?" === c) {
              if (0 === b) return a;
              b--;
            } else "/$" === c && b++;
          }
          a = a.previousSibling;
        }
        return null;
      }
      __name(Mf, "Mf");
      var Nf = Math.random().toString(36).slice(2);
      var Of = "__reactFiber$" + Nf;
      var Pf = "__reactProps$" + Nf;
      var uf = "__reactContainer$" + Nf;
      var of = "__reactEvents$" + Nf;
      var Qf = "__reactListeners$" + Nf;
      var Rf = "__reactHandles$" + Nf;
      function Wc(a) {
        var b = a[Of];
        if (b) return b;
        for (var c = a.parentNode; c; ) {
          if (b = c[uf] || c[Of]) {
            c = b.alternate;
            if (null !== b.child || null !== c && null !== c.child) for (a = Mf(a); null !== a; ) {
              if (c = a[Of]) return c;
              a = Mf(a);
            }
            return b;
          }
          a = c;
          c = a.parentNode;
        }
        return null;
      }
      __name(Wc, "Wc");
      function Cb(a) {
        a = a[Of] || a[uf];
        return !a || 5 !== a.tag && 6 !== a.tag && 13 !== a.tag && 3 !== a.tag ? null : a;
      }
      __name(Cb, "Cb");
      function ue2(a) {
        if (5 === a.tag || 6 === a.tag) return a.stateNode;
        throw Error(p2(33));
      }
      __name(ue2, "ue");
      function Db(a) {
        return a[Pf] || null;
      }
      __name(Db, "Db");
      var Sf = [];
      var Tf = -1;
      function Uf(a) {
        return { current: a };
      }
      __name(Uf, "Uf");
      function E(a) {
        0 > Tf || (a.current = Sf[Tf], Sf[Tf] = null, Tf--);
      }
      __name(E, "E");
      function G2(a, b) {
        Tf++;
        Sf[Tf] = a.current;
        a.current = b;
      }
      __name(G2, "G");
      var Vf = {};
      var H2 = Uf(Vf);
      var Wf = Uf(false);
      var Xf = Vf;
      function Yf(a, b) {
        var c = a.type.contextTypes;
        if (!c) return Vf;
        var d = a.stateNode;
        if (d && d.__reactInternalMemoizedUnmaskedChildContext === b) return d.__reactInternalMemoizedMaskedChildContext;
        var e = {}, f;
        for (f in c) e[f] = b[f];
        d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = b, a.__reactInternalMemoizedMaskedChildContext = e);
        return e;
      }
      __name(Yf, "Yf");
      function Zf(a) {
        a = a.childContextTypes;
        return null !== a && void 0 !== a;
      }
      __name(Zf, "Zf");
      function $f() {
        E(Wf);
        E(H2);
      }
      __name($f, "$f");
      function ag(a, b, c) {
        if (H2.current !== Vf) throw Error(p2(168));
        G2(H2, b);
        G2(Wf, c);
      }
      __name(ag, "ag");
      function bg(a, b, c) {
        var d = a.stateNode;
        b = b.childContextTypes;
        if ("function" !== typeof d.getChildContext) return c;
        d = d.getChildContext();
        for (var e in d) if (!(e in b)) throw Error(p2(108, Ra(a) || "Unknown", e));
        return A({}, c, d);
      }
      __name(bg, "bg");
      function cg(a) {
        a = (a = a.stateNode) && a.__reactInternalMemoizedMergedChildContext || Vf;
        Xf = H2.current;
        G2(H2, a);
        G2(Wf, Wf.current);
        return true;
      }
      __name(cg, "cg");
      function dg(a, b, c) {
        var d = a.stateNode;
        if (!d) throw Error(p2(169));
        c ? (a = bg(a, b, Xf), d.__reactInternalMemoizedMergedChildContext = a, E(Wf), E(H2), G2(H2, a)) : E(Wf);
        G2(Wf, c);
      }
      __name(dg, "dg");
      var eg = null;
      var fg = false;
      var gg = false;
      function hg(a) {
        null === eg ? eg = [a] : eg.push(a);
      }
      __name(hg, "hg");
      function ig(a) {
        fg = true;
        hg(a);
      }
      __name(ig, "ig");
      function jg() {
        if (!gg && null !== eg) {
          gg = true;
          var a = 0, b = C;
          try {
            var c = eg;
            for (C = 1; a < c.length; a++) {
              var d = c[a];
              do
                d = d(true);
              while (null !== d);
            }
            eg = null;
            fg = false;
          } catch (e) {
            throw null !== eg && (eg = eg.slice(a + 1)), ac(fc, jg), e;
          } finally {
            C = b, gg = false;
          }
        }
        return null;
      }
      __name(jg, "jg");
      var kg = [];
      var lg = 0;
      var mg = null;
      var ng = 0;
      var og = [];
      var pg = 0;
      var qg = null;
      var rg = 1;
      var sg = "";
      function tg(a, b) {
        kg[lg++] = ng;
        kg[lg++] = mg;
        mg = a;
        ng = b;
      }
      __name(tg, "tg");
      function ug(a, b, c) {
        og[pg++] = rg;
        og[pg++] = sg;
        og[pg++] = qg;
        qg = a;
        var d = rg;
        a = sg;
        var e = 32 - oc(d) - 1;
        d &= ~(1 << e);
        c += 1;
        var f = 32 - oc(b) + e;
        if (30 < f) {
          var g = e - e % 5;
          f = (d & (1 << g) - 1).toString(32);
          d >>= g;
          e -= g;
          rg = 1 << 32 - oc(b) + e | c << e | d;
          sg = f + a;
        } else rg = 1 << f | c << e | d, sg = a;
      }
      __name(ug, "ug");
      function vg(a) {
        null !== a.return && (tg(a, 1), ug(a, 1, 0));
      }
      __name(vg, "vg");
      function wg(a) {
        for (; a === mg; ) mg = kg[--lg], kg[lg] = null, ng = kg[--lg], kg[lg] = null;
        for (; a === qg; ) qg = og[--pg], og[pg] = null, sg = og[--pg], og[pg] = null, rg = og[--pg], og[pg] = null;
      }
      __name(wg, "wg");
      var xg = null;
      var yg = null;
      var I = false;
      var zg = null;
      function Ag(a, b) {
        var c = Bg(5, null, null, 0);
        c.elementType = "DELETED";
        c.stateNode = b;
        c.return = a;
        b = a.deletions;
        null === b ? (a.deletions = [c], a.flags |= 16) : b.push(c);
      }
      __name(Ag, "Ag");
      function Cg(a, b) {
        switch (a.tag) {
          case 5:
            var c = a.type;
            b = 1 !== b.nodeType || c.toLowerCase() !== b.nodeName.toLowerCase() ? null : b;
            return null !== b ? (a.stateNode = b, xg = a, yg = Lf(b.firstChild), true) : false;
          case 6:
            return b = "" === a.pendingProps || 3 !== b.nodeType ? null : b, null !== b ? (a.stateNode = b, xg = a, yg = null, true) : false;
          case 13:
            return b = 8 !== b.nodeType ? null : b, null !== b ? (c = null !== qg ? { id: rg, overflow: sg } : null, a.memoizedState = { dehydrated: b, treeContext: c, retryLane: 1073741824 }, c = Bg(18, null, null, 0), c.stateNode = b, c.return = a, a.child = c, xg = a, yg = null, true) : false;
          default:
            return false;
        }
      }
      __name(Cg, "Cg");
      function Dg(a) {
        return 0 !== (a.mode & 1) && 0 === (a.flags & 128);
      }
      __name(Dg, "Dg");
      function Eg(a) {
        if (I) {
          var b = yg;
          if (b) {
            var c = b;
            if (!Cg(a, b)) {
              if (Dg(a)) throw Error(p2(418));
              b = Lf(c.nextSibling);
              var d = xg;
              b && Cg(a, b) ? Ag(d, c) : (a.flags = a.flags & -4097 | 2, I = false, xg = a);
            }
          } else {
            if (Dg(a)) throw Error(p2(418));
            a.flags = a.flags & -4097 | 2;
            I = false;
            xg = a;
          }
        }
      }
      __name(Eg, "Eg");
      function Fg(a) {
        for (a = a.return; null !== a && 5 !== a.tag && 3 !== a.tag && 13 !== a.tag; ) a = a.return;
        xg = a;
      }
      __name(Fg, "Fg");
      function Gg(a) {
        if (a !== xg) return false;
        if (!I) return Fg(a), I = true, false;
        var b;
        (b = 3 !== a.tag) && !(b = 5 !== a.tag) && (b = a.type, b = "head" !== b && "body" !== b && !Ef(a.type, a.memoizedProps));
        if (b && (b = yg)) {
          if (Dg(a)) throw Hg(), Error(p2(418));
          for (; b; ) Ag(a, b), b = Lf(b.nextSibling);
        }
        Fg(a);
        if (13 === a.tag) {
          a = a.memoizedState;
          a = null !== a ? a.dehydrated : null;
          if (!a) throw Error(p2(317));
          a: {
            a = a.nextSibling;
            for (b = 0; a; ) {
              if (8 === a.nodeType) {
                var c = a.data;
                if ("/$" === c) {
                  if (0 === b) {
                    yg = Lf(a.nextSibling);
                    break a;
                  }
                  b--;
                } else "$" !== c && "$!" !== c && "$?" !== c || b++;
              }
              a = a.nextSibling;
            }
            yg = null;
          }
        } else yg = xg ? Lf(a.stateNode.nextSibling) : null;
        return true;
      }
      __name(Gg, "Gg");
      function Hg() {
        for (var a = yg; a; ) a = Lf(a.nextSibling);
      }
      __name(Hg, "Hg");
      function Ig() {
        yg = xg = null;
        I = false;
      }
      __name(Ig, "Ig");
      function Jg(a) {
        null === zg ? zg = [a] : zg.push(a);
      }
      __name(Jg, "Jg");
      var Kg = ua.ReactCurrentBatchConfig;
      function Lg(a, b, c) {
        a = c.ref;
        if (null !== a && "function" !== typeof a && "object" !== typeof a) {
          if (c._owner) {
            c = c._owner;
            if (c) {
              if (1 !== c.tag) throw Error(p2(309));
              var d = c.stateNode;
            }
            if (!d) throw Error(p2(147, a));
            var e = d, f = "" + a;
            if (null !== b && null !== b.ref && "function" === typeof b.ref && b.ref._stringRef === f) return b.ref;
            b = /* @__PURE__ */ __name(function(a2) {
              var b2 = e.refs;
              null === a2 ? delete b2[f] : b2[f] = a2;
            }, "b");
            b._stringRef = f;
            return b;
          }
          if ("string" !== typeof a) throw Error(p2(284));
          if (!c._owner) throw Error(p2(290, a));
        }
        return a;
      }
      __name(Lg, "Lg");
      function Mg(a, b) {
        a = Object.prototype.toString.call(b);
        throw Error(p2(31, "[object Object]" === a ? "object with keys {" + Object.keys(b).join(", ") + "}" : a));
      }
      __name(Mg, "Mg");
      function Ng(a) {
        var b = a._init;
        return b(a._payload);
      }
      __name(Ng, "Ng");
      function Og(a) {
        function b(b2, c2) {
          if (a) {
            var d2 = b2.deletions;
            null === d2 ? (b2.deletions = [c2], b2.flags |= 16) : d2.push(c2);
          }
        }
        __name(b, "b");
        function c(c2, d2) {
          if (!a) return null;
          for (; null !== d2; ) b(c2, d2), d2 = d2.sibling;
          return null;
        }
        __name(c, "c");
        function d(a2, b2) {
          for (a2 = /* @__PURE__ */ new Map(); null !== b2; ) null !== b2.key ? a2.set(b2.key, b2) : a2.set(b2.index, b2), b2 = b2.sibling;
          return a2;
        }
        __name(d, "d");
        function e(a2, b2) {
          a2 = Pg(a2, b2);
          a2.index = 0;
          a2.sibling = null;
          return a2;
        }
        __name(e, "e");
        function f(b2, c2, d2) {
          b2.index = d2;
          if (!a) return b2.flags |= 1048576, c2;
          d2 = b2.alternate;
          if (null !== d2) return d2 = d2.index, d2 < c2 ? (b2.flags |= 2, c2) : d2;
          b2.flags |= 2;
          return c2;
        }
        __name(f, "f");
        function g(b2) {
          a && null === b2.alternate && (b2.flags |= 2);
          return b2;
        }
        __name(g, "g");
        function h(a2, b2, c2, d2) {
          if (null === b2 || 6 !== b2.tag) return b2 = Qg(c2, a2.mode, d2), b2.return = a2, b2;
          b2 = e(b2, c2);
          b2.return = a2;
          return b2;
        }
        __name(h, "h");
        function k3(a2, b2, c2, d2) {
          var f2 = c2.type;
          if (f2 === ya) return m2(a2, b2, c2.props.children, d2, c2.key);
          if (null !== b2 && (b2.elementType === f2 || "object" === typeof f2 && null !== f2 && f2.$$typeof === Ha && Ng(f2) === b2.type)) return d2 = e(b2, c2.props), d2.ref = Lg(a2, b2, c2), d2.return = a2, d2;
          d2 = Rg(c2.type, c2.key, c2.props, null, a2.mode, d2);
          d2.ref = Lg(a2, b2, c2);
          d2.return = a2;
          return d2;
        }
        __name(k3, "k");
        function l(a2, b2, c2, d2) {
          if (null === b2 || 4 !== b2.tag || b2.stateNode.containerInfo !== c2.containerInfo || b2.stateNode.implementation !== c2.implementation) return b2 = Sg(c2, a2.mode, d2), b2.return = a2, b2;
          b2 = e(b2, c2.children || []);
          b2.return = a2;
          return b2;
        }
        __name(l, "l");
        function m2(a2, b2, c2, d2, f2) {
          if (null === b2 || 7 !== b2.tag) return b2 = Tg(c2, a2.mode, d2, f2), b2.return = a2, b2;
          b2 = e(b2, c2);
          b2.return = a2;
          return b2;
        }
        __name(m2, "m");
        function q(a2, b2, c2) {
          if ("string" === typeof b2 && "" !== b2 || "number" === typeof b2) return b2 = Qg("" + b2, a2.mode, c2), b2.return = a2, b2;
          if ("object" === typeof b2 && null !== b2) {
            switch (b2.$$typeof) {
              case va:
                return c2 = Rg(b2.type, b2.key, b2.props, null, a2.mode, c2), c2.ref = Lg(a2, null, b2), c2.return = a2, c2;
              case wa:
                return b2 = Sg(b2, a2.mode, c2), b2.return = a2, b2;
              case Ha:
                var d2 = b2._init;
                return q(a2, d2(b2._payload), c2);
            }
            if (eb(b2) || Ka(b2)) return b2 = Tg(b2, a2.mode, c2, null), b2.return = a2, b2;
            Mg(a2, b2);
          }
          return null;
        }
        __name(q, "q");
        function r3(a2, b2, c2, d2) {
          var e2 = null !== b2 ? b2.key : null;
          if ("string" === typeof c2 && "" !== c2 || "number" === typeof c2) return null !== e2 ? null : h(a2, b2, "" + c2, d2);
          if ("object" === typeof c2 && null !== c2) {
            switch (c2.$$typeof) {
              case va:
                return c2.key === e2 ? k3(a2, b2, c2, d2) : null;
              case wa:
                return c2.key === e2 ? l(a2, b2, c2, d2) : null;
              case Ha:
                return e2 = c2._init, r3(
                  a2,
                  b2,
                  e2(c2._payload),
                  d2
                );
            }
            if (eb(c2) || Ka(c2)) return null !== e2 ? null : m2(a2, b2, c2, d2, null);
            Mg(a2, c2);
          }
          return null;
        }
        __name(r3, "r");
        function y(a2, b2, c2, d2, e2) {
          if ("string" === typeof d2 && "" !== d2 || "number" === typeof d2) return a2 = a2.get(c2) || null, h(b2, a2, "" + d2, e2);
          if ("object" === typeof d2 && null !== d2) {
            switch (d2.$$typeof) {
              case va:
                return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, k3(b2, a2, d2, e2);
              case wa:
                return a2 = a2.get(null === d2.key ? c2 : d2.key) || null, l(b2, a2, d2, e2);
              case Ha:
                var f2 = d2._init;
                return y(a2, b2, c2, f2(d2._payload), e2);
            }
            if (eb(d2) || Ka(d2)) return a2 = a2.get(c2) || null, m2(b2, a2, d2, e2, null);
            Mg(b2, d2);
          }
          return null;
        }
        __name(y, "y");
        function n2(e2, g2, h2, k4) {
          for (var l2 = null, m3 = null, u2 = g2, w = g2 = 0, x = null; null !== u2 && w < h2.length; w++) {
            u2.index > w ? (x = u2, u2 = null) : x = u2.sibling;
            var n3 = r3(e2, u2, h2[w], k4);
            if (null === n3) {
              null === u2 && (u2 = x);
              break;
            }
            a && u2 && null === n3.alternate && b(e2, u2);
            g2 = f(n3, g2, w);
            null === m3 ? l2 = n3 : m3.sibling = n3;
            m3 = n3;
            u2 = x;
          }
          if (w === h2.length) return c(e2, u2), I && tg(e2, w), l2;
          if (null === u2) {
            for (; w < h2.length; w++) u2 = q(e2, h2[w], k4), null !== u2 && (g2 = f(u2, g2, w), null === m3 ? l2 = u2 : m3.sibling = u2, m3 = u2);
            I && tg(e2, w);
            return l2;
          }
          for (u2 = d(e2, u2); w < h2.length; w++) x = y(u2, e2, w, h2[w], k4), null !== x && (a && null !== x.alternate && u2.delete(null === x.key ? w : x.key), g2 = f(x, g2, w), null === m3 ? l2 = x : m3.sibling = x, m3 = x);
          a && u2.forEach(function(a2) {
            return b(e2, a2);
          });
          I && tg(e2, w);
          return l2;
        }
        __name(n2, "n");
        function t3(e2, g2, h2, k4) {
          var l2 = Ka(h2);
          if ("function" !== typeof l2) throw Error(p2(150));
          h2 = l2.call(h2);
          if (null == h2) throw Error(p2(151));
          for (var u2 = l2 = null, m3 = g2, w = g2 = 0, x = null, n3 = h2.next(); null !== m3 && !n3.done; w++, n3 = h2.next()) {
            m3.index > w ? (x = m3, m3 = null) : x = m3.sibling;
            var t4 = r3(e2, m3, n3.value, k4);
            if (null === t4) {
              null === m3 && (m3 = x);
              break;
            }
            a && m3 && null === t4.alternate && b(e2, m3);
            g2 = f(t4, g2, w);
            null === u2 ? l2 = t4 : u2.sibling = t4;
            u2 = t4;
            m3 = x;
          }
          if (n3.done) return c(
            e2,
            m3
          ), I && tg(e2, w), l2;
          if (null === m3) {
            for (; !n3.done; w++, n3 = h2.next()) n3 = q(e2, n3.value, k4), null !== n3 && (g2 = f(n3, g2, w), null === u2 ? l2 = n3 : u2.sibling = n3, u2 = n3);
            I && tg(e2, w);
            return l2;
          }
          for (m3 = d(e2, m3); !n3.done; w++, n3 = h2.next()) n3 = y(m3, e2, w, n3.value, k4), null !== n3 && (a && null !== n3.alternate && m3.delete(null === n3.key ? w : n3.key), g2 = f(n3, g2, w), null === u2 ? l2 = n3 : u2.sibling = n3, u2 = n3);
          a && m3.forEach(function(a2) {
            return b(e2, a2);
          });
          I && tg(e2, w);
          return l2;
        }
        __name(t3, "t");
        function J2(a2, d2, f2, h2) {
          "object" === typeof f2 && null !== f2 && f2.type === ya && null === f2.key && (f2 = f2.props.children);
          if ("object" === typeof f2 && null !== f2) {
            switch (f2.$$typeof) {
              case va:
                a: {
                  for (var k4 = f2.key, l2 = d2; null !== l2; ) {
                    if (l2.key === k4) {
                      k4 = f2.type;
                      if (k4 === ya) {
                        if (7 === l2.tag) {
                          c(a2, l2.sibling);
                          d2 = e(l2, f2.props.children);
                          d2.return = a2;
                          a2 = d2;
                          break a;
                        }
                      } else if (l2.elementType === k4 || "object" === typeof k4 && null !== k4 && k4.$$typeof === Ha && Ng(k4) === l2.type) {
                        c(a2, l2.sibling);
                        d2 = e(l2, f2.props);
                        d2.ref = Lg(a2, l2, f2);
                        d2.return = a2;
                        a2 = d2;
                        break a;
                      }
                      c(a2, l2);
                      break;
                    } else b(a2, l2);
                    l2 = l2.sibling;
                  }
                  f2.type === ya ? (d2 = Tg(f2.props.children, a2.mode, h2, f2.key), d2.return = a2, a2 = d2) : (h2 = Rg(f2.type, f2.key, f2.props, null, a2.mode, h2), h2.ref = Lg(a2, d2, f2), h2.return = a2, a2 = h2);
                }
                return g(a2);
              case wa:
                a: {
                  for (l2 = f2.key; null !== d2; ) {
                    if (d2.key === l2) if (4 === d2.tag && d2.stateNode.containerInfo === f2.containerInfo && d2.stateNode.implementation === f2.implementation) {
                      c(a2, d2.sibling);
                      d2 = e(d2, f2.children || []);
                      d2.return = a2;
                      a2 = d2;
                      break a;
                    } else {
                      c(a2, d2);
                      break;
                    }
                    else b(a2, d2);
                    d2 = d2.sibling;
                  }
                  d2 = Sg(f2, a2.mode, h2);
                  d2.return = a2;
                  a2 = d2;
                }
                return g(a2);
              case Ha:
                return l2 = f2._init, J2(a2, d2, l2(f2._payload), h2);
            }
            if (eb(f2)) return n2(a2, d2, f2, h2);
            if (Ka(f2)) return t3(a2, d2, f2, h2);
            Mg(a2, f2);
          }
          return "string" === typeof f2 && "" !== f2 || "number" === typeof f2 ? (f2 = "" + f2, null !== d2 && 6 === d2.tag ? (c(a2, d2.sibling), d2 = e(d2, f2), d2.return = a2, a2 = d2) : (c(a2, d2), d2 = Qg(f2, a2.mode, h2), d2.return = a2, a2 = d2), g(a2)) : c(a2, d2);
        }
        __name(J2, "J");
        return J2;
      }
      __name(Og, "Og");
      var Ug = Og(true);
      var Vg = Og(false);
      var Wg = Uf(null);
      var Xg = null;
      var Yg = null;
      var Zg = null;
      function $g() {
        Zg = Yg = Xg = null;
      }
      __name($g, "$g");
      function ah(a) {
        var b = Wg.current;
        E(Wg);
        a._currentValue = b;
      }
      __name(ah, "ah");
      function bh(a, b, c) {
        for (; null !== a; ) {
          var d = a.alternate;
          (a.childLanes & b) !== b ? (a.childLanes |= b, null !== d && (d.childLanes |= b)) : null !== d && (d.childLanes & b) !== b && (d.childLanes |= b);
          if (a === c) break;
          a = a.return;
        }
      }
      __name(bh, "bh");
      function ch(a, b) {
        Xg = a;
        Zg = Yg = null;
        a = a.dependencies;
        null !== a && null !== a.firstContext && (0 !== (a.lanes & b) && (dh = true), a.firstContext = null);
      }
      __name(ch, "ch");
      function eh(a) {
        var b = a._currentValue;
        if (Zg !== a) if (a = { context: a, memoizedValue: b, next: null }, null === Yg) {
          if (null === Xg) throw Error(p2(308));
          Yg = a;
          Xg.dependencies = { lanes: 0, firstContext: a };
        } else Yg = Yg.next = a;
        return b;
      }
      __name(eh, "eh");
      var fh = null;
      function gh(a) {
        null === fh ? fh = [a] : fh.push(a);
      }
      __name(gh, "gh");
      function hh(a, b, c, d) {
        var e = b.interleaved;
        null === e ? (c.next = c, gh(b)) : (c.next = e.next, e.next = c);
        b.interleaved = c;
        return ih(a, d);
      }
      __name(hh, "hh");
      function ih(a, b) {
        a.lanes |= b;
        var c = a.alternate;
        null !== c && (c.lanes |= b);
        c = a;
        for (a = a.return; null !== a; ) a.childLanes |= b, c = a.alternate, null !== c && (c.childLanes |= b), c = a, a = a.return;
        return 3 === c.tag ? c.stateNode : null;
      }
      __name(ih, "ih");
      var jh = false;
      function kh(a) {
        a.updateQueue = { baseState: a.memoizedState, firstBaseUpdate: null, lastBaseUpdate: null, shared: { pending: null, interleaved: null, lanes: 0 }, effects: null };
      }
      __name(kh, "kh");
      function lh(a, b) {
        a = a.updateQueue;
        b.updateQueue === a && (b.updateQueue = { baseState: a.baseState, firstBaseUpdate: a.firstBaseUpdate, lastBaseUpdate: a.lastBaseUpdate, shared: a.shared, effects: a.effects });
      }
      __name(lh, "lh");
      function mh(a, b) {
        return { eventTime: a, lane: b, tag: 0, payload: null, callback: null, next: null };
      }
      __name(mh, "mh");
      function nh(a, b, c) {
        var d = a.updateQueue;
        if (null === d) return null;
        d = d.shared;
        if (0 !== (K3 & 2)) {
          var e = d.pending;
          null === e ? b.next = b : (b.next = e.next, e.next = b);
          d.pending = b;
          return ih(a, c);
        }
        e = d.interleaved;
        null === e ? (b.next = b, gh(d)) : (b.next = e.next, e.next = b);
        d.interleaved = b;
        return ih(a, c);
      }
      __name(nh, "nh");
      function oh(a, b, c) {
        b = b.updateQueue;
        if (null !== b && (b = b.shared, 0 !== (c & 4194240))) {
          var d = b.lanes;
          d &= a.pendingLanes;
          c |= d;
          b.lanes = c;
          Cc(a, c);
        }
      }
      __name(oh, "oh");
      function ph(a, b) {
        var c = a.updateQueue, d = a.alternate;
        if (null !== d && (d = d.updateQueue, c === d)) {
          var e = null, f = null;
          c = c.firstBaseUpdate;
          if (null !== c) {
            do {
              var g = { eventTime: c.eventTime, lane: c.lane, tag: c.tag, payload: c.payload, callback: c.callback, next: null };
              null === f ? e = f = g : f = f.next = g;
              c = c.next;
            } while (null !== c);
            null === f ? e = f = b : f = f.next = b;
          } else e = f = b;
          c = { baseState: d.baseState, firstBaseUpdate: e, lastBaseUpdate: f, shared: d.shared, effects: d.effects };
          a.updateQueue = c;
          return;
        }
        a = c.lastBaseUpdate;
        null === a ? c.firstBaseUpdate = b : a.next = b;
        c.lastBaseUpdate = b;
      }
      __name(ph, "ph");
      function qh(a, b, c, d) {
        var e = a.updateQueue;
        jh = false;
        var f = e.firstBaseUpdate, g = e.lastBaseUpdate, h = e.shared.pending;
        if (null !== h) {
          e.shared.pending = null;
          var k3 = h, l = k3.next;
          k3.next = null;
          null === g ? f = l : g.next = l;
          g = k3;
          var m2 = a.alternate;
          null !== m2 && (m2 = m2.updateQueue, h = m2.lastBaseUpdate, h !== g && (null === h ? m2.firstBaseUpdate = l : h.next = l, m2.lastBaseUpdate = k3));
        }
        if (null !== f) {
          var q = e.baseState;
          g = 0;
          m2 = l = k3 = null;
          h = f;
          do {
            var r3 = h.lane, y = h.eventTime;
            if ((d & r3) === r3) {
              null !== m2 && (m2 = m2.next = {
                eventTime: y,
                lane: 0,
                tag: h.tag,
                payload: h.payload,
                callback: h.callback,
                next: null
              });
              a: {
                var n2 = a, t3 = h;
                r3 = b;
                y = c;
                switch (t3.tag) {
                  case 1:
                    n2 = t3.payload;
                    if ("function" === typeof n2) {
                      q = n2.call(y, q, r3);
                      break a;
                    }
                    q = n2;
                    break a;
                  case 3:
                    n2.flags = n2.flags & -65537 | 128;
                  case 0:
                    n2 = t3.payload;
                    r3 = "function" === typeof n2 ? n2.call(y, q, r3) : n2;
                    if (null === r3 || void 0 === r3) break a;
                    q = A({}, q, r3);
                    break a;
                  case 2:
                    jh = true;
                }
              }
              null !== h.callback && 0 !== h.lane && (a.flags |= 64, r3 = e.effects, null === r3 ? e.effects = [h] : r3.push(h));
            } else y = { eventTime: y, lane: r3, tag: h.tag, payload: h.payload, callback: h.callback, next: null }, null === m2 ? (l = m2 = y, k3 = q) : m2 = m2.next = y, g |= r3;
            h = h.next;
            if (null === h) if (h = e.shared.pending, null === h) break;
            else r3 = h, h = r3.next, r3.next = null, e.lastBaseUpdate = r3, e.shared.pending = null;
          } while (1);
          null === m2 && (k3 = q);
          e.baseState = k3;
          e.firstBaseUpdate = l;
          e.lastBaseUpdate = m2;
          b = e.shared.interleaved;
          if (null !== b) {
            e = b;
            do
              g |= e.lane, e = e.next;
            while (e !== b);
          } else null === f && (e.shared.lanes = 0);
          rh |= g;
          a.lanes = g;
          a.memoizedState = q;
        }
      }
      __name(qh, "qh");
      function sh(a, b, c) {
        a = b.effects;
        b.effects = null;
        if (null !== a) for (b = 0; b < a.length; b++) {
          var d = a[b], e = d.callback;
          if (null !== e) {
            d.callback = null;
            d = c;
            if ("function" !== typeof e) throw Error(p2(191, e));
            e.call(d);
          }
        }
      }
      __name(sh, "sh");
      var th = {};
      var uh = Uf(th);
      var vh = Uf(th);
      var wh = Uf(th);
      function xh(a) {
        if (a === th) throw Error(p2(174));
        return a;
      }
      __name(xh, "xh");
      function yh(a, b) {
        G2(wh, b);
        G2(vh, a);
        G2(uh, th);
        a = b.nodeType;
        switch (a) {
          case 9:
          case 11:
            b = (b = b.documentElement) ? b.namespaceURI : lb(null, "");
            break;
          default:
            a = 8 === a ? b.parentNode : b, b = a.namespaceURI || null, a = a.tagName, b = lb(b, a);
        }
        E(uh);
        G2(uh, b);
      }
      __name(yh, "yh");
      function zh() {
        E(uh);
        E(vh);
        E(wh);
      }
      __name(zh, "zh");
      function Ah(a) {
        xh(wh.current);
        var b = xh(uh.current);
        var c = lb(b, a.type);
        b !== c && (G2(vh, a), G2(uh, c));
      }
      __name(Ah, "Ah");
      function Bh(a) {
        vh.current === a && (E(uh), E(vh));
      }
      __name(Bh, "Bh");
      var L2 = Uf(0);
      function Ch(a) {
        for (var b = a; null !== b; ) {
          if (13 === b.tag) {
            var c = b.memoizedState;
            if (null !== c && (c = c.dehydrated, null === c || "$?" === c.data || "$!" === c.data)) return b;
          } else if (19 === b.tag && void 0 !== b.memoizedProps.revealOrder) {
            if (0 !== (b.flags & 128)) return b;
          } else if (null !== b.child) {
            b.child.return = b;
            b = b.child;
            continue;
          }
          if (b === a) break;
          for (; null === b.sibling; ) {
            if (null === b.return || b.return === a) return null;
            b = b.return;
          }
          b.sibling.return = b.return;
          b = b.sibling;
        }
        return null;
      }
      __name(Ch, "Ch");
      var Dh = [];
      function Eh() {
        for (var a = 0; a < Dh.length; a++) Dh[a]._workInProgressVersionPrimary = null;
        Dh.length = 0;
      }
      __name(Eh, "Eh");
      var Fh = ua.ReactCurrentDispatcher;
      var Gh = ua.ReactCurrentBatchConfig;
      var Hh = 0;
      var M = null;
      var N2 = null;
      var O = null;
      var Ih = false;
      var Jh = false;
      var Kh = 0;
      var Lh = 0;
      function P2() {
        throw Error(p2(321));
      }
      __name(P2, "P");
      function Mh(a, b) {
        if (null === b) return false;
        for (var c = 0; c < b.length && c < a.length; c++) if (!He(a[c], b[c])) return false;
        return true;
      }
      __name(Mh, "Mh");
      function Nh(a, b, c, d, e, f) {
        Hh = f;
        M = b;
        b.memoizedState = null;
        b.updateQueue = null;
        b.lanes = 0;
        Fh.current = null === a || null === a.memoizedState ? Oh : Ph;
        a = c(d, e);
        if (Jh) {
          f = 0;
          do {
            Jh = false;
            Kh = 0;
            if (25 <= f) throw Error(p2(301));
            f += 1;
            O = N2 = null;
            b.updateQueue = null;
            Fh.current = Qh;
            a = c(d, e);
          } while (Jh);
        }
        Fh.current = Rh;
        b = null !== N2 && null !== N2.next;
        Hh = 0;
        O = N2 = M = null;
        Ih = false;
        if (b) throw Error(p2(300));
        return a;
      }
      __name(Nh, "Nh");
      function Sh() {
        var a = 0 !== Kh;
        Kh = 0;
        return a;
      }
      __name(Sh, "Sh");
      function Th() {
        var a = { memoizedState: null, baseState: null, baseQueue: null, queue: null, next: null };
        null === O ? M.memoizedState = O = a : O = O.next = a;
        return O;
      }
      __name(Th, "Th");
      function Uh() {
        if (null === N2) {
          var a = M.alternate;
          a = null !== a ? a.memoizedState : null;
        } else a = N2.next;
        var b = null === O ? M.memoizedState : O.next;
        if (null !== b) O = b, N2 = a;
        else {
          if (null === a) throw Error(p2(310));
          N2 = a;
          a = { memoizedState: N2.memoizedState, baseState: N2.baseState, baseQueue: N2.baseQueue, queue: N2.queue, next: null };
          null === O ? M.memoizedState = O = a : O = O.next = a;
        }
        return O;
      }
      __name(Uh, "Uh");
      function Vh(a, b) {
        return "function" === typeof b ? b(a) : b;
      }
      __name(Vh, "Vh");
      function Wh(a) {
        var b = Uh(), c = b.queue;
        if (null === c) throw Error(p2(311));
        c.lastRenderedReducer = a;
        var d = N2, e = d.baseQueue, f = c.pending;
        if (null !== f) {
          if (null !== e) {
            var g = e.next;
            e.next = f.next;
            f.next = g;
          }
          d.baseQueue = e = f;
          c.pending = null;
        }
        if (null !== e) {
          f = e.next;
          d = d.baseState;
          var h = g = null, k3 = null, l = f;
          do {
            var m2 = l.lane;
            if ((Hh & m2) === m2) null !== k3 && (k3 = k3.next = { lane: 0, action: l.action, hasEagerState: l.hasEagerState, eagerState: l.eagerState, next: null }), d = l.hasEagerState ? l.eagerState : a(d, l.action);
            else {
              var q = {
                lane: m2,
                action: l.action,
                hasEagerState: l.hasEagerState,
                eagerState: l.eagerState,
                next: null
              };
              null === k3 ? (h = k3 = q, g = d) : k3 = k3.next = q;
              M.lanes |= m2;
              rh |= m2;
            }
            l = l.next;
          } while (null !== l && l !== f);
          null === k3 ? g = d : k3.next = h;
          He(d, b.memoizedState) || (dh = true);
          b.memoizedState = d;
          b.baseState = g;
          b.baseQueue = k3;
          c.lastRenderedState = d;
        }
        a = c.interleaved;
        if (null !== a) {
          e = a;
          do
            f = e.lane, M.lanes |= f, rh |= f, e = e.next;
          while (e !== a);
        } else null === e && (c.lanes = 0);
        return [b.memoizedState, c.dispatch];
      }
      __name(Wh, "Wh");
      function Xh(a) {
        var b = Uh(), c = b.queue;
        if (null === c) throw Error(p2(311));
        c.lastRenderedReducer = a;
        var d = c.dispatch, e = c.pending, f = b.memoizedState;
        if (null !== e) {
          c.pending = null;
          var g = e = e.next;
          do
            f = a(f, g.action), g = g.next;
          while (g !== e);
          He(f, b.memoizedState) || (dh = true);
          b.memoizedState = f;
          null === b.baseQueue && (b.baseState = f);
          c.lastRenderedState = f;
        }
        return [f, d];
      }
      __name(Xh, "Xh");
      function Yh() {
      }
      __name(Yh, "Yh");
      function Zh(a, b) {
        var c = M, d = Uh(), e = b(), f = !He(d.memoizedState, e);
        f && (d.memoizedState = e, dh = true);
        d = d.queue;
        $h(ai.bind(null, c, d, a), [a]);
        if (d.getSnapshot !== b || f || null !== O && O.memoizedState.tag & 1) {
          c.flags |= 2048;
          bi(9, ci.bind(null, c, d, e, b), void 0, null);
          if (null === Q) throw Error(p2(349));
          0 !== (Hh & 30) || di(c, b, e);
        }
        return e;
      }
      __name(Zh, "Zh");
      function di(a, b, c) {
        a.flags |= 16384;
        a = { getSnapshot: b, value: c };
        b = M.updateQueue;
        null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.stores = [a]) : (c = b.stores, null === c ? b.stores = [a] : c.push(a));
      }
      __name(di, "di");
      function ci(a, b, c, d) {
        b.value = c;
        b.getSnapshot = d;
        ei(b) && fi(a);
      }
      __name(ci, "ci");
      function ai(a, b, c) {
        return c(function() {
          ei(b) && fi(a);
        });
      }
      __name(ai, "ai");
      function ei(a) {
        var b = a.getSnapshot;
        a = a.value;
        try {
          var c = b();
          return !He(a, c);
        } catch (d) {
          return true;
        }
      }
      __name(ei, "ei");
      function fi(a) {
        var b = ih(a, 1);
        null !== b && gi(b, a, 1, -1);
      }
      __name(fi, "fi");
      function hi(a) {
        var b = Th();
        "function" === typeof a && (a = a());
        b.memoizedState = b.baseState = a;
        a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: Vh, lastRenderedState: a };
        b.queue = a;
        a = a.dispatch = ii.bind(null, M, a);
        return [b.memoizedState, a];
      }
      __name(hi, "hi");
      function bi(a, b, c, d) {
        a = { tag: a, create: b, destroy: c, deps: d, next: null };
        b = M.updateQueue;
        null === b ? (b = { lastEffect: null, stores: null }, M.updateQueue = b, b.lastEffect = a.next = a) : (c = b.lastEffect, null === c ? b.lastEffect = a.next = a : (d = c.next, c.next = a, a.next = d, b.lastEffect = a));
        return a;
      }
      __name(bi, "bi");
      function ji() {
        return Uh().memoizedState;
      }
      __name(ji, "ji");
      function ki(a, b, c, d) {
        var e = Th();
        M.flags |= a;
        e.memoizedState = bi(1 | b, c, void 0, void 0 === d ? null : d);
      }
      __name(ki, "ki");
      function li(a, b, c, d) {
        var e = Uh();
        d = void 0 === d ? null : d;
        var f = void 0;
        if (null !== N2) {
          var g = N2.memoizedState;
          f = g.destroy;
          if (null !== d && Mh(d, g.deps)) {
            e.memoizedState = bi(b, c, f, d);
            return;
          }
        }
        M.flags |= a;
        e.memoizedState = bi(1 | b, c, f, d);
      }
      __name(li, "li");
      function mi(a, b) {
        return ki(8390656, 8, a, b);
      }
      __name(mi, "mi");
      function $h(a, b) {
        return li(2048, 8, a, b);
      }
      __name($h, "$h");
      function ni(a, b) {
        return li(4, 2, a, b);
      }
      __name(ni, "ni");
      function oi(a, b) {
        return li(4, 4, a, b);
      }
      __name(oi, "oi");
      function pi(a, b) {
        if ("function" === typeof b) return a = a(), b(a), function() {
          b(null);
        };
        if (null !== b && void 0 !== b) return a = a(), b.current = a, function() {
          b.current = null;
        };
      }
      __name(pi, "pi");
      function qi(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return li(4, 4, pi.bind(null, b, a), c);
      }
      __name(qi, "qi");
      function ri() {
      }
      __name(ri, "ri");
      function si(a, b) {
        var c = Uh();
        b = void 0 === b ? null : b;
        var d = c.memoizedState;
        if (null !== d && null !== b && Mh(b, d[1])) return d[0];
        c.memoizedState = [a, b];
        return a;
      }
      __name(si, "si");
      function ti(a, b) {
        var c = Uh();
        b = void 0 === b ? null : b;
        var d = c.memoizedState;
        if (null !== d && null !== b && Mh(b, d[1])) return d[0];
        a = a();
        c.memoizedState = [a, b];
        return a;
      }
      __name(ti, "ti");
      function ui(a, b, c) {
        if (0 === (Hh & 21)) return a.baseState && (a.baseState = false, dh = true), a.memoizedState = c;
        He(c, b) || (c = yc(), M.lanes |= c, rh |= c, a.baseState = true);
        return b;
      }
      __name(ui, "ui");
      function vi(a, b) {
        var c = C;
        C = 0 !== c && 4 > c ? c : 4;
        a(true);
        var d = Gh.transition;
        Gh.transition = {};
        try {
          a(false), b();
        } finally {
          C = c, Gh.transition = d;
        }
      }
      __name(vi, "vi");
      function wi() {
        return Uh().memoizedState;
      }
      __name(wi, "wi");
      function xi(a, b, c) {
        var d = yi(a);
        c = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
        if (zi(a)) Ai(b, c);
        else if (c = hh(a, b, c, d), null !== c) {
          var e = R();
          gi(c, a, d, e);
          Bi(c, b, d);
        }
      }
      __name(xi, "xi");
      function ii(a, b, c) {
        var d = yi(a), e = { lane: d, action: c, hasEagerState: false, eagerState: null, next: null };
        if (zi(a)) Ai(b, e);
        else {
          var f = a.alternate;
          if (0 === a.lanes && (null === f || 0 === f.lanes) && (f = b.lastRenderedReducer, null !== f)) try {
            var g = b.lastRenderedState, h = f(g, c);
            e.hasEagerState = true;
            e.eagerState = h;
            if (He(h, g)) {
              var k3 = b.interleaved;
              null === k3 ? (e.next = e, gh(b)) : (e.next = k3.next, k3.next = e);
              b.interleaved = e;
              return;
            }
          } catch (l) {
          } finally {
          }
          c = hh(a, b, e, d);
          null !== c && (e = R(), gi(c, a, d, e), Bi(c, b, d));
        }
      }
      __name(ii, "ii");
      function zi(a) {
        var b = a.alternate;
        return a === M || null !== b && b === M;
      }
      __name(zi, "zi");
      function Ai(a, b) {
        Jh = Ih = true;
        var c = a.pending;
        null === c ? b.next = b : (b.next = c.next, c.next = b);
        a.pending = b;
      }
      __name(Ai, "Ai");
      function Bi(a, b, c) {
        if (0 !== (c & 4194240)) {
          var d = b.lanes;
          d &= a.pendingLanes;
          c |= d;
          b.lanes = c;
          Cc(a, c);
        }
      }
      __name(Bi, "Bi");
      var Rh = { readContext: eh, useCallback: P2, useContext: P2, useEffect: P2, useImperativeHandle: P2, useInsertionEffect: P2, useLayoutEffect: P2, useMemo: P2, useReducer: P2, useRef: P2, useState: P2, useDebugValue: P2, useDeferredValue: P2, useTransition: P2, useMutableSource: P2, useSyncExternalStore: P2, useId: P2, unstable_isNewReconciler: false };
      var Oh = { readContext: eh, useCallback: /* @__PURE__ */ __name(function(a, b) {
        Th().memoizedState = [a, void 0 === b ? null : b];
        return a;
      }, "useCallback"), useContext: eh, useEffect: mi, useImperativeHandle: /* @__PURE__ */ __name(function(a, b, c) {
        c = null !== c && void 0 !== c ? c.concat([a]) : null;
        return ki(
          4194308,
          4,
          pi.bind(null, b, a),
          c
        );
      }, "useImperativeHandle"), useLayoutEffect: /* @__PURE__ */ __name(function(a, b) {
        return ki(4194308, 4, a, b);
      }, "useLayoutEffect"), useInsertionEffect: /* @__PURE__ */ __name(function(a, b) {
        return ki(4, 2, a, b);
      }, "useInsertionEffect"), useMemo: /* @__PURE__ */ __name(function(a, b) {
        var c = Th();
        b = void 0 === b ? null : b;
        a = a();
        c.memoizedState = [a, b];
        return a;
      }, "useMemo"), useReducer: /* @__PURE__ */ __name(function(a, b, c) {
        var d = Th();
        b = void 0 !== c ? c(b) : b;
        d.memoizedState = d.baseState = b;
        a = { pending: null, interleaved: null, lanes: 0, dispatch: null, lastRenderedReducer: a, lastRenderedState: b };
        d.queue = a;
        a = a.dispatch = xi.bind(null, M, a);
        return [d.memoizedState, a];
      }, "useReducer"), useRef: /* @__PURE__ */ __name(function(a) {
        var b = Th();
        a = { current: a };
        return b.memoizedState = a;
      }, "useRef"), useState: hi, useDebugValue: ri, useDeferredValue: /* @__PURE__ */ __name(function(a) {
        return Th().memoizedState = a;
      }, "useDeferredValue"), useTransition: /* @__PURE__ */ __name(function() {
        var a = hi(false), b = a[0];
        a = vi.bind(null, a[1]);
        Th().memoizedState = a;
        return [b, a];
      }, "useTransition"), useMutableSource: /* @__PURE__ */ __name(function() {
      }, "useMutableSource"), useSyncExternalStore: /* @__PURE__ */ __name(function(a, b, c) {
        var d = M, e = Th();
        if (I) {
          if (void 0 === c) throw Error(p2(407));
          c = c();
        } else {
          c = b();
          if (null === Q) throw Error(p2(349));
          0 !== (Hh & 30) || di(d, b, c);
        }
        e.memoizedState = c;
        var f = { value: c, getSnapshot: b };
        e.queue = f;
        mi(ai.bind(
          null,
          d,
          f,
          a
        ), [a]);
        d.flags |= 2048;
        bi(9, ci.bind(null, d, f, c, b), void 0, null);
        return c;
      }, "useSyncExternalStore"), useId: /* @__PURE__ */ __name(function() {
        var a = Th(), b = Q.identifierPrefix;
        if (I) {
          var c = sg;
          var d = rg;
          c = (d & ~(1 << 32 - oc(d) - 1)).toString(32) + c;
          b = ":" + b + "R" + c;
          c = Kh++;
          0 < c && (b += "H" + c.toString(32));
          b += ":";
        } else c = Lh++, b = ":" + b + "r" + c.toString(32) + ":";
        return a.memoizedState = b;
      }, "useId"), unstable_isNewReconciler: false };
      var Ph = {
        readContext: eh,
        useCallback: si,
        useContext: eh,
        useEffect: $h,
        useImperativeHandle: qi,
        useInsertionEffect: ni,
        useLayoutEffect: oi,
        useMemo: ti,
        useReducer: Wh,
        useRef: ji,
        useState: /* @__PURE__ */ __name(function() {
          return Wh(Vh);
        }, "useState"),
        useDebugValue: ri,
        useDeferredValue: /* @__PURE__ */ __name(function(a) {
          var b = Uh();
          return ui(b, N2.memoizedState, a);
        }, "useDeferredValue"),
        useTransition: /* @__PURE__ */ __name(function() {
          var a = Wh(Vh)[0], b = Uh().memoizedState;
          return [a, b];
        }, "useTransition"),
        useMutableSource: Yh,
        useSyncExternalStore: Zh,
        useId: wi,
        unstable_isNewReconciler: false
      };
      var Qh = { readContext: eh, useCallback: si, useContext: eh, useEffect: $h, useImperativeHandle: qi, useInsertionEffect: ni, useLayoutEffect: oi, useMemo: ti, useReducer: Xh, useRef: ji, useState: /* @__PURE__ */ __name(function() {
        return Xh(Vh);
      }, "useState"), useDebugValue: ri, useDeferredValue: /* @__PURE__ */ __name(function(a) {
        var b = Uh();
        return null === N2 ? b.memoizedState = a : ui(b, N2.memoizedState, a);
      }, "useDeferredValue"), useTransition: /* @__PURE__ */ __name(function() {
        var a = Xh(Vh)[0], b = Uh().memoizedState;
        return [a, b];
      }, "useTransition"), useMutableSource: Yh, useSyncExternalStore: Zh, useId: wi, unstable_isNewReconciler: false };
      function Ci(a, b) {
        if (a && a.defaultProps) {
          b = A({}, b);
          a = a.defaultProps;
          for (var c in a) void 0 === b[c] && (b[c] = a[c]);
          return b;
        }
        return b;
      }
      __name(Ci, "Ci");
      function Di(a, b, c, d) {
        b = a.memoizedState;
        c = c(d, b);
        c = null === c || void 0 === c ? b : A({}, b, c);
        a.memoizedState = c;
        0 === a.lanes && (a.updateQueue.baseState = c);
      }
      __name(Di, "Di");
      var Ei = { isMounted: /* @__PURE__ */ __name(function(a) {
        return (a = a._reactInternals) ? Vb(a) === a : false;
      }, "isMounted"), enqueueSetState: /* @__PURE__ */ __name(function(a, b, c) {
        a = a._reactInternals;
        var d = R(), e = yi(a), f = mh(d, e);
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = nh(a, f, e);
        null !== b && (gi(b, a, e, d), oh(b, a, e));
      }, "enqueueSetState"), enqueueReplaceState: /* @__PURE__ */ __name(function(a, b, c) {
        a = a._reactInternals;
        var d = R(), e = yi(a), f = mh(d, e);
        f.tag = 1;
        f.payload = b;
        void 0 !== c && null !== c && (f.callback = c);
        b = nh(a, f, e);
        null !== b && (gi(b, a, e, d), oh(b, a, e));
      }, "enqueueReplaceState"), enqueueForceUpdate: /* @__PURE__ */ __name(function(a, b) {
        a = a._reactInternals;
        var c = R(), d = yi(a), e = mh(c, d);
        e.tag = 2;
        void 0 !== b && null !== b && (e.callback = b);
        b = nh(a, e, d);
        null !== b && (gi(b, a, d, c), oh(b, a, d));
      }, "enqueueForceUpdate") };
      function Fi(a, b, c, d, e, f, g) {
        a = a.stateNode;
        return "function" === typeof a.shouldComponentUpdate ? a.shouldComponentUpdate(d, f, g) : b.prototype && b.prototype.isPureReactComponent ? !Ie2(c, d) || !Ie2(e, f) : true;
      }
      __name(Fi, "Fi");
      function Gi(a, b, c) {
        var d = false, e = Vf;
        var f = b.contextType;
        "object" === typeof f && null !== f ? f = eh(f) : (e = Zf(b) ? Xf : H2.current, d = b.contextTypes, f = (d = null !== d && void 0 !== d) ? Yf(a, e) : Vf);
        b = new b(c, f);
        a.memoizedState = null !== b.state && void 0 !== b.state ? b.state : null;
        b.updater = Ei;
        a.stateNode = b;
        b._reactInternals = a;
        d && (a = a.stateNode, a.__reactInternalMemoizedUnmaskedChildContext = e, a.__reactInternalMemoizedMaskedChildContext = f);
        return b;
      }
      __name(Gi, "Gi");
      function Hi(a, b, c, d) {
        a = b.state;
        "function" === typeof b.componentWillReceiveProps && b.componentWillReceiveProps(c, d);
        "function" === typeof b.UNSAFE_componentWillReceiveProps && b.UNSAFE_componentWillReceiveProps(c, d);
        b.state !== a && Ei.enqueueReplaceState(b, b.state, null);
      }
      __name(Hi, "Hi");
      function Ii(a, b, c, d) {
        var e = a.stateNode;
        e.props = c;
        e.state = a.memoizedState;
        e.refs = {};
        kh(a);
        var f = b.contextType;
        "object" === typeof f && null !== f ? e.context = eh(f) : (f = Zf(b) ? Xf : H2.current, e.context = Yf(a, f));
        e.state = a.memoizedState;
        f = b.getDerivedStateFromProps;
        "function" === typeof f && (Di(a, b, f, c), e.state = a.memoizedState);
        "function" === typeof b.getDerivedStateFromProps || "function" === typeof e.getSnapshotBeforeUpdate || "function" !== typeof e.UNSAFE_componentWillMount && "function" !== typeof e.componentWillMount || (b = e.state, "function" === typeof e.componentWillMount && e.componentWillMount(), "function" === typeof e.UNSAFE_componentWillMount && e.UNSAFE_componentWillMount(), b !== e.state && Ei.enqueueReplaceState(e, e.state, null), qh(a, c, e, d), e.state = a.memoizedState);
        "function" === typeof e.componentDidMount && (a.flags |= 4194308);
      }
      __name(Ii, "Ii");
      function Ji(a, b) {
        try {
          var c = "", d = b;
          do
            c += Pa(d), d = d.return;
          while (d);
          var e = c;
        } catch (f) {
          e = "\nError generating stack: " + f.message + "\n" + f.stack;
        }
        return { value: a, source: b, stack: e, digest: null };
      }
      __name(Ji, "Ji");
      function Ki(a, b, c) {
        return { value: a, source: null, stack: null != c ? c : null, digest: null != b ? b : null };
      }
      __name(Ki, "Ki");
      function Li(a, b) {
        try {
          console.error(b.value);
        } catch (c) {
          setTimeout(function() {
            throw c;
          });
        }
      }
      __name(Li, "Li");
      var Mi = "function" === typeof WeakMap ? WeakMap : Map;
      function Ni(a, b, c) {
        c = mh(-1, c);
        c.tag = 3;
        c.payload = { element: null };
        var d = b.value;
        c.callback = function() {
          Oi || (Oi = true, Pi = d);
          Li(a, b);
        };
        return c;
      }
      __name(Ni, "Ni");
      function Qi(a, b, c) {
        c = mh(-1, c);
        c.tag = 3;
        var d = a.type.getDerivedStateFromError;
        if ("function" === typeof d) {
          var e = b.value;
          c.payload = function() {
            return d(e);
          };
          c.callback = function() {
            Li(a, b);
          };
        }
        var f = a.stateNode;
        null !== f && "function" === typeof f.componentDidCatch && (c.callback = function() {
          Li(a, b);
          "function" !== typeof d && (null === Ri ? Ri = /* @__PURE__ */ new Set([this]) : Ri.add(this));
          var c2 = b.stack;
          this.componentDidCatch(b.value, { componentStack: null !== c2 ? c2 : "" });
        });
        return c;
      }
      __name(Qi, "Qi");
      function Si(a, b, c) {
        var d = a.pingCache;
        if (null === d) {
          d = a.pingCache = new Mi();
          var e = /* @__PURE__ */ new Set();
          d.set(b, e);
        } else e = d.get(b), void 0 === e && (e = /* @__PURE__ */ new Set(), d.set(b, e));
        e.has(c) || (e.add(c), a = Ti.bind(null, a, b, c), b.then(a, a));
      }
      __name(Si, "Si");
      function Ui(a) {
        do {
          var b;
          if (b = 13 === a.tag) b = a.memoizedState, b = null !== b ? null !== b.dehydrated ? true : false : true;
          if (b) return a;
          a = a.return;
        } while (null !== a);
        return null;
      }
      __name(Ui, "Ui");
      function Vi(a, b, c, d, e) {
        if (0 === (a.mode & 1)) return a === b ? a.flags |= 65536 : (a.flags |= 128, c.flags |= 131072, c.flags &= -52805, 1 === c.tag && (null === c.alternate ? c.tag = 17 : (b = mh(-1, 1), b.tag = 2, nh(c, b, 1))), c.lanes |= 1), a;
        a.flags |= 65536;
        a.lanes = e;
        return a;
      }
      __name(Vi, "Vi");
      var Wi = ua.ReactCurrentOwner;
      var dh = false;
      function Xi(a, b, c, d) {
        b.child = null === a ? Vg(b, null, c, d) : Ug(b, a.child, c, d);
      }
      __name(Xi, "Xi");
      function Yi(a, b, c, d, e) {
        c = c.render;
        var f = b.ref;
        ch(b, e);
        d = Nh(a, b, c, d, f, e);
        c = Sh();
        if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
        I && c && vg(b);
        b.flags |= 1;
        Xi(a, b, d, e);
        return b.child;
      }
      __name(Yi, "Yi");
      function $i(a, b, c, d, e) {
        if (null === a) {
          var f = c.type;
          if ("function" === typeof f && !aj(f) && void 0 === f.defaultProps && null === c.compare && void 0 === c.defaultProps) return b.tag = 15, b.type = f, bj(a, b, f, d, e);
          a = Rg(c.type, null, d, b, b.mode, e);
          a.ref = b.ref;
          a.return = b;
          return b.child = a;
        }
        f = a.child;
        if (0 === (a.lanes & e)) {
          var g = f.memoizedProps;
          c = c.compare;
          c = null !== c ? c : Ie2;
          if (c(g, d) && a.ref === b.ref) return Zi(a, b, e);
        }
        b.flags |= 1;
        a = Pg(f, d);
        a.ref = b.ref;
        a.return = b;
        return b.child = a;
      }
      __name($i, "$i");
      function bj(a, b, c, d, e) {
        if (null !== a) {
          var f = a.memoizedProps;
          if (Ie2(f, d) && a.ref === b.ref) if (dh = false, b.pendingProps = d = f, 0 !== (a.lanes & e)) 0 !== (a.flags & 131072) && (dh = true);
          else return b.lanes = a.lanes, Zi(a, b, e);
        }
        return cj(a, b, c, d, e);
      }
      __name(bj, "bj");
      function dj(a, b, c) {
        var d = b.pendingProps, e = d.children, f = null !== a ? a.memoizedState : null;
        if ("hidden" === d.mode) if (0 === (b.mode & 1)) b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null }, G2(ej, fj), fj |= c;
        else {
          if (0 === (c & 1073741824)) return a = null !== f ? f.baseLanes | c : c, b.lanes = b.childLanes = 1073741824, b.memoizedState = { baseLanes: a, cachePool: null, transitions: null }, b.updateQueue = null, G2(ej, fj), fj |= a, null;
          b.memoizedState = { baseLanes: 0, cachePool: null, transitions: null };
          d = null !== f ? f.baseLanes : c;
          G2(ej, fj);
          fj |= d;
        }
        else null !== f ? (d = f.baseLanes | c, b.memoizedState = null) : d = c, G2(ej, fj), fj |= d;
        Xi(a, b, e, c);
        return b.child;
      }
      __name(dj, "dj");
      function gj(a, b) {
        var c = b.ref;
        if (null === a && null !== c || null !== a && a.ref !== c) b.flags |= 512, b.flags |= 2097152;
      }
      __name(gj, "gj");
      function cj(a, b, c, d, e) {
        var f = Zf(c) ? Xf : H2.current;
        f = Yf(b, f);
        ch(b, e);
        c = Nh(a, b, c, d, f, e);
        d = Sh();
        if (null !== a && !dh) return b.updateQueue = a.updateQueue, b.flags &= -2053, a.lanes &= ~e, Zi(a, b, e);
        I && d && vg(b);
        b.flags |= 1;
        Xi(a, b, c, e);
        return b.child;
      }
      __name(cj, "cj");
      function hj(a, b, c, d, e) {
        if (Zf(c)) {
          var f = true;
          cg(b);
        } else f = false;
        ch(b, e);
        if (null === b.stateNode) ij(a, b), Gi(b, c, d), Ii(b, c, d, e), d = true;
        else if (null === a) {
          var g = b.stateNode, h = b.memoizedProps;
          g.props = h;
          var k3 = g.context, l = c.contextType;
          "object" === typeof l && null !== l ? l = eh(l) : (l = Zf(c) ? Xf : H2.current, l = Yf(b, l));
          var m2 = c.getDerivedStateFromProps, q = "function" === typeof m2 || "function" === typeof g.getSnapshotBeforeUpdate;
          q || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== d || k3 !== l) && Hi(b, g, d, l);
          jh = false;
          var r3 = b.memoizedState;
          g.state = r3;
          qh(b, d, g, e);
          k3 = b.memoizedState;
          h !== d || r3 !== k3 || Wf.current || jh ? ("function" === typeof m2 && (Di(b, c, m2, d), k3 = b.memoizedState), (h = jh || Fi(b, c, h, d, r3, k3, l)) ? (q || "function" !== typeof g.UNSAFE_componentWillMount && "function" !== typeof g.componentWillMount || ("function" === typeof g.componentWillMount && g.componentWillMount(), "function" === typeof g.UNSAFE_componentWillMount && g.UNSAFE_componentWillMount()), "function" === typeof g.componentDidMount && (b.flags |= 4194308)) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), b.memoizedProps = d, b.memoizedState = k3), g.props = d, g.state = k3, g.context = l, d = h) : ("function" === typeof g.componentDidMount && (b.flags |= 4194308), d = false);
        } else {
          g = b.stateNode;
          lh(a, b);
          h = b.memoizedProps;
          l = b.type === b.elementType ? h : Ci(b.type, h);
          g.props = l;
          q = b.pendingProps;
          r3 = g.context;
          k3 = c.contextType;
          "object" === typeof k3 && null !== k3 ? k3 = eh(k3) : (k3 = Zf(c) ? Xf : H2.current, k3 = Yf(b, k3));
          var y = c.getDerivedStateFromProps;
          (m2 = "function" === typeof y || "function" === typeof g.getSnapshotBeforeUpdate) || "function" !== typeof g.UNSAFE_componentWillReceiveProps && "function" !== typeof g.componentWillReceiveProps || (h !== q || r3 !== k3) && Hi(b, g, d, k3);
          jh = false;
          r3 = b.memoizedState;
          g.state = r3;
          qh(b, d, g, e);
          var n2 = b.memoizedState;
          h !== q || r3 !== n2 || Wf.current || jh ? ("function" === typeof y && (Di(b, c, y, d), n2 = b.memoizedState), (l = jh || Fi(b, c, l, d, r3, n2, k3) || false) ? (m2 || "function" !== typeof g.UNSAFE_componentWillUpdate && "function" !== typeof g.componentWillUpdate || ("function" === typeof g.componentWillUpdate && g.componentWillUpdate(d, n2, k3), "function" === typeof g.UNSAFE_componentWillUpdate && g.UNSAFE_componentWillUpdate(d, n2, k3)), "function" === typeof g.componentDidUpdate && (b.flags |= 4), "function" === typeof g.getSnapshotBeforeUpdate && (b.flags |= 1024)) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r3 === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r3 === a.memoizedState || (b.flags |= 1024), b.memoizedProps = d, b.memoizedState = n2), g.props = d, g.state = n2, g.context = k3, d = l) : ("function" !== typeof g.componentDidUpdate || h === a.memoizedProps && r3 === a.memoizedState || (b.flags |= 4), "function" !== typeof g.getSnapshotBeforeUpdate || h === a.memoizedProps && r3 === a.memoizedState || (b.flags |= 1024), d = false);
        }
        return jj(a, b, c, d, f, e);
      }
      __name(hj, "hj");
      function jj(a, b, c, d, e, f) {
        gj(a, b);
        var g = 0 !== (b.flags & 128);
        if (!d && !g) return e && dg(b, c, false), Zi(a, b, f);
        d = b.stateNode;
        Wi.current = b;
        var h = g && "function" !== typeof c.getDerivedStateFromError ? null : d.render();
        b.flags |= 1;
        null !== a && g ? (b.child = Ug(b, a.child, null, f), b.child = Ug(b, null, h, f)) : Xi(a, b, h, f);
        b.memoizedState = d.state;
        e && dg(b, c, true);
        return b.child;
      }
      __name(jj, "jj");
      function kj(a) {
        var b = a.stateNode;
        b.pendingContext ? ag(a, b.pendingContext, b.pendingContext !== b.context) : b.context && ag(a, b.context, false);
        yh(a, b.containerInfo);
      }
      __name(kj, "kj");
      function lj(a, b, c, d, e) {
        Ig();
        Jg(e);
        b.flags |= 256;
        Xi(a, b, c, d);
        return b.child;
      }
      __name(lj, "lj");
      var mj = { dehydrated: null, treeContext: null, retryLane: 0 };
      function nj(a) {
        return { baseLanes: a, cachePool: null, transitions: null };
      }
      __name(nj, "nj");
      function oj(a, b, c) {
        var d = b.pendingProps, e = L2.current, f = false, g = 0 !== (b.flags & 128), h;
        (h = g) || (h = null !== a && null === a.memoizedState ? false : 0 !== (e & 2));
        if (h) f = true, b.flags &= -129;
        else if (null === a || null !== a.memoizedState) e |= 1;
        G2(L2, e & 1);
        if (null === a) {
          Eg(b);
          a = b.memoizedState;
          if (null !== a && (a = a.dehydrated, null !== a)) return 0 === (b.mode & 1) ? b.lanes = 1 : "$!" === a.data ? b.lanes = 8 : b.lanes = 1073741824, null;
          g = d.children;
          a = d.fallback;
          return f ? (d = b.mode, f = b.child, g = { mode: "hidden", children: g }, 0 === (d & 1) && null !== f ? (f.childLanes = 0, f.pendingProps = g) : f = pj(g, d, 0, null), a = Tg(a, d, c, null), f.return = b, a.return = b, f.sibling = a, b.child = f, b.child.memoizedState = nj(c), b.memoizedState = mj, a) : qj(b, g);
        }
        e = a.memoizedState;
        if (null !== e && (h = e.dehydrated, null !== h)) return rj(a, b, g, d, h, e, c);
        if (f) {
          f = d.fallback;
          g = b.mode;
          e = a.child;
          h = e.sibling;
          var k3 = { mode: "hidden", children: d.children };
          0 === (g & 1) && b.child !== e ? (d = b.child, d.childLanes = 0, d.pendingProps = k3, b.deletions = null) : (d = Pg(e, k3), d.subtreeFlags = e.subtreeFlags & 14680064);
          null !== h ? f = Pg(h, f) : (f = Tg(f, g, c, null), f.flags |= 2);
          f.return = b;
          d.return = b;
          d.sibling = f;
          b.child = d;
          d = f;
          f = b.child;
          g = a.child.memoizedState;
          g = null === g ? nj(c) : { baseLanes: g.baseLanes | c, cachePool: null, transitions: g.transitions };
          f.memoizedState = g;
          f.childLanes = a.childLanes & ~c;
          b.memoizedState = mj;
          return d;
        }
        f = a.child;
        a = f.sibling;
        d = Pg(f, { mode: "visible", children: d.children });
        0 === (b.mode & 1) && (d.lanes = c);
        d.return = b;
        d.sibling = null;
        null !== a && (c = b.deletions, null === c ? (b.deletions = [a], b.flags |= 16) : c.push(a));
        b.child = d;
        b.memoizedState = null;
        return d;
      }
      __name(oj, "oj");
      function qj(a, b) {
        b = pj({ mode: "visible", children: b }, a.mode, 0, null);
        b.return = a;
        return a.child = b;
      }
      __name(qj, "qj");
      function sj(a, b, c, d) {
        null !== d && Jg(d);
        Ug(b, a.child, null, c);
        a = qj(b, b.pendingProps.children);
        a.flags |= 2;
        b.memoizedState = null;
        return a;
      }
      __name(sj, "sj");
      function rj(a, b, c, d, e, f, g) {
        if (c) {
          if (b.flags & 256) return b.flags &= -257, d = Ki(Error(p2(422))), sj(a, b, g, d);
          if (null !== b.memoizedState) return b.child = a.child, b.flags |= 128, null;
          f = d.fallback;
          e = b.mode;
          d = pj({ mode: "visible", children: d.children }, e, 0, null);
          f = Tg(f, e, g, null);
          f.flags |= 2;
          d.return = b;
          f.return = b;
          d.sibling = f;
          b.child = d;
          0 !== (b.mode & 1) && Ug(b, a.child, null, g);
          b.child.memoizedState = nj(g);
          b.memoizedState = mj;
          return f;
        }
        if (0 === (b.mode & 1)) return sj(a, b, g, null);
        if ("$!" === e.data) {
          d = e.nextSibling && e.nextSibling.dataset;
          if (d) var h = d.dgst;
          d = h;
          f = Error(p2(419));
          d = Ki(f, d, void 0);
          return sj(a, b, g, d);
        }
        h = 0 !== (g & a.childLanes);
        if (dh || h) {
          d = Q;
          if (null !== d) {
            switch (g & -g) {
              case 4:
                e = 2;
                break;
              case 16:
                e = 8;
                break;
              case 64:
              case 128:
              case 256:
              case 512:
              case 1024:
              case 2048:
              case 4096:
              case 8192:
              case 16384:
              case 32768:
              case 65536:
              case 131072:
              case 262144:
              case 524288:
              case 1048576:
              case 2097152:
              case 4194304:
              case 8388608:
              case 16777216:
              case 33554432:
              case 67108864:
                e = 32;
                break;
              case 536870912:
                e = 268435456;
                break;
              default:
                e = 0;
            }
            e = 0 !== (e & (d.suspendedLanes | g)) ? 0 : e;
            0 !== e && e !== f.retryLane && (f.retryLane = e, ih(a, e), gi(d, a, e, -1));
          }
          tj();
          d = Ki(Error(p2(421)));
          return sj(a, b, g, d);
        }
        if ("$?" === e.data) return b.flags |= 128, b.child = a.child, b = uj.bind(null, a), e._reactRetry = b, null;
        a = f.treeContext;
        yg = Lf(e.nextSibling);
        xg = b;
        I = true;
        zg = null;
        null !== a && (og[pg++] = rg, og[pg++] = sg, og[pg++] = qg, rg = a.id, sg = a.overflow, qg = b);
        b = qj(b, d.children);
        b.flags |= 4096;
        return b;
      }
      __name(rj, "rj");
      function vj(a, b, c) {
        a.lanes |= b;
        var d = a.alternate;
        null !== d && (d.lanes |= b);
        bh(a.return, b, c);
      }
      __name(vj, "vj");
      function wj(a, b, c, d, e) {
        var f = a.memoizedState;
        null === f ? a.memoizedState = { isBackwards: b, rendering: null, renderingStartTime: 0, last: d, tail: c, tailMode: e } : (f.isBackwards = b, f.rendering = null, f.renderingStartTime = 0, f.last = d, f.tail = c, f.tailMode = e);
      }
      __name(wj, "wj");
      function xj(a, b, c) {
        var d = b.pendingProps, e = d.revealOrder, f = d.tail;
        Xi(a, b, d.children, c);
        d = L2.current;
        if (0 !== (d & 2)) d = d & 1 | 2, b.flags |= 128;
        else {
          if (null !== a && 0 !== (a.flags & 128)) a: for (a = b.child; null !== a; ) {
            if (13 === a.tag) null !== a.memoizedState && vj(a, c, b);
            else if (19 === a.tag) vj(a, c, b);
            else if (null !== a.child) {
              a.child.return = a;
              a = a.child;
              continue;
            }
            if (a === b) break a;
            for (; null === a.sibling; ) {
              if (null === a.return || a.return === b) break a;
              a = a.return;
            }
            a.sibling.return = a.return;
            a = a.sibling;
          }
          d &= 1;
        }
        G2(L2, d);
        if (0 === (b.mode & 1)) b.memoizedState = null;
        else switch (e) {
          case "forwards":
            c = b.child;
            for (e = null; null !== c; ) a = c.alternate, null !== a && null === Ch(a) && (e = c), c = c.sibling;
            c = e;
            null === c ? (e = b.child, b.child = null) : (e = c.sibling, c.sibling = null);
            wj(b, false, e, c, f);
            break;
          case "backwards":
            c = null;
            e = b.child;
            for (b.child = null; null !== e; ) {
              a = e.alternate;
              if (null !== a && null === Ch(a)) {
                b.child = e;
                break;
              }
              a = e.sibling;
              e.sibling = c;
              c = e;
              e = a;
            }
            wj(b, true, c, null, f);
            break;
          case "together":
            wj(b, false, null, null, void 0);
            break;
          default:
            b.memoizedState = null;
        }
        return b.child;
      }
      __name(xj, "xj");
      function ij(a, b) {
        0 === (b.mode & 1) && null !== a && (a.alternate = null, b.alternate = null, b.flags |= 2);
      }
      __name(ij, "ij");
      function Zi(a, b, c) {
        null !== a && (b.dependencies = a.dependencies);
        rh |= b.lanes;
        if (0 === (c & b.childLanes)) return null;
        if (null !== a && b.child !== a.child) throw Error(p2(153));
        if (null !== b.child) {
          a = b.child;
          c = Pg(a, a.pendingProps);
          b.child = c;
          for (c.return = b; null !== a.sibling; ) a = a.sibling, c = c.sibling = Pg(a, a.pendingProps), c.return = b;
          c.sibling = null;
        }
        return b.child;
      }
      __name(Zi, "Zi");
      function yj(a, b, c) {
        switch (b.tag) {
          case 3:
            kj(b);
            Ig();
            break;
          case 5:
            Ah(b);
            break;
          case 1:
            Zf(b.type) && cg(b);
            break;
          case 4:
            yh(b, b.stateNode.containerInfo);
            break;
          case 10:
            var d = b.type._context, e = b.memoizedProps.value;
            G2(Wg, d._currentValue);
            d._currentValue = e;
            break;
          case 13:
            d = b.memoizedState;
            if (null !== d) {
              if (null !== d.dehydrated) return G2(L2, L2.current & 1), b.flags |= 128, null;
              if (0 !== (c & b.child.childLanes)) return oj(a, b, c);
              G2(L2, L2.current & 1);
              a = Zi(a, b, c);
              return null !== a ? a.sibling : null;
            }
            G2(L2, L2.current & 1);
            break;
          case 19:
            d = 0 !== (c & b.childLanes);
            if (0 !== (a.flags & 128)) {
              if (d) return xj(a, b, c);
              b.flags |= 128;
            }
            e = b.memoizedState;
            null !== e && (e.rendering = null, e.tail = null, e.lastEffect = null);
            G2(L2, L2.current);
            if (d) break;
            else return null;
          case 22:
          case 23:
            return b.lanes = 0, dj(a, b, c);
        }
        return Zi(a, b, c);
      }
      __name(yj, "yj");
      var zj;
      var Aj;
      var Bj;
      var Cj;
      zj = /* @__PURE__ */ __name(function(a, b) {
        for (var c = b.child; null !== c; ) {
          if (5 === c.tag || 6 === c.tag) a.appendChild(c.stateNode);
          else if (4 !== c.tag && null !== c.child) {
            c.child.return = c;
            c = c.child;
            continue;
          }
          if (c === b) break;
          for (; null === c.sibling; ) {
            if (null === c.return || c.return === b) return;
            c = c.return;
          }
          c.sibling.return = c.return;
          c = c.sibling;
        }
      }, "zj");
      Aj = /* @__PURE__ */ __name(function() {
      }, "Aj");
      Bj = /* @__PURE__ */ __name(function(a, b, c, d) {
        var e = a.memoizedProps;
        if (e !== d) {
          a = b.stateNode;
          xh(uh.current);
          var f = null;
          switch (c) {
            case "input":
              e = Ya(a, e);
              d = Ya(a, d);
              f = [];
              break;
            case "select":
              e = A({}, e, { value: void 0 });
              d = A({}, d, { value: void 0 });
              f = [];
              break;
            case "textarea":
              e = gb(a, e);
              d = gb(a, d);
              f = [];
              break;
            default:
              "function" !== typeof e.onClick && "function" === typeof d.onClick && (a.onclick = Bf);
          }
          ub(c, d);
          var g;
          c = null;
          for (l in e) if (!d.hasOwnProperty(l) && e.hasOwnProperty(l) && null != e[l]) if ("style" === l) {
            var h = e[l];
            for (g in h) h.hasOwnProperty(g) && (c || (c = {}), c[g] = "");
          } else "dangerouslySetInnerHTML" !== l && "children" !== l && "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && "autoFocus" !== l && (ea.hasOwnProperty(l) ? f || (f = []) : (f = f || []).push(l, null));
          for (l in d) {
            var k3 = d[l];
            h = null != e ? e[l] : void 0;
            if (d.hasOwnProperty(l) && k3 !== h && (null != k3 || null != h)) if ("style" === l) if (h) {
              for (g in h) !h.hasOwnProperty(g) || k3 && k3.hasOwnProperty(g) || (c || (c = {}), c[g] = "");
              for (g in k3) k3.hasOwnProperty(g) && h[g] !== k3[g] && (c || (c = {}), c[g] = k3[g]);
            } else c || (f || (f = []), f.push(
              l,
              c
            )), c = k3;
            else "dangerouslySetInnerHTML" === l ? (k3 = k3 ? k3.__html : void 0, h = h ? h.__html : void 0, null != k3 && h !== k3 && (f = f || []).push(l, k3)) : "children" === l ? "string" !== typeof k3 && "number" !== typeof k3 || (f = f || []).push(l, "" + k3) : "suppressContentEditableWarning" !== l && "suppressHydrationWarning" !== l && (ea.hasOwnProperty(l) ? (null != k3 && "onScroll" === l && D2("scroll", a), f || h === k3 || (f = [])) : (f = f || []).push(l, k3));
          }
          c && (f = f || []).push("style", c);
          var l = f;
          if (b.updateQueue = l) b.flags |= 4;
        }
      }, "Bj");
      Cj = /* @__PURE__ */ __name(function(a, b, c, d) {
        c !== d && (b.flags |= 4);
      }, "Cj");
      function Dj(a, b) {
        if (!I) switch (a.tailMode) {
          case "hidden":
            b = a.tail;
            for (var c = null; null !== b; ) null !== b.alternate && (c = b), b = b.sibling;
            null === c ? a.tail = null : c.sibling = null;
            break;
          case "collapsed":
            c = a.tail;
            for (var d = null; null !== c; ) null !== c.alternate && (d = c), c = c.sibling;
            null === d ? b || null === a.tail ? a.tail = null : a.tail.sibling = null : d.sibling = null;
        }
      }
      __name(Dj, "Dj");
      function S(a) {
        var b = null !== a.alternate && a.alternate.child === a.child, c = 0, d = 0;
        if (b) for (var e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags & 14680064, d |= e.flags & 14680064, e.return = a, e = e.sibling;
        else for (e = a.child; null !== e; ) c |= e.lanes | e.childLanes, d |= e.subtreeFlags, d |= e.flags, e.return = a, e = e.sibling;
        a.subtreeFlags |= d;
        a.childLanes = c;
        return b;
      }
      __name(S, "S");
      function Ej(a, b, c) {
        var d = b.pendingProps;
        wg(b);
        switch (b.tag) {
          case 2:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return S(b), null;
          case 1:
            return Zf(b.type) && $f(), S(b), null;
          case 3:
            d = b.stateNode;
            zh();
            E(Wf);
            E(H2);
            Eh();
            d.pendingContext && (d.context = d.pendingContext, d.pendingContext = null);
            if (null === a || null === a.child) Gg(b) ? b.flags |= 4 : null === a || a.memoizedState.isDehydrated && 0 === (b.flags & 256) || (b.flags |= 1024, null !== zg && (Fj(zg), zg = null));
            Aj(a, b);
            S(b);
            return null;
          case 5:
            Bh(b);
            var e = xh(wh.current);
            c = b.type;
            if (null !== a && null != b.stateNode) Bj(a, b, c, d, e), a.ref !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            else {
              if (!d) {
                if (null === b.stateNode) throw Error(p2(166));
                S(b);
                return null;
              }
              a = xh(uh.current);
              if (Gg(b)) {
                d = b.stateNode;
                c = b.type;
                var f = b.memoizedProps;
                d[Of] = b;
                d[Pf] = f;
                a = 0 !== (b.mode & 1);
                switch (c) {
                  case "dialog":
                    D2("cancel", d);
                    D2("close", d);
                    break;
                  case "iframe":
                  case "object":
                  case "embed":
                    D2("load", d);
                    break;
                  case "video":
                  case "audio":
                    for (e = 0; e < lf.length; e++) D2(lf[e], d);
                    break;
                  case "source":
                    D2("error", d);
                    break;
                  case "img":
                  case "image":
                  case "link":
                    D2(
                      "error",
                      d
                    );
                    D2("load", d);
                    break;
                  case "details":
                    D2("toggle", d);
                    break;
                  case "input":
                    Za(d, f);
                    D2("invalid", d);
                    break;
                  case "select":
                    d._wrapperState = { wasMultiple: !!f.multiple };
                    D2("invalid", d);
                    break;
                  case "textarea":
                    hb(d, f), D2("invalid", d);
                }
                ub(c, f);
                e = null;
                for (var g in f) if (f.hasOwnProperty(g)) {
                  var h = f[g];
                  "children" === g ? "string" === typeof h ? d.textContent !== h && (true !== f.suppressHydrationWarning && Af(d.textContent, h, a), e = ["children", h]) : "number" === typeof h && d.textContent !== "" + h && (true !== f.suppressHydrationWarning && Af(
                    d.textContent,
                    h,
                    a
                  ), e = ["children", "" + h]) : ea.hasOwnProperty(g) && null != h && "onScroll" === g && D2("scroll", d);
                }
                switch (c) {
                  case "input":
                    Va(d);
                    db(d, f, true);
                    break;
                  case "textarea":
                    Va(d);
                    jb(d);
                    break;
                  case "select":
                  case "option":
                    break;
                  default:
                    "function" === typeof f.onClick && (d.onclick = Bf);
                }
                d = e;
                b.updateQueue = d;
                null !== d && (b.flags |= 4);
              } else {
                g = 9 === e.nodeType ? e : e.ownerDocument;
                "http://www.w3.org/1999/xhtml" === a && (a = kb(c));
                "http://www.w3.org/1999/xhtml" === a ? "script" === c ? (a = g.createElement("div"), a.innerHTML = "<script><\/script>", a = a.removeChild(a.firstChild)) : "string" === typeof d.is ? a = g.createElement(c, { is: d.is }) : (a = g.createElement(c), "select" === c && (g = a, d.multiple ? g.multiple = true : d.size && (g.size = d.size))) : a = g.createElementNS(a, c);
                a[Of] = b;
                a[Pf] = d;
                zj(a, b, false, false);
                b.stateNode = a;
                a: {
                  g = vb(c, d);
                  switch (c) {
                    case "dialog":
                      D2("cancel", a);
                      D2("close", a);
                      e = d;
                      break;
                    case "iframe":
                    case "object":
                    case "embed":
                      D2("load", a);
                      e = d;
                      break;
                    case "video":
                    case "audio":
                      for (e = 0; e < lf.length; e++) D2(lf[e], a);
                      e = d;
                      break;
                    case "source":
                      D2("error", a);
                      e = d;
                      break;
                    case "img":
                    case "image":
                    case "link":
                      D2(
                        "error",
                        a
                      );
                      D2("load", a);
                      e = d;
                      break;
                    case "details":
                      D2("toggle", a);
                      e = d;
                      break;
                    case "input":
                      Za(a, d);
                      e = Ya(a, d);
                      D2("invalid", a);
                      break;
                    case "option":
                      e = d;
                      break;
                    case "select":
                      a._wrapperState = { wasMultiple: !!d.multiple };
                      e = A({}, d, { value: void 0 });
                      D2("invalid", a);
                      break;
                    case "textarea":
                      hb(a, d);
                      e = gb(a, d);
                      D2("invalid", a);
                      break;
                    default:
                      e = d;
                  }
                  ub(c, e);
                  h = e;
                  for (f in h) if (h.hasOwnProperty(f)) {
                    var k3 = h[f];
                    "style" === f ? sb(a, k3) : "dangerouslySetInnerHTML" === f ? (k3 = k3 ? k3.__html : void 0, null != k3 && nb(a, k3)) : "children" === f ? "string" === typeof k3 ? ("textarea" !== c || "" !== k3) && ob(a, k3) : "number" === typeof k3 && ob(a, "" + k3) : "suppressContentEditableWarning" !== f && "suppressHydrationWarning" !== f && "autoFocus" !== f && (ea.hasOwnProperty(f) ? null != k3 && "onScroll" === f && D2("scroll", a) : null != k3 && ta(a, f, k3, g));
                  }
                  switch (c) {
                    case "input":
                      Va(a);
                      db(a, d, false);
                      break;
                    case "textarea":
                      Va(a);
                      jb(a);
                      break;
                    case "option":
                      null != d.value && a.setAttribute("value", "" + Sa(d.value));
                      break;
                    case "select":
                      a.multiple = !!d.multiple;
                      f = d.value;
                      null != f ? fb(a, !!d.multiple, f, false) : null != d.defaultValue && fb(
                        a,
                        !!d.multiple,
                        d.defaultValue,
                        true
                      );
                      break;
                    default:
                      "function" === typeof e.onClick && (a.onclick = Bf);
                  }
                  switch (c) {
                    case "button":
                    case "input":
                    case "select":
                    case "textarea":
                      d = !!d.autoFocus;
                      break a;
                    case "img":
                      d = true;
                      break a;
                    default:
                      d = false;
                  }
                }
                d && (b.flags |= 4);
              }
              null !== b.ref && (b.flags |= 512, b.flags |= 2097152);
            }
            S(b);
            return null;
          case 6:
            if (a && null != b.stateNode) Cj(a, b, a.memoizedProps, d);
            else {
              if ("string" !== typeof d && null === b.stateNode) throw Error(p2(166));
              c = xh(wh.current);
              xh(uh.current);
              if (Gg(b)) {
                d = b.stateNode;
                c = b.memoizedProps;
                d[Of] = b;
                if (f = d.nodeValue !== c) {
                  if (a = xg, null !== a) switch (a.tag) {
                    case 3:
                      Af(d.nodeValue, c, 0 !== (a.mode & 1));
                      break;
                    case 5:
                      true !== a.memoizedProps.suppressHydrationWarning && Af(d.nodeValue, c, 0 !== (a.mode & 1));
                  }
                }
                f && (b.flags |= 4);
              } else d = (9 === c.nodeType ? c : c.ownerDocument).createTextNode(d), d[Of] = b, b.stateNode = d;
            }
            S(b);
            return null;
          case 13:
            E(L2);
            d = b.memoizedState;
            if (null === a || null !== a.memoizedState && null !== a.memoizedState.dehydrated) {
              if (I && null !== yg && 0 !== (b.mode & 1) && 0 === (b.flags & 128)) Hg(), Ig(), b.flags |= 98560, f = false;
              else if (f = Gg(b), null !== d && null !== d.dehydrated) {
                if (null === a) {
                  if (!f) throw Error(p2(318));
                  f = b.memoizedState;
                  f = null !== f ? f.dehydrated : null;
                  if (!f) throw Error(p2(317));
                  f[Of] = b;
                } else Ig(), 0 === (b.flags & 128) && (b.memoizedState = null), b.flags |= 4;
                S(b);
                f = false;
              } else null !== zg && (Fj(zg), zg = null), f = true;
              if (!f) return b.flags & 65536 ? b : null;
            }
            if (0 !== (b.flags & 128)) return b.lanes = c, b;
            d = null !== d;
            d !== (null !== a && null !== a.memoizedState) && d && (b.child.flags |= 8192, 0 !== (b.mode & 1) && (null === a || 0 !== (L2.current & 1) ? 0 === T2 && (T2 = 3) : tj()));
            null !== b.updateQueue && (b.flags |= 4);
            S(b);
            return null;
          case 4:
            return zh(), Aj(a, b), null === a && sf(b.stateNode.containerInfo), S(b), null;
          case 10:
            return ah(b.type._context), S(b), null;
          case 17:
            return Zf(b.type) && $f(), S(b), null;
          case 19:
            E(L2);
            f = b.memoizedState;
            if (null === f) return S(b), null;
            d = 0 !== (b.flags & 128);
            g = f.rendering;
            if (null === g) if (d) Dj(f, false);
            else {
              if (0 !== T2 || null !== a && 0 !== (a.flags & 128)) for (a = b.child; null !== a; ) {
                g = Ch(a);
                if (null !== g) {
                  b.flags |= 128;
                  Dj(f, false);
                  d = g.updateQueue;
                  null !== d && (b.updateQueue = d, b.flags |= 4);
                  b.subtreeFlags = 0;
                  d = c;
                  for (c = b.child; null !== c; ) f = c, a = d, f.flags &= 14680066, g = f.alternate, null === g ? (f.childLanes = 0, f.lanes = a, f.child = null, f.subtreeFlags = 0, f.memoizedProps = null, f.memoizedState = null, f.updateQueue = null, f.dependencies = null, f.stateNode = null) : (f.childLanes = g.childLanes, f.lanes = g.lanes, f.child = g.child, f.subtreeFlags = 0, f.deletions = null, f.memoizedProps = g.memoizedProps, f.memoizedState = g.memoizedState, f.updateQueue = g.updateQueue, f.type = g.type, a = g.dependencies, f.dependencies = null === a ? null : { lanes: a.lanes, firstContext: a.firstContext }), c = c.sibling;
                  G2(L2, L2.current & 1 | 2);
                  return b.child;
                }
                a = a.sibling;
              }
              null !== f.tail && B3() > Gj && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
            }
            else {
              if (!d) if (a = Ch(g), null !== a) {
                if (b.flags |= 128, d = true, c = a.updateQueue, null !== c && (b.updateQueue = c, b.flags |= 4), Dj(f, true), null === f.tail && "hidden" === f.tailMode && !g.alternate && !I) return S(b), null;
              } else 2 * B3() - f.renderingStartTime > Gj && 1073741824 !== c && (b.flags |= 128, d = true, Dj(f, false), b.lanes = 4194304);
              f.isBackwards ? (g.sibling = b.child, b.child = g) : (c = f.last, null !== c ? c.sibling = g : b.child = g, f.last = g);
            }
            if (null !== f.tail) return b = f.tail, f.rendering = b, f.tail = b.sibling, f.renderingStartTime = B3(), b.sibling = null, c = L2.current, G2(L2, d ? c & 1 | 2 : c & 1), b;
            S(b);
            return null;
          case 22:
          case 23:
            return Hj(), d = null !== b.memoizedState, null !== a && null !== a.memoizedState !== d && (b.flags |= 8192), d && 0 !== (b.mode & 1) ? 0 !== (fj & 1073741824) && (S(b), b.subtreeFlags & 6 && (b.flags |= 8192)) : S(b), null;
          case 24:
            return null;
          case 25:
            return null;
        }
        throw Error(p2(156, b.tag));
      }
      __name(Ej, "Ej");
      function Ij(a, b) {
        wg(b);
        switch (b.tag) {
          case 1:
            return Zf(b.type) && $f(), a = b.flags, a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
          case 3:
            return zh(), E(Wf), E(H2), Eh(), a = b.flags, 0 !== (a & 65536) && 0 === (a & 128) ? (b.flags = a & -65537 | 128, b) : null;
          case 5:
            return Bh(b), null;
          case 13:
            E(L2);
            a = b.memoizedState;
            if (null !== a && null !== a.dehydrated) {
              if (null === b.alternate) throw Error(p2(340));
              Ig();
            }
            a = b.flags;
            return a & 65536 ? (b.flags = a & -65537 | 128, b) : null;
          case 19:
            return E(L2), null;
          case 4:
            return zh(), null;
          case 10:
            return ah(b.type._context), null;
          case 22:
          case 23:
            return Hj(), null;
          case 24:
            return null;
          default:
            return null;
        }
      }
      __name(Ij, "Ij");
      var Jj = false;
      var U2 = false;
      var Kj = "function" === typeof WeakSet ? WeakSet : Set;
      var V = null;
      function Lj(a, b) {
        var c = a.ref;
        if (null !== c) if ("function" === typeof c) try {
          c(null);
        } catch (d) {
          W2(a, b, d);
        }
        else c.current = null;
      }
      __name(Lj, "Lj");
      function Mj(a, b, c) {
        try {
          c();
        } catch (d) {
          W2(a, b, d);
        }
      }
      __name(Mj, "Mj");
      var Nj = false;
      function Oj(a, b) {
        Cf = dd;
        a = Me2();
        if (Ne(a)) {
          if ("selectionStart" in a) var c = { start: a.selectionStart, end: a.selectionEnd };
          else a: {
            c = (c = a.ownerDocument) && c.defaultView || window;
            var d = c.getSelection && c.getSelection();
            if (d && 0 !== d.rangeCount) {
              c = d.anchorNode;
              var e = d.anchorOffset, f = d.focusNode;
              d = d.focusOffset;
              try {
                c.nodeType, f.nodeType;
              } catch (F) {
                c = null;
                break a;
              }
              var g = 0, h = -1, k3 = -1, l = 0, m2 = 0, q = a, r3 = null;
              b: for (; ; ) {
                for (var y; ; ) {
                  q !== c || 0 !== e && 3 !== q.nodeType || (h = g + e);
                  q !== f || 0 !== d && 3 !== q.nodeType || (k3 = g + d);
                  3 === q.nodeType && (g += q.nodeValue.length);
                  if (null === (y = q.firstChild)) break;
                  r3 = q;
                  q = y;
                }
                for (; ; ) {
                  if (q === a) break b;
                  r3 === c && ++l === e && (h = g);
                  r3 === f && ++m2 === d && (k3 = g);
                  if (null !== (y = q.nextSibling)) break;
                  q = r3;
                  r3 = q.parentNode;
                }
                q = y;
              }
              c = -1 === h || -1 === k3 ? null : { start: h, end: k3 };
            } else c = null;
          }
          c = c || { start: 0, end: 0 };
        } else c = null;
        Df = { focusedElem: a, selectionRange: c };
        dd = false;
        for (V = b; null !== V; ) if (b = V, a = b.child, 0 !== (b.subtreeFlags & 1028) && null !== a) a.return = b, V = a;
        else for (; null !== V; ) {
          b = V;
          try {
            var n2 = b.alternate;
            if (0 !== (b.flags & 1024)) switch (b.tag) {
              case 0:
              case 11:
              case 15:
                break;
              case 1:
                if (null !== n2) {
                  var t3 = n2.memoizedProps, J2 = n2.memoizedState, x = b.stateNode, w = x.getSnapshotBeforeUpdate(b.elementType === b.type ? t3 : Ci(b.type, t3), J2);
                  x.__reactInternalSnapshotBeforeUpdate = w;
                }
                break;
              case 3:
                var u2 = b.stateNode.containerInfo;
                1 === u2.nodeType ? u2.textContent = "" : 9 === u2.nodeType && u2.documentElement && u2.removeChild(u2.documentElement);
                break;
              case 5:
              case 6:
              case 4:
              case 17:
                break;
              default:
                throw Error(p2(163));
            }
          } catch (F) {
            W2(b, b.return, F);
          }
          a = b.sibling;
          if (null !== a) {
            a.return = b.return;
            V = a;
            break;
          }
          V = b.return;
        }
        n2 = Nj;
        Nj = false;
        return n2;
      }
      __name(Oj, "Oj");
      function Pj(a, b, c) {
        var d = b.updateQueue;
        d = null !== d ? d.lastEffect : null;
        if (null !== d) {
          var e = d = d.next;
          do {
            if ((e.tag & a) === a) {
              var f = e.destroy;
              e.destroy = void 0;
              void 0 !== f && Mj(b, c, f);
            }
            e = e.next;
          } while (e !== d);
        }
      }
      __name(Pj, "Pj");
      function Qj(a, b) {
        b = b.updateQueue;
        b = null !== b ? b.lastEffect : null;
        if (null !== b) {
          var c = b = b.next;
          do {
            if ((c.tag & a) === a) {
              var d = c.create;
              c.destroy = d();
            }
            c = c.next;
          } while (c !== b);
        }
      }
      __name(Qj, "Qj");
      function Rj(a) {
        var b = a.ref;
        if (null !== b) {
          var c = a.stateNode;
          switch (a.tag) {
            case 5:
              a = c;
              break;
            default:
              a = c;
          }
          "function" === typeof b ? b(a) : b.current = a;
        }
      }
      __name(Rj, "Rj");
      function Sj(a) {
        var b = a.alternate;
        null !== b && (a.alternate = null, Sj(b));
        a.child = null;
        a.deletions = null;
        a.sibling = null;
        5 === a.tag && (b = a.stateNode, null !== b && (delete b[Of], delete b[Pf], delete b[of], delete b[Qf], delete b[Rf]));
        a.stateNode = null;
        a.return = null;
        a.dependencies = null;
        a.memoizedProps = null;
        a.memoizedState = null;
        a.pendingProps = null;
        a.stateNode = null;
        a.updateQueue = null;
      }
      __name(Sj, "Sj");
      function Tj(a) {
        return 5 === a.tag || 3 === a.tag || 4 === a.tag;
      }
      __name(Tj, "Tj");
      function Uj(a) {
        a: for (; ; ) {
          for (; null === a.sibling; ) {
            if (null === a.return || Tj(a.return)) return null;
            a = a.return;
          }
          a.sibling.return = a.return;
          for (a = a.sibling; 5 !== a.tag && 6 !== a.tag && 18 !== a.tag; ) {
            if (a.flags & 2) continue a;
            if (null === a.child || 4 === a.tag) continue a;
            else a.child.return = a, a = a.child;
          }
          if (!(a.flags & 2)) return a.stateNode;
        }
      }
      __name(Uj, "Uj");
      function Vj(a, b, c) {
        var d = a.tag;
        if (5 === d || 6 === d) a = a.stateNode, b ? 8 === c.nodeType ? c.parentNode.insertBefore(a, b) : c.insertBefore(a, b) : (8 === c.nodeType ? (b = c.parentNode, b.insertBefore(a, c)) : (b = c, b.appendChild(a)), c = c._reactRootContainer, null !== c && void 0 !== c || null !== b.onclick || (b.onclick = Bf));
        else if (4 !== d && (a = a.child, null !== a)) for (Vj(a, b, c), a = a.sibling; null !== a; ) Vj(a, b, c), a = a.sibling;
      }
      __name(Vj, "Vj");
      function Wj(a, b, c) {
        var d = a.tag;
        if (5 === d || 6 === d) a = a.stateNode, b ? c.insertBefore(a, b) : c.appendChild(a);
        else if (4 !== d && (a = a.child, null !== a)) for (Wj(a, b, c), a = a.sibling; null !== a; ) Wj(a, b, c), a = a.sibling;
      }
      __name(Wj, "Wj");
      var X5 = null;
      var Xj = false;
      function Yj(a, b, c) {
        for (c = c.child; null !== c; ) Zj(a, b, c), c = c.sibling;
      }
      __name(Yj, "Yj");
      function Zj(a, b, c) {
        if (lc && "function" === typeof lc.onCommitFiberUnmount) try {
          lc.onCommitFiberUnmount(kc, c);
        } catch (h) {
        }
        switch (c.tag) {
          case 5:
            U2 || Lj(c, b);
          case 6:
            var d = X5, e = Xj;
            X5 = null;
            Yj(a, b, c);
            X5 = d;
            Xj = e;
            null !== X5 && (Xj ? (a = X5, c = c.stateNode, 8 === a.nodeType ? a.parentNode.removeChild(c) : a.removeChild(c)) : X5.removeChild(c.stateNode));
            break;
          case 18:
            null !== X5 && (Xj ? (a = X5, c = c.stateNode, 8 === a.nodeType ? Kf(a.parentNode, c) : 1 === a.nodeType && Kf(a, c), bd(a)) : Kf(X5, c.stateNode));
            break;
          case 4:
            d = X5;
            e = Xj;
            X5 = c.stateNode.containerInfo;
            Xj = true;
            Yj(a, b, c);
            X5 = d;
            Xj = e;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            if (!U2 && (d = c.updateQueue, null !== d && (d = d.lastEffect, null !== d))) {
              e = d = d.next;
              do {
                var f = e, g = f.destroy;
                f = f.tag;
                void 0 !== g && (0 !== (f & 2) ? Mj(c, b, g) : 0 !== (f & 4) && Mj(c, b, g));
                e = e.next;
              } while (e !== d);
            }
            Yj(a, b, c);
            break;
          case 1:
            if (!U2 && (Lj(c, b), d = c.stateNode, "function" === typeof d.componentWillUnmount)) try {
              d.props = c.memoizedProps, d.state = c.memoizedState, d.componentWillUnmount();
            } catch (h) {
              W2(c, b, h);
            }
            Yj(a, b, c);
            break;
          case 21:
            Yj(a, b, c);
            break;
          case 22:
            c.mode & 1 ? (U2 = (d = U2) || null !== c.memoizedState, Yj(a, b, c), U2 = d) : Yj(a, b, c);
            break;
          default:
            Yj(a, b, c);
        }
      }
      __name(Zj, "Zj");
      function ak(a) {
        var b = a.updateQueue;
        if (null !== b) {
          a.updateQueue = null;
          var c = a.stateNode;
          null === c && (c = a.stateNode = new Kj());
          b.forEach(function(b2) {
            var d = bk.bind(null, a, b2);
            c.has(b2) || (c.add(b2), b2.then(d, d));
          });
        }
      }
      __name(ak, "ak");
      function ck(a, b) {
        var c = b.deletions;
        if (null !== c) for (var d = 0; d < c.length; d++) {
          var e = c[d];
          try {
            var f = a, g = b, h = g;
            a: for (; null !== h; ) {
              switch (h.tag) {
                case 5:
                  X5 = h.stateNode;
                  Xj = false;
                  break a;
                case 3:
                  X5 = h.stateNode.containerInfo;
                  Xj = true;
                  break a;
                case 4:
                  X5 = h.stateNode.containerInfo;
                  Xj = true;
                  break a;
              }
              h = h.return;
            }
            if (null === X5) throw Error(p2(160));
            Zj(f, g, e);
            X5 = null;
            Xj = false;
            var k3 = e.alternate;
            null !== k3 && (k3.return = null);
            e.return = null;
          } catch (l) {
            W2(e, b, l);
          }
        }
        if (b.subtreeFlags & 12854) for (b = b.child; null !== b; ) dk(b, a), b = b.sibling;
      }
      __name(ck, "ck");
      function dk(a, b) {
        var c = a.alternate, d = a.flags;
        switch (a.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            ck(b, a);
            ek(a);
            if (d & 4) {
              try {
                Pj(3, a, a.return), Qj(3, a);
              } catch (t3) {
                W2(a, a.return, t3);
              }
              try {
                Pj(5, a, a.return);
              } catch (t3) {
                W2(a, a.return, t3);
              }
            }
            break;
          case 1:
            ck(b, a);
            ek(a);
            d & 512 && null !== c && Lj(c, c.return);
            break;
          case 5:
            ck(b, a);
            ek(a);
            d & 512 && null !== c && Lj(c, c.return);
            if (a.flags & 32) {
              var e = a.stateNode;
              try {
                ob(e, "");
              } catch (t3) {
                W2(a, a.return, t3);
              }
            }
            if (d & 4 && (e = a.stateNode, null != e)) {
              var f = a.memoizedProps, g = null !== c ? c.memoizedProps : f, h = a.type, k3 = a.updateQueue;
              a.updateQueue = null;
              if (null !== k3) try {
                "input" === h && "radio" === f.type && null != f.name && ab(e, f);
                vb(h, g);
                var l = vb(h, f);
                for (g = 0; g < k3.length; g += 2) {
                  var m2 = k3[g], q = k3[g + 1];
                  "style" === m2 ? sb(e, q) : "dangerouslySetInnerHTML" === m2 ? nb(e, q) : "children" === m2 ? ob(e, q) : ta(e, m2, q, l);
                }
                switch (h) {
                  case "input":
                    bb(e, f);
                    break;
                  case "textarea":
                    ib(e, f);
                    break;
                  case "select":
                    var r3 = e._wrapperState.wasMultiple;
                    e._wrapperState.wasMultiple = !!f.multiple;
                    var y = f.value;
                    null != y ? fb(e, !!f.multiple, y, false) : r3 !== !!f.multiple && (null != f.defaultValue ? fb(
                      e,
                      !!f.multiple,
                      f.defaultValue,
                      true
                    ) : fb(e, !!f.multiple, f.multiple ? [] : "", false));
                }
                e[Pf] = f;
              } catch (t3) {
                W2(a, a.return, t3);
              }
            }
            break;
          case 6:
            ck(b, a);
            ek(a);
            if (d & 4) {
              if (null === a.stateNode) throw Error(p2(162));
              e = a.stateNode;
              f = a.memoizedProps;
              try {
                e.nodeValue = f;
              } catch (t3) {
                W2(a, a.return, t3);
              }
            }
            break;
          case 3:
            ck(b, a);
            ek(a);
            if (d & 4 && null !== c && c.memoizedState.isDehydrated) try {
              bd(b.containerInfo);
            } catch (t3) {
              W2(a, a.return, t3);
            }
            break;
          case 4:
            ck(b, a);
            ek(a);
            break;
          case 13:
            ck(b, a);
            ek(a);
            e = a.child;
            e.flags & 8192 && (f = null !== e.memoizedState, e.stateNode.isHidden = f, !f || null !== e.alternate && null !== e.alternate.memoizedState || (fk = B3()));
            d & 4 && ak(a);
            break;
          case 22:
            m2 = null !== c && null !== c.memoizedState;
            a.mode & 1 ? (U2 = (l = U2) || m2, ck(b, a), U2 = l) : ck(b, a);
            ek(a);
            if (d & 8192) {
              l = null !== a.memoizedState;
              if ((a.stateNode.isHidden = l) && !m2 && 0 !== (a.mode & 1)) for (V = a, m2 = a.child; null !== m2; ) {
                for (q = V = m2; null !== V; ) {
                  r3 = V;
                  y = r3.child;
                  switch (r3.tag) {
                    case 0:
                    case 11:
                    case 14:
                    case 15:
                      Pj(4, r3, r3.return);
                      break;
                    case 1:
                      Lj(r3, r3.return);
                      var n2 = r3.stateNode;
                      if ("function" === typeof n2.componentWillUnmount) {
                        d = r3;
                        c = r3.return;
                        try {
                          b = d, n2.props = b.memoizedProps, n2.state = b.memoizedState, n2.componentWillUnmount();
                        } catch (t3) {
                          W2(d, c, t3);
                        }
                      }
                      break;
                    case 5:
                      Lj(r3, r3.return);
                      break;
                    case 22:
                      if (null !== r3.memoizedState) {
                        gk(q);
                        continue;
                      }
                  }
                  null !== y ? (y.return = r3, V = y) : gk(q);
                }
                m2 = m2.sibling;
              }
              a: for (m2 = null, q = a; ; ) {
                if (5 === q.tag) {
                  if (null === m2) {
                    m2 = q;
                    try {
                      e = q.stateNode, l ? (f = e.style, "function" === typeof f.setProperty ? f.setProperty("display", "none", "important") : f.display = "none") : (h = q.stateNode, k3 = q.memoizedProps.style, g = void 0 !== k3 && null !== k3 && k3.hasOwnProperty("display") ? k3.display : null, h.style.display = rb("display", g));
                    } catch (t3) {
                      W2(a, a.return, t3);
                    }
                  }
                } else if (6 === q.tag) {
                  if (null === m2) try {
                    q.stateNode.nodeValue = l ? "" : q.memoizedProps;
                  } catch (t3) {
                    W2(a, a.return, t3);
                  }
                } else if ((22 !== q.tag && 23 !== q.tag || null === q.memoizedState || q === a) && null !== q.child) {
                  q.child.return = q;
                  q = q.child;
                  continue;
                }
                if (q === a) break a;
                for (; null === q.sibling; ) {
                  if (null === q.return || q.return === a) break a;
                  m2 === q && (m2 = null);
                  q = q.return;
                }
                m2 === q && (m2 = null);
                q.sibling.return = q.return;
                q = q.sibling;
              }
            }
            break;
          case 19:
            ck(b, a);
            ek(a);
            d & 4 && ak(a);
            break;
          case 21:
            break;
          default:
            ck(
              b,
              a
            ), ek(a);
        }
      }
      __name(dk, "dk");
      function ek(a) {
        var b = a.flags;
        if (b & 2) {
          try {
            a: {
              for (var c = a.return; null !== c; ) {
                if (Tj(c)) {
                  var d = c;
                  break a;
                }
                c = c.return;
              }
              throw Error(p2(160));
            }
            switch (d.tag) {
              case 5:
                var e = d.stateNode;
                d.flags & 32 && (ob(e, ""), d.flags &= -33);
                var f = Uj(a);
                Wj(a, f, e);
                break;
              case 3:
              case 4:
                var g = d.stateNode.containerInfo, h = Uj(a);
                Vj(a, h, g);
                break;
              default:
                throw Error(p2(161));
            }
          } catch (k3) {
            W2(a, a.return, k3);
          }
          a.flags &= -3;
        }
        b & 4096 && (a.flags &= -4097);
      }
      __name(ek, "ek");
      function hk(a, b, c) {
        V = a;
        ik(a, b, c);
      }
      __name(hk, "hk");
      function ik(a, b, c) {
        for (var d = 0 !== (a.mode & 1); null !== V; ) {
          var e = V, f = e.child;
          if (22 === e.tag && d) {
            var g = null !== e.memoizedState || Jj;
            if (!g) {
              var h = e.alternate, k3 = null !== h && null !== h.memoizedState || U2;
              h = Jj;
              var l = U2;
              Jj = g;
              if ((U2 = k3) && !l) for (V = e; null !== V; ) g = V, k3 = g.child, 22 === g.tag && null !== g.memoizedState ? jk(e) : null !== k3 ? (k3.return = g, V = k3) : jk(e);
              for (; null !== f; ) V = f, ik(f, b, c), f = f.sibling;
              V = e;
              Jj = h;
              U2 = l;
            }
            kk(a, b, c);
          } else 0 !== (e.subtreeFlags & 8772) && null !== f ? (f.return = e, V = f) : kk(a, b, c);
        }
      }
      __name(ik, "ik");
      function kk(a) {
        for (; null !== V; ) {
          var b = V;
          if (0 !== (b.flags & 8772)) {
            var c = b.alternate;
            try {
              if (0 !== (b.flags & 8772)) switch (b.tag) {
                case 0:
                case 11:
                case 15:
                  U2 || Qj(5, b);
                  break;
                case 1:
                  var d = b.stateNode;
                  if (b.flags & 4 && !U2) if (null === c) d.componentDidMount();
                  else {
                    var e = b.elementType === b.type ? c.memoizedProps : Ci(b.type, c.memoizedProps);
                    d.componentDidUpdate(e, c.memoizedState, d.__reactInternalSnapshotBeforeUpdate);
                  }
                  var f = b.updateQueue;
                  null !== f && sh(b, f, d);
                  break;
                case 3:
                  var g = b.updateQueue;
                  if (null !== g) {
                    c = null;
                    if (null !== b.child) switch (b.child.tag) {
                      case 5:
                        c = b.child.stateNode;
                        break;
                      case 1:
                        c = b.child.stateNode;
                    }
                    sh(b, g, c);
                  }
                  break;
                case 5:
                  var h = b.stateNode;
                  if (null === c && b.flags & 4) {
                    c = h;
                    var k3 = b.memoizedProps;
                    switch (b.type) {
                      case "button":
                      case "input":
                      case "select":
                      case "textarea":
                        k3.autoFocus && c.focus();
                        break;
                      case "img":
                        k3.src && (c.src = k3.src);
                    }
                  }
                  break;
                case 6:
                  break;
                case 4:
                  break;
                case 12:
                  break;
                case 13:
                  if (null === b.memoizedState) {
                    var l = b.alternate;
                    if (null !== l) {
                      var m2 = l.memoizedState;
                      if (null !== m2) {
                        var q = m2.dehydrated;
                        null !== q && bd(q);
                      }
                    }
                  }
                  break;
                case 19:
                case 17:
                case 21:
                case 22:
                case 23:
                case 25:
                  break;
                default:
                  throw Error(p2(163));
              }
              U2 || b.flags & 512 && Rj(b);
            } catch (r3) {
              W2(b, b.return, r3);
            }
          }
          if (b === a) {
            V = null;
            break;
          }
          c = b.sibling;
          if (null !== c) {
            c.return = b.return;
            V = c;
            break;
          }
          V = b.return;
        }
      }
      __name(kk, "kk");
      function gk(a) {
        for (; null !== V; ) {
          var b = V;
          if (b === a) {
            V = null;
            break;
          }
          var c = b.sibling;
          if (null !== c) {
            c.return = b.return;
            V = c;
            break;
          }
          V = b.return;
        }
      }
      __name(gk, "gk");
      function jk(a) {
        for (; null !== V; ) {
          var b = V;
          try {
            switch (b.tag) {
              case 0:
              case 11:
              case 15:
                var c = b.return;
                try {
                  Qj(4, b);
                } catch (k3) {
                  W2(b, c, k3);
                }
                break;
              case 1:
                var d = b.stateNode;
                if ("function" === typeof d.componentDidMount) {
                  var e = b.return;
                  try {
                    d.componentDidMount();
                  } catch (k3) {
                    W2(b, e, k3);
                  }
                }
                var f = b.return;
                try {
                  Rj(b);
                } catch (k3) {
                  W2(b, f, k3);
                }
                break;
              case 5:
                var g = b.return;
                try {
                  Rj(b);
                } catch (k3) {
                  W2(b, g, k3);
                }
            }
          } catch (k3) {
            W2(b, b.return, k3);
          }
          if (b === a) {
            V = null;
            break;
          }
          var h = b.sibling;
          if (null !== h) {
            h.return = b.return;
            V = h;
            break;
          }
          V = b.return;
        }
      }
      __name(jk, "jk");
      var lk = Math.ceil;
      var mk = ua.ReactCurrentDispatcher;
      var nk = ua.ReactCurrentOwner;
      var ok = ua.ReactCurrentBatchConfig;
      var K3 = 0;
      var Q = null;
      var Y3 = null;
      var Z2 = 0;
      var fj = 0;
      var ej = Uf(0);
      var T2 = 0;
      var pk = null;
      var rh = 0;
      var qk = 0;
      var rk = 0;
      var sk = null;
      var tk = null;
      var fk = 0;
      var Gj = Infinity;
      var uk = null;
      var Oi = false;
      var Pi = null;
      var Ri = null;
      var vk = false;
      var wk = null;
      var xk = 0;
      var yk = 0;
      var zk = null;
      var Ak = -1;
      var Bk = 0;
      function R() {
        return 0 !== (K3 & 6) ? B3() : -1 !== Ak ? Ak : Ak = B3();
      }
      __name(R, "R");
      function yi(a) {
        if (0 === (a.mode & 1)) return 1;
        if (0 !== (K3 & 2) && 0 !== Z2) return Z2 & -Z2;
        if (null !== Kg.transition) return 0 === Bk && (Bk = yc()), Bk;
        a = C;
        if (0 !== a) return a;
        a = window.event;
        a = void 0 === a ? 16 : jd(a.type);
        return a;
      }
      __name(yi, "yi");
      function gi(a, b, c, d) {
        if (50 < yk) throw yk = 0, zk = null, Error(p2(185));
        Ac(a, c, d);
        if (0 === (K3 & 2) || a !== Q) a === Q && (0 === (K3 & 2) && (qk |= c), 4 === T2 && Ck(a, Z2)), Dk(a, d), 1 === c && 0 === K3 && 0 === (b.mode & 1) && (Gj = B3() + 500, fg && jg());
      }
      __name(gi, "gi");
      function Dk(a, b) {
        var c = a.callbackNode;
        wc(a, b);
        var d = uc(a, a === Q ? Z2 : 0);
        if (0 === d) null !== c && bc(c), a.callbackNode = null, a.callbackPriority = 0;
        else if (b = d & -d, a.callbackPriority !== b) {
          null != c && bc(c);
          if (1 === b) 0 === a.tag ? ig(Ek.bind(null, a)) : hg(Ek.bind(null, a)), Jf(function() {
            0 === (K3 & 6) && jg();
          }), c = null;
          else {
            switch (Dc(d)) {
              case 1:
                c = fc;
                break;
              case 4:
                c = gc;
                break;
              case 16:
                c = hc;
                break;
              case 536870912:
                c = jc;
                break;
              default:
                c = hc;
            }
            c = Fk(c, Gk.bind(null, a));
          }
          a.callbackPriority = b;
          a.callbackNode = c;
        }
      }
      __name(Dk, "Dk");
      function Gk(a, b) {
        Ak = -1;
        Bk = 0;
        if (0 !== (K3 & 6)) throw Error(p2(327));
        var c = a.callbackNode;
        if (Hk() && a.callbackNode !== c) return null;
        var d = uc(a, a === Q ? Z2 : 0);
        if (0 === d) return null;
        if (0 !== (d & 30) || 0 !== (d & a.expiredLanes) || b) b = Ik(a, d);
        else {
          b = d;
          var e = K3;
          K3 |= 2;
          var f = Jk();
          if (Q !== a || Z2 !== b) uk = null, Gj = B3() + 500, Kk(a, b);
          do
            try {
              Lk();
              break;
            } catch (h) {
              Mk(a, h);
            }
          while (1);
          $g();
          mk.current = f;
          K3 = e;
          null !== Y3 ? b = 0 : (Q = null, Z2 = 0, b = T2);
        }
        if (0 !== b) {
          2 === b && (e = xc(a), 0 !== e && (d = e, b = Nk(a, e)));
          if (1 === b) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B3()), c;
          if (6 === b) Ck(a, d);
          else {
            e = a.current.alternate;
            if (0 === (d & 30) && !Ok(e) && (b = Ik(a, d), 2 === b && (f = xc(a), 0 !== f && (d = f, b = Nk(a, f))), 1 === b)) throw c = pk, Kk(a, 0), Ck(a, d), Dk(a, B3()), c;
            a.finishedWork = e;
            a.finishedLanes = d;
            switch (b) {
              case 0:
              case 1:
                throw Error(p2(345));
              case 2:
                Pk(a, tk, uk);
                break;
              case 3:
                Ck(a, d);
                if ((d & 130023424) === d && (b = fk + 500 - B3(), 10 < b)) {
                  if (0 !== uc(a, 0)) break;
                  e = a.suspendedLanes;
                  if ((e & d) !== d) {
                    R();
                    a.pingedLanes |= a.suspendedLanes & e;
                    break;
                  }
                  a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), b);
                  break;
                }
                Pk(a, tk, uk);
                break;
              case 4:
                Ck(a, d);
                if ((d & 4194240) === d) break;
                b = a.eventTimes;
                for (e = -1; 0 < d; ) {
                  var g = 31 - oc(d);
                  f = 1 << g;
                  g = b[g];
                  g > e && (e = g);
                  d &= ~f;
                }
                d = e;
                d = B3() - d;
                d = (120 > d ? 120 : 480 > d ? 480 : 1080 > d ? 1080 : 1920 > d ? 1920 : 3e3 > d ? 3e3 : 4320 > d ? 4320 : 1960 * lk(d / 1960)) - d;
                if (10 < d) {
                  a.timeoutHandle = Ff(Pk.bind(null, a, tk, uk), d);
                  break;
                }
                Pk(a, tk, uk);
                break;
              case 5:
                Pk(a, tk, uk);
                break;
              default:
                throw Error(p2(329));
            }
          }
        }
        Dk(a, B3());
        return a.callbackNode === c ? Gk.bind(null, a) : null;
      }
      __name(Gk, "Gk");
      function Nk(a, b) {
        var c = sk;
        a.current.memoizedState.isDehydrated && (Kk(a, b).flags |= 256);
        a = Ik(a, b);
        2 !== a && (b = tk, tk = c, null !== b && Fj(b));
        return a;
      }
      __name(Nk, "Nk");
      function Fj(a) {
        null === tk ? tk = a : tk.push.apply(tk, a);
      }
      __name(Fj, "Fj");
      function Ok(a) {
        for (var b = a; ; ) {
          if (b.flags & 16384) {
            var c = b.updateQueue;
            if (null !== c && (c = c.stores, null !== c)) for (var d = 0; d < c.length; d++) {
              var e = c[d], f = e.getSnapshot;
              e = e.value;
              try {
                if (!He(f(), e)) return false;
              } catch (g) {
                return false;
              }
            }
          }
          c = b.child;
          if (b.subtreeFlags & 16384 && null !== c) c.return = b, b = c;
          else {
            if (b === a) break;
            for (; null === b.sibling; ) {
              if (null === b.return || b.return === a) return true;
              b = b.return;
            }
            b.sibling.return = b.return;
            b = b.sibling;
          }
        }
        return true;
      }
      __name(Ok, "Ok");
      function Ck(a, b) {
        b &= ~rk;
        b &= ~qk;
        a.suspendedLanes |= b;
        a.pingedLanes &= ~b;
        for (a = a.expirationTimes; 0 < b; ) {
          var c = 31 - oc(b), d = 1 << c;
          a[c] = -1;
          b &= ~d;
        }
      }
      __name(Ck, "Ck");
      function Ek(a) {
        if (0 !== (K3 & 6)) throw Error(p2(327));
        Hk();
        var b = uc(a, 0);
        if (0 === (b & 1)) return Dk(a, B3()), null;
        var c = Ik(a, b);
        if (0 !== a.tag && 2 === c) {
          var d = xc(a);
          0 !== d && (b = d, c = Nk(a, d));
        }
        if (1 === c) throw c = pk, Kk(a, 0), Ck(a, b), Dk(a, B3()), c;
        if (6 === c) throw Error(p2(345));
        a.finishedWork = a.current.alternate;
        a.finishedLanes = b;
        Pk(a, tk, uk);
        Dk(a, B3());
        return null;
      }
      __name(Ek, "Ek");
      function Qk(a, b) {
        var c = K3;
        K3 |= 1;
        try {
          return a(b);
        } finally {
          K3 = c, 0 === K3 && (Gj = B3() + 500, fg && jg());
        }
      }
      __name(Qk, "Qk");
      function Rk(a) {
        null !== wk && 0 === wk.tag && 0 === (K3 & 6) && Hk();
        var b = K3;
        K3 |= 1;
        var c = ok.transition, d = C;
        try {
          if (ok.transition = null, C = 1, a) return a();
        } finally {
          C = d, ok.transition = c, K3 = b, 0 === (K3 & 6) && jg();
        }
      }
      __name(Rk, "Rk");
      function Hj() {
        fj = ej.current;
        E(ej);
      }
      __name(Hj, "Hj");
      function Kk(a, b) {
        a.finishedWork = null;
        a.finishedLanes = 0;
        var c = a.timeoutHandle;
        -1 !== c && (a.timeoutHandle = -1, Gf(c));
        if (null !== Y3) for (c = Y3.return; null !== c; ) {
          var d = c;
          wg(d);
          switch (d.tag) {
            case 1:
              d = d.type.childContextTypes;
              null !== d && void 0 !== d && $f();
              break;
            case 3:
              zh();
              E(Wf);
              E(H2);
              Eh();
              break;
            case 5:
              Bh(d);
              break;
            case 4:
              zh();
              break;
            case 13:
              E(L2);
              break;
            case 19:
              E(L2);
              break;
            case 10:
              ah(d.type._context);
              break;
            case 22:
            case 23:
              Hj();
          }
          c = c.return;
        }
        Q = a;
        Y3 = a = Pg(a.current, null);
        Z2 = fj = b;
        T2 = 0;
        pk = null;
        rk = qk = rh = 0;
        tk = sk = null;
        if (null !== fh) {
          for (b = 0; b < fh.length; b++) if (c = fh[b], d = c.interleaved, null !== d) {
            c.interleaved = null;
            var e = d.next, f = c.pending;
            if (null !== f) {
              var g = f.next;
              f.next = e;
              d.next = g;
            }
            c.pending = d;
          }
          fh = null;
        }
        return a;
      }
      __name(Kk, "Kk");
      function Mk(a, b) {
        do {
          var c = Y3;
          try {
            $g();
            Fh.current = Rh;
            if (Ih) {
              for (var d = M.memoizedState; null !== d; ) {
                var e = d.queue;
                null !== e && (e.pending = null);
                d = d.next;
              }
              Ih = false;
            }
            Hh = 0;
            O = N2 = M = null;
            Jh = false;
            Kh = 0;
            nk.current = null;
            if (null === c || null === c.return) {
              T2 = 1;
              pk = b;
              Y3 = null;
              break;
            }
            a: {
              var f = a, g = c.return, h = c, k3 = b;
              b = Z2;
              h.flags |= 32768;
              if (null !== k3 && "object" === typeof k3 && "function" === typeof k3.then) {
                var l = k3, m2 = h, q = m2.tag;
                if (0 === (m2.mode & 1) && (0 === q || 11 === q || 15 === q)) {
                  var r3 = m2.alternate;
                  r3 ? (m2.updateQueue = r3.updateQueue, m2.memoizedState = r3.memoizedState, m2.lanes = r3.lanes) : (m2.updateQueue = null, m2.memoizedState = null);
                }
                var y = Ui(g);
                if (null !== y) {
                  y.flags &= -257;
                  Vi(y, g, h, f, b);
                  y.mode & 1 && Si(f, l, b);
                  b = y;
                  k3 = l;
                  var n2 = b.updateQueue;
                  if (null === n2) {
                    var t3 = /* @__PURE__ */ new Set();
                    t3.add(k3);
                    b.updateQueue = t3;
                  } else n2.add(k3);
                  break a;
                } else {
                  if (0 === (b & 1)) {
                    Si(f, l, b);
                    tj();
                    break a;
                  }
                  k3 = Error(p2(426));
                }
              } else if (I && h.mode & 1) {
                var J2 = Ui(g);
                if (null !== J2) {
                  0 === (J2.flags & 65536) && (J2.flags |= 256);
                  Vi(J2, g, h, f, b);
                  Jg(Ji(k3, h));
                  break a;
                }
              }
              f = k3 = Ji(k3, h);
              4 !== T2 && (T2 = 2);
              null === sk ? sk = [f] : sk.push(f);
              f = g;
              do {
                switch (f.tag) {
                  case 3:
                    f.flags |= 65536;
                    b &= -b;
                    f.lanes |= b;
                    var x = Ni(f, k3, b);
                    ph(f, x);
                    break a;
                  case 1:
                    h = k3;
                    var w = f.type, u2 = f.stateNode;
                    if (0 === (f.flags & 128) && ("function" === typeof w.getDerivedStateFromError || null !== u2 && "function" === typeof u2.componentDidCatch && (null === Ri || !Ri.has(u2)))) {
                      f.flags |= 65536;
                      b &= -b;
                      f.lanes |= b;
                      var F = Qi(f, h, b);
                      ph(f, F);
                      break a;
                    }
                }
                f = f.return;
              } while (null !== f);
            }
            Sk(c);
          } catch (na) {
            b = na;
            Y3 === c && null !== c && (Y3 = c = c.return);
            continue;
          }
          break;
        } while (1);
      }
      __name(Mk, "Mk");
      function Jk() {
        var a = mk.current;
        mk.current = Rh;
        return null === a ? Rh : a;
      }
      __name(Jk, "Jk");
      function tj() {
        if (0 === T2 || 3 === T2 || 2 === T2) T2 = 4;
        null === Q || 0 === (rh & 268435455) && 0 === (qk & 268435455) || Ck(Q, Z2);
      }
      __name(tj, "tj");
      function Ik(a, b) {
        var c = K3;
        K3 |= 2;
        var d = Jk();
        if (Q !== a || Z2 !== b) uk = null, Kk(a, b);
        do
          try {
            Tk();
            break;
          } catch (e) {
            Mk(a, e);
          }
        while (1);
        $g();
        K3 = c;
        mk.current = d;
        if (null !== Y3) throw Error(p2(261));
        Q = null;
        Z2 = 0;
        return T2;
      }
      __name(Ik, "Ik");
      function Tk() {
        for (; null !== Y3; ) Uk(Y3);
      }
      __name(Tk, "Tk");
      function Lk() {
        for (; null !== Y3 && !cc(); ) Uk(Y3);
      }
      __name(Lk, "Lk");
      function Uk(a) {
        var b = Vk(a.alternate, a, fj);
        a.memoizedProps = a.pendingProps;
        null === b ? Sk(a) : Y3 = b;
        nk.current = null;
      }
      __name(Uk, "Uk");
      function Sk(a) {
        var b = a;
        do {
          var c = b.alternate;
          a = b.return;
          if (0 === (b.flags & 32768)) {
            if (c = Ej(c, b, fj), null !== c) {
              Y3 = c;
              return;
            }
          } else {
            c = Ij(c, b);
            if (null !== c) {
              c.flags &= 32767;
              Y3 = c;
              return;
            }
            if (null !== a) a.flags |= 32768, a.subtreeFlags = 0, a.deletions = null;
            else {
              T2 = 6;
              Y3 = null;
              return;
            }
          }
          b = b.sibling;
          if (null !== b) {
            Y3 = b;
            return;
          }
          Y3 = b = a;
        } while (null !== b);
        0 === T2 && (T2 = 5);
      }
      __name(Sk, "Sk");
      function Pk(a, b, c) {
        var d = C, e = ok.transition;
        try {
          ok.transition = null, C = 1, Wk(a, b, c, d);
        } finally {
          ok.transition = e, C = d;
        }
        return null;
      }
      __name(Pk, "Pk");
      function Wk(a, b, c, d) {
        do
          Hk();
        while (null !== wk);
        if (0 !== (K3 & 6)) throw Error(p2(327));
        c = a.finishedWork;
        var e = a.finishedLanes;
        if (null === c) return null;
        a.finishedWork = null;
        a.finishedLanes = 0;
        if (c === a.current) throw Error(p2(177));
        a.callbackNode = null;
        a.callbackPriority = 0;
        var f = c.lanes | c.childLanes;
        Bc(a, f);
        a === Q && (Y3 = Q = null, Z2 = 0);
        0 === (c.subtreeFlags & 2064) && 0 === (c.flags & 2064) || vk || (vk = true, Fk(hc, function() {
          Hk();
          return null;
        }));
        f = 0 !== (c.flags & 15990);
        if (0 !== (c.subtreeFlags & 15990) || f) {
          f = ok.transition;
          ok.transition = null;
          var g = C;
          C = 1;
          var h = K3;
          K3 |= 4;
          nk.current = null;
          Oj(a, c);
          dk(c, a);
          Oe(Df);
          dd = !!Cf;
          Df = Cf = null;
          a.current = c;
          hk(c, a, e);
          dc();
          K3 = h;
          C = g;
          ok.transition = f;
        } else a.current = c;
        vk && (vk = false, wk = a, xk = e);
        f = a.pendingLanes;
        0 === f && (Ri = null);
        mc(c.stateNode, d);
        Dk(a, B3());
        if (null !== b) for (d = a.onRecoverableError, c = 0; c < b.length; c++) e = b[c], d(e.value, { componentStack: e.stack, digest: e.digest });
        if (Oi) throw Oi = false, a = Pi, Pi = null, a;
        0 !== (xk & 1) && 0 !== a.tag && Hk();
        f = a.pendingLanes;
        0 !== (f & 1) ? a === zk ? yk++ : (yk = 0, zk = a) : yk = 0;
        jg();
        return null;
      }
      __name(Wk, "Wk");
      function Hk() {
        if (null !== wk) {
          var a = Dc(xk), b = ok.transition, c = C;
          try {
            ok.transition = null;
            C = 16 > a ? 16 : a;
            if (null === wk) var d = false;
            else {
              a = wk;
              wk = null;
              xk = 0;
              if (0 !== (K3 & 6)) throw Error(p2(331));
              var e = K3;
              K3 |= 4;
              for (V = a.current; null !== V; ) {
                var f = V, g = f.child;
                if (0 !== (V.flags & 16)) {
                  var h = f.deletions;
                  if (null !== h) {
                    for (var k3 = 0; k3 < h.length; k3++) {
                      var l = h[k3];
                      for (V = l; null !== V; ) {
                        var m2 = V;
                        switch (m2.tag) {
                          case 0:
                          case 11:
                          case 15:
                            Pj(8, m2, f);
                        }
                        var q = m2.child;
                        if (null !== q) q.return = m2, V = q;
                        else for (; null !== V; ) {
                          m2 = V;
                          var r3 = m2.sibling, y = m2.return;
                          Sj(m2);
                          if (m2 === l) {
                            V = null;
                            break;
                          }
                          if (null !== r3) {
                            r3.return = y;
                            V = r3;
                            break;
                          }
                          V = y;
                        }
                      }
                    }
                    var n2 = f.alternate;
                    if (null !== n2) {
                      var t3 = n2.child;
                      if (null !== t3) {
                        n2.child = null;
                        do {
                          var J2 = t3.sibling;
                          t3.sibling = null;
                          t3 = J2;
                        } while (null !== t3);
                      }
                    }
                    V = f;
                  }
                }
                if (0 !== (f.subtreeFlags & 2064) && null !== g) g.return = f, V = g;
                else b: for (; null !== V; ) {
                  f = V;
                  if (0 !== (f.flags & 2048)) switch (f.tag) {
                    case 0:
                    case 11:
                    case 15:
                      Pj(9, f, f.return);
                  }
                  var x = f.sibling;
                  if (null !== x) {
                    x.return = f.return;
                    V = x;
                    break b;
                  }
                  V = f.return;
                }
              }
              var w = a.current;
              for (V = w; null !== V; ) {
                g = V;
                var u2 = g.child;
                if (0 !== (g.subtreeFlags & 2064) && null !== u2) u2.return = g, V = u2;
                else b: for (g = w; null !== V; ) {
                  h = V;
                  if (0 !== (h.flags & 2048)) try {
                    switch (h.tag) {
                      case 0:
                      case 11:
                      case 15:
                        Qj(9, h);
                    }
                  } catch (na) {
                    W2(h, h.return, na);
                  }
                  if (h === g) {
                    V = null;
                    break b;
                  }
                  var F = h.sibling;
                  if (null !== F) {
                    F.return = h.return;
                    V = F;
                    break b;
                  }
                  V = h.return;
                }
              }
              K3 = e;
              jg();
              if (lc && "function" === typeof lc.onPostCommitFiberRoot) try {
                lc.onPostCommitFiberRoot(kc, a);
              } catch (na) {
              }
              d = true;
            }
            return d;
          } finally {
            C = c, ok.transition = b;
          }
        }
        return false;
      }
      __name(Hk, "Hk");
      function Xk(a, b, c) {
        b = Ji(c, b);
        b = Ni(a, b, 1);
        a = nh(a, b, 1);
        b = R();
        null !== a && (Ac(a, 1, b), Dk(a, b));
      }
      __name(Xk, "Xk");
      function W2(a, b, c) {
        if (3 === a.tag) Xk(a, a, c);
        else for (; null !== b; ) {
          if (3 === b.tag) {
            Xk(b, a, c);
            break;
          } else if (1 === b.tag) {
            var d = b.stateNode;
            if ("function" === typeof b.type.getDerivedStateFromError || "function" === typeof d.componentDidCatch && (null === Ri || !Ri.has(d))) {
              a = Ji(c, a);
              a = Qi(b, a, 1);
              b = nh(b, a, 1);
              a = R();
              null !== b && (Ac(b, 1, a), Dk(b, a));
              break;
            }
          }
          b = b.return;
        }
      }
      __name(W2, "W");
      function Ti(a, b, c) {
        var d = a.pingCache;
        null !== d && d.delete(b);
        b = R();
        a.pingedLanes |= a.suspendedLanes & c;
        Q === a && (Z2 & c) === c && (4 === T2 || 3 === T2 && (Z2 & 130023424) === Z2 && 500 > B3() - fk ? Kk(a, 0) : rk |= c);
        Dk(a, b);
      }
      __name(Ti, "Ti");
      function Yk(a, b) {
        0 === b && (0 === (a.mode & 1) ? b = 1 : (b = sc, sc <<= 1, 0 === (sc & 130023424) && (sc = 4194304)));
        var c = R();
        a = ih(a, b);
        null !== a && (Ac(a, b, c), Dk(a, c));
      }
      __name(Yk, "Yk");
      function uj(a) {
        var b = a.memoizedState, c = 0;
        null !== b && (c = b.retryLane);
        Yk(a, c);
      }
      __name(uj, "uj");
      function bk(a, b) {
        var c = 0;
        switch (a.tag) {
          case 13:
            var d = a.stateNode;
            var e = a.memoizedState;
            null !== e && (c = e.retryLane);
            break;
          case 19:
            d = a.stateNode;
            break;
          default:
            throw Error(p2(314));
        }
        null !== d && d.delete(b);
        Yk(a, c);
      }
      __name(bk, "bk");
      var Vk;
      Vk = /* @__PURE__ */ __name(function(a, b, c) {
        if (null !== a) if (a.memoizedProps !== b.pendingProps || Wf.current) dh = true;
        else {
          if (0 === (a.lanes & c) && 0 === (b.flags & 128)) return dh = false, yj(a, b, c);
          dh = 0 !== (a.flags & 131072) ? true : false;
        }
        else dh = false, I && 0 !== (b.flags & 1048576) && ug(b, ng, b.index);
        b.lanes = 0;
        switch (b.tag) {
          case 2:
            var d = b.type;
            ij(a, b);
            a = b.pendingProps;
            var e = Yf(b, H2.current);
            ch(b, c);
            e = Nh(null, b, d, a, e, c);
            var f = Sh();
            b.flags |= 1;
            "object" === typeof e && null !== e && "function" === typeof e.render && void 0 === e.$$typeof ? (b.tag = 1, b.memoizedState = null, b.updateQueue = null, Zf(d) ? (f = true, cg(b)) : f = false, b.memoizedState = null !== e.state && void 0 !== e.state ? e.state : null, kh(b), e.updater = Ei, b.stateNode = e, e._reactInternals = b, Ii(b, d, a, c), b = jj(null, b, d, true, f, c)) : (b.tag = 0, I && f && vg(b), Xi(null, b, e, c), b = b.child);
            return b;
          case 16:
            d = b.elementType;
            a: {
              ij(a, b);
              a = b.pendingProps;
              e = d._init;
              d = e(d._payload);
              b.type = d;
              e = b.tag = Zk(d);
              a = Ci(d, a);
              switch (e) {
                case 0:
                  b = cj(null, b, d, a, c);
                  break a;
                case 1:
                  b = hj(null, b, d, a, c);
                  break a;
                case 11:
                  b = Yi(null, b, d, a, c);
                  break a;
                case 14:
                  b = $i(null, b, d, Ci(d.type, a), c);
                  break a;
              }
              throw Error(p2(
                306,
                d,
                ""
              ));
            }
            return b;
          case 0:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), cj(a, b, d, e, c);
          case 1:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), hj(a, b, d, e, c);
          case 3:
            a: {
              kj(b);
              if (null === a) throw Error(p2(387));
              d = b.pendingProps;
              f = b.memoizedState;
              e = f.element;
              lh(a, b);
              qh(b, d, null, c);
              var g = b.memoizedState;
              d = g.element;
              if (f.isDehydrated) if (f = { element: d, isDehydrated: false, cache: g.cache, pendingSuspenseBoundaries: g.pendingSuspenseBoundaries, transitions: g.transitions }, b.updateQueue.baseState = f, b.memoizedState = f, b.flags & 256) {
                e = Ji(Error(p2(423)), b);
                b = lj(a, b, d, c, e);
                break a;
              } else if (d !== e) {
                e = Ji(Error(p2(424)), b);
                b = lj(a, b, d, c, e);
                break a;
              } else for (yg = Lf(b.stateNode.containerInfo.firstChild), xg = b, I = true, zg = null, c = Vg(b, null, d, c), b.child = c; c; ) c.flags = c.flags & -3 | 4096, c = c.sibling;
              else {
                Ig();
                if (d === e) {
                  b = Zi(a, b, c);
                  break a;
                }
                Xi(a, b, d, c);
              }
              b = b.child;
            }
            return b;
          case 5:
            return Ah(b), null === a && Eg(b), d = b.type, e = b.pendingProps, f = null !== a ? a.memoizedProps : null, g = e.children, Ef(d, e) ? g = null : null !== f && Ef(d, f) && (b.flags |= 32), gj(a, b), Xi(a, b, g, c), b.child;
          case 6:
            return null === a && Eg(b), null;
          case 13:
            return oj(a, b, c);
          case 4:
            return yh(b, b.stateNode.containerInfo), d = b.pendingProps, null === a ? b.child = Ug(b, null, d, c) : Xi(a, b, d, c), b.child;
          case 11:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), Yi(a, b, d, e, c);
          case 7:
            return Xi(a, b, b.pendingProps, c), b.child;
          case 8:
            return Xi(a, b, b.pendingProps.children, c), b.child;
          case 12:
            return Xi(a, b, b.pendingProps.children, c), b.child;
          case 10:
            a: {
              d = b.type._context;
              e = b.pendingProps;
              f = b.memoizedProps;
              g = e.value;
              G2(Wg, d._currentValue);
              d._currentValue = g;
              if (null !== f) if (He(f.value, g)) {
                if (f.children === e.children && !Wf.current) {
                  b = Zi(a, b, c);
                  break a;
                }
              } else for (f = b.child, null !== f && (f.return = b); null !== f; ) {
                var h = f.dependencies;
                if (null !== h) {
                  g = f.child;
                  for (var k3 = h.firstContext; null !== k3; ) {
                    if (k3.context === d) {
                      if (1 === f.tag) {
                        k3 = mh(-1, c & -c);
                        k3.tag = 2;
                        var l = f.updateQueue;
                        if (null !== l) {
                          l = l.shared;
                          var m2 = l.pending;
                          null === m2 ? k3.next = k3 : (k3.next = m2.next, m2.next = k3);
                          l.pending = k3;
                        }
                      }
                      f.lanes |= c;
                      k3 = f.alternate;
                      null !== k3 && (k3.lanes |= c);
                      bh(
                        f.return,
                        c,
                        b
                      );
                      h.lanes |= c;
                      break;
                    }
                    k3 = k3.next;
                  }
                } else if (10 === f.tag) g = f.type === b.type ? null : f.child;
                else if (18 === f.tag) {
                  g = f.return;
                  if (null === g) throw Error(p2(341));
                  g.lanes |= c;
                  h = g.alternate;
                  null !== h && (h.lanes |= c);
                  bh(g, c, b);
                  g = f.sibling;
                } else g = f.child;
                if (null !== g) g.return = f;
                else for (g = f; null !== g; ) {
                  if (g === b) {
                    g = null;
                    break;
                  }
                  f = g.sibling;
                  if (null !== f) {
                    f.return = g.return;
                    g = f;
                    break;
                  }
                  g = g.return;
                }
                f = g;
              }
              Xi(a, b, e.children, c);
              b = b.child;
            }
            return b;
          case 9:
            return e = b.type, d = b.pendingProps.children, ch(b, c), e = eh(e), d = d(e), b.flags |= 1, Xi(a, b, d, c), b.child;
          case 14:
            return d = b.type, e = Ci(d, b.pendingProps), e = Ci(d.type, e), $i(a, b, d, e, c);
          case 15:
            return bj(a, b, b.type, b.pendingProps, c);
          case 17:
            return d = b.type, e = b.pendingProps, e = b.elementType === d ? e : Ci(d, e), ij(a, b), b.tag = 1, Zf(d) ? (a = true, cg(b)) : a = false, ch(b, c), Gi(b, d, e), Ii(b, d, e, c), jj(null, b, d, true, a, c);
          case 19:
            return xj(a, b, c);
          case 22:
            return dj(a, b, c);
        }
        throw Error(p2(156, b.tag));
      }, "Vk");
      function Fk(a, b) {
        return ac(a, b);
      }
      __name(Fk, "Fk");
      function $k(a, b, c, d) {
        this.tag = a;
        this.key = c;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.ref = null;
        this.pendingProps = b;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = d;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      __name($k, "$k");
      function Bg(a, b, c, d) {
        return new $k(a, b, c, d);
      }
      __name(Bg, "Bg");
      function aj(a) {
        a = a.prototype;
        return !(!a || !a.isReactComponent);
      }
      __name(aj, "aj");
      function Zk(a) {
        if ("function" === typeof a) return aj(a) ? 1 : 0;
        if (void 0 !== a && null !== a) {
          a = a.$$typeof;
          if (a === Da) return 11;
          if (a === Ga) return 14;
        }
        return 2;
      }
      __name(Zk, "Zk");
      function Pg(a, b) {
        var c = a.alternate;
        null === c ? (c = Bg(a.tag, b, a.key, a.mode), c.elementType = a.elementType, c.type = a.type, c.stateNode = a.stateNode, c.alternate = a, a.alternate = c) : (c.pendingProps = b, c.type = a.type, c.flags = 0, c.subtreeFlags = 0, c.deletions = null);
        c.flags = a.flags & 14680064;
        c.childLanes = a.childLanes;
        c.lanes = a.lanes;
        c.child = a.child;
        c.memoizedProps = a.memoizedProps;
        c.memoizedState = a.memoizedState;
        c.updateQueue = a.updateQueue;
        b = a.dependencies;
        c.dependencies = null === b ? null : { lanes: b.lanes, firstContext: b.firstContext };
        c.sibling = a.sibling;
        c.index = a.index;
        c.ref = a.ref;
        return c;
      }
      __name(Pg, "Pg");
      function Rg(a, b, c, d, e, f) {
        var g = 2;
        d = a;
        if ("function" === typeof a) aj(a) && (g = 1);
        else if ("string" === typeof a) g = 5;
        else a: switch (a) {
          case ya:
            return Tg(c.children, e, f, b);
          case za:
            g = 8;
            e |= 8;
            break;
          case Aa:
            return a = Bg(12, c, b, e | 2), a.elementType = Aa, a.lanes = f, a;
          case Ea:
            return a = Bg(13, c, b, e), a.elementType = Ea, a.lanes = f, a;
          case Fa:
            return a = Bg(19, c, b, e), a.elementType = Fa, a.lanes = f, a;
          case Ia:
            return pj(c, e, f, b);
          default:
            if ("object" === typeof a && null !== a) switch (a.$$typeof) {
              case Ba:
                g = 10;
                break a;
              case Ca:
                g = 9;
                break a;
              case Da:
                g = 11;
                break a;
              case Ga:
                g = 14;
                break a;
              case Ha:
                g = 16;
                d = null;
                break a;
            }
            throw Error(p2(130, null == a ? a : typeof a, ""));
        }
        b = Bg(g, c, b, e);
        b.elementType = a;
        b.type = d;
        b.lanes = f;
        return b;
      }
      __name(Rg, "Rg");
      function Tg(a, b, c, d) {
        a = Bg(7, a, d, b);
        a.lanes = c;
        return a;
      }
      __name(Tg, "Tg");
      function pj(a, b, c, d) {
        a = Bg(22, a, d, b);
        a.elementType = Ia;
        a.lanes = c;
        a.stateNode = { isHidden: false };
        return a;
      }
      __name(pj, "pj");
      function Qg(a, b, c) {
        a = Bg(6, a, null, b);
        a.lanes = c;
        return a;
      }
      __name(Qg, "Qg");
      function Sg(a, b, c) {
        b = Bg(4, null !== a.children ? a.children : [], a.key, b);
        b.lanes = c;
        b.stateNode = { containerInfo: a.containerInfo, pendingChildren: null, implementation: a.implementation };
        return b;
      }
      __name(Sg, "Sg");
      function al(a, b, c, d, e) {
        this.tag = b;
        this.containerInfo = a;
        this.finishedWork = this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.callbackNode = this.pendingContext = this.context = null;
        this.callbackPriority = 0;
        this.eventTimes = zc(0);
        this.expirationTimes = zc(-1);
        this.entangledLanes = this.finishedLanes = this.mutableReadLanes = this.expiredLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = zc(0);
        this.identifierPrefix = d;
        this.onRecoverableError = e;
        this.mutableSourceEagerHydrationData = null;
      }
      __name(al, "al");
      function bl(a, b, c, d, e, f, g, h, k3) {
        a = new al(a, b, c, h, k3);
        1 === b ? (b = 1, true === f && (b |= 8)) : b = 0;
        f = Bg(3, null, null, b);
        a.current = f;
        f.stateNode = a;
        f.memoizedState = { element: d, isDehydrated: c, cache: null, transitions: null, pendingSuspenseBoundaries: null };
        kh(f);
        return a;
      }
      __name(bl, "bl");
      function cl(a, b, c) {
        var d = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return { $$typeof: wa, key: null == d ? null : "" + d, children: a, containerInfo: b, implementation: c };
      }
      __name(cl, "cl");
      function dl(a) {
        if (!a) return Vf;
        a = a._reactInternals;
        a: {
          if (Vb(a) !== a || 1 !== a.tag) throw Error(p2(170));
          var b = a;
          do {
            switch (b.tag) {
              case 3:
                b = b.stateNode.context;
                break a;
              case 1:
                if (Zf(b.type)) {
                  b = b.stateNode.__reactInternalMemoizedMergedChildContext;
                  break a;
                }
            }
            b = b.return;
          } while (null !== b);
          throw Error(p2(171));
        }
        if (1 === a.tag) {
          var c = a.type;
          if (Zf(c)) return bg(a, c, b);
        }
        return b;
      }
      __name(dl, "dl");
      function el(a, b, c, d, e, f, g, h, k3) {
        a = bl(c, d, true, a, e, f, g, h, k3);
        a.context = dl(null);
        c = a.current;
        d = R();
        e = yi(c);
        f = mh(d, e);
        f.callback = void 0 !== b && null !== b ? b : null;
        nh(c, f, e);
        a.current.lanes = e;
        Ac(a, e, d);
        Dk(a, d);
        return a;
      }
      __name(el, "el");
      function fl(a, b, c, d) {
        var e = b.current, f = R(), g = yi(e);
        c = dl(c);
        null === b.context ? b.context = c : b.pendingContext = c;
        b = mh(f, g);
        b.payload = { element: a };
        d = void 0 === d ? null : d;
        null !== d && (b.callback = d);
        a = nh(e, b, g);
        null !== a && (gi(a, e, g, f), oh(a, e, g));
        return g;
      }
      __name(fl, "fl");
      function gl(a) {
        a = a.current;
        if (!a.child) return null;
        switch (a.child.tag) {
          case 5:
            return a.child.stateNode;
          default:
            return a.child.stateNode;
        }
      }
      __name(gl, "gl");
      function hl(a, b) {
        a = a.memoizedState;
        if (null !== a && null !== a.dehydrated) {
          var c = a.retryLane;
          a.retryLane = 0 !== c && c < b ? c : b;
        }
      }
      __name(hl, "hl");
      function il(a, b) {
        hl(a, b);
        (a = a.alternate) && hl(a, b);
      }
      __name(il, "il");
      function jl() {
        return null;
      }
      __name(jl, "jl");
      var kl = "function" === typeof reportError ? reportError : function(a) {
        console.error(a);
      };
      function ll(a) {
        this._internalRoot = a;
      }
      __name(ll, "ll");
      ml.prototype.render = ll.prototype.render = function(a) {
        var b = this._internalRoot;
        if (null === b) throw Error(p2(409));
        fl(a, b, null, null);
      };
      ml.prototype.unmount = ll.prototype.unmount = function() {
        var a = this._internalRoot;
        if (null !== a) {
          this._internalRoot = null;
          var b = a.containerInfo;
          Rk(function() {
            fl(null, a, null, null);
          });
          b[uf] = null;
        }
      };
      function ml(a) {
        this._internalRoot = a;
      }
      __name(ml, "ml");
      ml.prototype.unstable_scheduleHydration = function(a) {
        if (a) {
          var b = Hc();
          a = { blockedOn: null, target: a, priority: b };
          for (var c = 0; c < Qc.length && 0 !== b && b < Qc[c].priority; c++) ;
          Qc.splice(c, 0, a);
          0 === c && Vc(a);
        }
      };
      function nl(a) {
        return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType);
      }
      __name(nl, "nl");
      function ol(a) {
        return !(!a || 1 !== a.nodeType && 9 !== a.nodeType && 11 !== a.nodeType && (8 !== a.nodeType || " react-mount-point-unstable " !== a.nodeValue));
      }
      __name(ol, "ol");
      function pl() {
      }
      __name(pl, "pl");
      function ql(a, b, c, d, e) {
        if (e) {
          if ("function" === typeof d) {
            var f = d;
            d = /* @__PURE__ */ __name(function() {
              var a2 = gl(g);
              f.call(a2);
            }, "d");
          }
          var g = el(b, d, a, 0, null, false, false, "", pl);
          a._reactRootContainer = g;
          a[uf] = g.current;
          sf(8 === a.nodeType ? a.parentNode : a);
          Rk();
          return g;
        }
        for (; e = a.lastChild; ) a.removeChild(e);
        if ("function" === typeof d) {
          var h = d;
          d = /* @__PURE__ */ __name(function() {
            var a2 = gl(k3);
            h.call(a2);
          }, "d");
        }
        var k3 = bl(a, 0, false, null, null, false, false, "", pl);
        a._reactRootContainer = k3;
        a[uf] = k3.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        Rk(function() {
          fl(b, k3, c, d);
        });
        return k3;
      }
      __name(ql, "ql");
      function rl(a, b, c, d, e) {
        var f = c._reactRootContainer;
        if (f) {
          var g = f;
          if ("function" === typeof e) {
            var h = e;
            e = /* @__PURE__ */ __name(function() {
              var a2 = gl(g);
              h.call(a2);
            }, "e");
          }
          fl(b, g, a, e);
        } else g = ql(c, b, a, e, d);
        return gl(g);
      }
      __name(rl, "rl");
      Ec = /* @__PURE__ */ __name(function(a) {
        switch (a.tag) {
          case 3:
            var b = a.stateNode;
            if (b.current.memoizedState.isDehydrated) {
              var c = tc(b.pendingLanes);
              0 !== c && (Cc(b, c | 1), Dk(b, B3()), 0 === (K3 & 6) && (Gj = B3() + 500, jg()));
            }
            break;
          case 13:
            Rk(function() {
              var b2 = ih(a, 1);
              if (null !== b2) {
                var c2 = R();
                gi(b2, a, 1, c2);
              }
            }), il(a, 1);
        }
      }, "Ec");
      Fc = /* @__PURE__ */ __name(function(a) {
        if (13 === a.tag) {
          var b = ih(a, 134217728);
          if (null !== b) {
            var c = R();
            gi(b, a, 134217728, c);
          }
          il(a, 134217728);
        }
      }, "Fc");
      Gc = /* @__PURE__ */ __name(function(a) {
        if (13 === a.tag) {
          var b = yi(a), c = ih(a, b);
          if (null !== c) {
            var d = R();
            gi(c, a, b, d);
          }
          il(a, b);
        }
      }, "Gc");
      Hc = /* @__PURE__ */ __name(function() {
        return C;
      }, "Hc");
      Ic = /* @__PURE__ */ __name(function(a, b) {
        var c = C;
        try {
          return C = a, b();
        } finally {
          C = c;
        }
      }, "Ic");
      yb = /* @__PURE__ */ __name(function(a, b, c) {
        switch (b) {
          case "input":
            bb(a, c);
            b = c.name;
            if ("radio" === c.type && null != b) {
              for (c = a; c.parentNode; ) c = c.parentNode;
              c = c.querySelectorAll("input[name=" + JSON.stringify("" + b) + '][type="radio"]');
              for (b = 0; b < c.length; b++) {
                var d = c[b];
                if (d !== a && d.form === a.form) {
                  var e = Db(d);
                  if (!e) throw Error(p2(90));
                  Wa(d);
                  bb(d, e);
                }
              }
            }
            break;
          case "textarea":
            ib(a, c);
            break;
          case "select":
            b = c.value, null != b && fb(a, !!c.multiple, b, false);
        }
      }, "yb");
      Gb = Qk;
      Hb = Rk;
      var sl = { usingClientEntryPoint: false, Events: [Cb, ue2, Db, Eb, Fb, Qk] };
      var tl = { findFiberByHostInstance: Wc, bundleType: 0, version: "18.3.1", rendererPackageName: "react-dom" };
      var ul = { bundleType: tl.bundleType, version: tl.version, rendererPackageName: tl.rendererPackageName, rendererConfig: tl.rendererConfig, overrideHookState: null, overrideHookStateDeletePath: null, overrideHookStateRenamePath: null, overrideProps: null, overridePropsDeletePath: null, overridePropsRenamePath: null, setErrorHandler: null, setSuspenseHandler: null, scheduleUpdate: null, currentDispatcherRef: ua.ReactCurrentDispatcher, findHostInstanceByFiber: /* @__PURE__ */ __name(function(a) {
        a = Zb(a);
        return null === a ? null : a.stateNode;
      }, "findHostInstanceByFiber"), findFiberByHostInstance: tl.findFiberByHostInstance || jl, findHostInstancesForRefresh: null, scheduleRefresh: null, scheduleRoot: null, setRefreshHandler: null, getCurrentFiber: null, reconcilerVersion: "18.3.1-next-f1338f8080-20240426" };
      if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        vl = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!vl.isDisabled && vl.supportsFiber) try {
          kc = vl.inject(ul), lc = vl;
        } catch (a) {
        }
      }
      var vl;
      exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = sl;
      exports.createPortal = function(a, b) {
        var c = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!nl(b)) throw Error(p2(200));
        return cl(a, b, null, c);
      };
      exports.createRoot = function(a, b) {
        if (!nl(a)) throw Error(p2(299));
        var c = false, d = "", e = kl;
        null !== b && void 0 !== b && (true === b.unstable_strictMode && (c = true), void 0 !== b.identifierPrefix && (d = b.identifierPrefix), void 0 !== b.onRecoverableError && (e = b.onRecoverableError));
        b = bl(a, 1, false, null, null, c, false, d, e);
        a[uf] = b.current;
        sf(8 === a.nodeType ? a.parentNode : a);
        return new ll(b);
      };
      exports.findDOMNode = function(a) {
        if (null == a) return null;
        if (1 === a.nodeType) return a;
        var b = a._reactInternals;
        if (void 0 === b) {
          if ("function" === typeof a.render) throw Error(p2(188));
          a = Object.keys(a).join(",");
          throw Error(p2(268, a));
        }
        a = Zb(b);
        a = null === a ? null : a.stateNode;
        return a;
      };
      exports.flushSync = function(a) {
        return Rk(a);
      };
      exports.hydrate = function(a, b, c) {
        if (!ol(b)) throw Error(p2(200));
        return rl(null, a, b, true, c);
      };
      exports.hydrateRoot = function(a, b, c) {
        if (!nl(a)) throw Error(p2(405));
        var d = null != c && c.hydratedSources || null, e = false, f = "", g = kl;
        null !== c && void 0 !== c && (true === c.unstable_strictMode && (e = true), void 0 !== c.identifierPrefix && (f = c.identifierPrefix), void 0 !== c.onRecoverableError && (g = c.onRecoverableError));
        b = el(b, null, a, 1, null != c ? c : null, e, false, f, g);
        a[uf] = b.current;
        sf(a);
        if (d) for (a = 0; a < d.length; a++) c = d[a], e = c._getVersion, e = e(c._source), null == b.mutableSourceEagerHydrationData ? b.mutableSourceEagerHydrationData = [c, e] : b.mutableSourceEagerHydrationData.push(
          c,
          e
        );
        return new ml(b);
      };
      exports.render = function(a, b, c) {
        if (!ol(b)) throw Error(p2(200));
        return rl(null, a, b, false, c);
      };
      exports.unmountComponentAtNode = function(a) {
        if (!ol(a)) throw Error(p2(40));
        return a._reactRootContainer ? (Rk(function() {
          rl(null, null, a, false, function() {
            a._reactRootContainer = null;
            a[uf] = null;
          });
        }), true) : false;
      };
      exports.unstable_batchedUpdates = Qk;
      exports.unstable_renderSubtreeIntoContainer = function(a, b, c, d) {
        if (!ol(c)) throw Error(p2(200));
        if (null == a || void 0 === a._reactInternals) throw Error(p2(38));
        return rl(a, b, c, false, d);
      };
      exports.version = "18.3.1-next-f1338f8080-20240426";
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        if (false) {
          throw new Error("^_^");
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      __name(checkDCE, "checkDCE");
      if (true) {
        checkDCE();
        module.exports = require_react_dom_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports) {
      "use strict";
      var m2 = require_react_dom();
      if (true) {
        exports.createRoot = m2.createRoot;
        exports.hydrateRoot = m2.hydrateRoot;
      } else {
        i2 = m2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        exports.createRoot = function(c, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.createRoot(c, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
        exports.hydrateRoot = function(c, h, o2) {
          i2.usingClientEntryPoint = true;
          try {
            return m2.hydrateRoot(c, h, o2);
          } finally {
            i2.usingClientEntryPoint = false;
          }
        };
      }
      var i2;
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js
  var require_use_sync_external_store_shim_production_min = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js"(exports) {
      "use strict";
      var e = require_react();
      function h(a, b) {
        return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
      }
      __name(h, "h");
      var k3 = "function" === typeof Object.is ? Object.is : h;
      var l = e.useState;
      var m2 = e.useEffect;
      var n2 = e.useLayoutEffect;
      var p2 = e.useDebugValue;
      function q(a, b) {
        var d = b(), f = l({ inst: { value: d, getSnapshot: b } }), c = f[0].inst, g = f[1];
        n2(function() {
          c.value = d;
          c.getSnapshot = b;
          r3(c) && g({ inst: c });
        }, [a, d, b]);
        m2(function() {
          r3(c) && g({ inst: c });
          return a(function() {
            r3(c) && g({ inst: c });
          });
        }, [a]);
        p2(d);
        return d;
      }
      __name(q, "q");
      function r3(a) {
        var b = a.getSnapshot;
        a = a.value;
        try {
          var d = b();
          return !k3(a, d);
        } catch (f) {
          return true;
        }
      }
      __name(r3, "r");
      function t3(a, b) {
        return b();
      }
      __name(t3, "t");
      var u2 = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? t3 : q;
      exports.useSyncExternalStore = void 0 !== e.useSyncExternalStore ? e.useSyncExternalStore : u2;
    }
  });

  // node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_use_sync_external_store_shim_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.production.min.js
  var require_react_jsx_runtime_production_min = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.production.min.js"(exports) {
      "use strict";
      var f = require_react();
      var k3 = Symbol.for("react.element");
      var l = Symbol.for("react.fragment");
      var m2 = Object.prototype.hasOwnProperty;
      var n2 = f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner;
      var p2 = { key: true, ref: true, __self: true, __source: true };
      function q(c, a, g) {
        var b, d = {}, e = null, h = null;
        void 0 !== g && (e = "" + g);
        void 0 !== a.key && (e = "" + a.key);
        void 0 !== a.ref && (h = a.ref);
        for (b in a) m2.call(a, b) && !p2.hasOwnProperty(b) && (d[b] = a[b]);
        if (c && c.defaultProps) for (b in a = c.defaultProps, a) void 0 === d[b] && (d[b] = a[b]);
        return { $$typeof: k3, type: c, key: e, ref: h, props: d, _owner: n2.current };
      }
      __name(q, "q");
      exports.Fragment = l;
      exports.jsx = q;
      exports.jsxs = q;
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_jsx_runtime_production_min();
      } else {
        module.exports = null;
      }
    }
  });

  // client/src/main-production.tsx
  var import_client = __toESM(require_client(), 1);

  // node_modules/regexparam/dist/index.mjs
  function parse(input, loose) {
    if (input instanceof RegExp) return { keys: false, pattern: input };
    var c, o2, tmp, ext, keys = [], pattern = "", arr = input.split("/");
    arr[0] || arr.shift();
    while (tmp = arr.shift()) {
      c = tmp[0];
      if (c === "*") {
        keys.push(c);
        pattern += tmp[1] === "?" ? "(?:/(.*))?" : "/(.*)";
      } else if (c === ":") {
        o2 = tmp.indexOf("?", 1);
        ext = tmp.indexOf(".", 1);
        keys.push(tmp.substring(1, !!~o2 ? o2 : !!~ext ? ext : tmp.length));
        pattern += !!~o2 && !~ext ? "(?:/([^/]+?))?" : "/([^/]+?)";
        if (!!~ext) pattern += (!!~o2 ? "?" : "") + "\\" + tmp.substring(ext);
      } else {
        pattern += "/" + tmp;
      }
    }
    return {
      keys,
      pattern: new RegExp("^" + pattern + (loose ? "(?=$|/)" : "/?$"), "i")
    };
  }
  __name(parse, "parse");

  // node_modules/wouter/esm/react-deps.js
  var React2 = __toESM(require_react(), 1);
  var import_react = __toESM(require_react(), 1);
  var import_shim = __toESM(require_shim(), 1);
  var useBuiltinInsertionEffect = React2["useInsertionEffect"];
  var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
  var useIsomorphicLayoutEffect = canUseDOM ? React2.useLayoutEffect : React2.useEffect;
  var useInsertionEffect2 = useBuiltinInsertionEffect || useIsomorphicLayoutEffect;
  var useEvent = /* @__PURE__ */ __name((fn) => {
    const ref = React2.useRef([fn, (...args) => ref[0](...args)]).current;
    useInsertionEffect2(() => {
      ref[0] = fn;
    });
    return ref[1];
  }, "useEvent");

  // node_modules/wouter/esm/use-browser-location.js
  var eventPopstate = "popstate";
  var eventPushState = "pushState";
  var eventReplaceState = "replaceState";
  var eventHashchange = "hashchange";
  var events = [
    eventPopstate,
    eventPushState,
    eventReplaceState,
    eventHashchange
  ];
  var subscribeToLocationUpdates = /* @__PURE__ */ __name((callback) => {
    for (const event of events) {
      addEventListener(event, callback);
    }
    return () => {
      for (const event of events) {
        removeEventListener(event, callback);
      }
    };
  }, "subscribeToLocationUpdates");
  var useLocationProperty = /* @__PURE__ */ __name((fn, ssrFn) => (0, import_shim.useSyncExternalStore)(subscribeToLocationUpdates, fn, ssrFn), "useLocationProperty");
  var currentSearch = /* @__PURE__ */ __name(() => location.search, "currentSearch");
  var useSearch = /* @__PURE__ */ __name(({ ssrSearch = "" } = {}) => useLocationProperty(currentSearch, () => ssrSearch), "useSearch");
  var currentPathname = /* @__PURE__ */ __name(() => location.pathname, "currentPathname");
  var usePathname = /* @__PURE__ */ __name(({ ssrPath } = {}) => useLocationProperty(
    currentPathname,
    ssrPath ? () => ssrPath : currentPathname
  ), "usePathname");
  var navigate = /* @__PURE__ */ __name((to, { replace = false, state = null } = {}) => history[replace ? eventReplaceState : eventPushState](state, "", to), "navigate");
  var useBrowserLocation = /* @__PURE__ */ __name((opts = {}) => [usePathname(opts), navigate], "useBrowserLocation");
  var patchKey = Symbol.for("wouter_v3");
  if (typeof history !== "undefined" && typeof window[patchKey] === "undefined") {
    for (const type of [eventPushState, eventReplaceState]) {
      const original = history[type];
      history[type] = function() {
        const result = original.apply(this, arguments);
        const event = new Event(type);
        event.arguments = arguments;
        dispatchEvent(event);
        return result;
      };
    }
    Object.defineProperty(window, patchKey, { value: true });
  }

  // node_modules/wouter/esm/index.js
  var _relativePath = /* @__PURE__ */ __name((base, path) => !path.toLowerCase().indexOf(base.toLowerCase()) ? path.slice(base.length) || "/" : "~" + path, "_relativePath");
  var baseDefaults = /* @__PURE__ */ __name((base = "") => base === "/" ? "" : base, "baseDefaults");
  var absolutePath = /* @__PURE__ */ __name((to, base) => to[0] === "~" ? to.slice(1) : baseDefaults(base) + to, "absolutePath");
  var relativePath = /* @__PURE__ */ __name((base = "", path) => _relativePath(unescape(baseDefaults(base)), unescape(path)), "relativePath");
  var unescape = /* @__PURE__ */ __name((str) => {
    try {
      return decodeURI(str);
    } catch (_e4) {
      return str;
    }
  }, "unescape");
  var defaultRouter = {
    hook: useBrowserLocation,
    searchHook: useSearch,
    parser: parse,
    base: "",
    // this option is used to override the current location during SSR
    ssrPath: void 0,
    ssrSearch: void 0,
    // customizes how `href` props are transformed for <Link />
    hrefs: /* @__PURE__ */ __name((x) => x, "hrefs")
  };
  var RouterCtx = (0, import_react.createContext)(defaultRouter);
  var useRouter = /* @__PURE__ */ __name(() => (0, import_react.useContext)(RouterCtx), "useRouter");
  var Params0 = {};
  var ParamsCtx = (0, import_react.createContext)(Params0);
  var useParams = /* @__PURE__ */ __name(() => (0, import_react.useContext)(ParamsCtx), "useParams");
  var useLocationFromRouter = /* @__PURE__ */ __name((router) => {
    const [location2, navigate2] = router.hook(router);
    return [
      relativePath(router.base, location2),
      useEvent((to, navOpts) => navigate2(absolutePath(to, router.base), navOpts))
    ];
  }, "useLocationFromRouter");
  var useLocation = /* @__PURE__ */ __name(() => useLocationFromRouter(useRouter()), "useLocation");
  var matchRoute = /* @__PURE__ */ __name((parser, route, path, loose) => {
    const { pattern, keys } = route instanceof RegExp ? { keys: false, pattern: route } : parser(route || "*", loose);
    const result = pattern.exec(path) || [];
    const [$base, ...matches] = result;
    return $base !== void 0 ? [
      true,
      (() => {
        const groups = keys !== false ? Object.fromEntries(keys.map((key, i2) => [key, matches[i2]])) : result.groups;
        let obj = __spreadValues({}, matches);
        groups && Object.assign(obj, groups);
        return obj;
      })(),
      // the third value if only present when parser is in "loose" mode,
      // so that we can extract the base path for nested routes
      ...loose ? [$base] : []
    ] : [false, null];
  }, "matchRoute");
  var useRoute = /* @__PURE__ */ __name((pattern) => matchRoute(useRouter().parser, pattern, useLocation()[0]), "useRoute");
  var Router = /* @__PURE__ */ __name((_a121) => {
    var _b93 = _a121, { children } = _b93, props = __objRest(_b93, ["children"]);
    var _a122, _b94, _c5, _d4;
    const parent_ = useRouter();
    const parent = props.hook ? defaultRouter : parent_;
    let value = parent;
    const [path, search] = (_b94 = (_a122 = props.ssrPath) == null ? void 0 : _a122.split("?")) != null ? _b94 : [];
    if (search) props.ssrSearch = search, props.ssrPath = path;
    props.hrefs = (_d4 = props.hrefs) != null ? _d4 : (_c5 = props.hook) == null ? void 0 : _c5.hrefs;
    let ref = (0, import_react.useRef)({}), prev = ref.current, next = prev;
    for (let k3 in parent) {
      const option = k3 === "base" ? (
        /* base is special case, it is appended to the parent's base */
        parent[k3] + (props[k3] || "")
      ) : props[k3] || parent[k3];
      if (prev === next && option !== next[k3]) {
        ref.current = next = __spreadValues({}, next);
      }
      next[k3] = option;
      if (option !== parent[k3]) value = next;
    }
    return (0, import_react.createElement)(RouterCtx.Provider, { value, children });
  }, "Router");
  var h_route = /* @__PURE__ */ __name(({ children, component }, params) => {
    if (component) return (0, import_react.createElement)(component, { params });
    return typeof children === "function" ? children(params) : children;
  }, "h_route");
  var useCachedParams = /* @__PURE__ */ __name((value) => {
    let prev = (0, import_react.useRef)(Params0), curr = prev.current;
    for (const k3 in value) if (value[k3] !== curr[k3]) curr = value;
    if (Object.keys(value).length === 0) curr = value;
    return prev.current = curr;
  }, "useCachedParams");
  var Route = /* @__PURE__ */ __name((_a121) => {
    var _b93 = _a121, { path, nest, match: match2 } = _b93, renderProps = __objRest(_b93, ["path", "nest", "match"]);
    const router = useRouter();
    const [location2] = useLocationFromRouter(router);
    const [matches, routeParams, base] = (
      // `match` is a special prop to give up control to the parent,
      // it is used by the `Switch` to avoid double matching
      match2 != null ? match2 : matchRoute(router.parser, path, location2, nest)
    );
    const params = useCachedParams(__spreadValues(__spreadValues({}, useParams()), routeParams));
    if (!matches) return null;
    const children = base ? (0, import_react.createElement)(Router, { base }, h_route(renderProps, params)) : h_route(renderProps, params);
    return (0, import_react.createElement)(ParamsCtx.Provider, { value: params, children });
  }, "Route");
  var Link = (0, import_react.forwardRef)((props, ref) => {
    const router = useRouter();
    const [currentPath, navigate2] = useLocationFromRouter(router);
    const _a121 = props, {
      to = "",
      href: targetPath = to,
      onClick: _onClick,
      asChild,
      children,
      className: cls,
      replace: replace,
      state
    } = _a121, restProps = __objRest(_a121, [
      "to",
      "href",
      "onClick",
      "asChild",
      "children",
      "className",
      /* eslint-disable no-unused-vars */
      "replace",
      "state"
    ]);
    const onClick = useEvent((event) => {
      if (event.ctrlKey || event.metaKey || event.altKey || event.shiftKey || event.button !== 0)
        return;
      _onClick == null ? void 0 : _onClick(event);
      if (!event.defaultPrevented) {
        event.preventDefault();
        navigate2(targetPath, props);
      }
    });
    const href = router.hrefs(
      targetPath[0] === "~" ? targetPath.slice(1) : router.base + targetPath,
      router
      // pass router as a second argument for convinience
    );
    return asChild && (0, import_react.isValidElement)(children) ? (0, import_react.cloneElement)(children, { onClick, href }) : (0, import_react.createElement)("a", __spreadProps(__spreadValues({}, restProps), {
      onClick,
      href,
      // `className` can be a function to apply the class if this link is active
      className: (cls == null ? void 0 : cls.call) ? cls(currentPath === targetPath) : cls,
      children,
      ref
    }));
  });
  var flattenChildren = /* @__PURE__ */ __name((children) => Array.isArray(children) ? children.flatMap(
    (c) => flattenChildren(c && c.type === import_react.Fragment ? c.props.children : c)
  ) : [children], "flattenChildren");
  var Switch = /* @__PURE__ */ __name(({ children, location: location2 }) => {
    const router = useRouter();
    const [originalLocation] = useLocationFromRouter(router);
    for (const element of flattenChildren(children)) {
      let match2 = 0;
      if ((0, import_react.isValidElement)(element) && // we don't require an element to be of type Route,
      // but we do require it to contain a truthy `path` prop.
      // this allows to use different components that wrap Route
      // inside of a switch, for example <AnimatedRoute />.
      (match2 = matchRoute(
        router.parser,
        element.props.path,
        location2 || originalLocation,
        element.props.nest
      ))[0])
        return (0, import_react.cloneElement)(element, { match: match2 });
    }
    return null;
  }, "Switch");

  // node_modules/@tanstack/query-core/build/modern/subscribable.js
  var _a;
  var Subscribable = (_a = class {
    constructor() {
      this.listeners = /* @__PURE__ */ new Set();
      this.subscribe = this.subscribe.bind(this);
    }
    subscribe(listener) {
      this.listeners.add(listener);
      this.onSubscribe();
      return () => {
        this.listeners.delete(listener);
        this.onUnsubscribe();
      };
    }
    hasListeners() {
      return this.listeners.size > 0;
    }
    onSubscribe() {
    }
    onUnsubscribe() {
    }
  }, __name(_a, "Subscribable"), _a);

  // node_modules/@tanstack/query-core/build/modern/utils.js
  var isServer = typeof window === "undefined" || "Deno" in globalThis;
  function noop() {
    return void 0;
  }
  __name(noop, "noop");
  function functionalUpdate(updater, input) {
    return typeof updater === "function" ? updater(input) : updater;
  }
  __name(functionalUpdate, "functionalUpdate");
  function isValidTimeout(value) {
    return typeof value === "number" && value >= 0 && value !== Infinity;
  }
  __name(isValidTimeout, "isValidTimeout");
  function timeUntilStale(updatedAt, staleTime) {
    return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0);
  }
  __name(timeUntilStale, "timeUntilStale");
  function resolveStaleTime(staleTime, query) {
    return typeof staleTime === "function" ? staleTime(query) : staleTime;
  }
  __name(resolveStaleTime, "resolveStaleTime");
  function resolveEnabled(enabled, query) {
    return typeof enabled === "function" ? enabled(query) : enabled;
  }
  __name(resolveEnabled, "resolveEnabled");
  function matchQuery(filters, query) {
    const {
      type = "all",
      exact,
      fetchStatus,
      predicate,
      queryKey,
      stale
    } = filters;
    if (queryKey) {
      if (exact) {
        if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {
          return false;
        }
      } else if (!partialMatchKey(query.queryKey, queryKey)) {
        return false;
      }
    }
    if (type !== "all") {
      const isActive = query.isActive();
      if (type === "active" && !isActive) {
        return false;
      }
      if (type === "inactive" && isActive) {
        return false;
      }
    }
    if (typeof stale === "boolean" && query.isStale() !== stale) {
      return false;
    }
    if (fetchStatus && fetchStatus !== query.state.fetchStatus) {
      return false;
    }
    if (predicate && !predicate(query)) {
      return false;
    }
    return true;
  }
  __name(matchQuery, "matchQuery");
  function matchMutation(filters, mutation) {
    const { exact, status, predicate, mutationKey } = filters;
    if (mutationKey) {
      if (!mutation.options.mutationKey) {
        return false;
      }
      if (exact) {
        if (hashKey(mutation.options.mutationKey) !== hashKey(mutationKey)) {
          return false;
        }
      } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {
        return false;
      }
    }
    if (status && mutation.state.status !== status) {
      return false;
    }
    if (predicate && !predicate(mutation)) {
      return false;
    }
    return true;
  }
  __name(matchMutation, "matchMutation");
  function hashQueryKeyByOptions(queryKey, options) {
    const hashFn = (options == null ? void 0 : options.queryKeyHashFn) || hashKey;
    return hashFn(queryKey);
  }
  __name(hashQueryKeyByOptions, "hashQueryKeyByOptions");
  function hashKey(queryKey) {
    return JSON.stringify(
      queryKey,
      (_, val) => isPlainObject(val) ? Object.keys(val).sort().reduce((result, key) => {
        result[key] = val[key];
        return result;
      }, {}) : val
    );
  }
  __name(hashKey, "hashKey");
  function partialMatchKey(a, b) {
    if (a === b) {
      return true;
    }
    if (typeof a !== typeof b) {
      return false;
    }
    if (a && b && typeof a === "object" && typeof b === "object") {
      return !Object.keys(b).some((key) => !partialMatchKey(a[key], b[key]));
    }
    return false;
  }
  __name(partialMatchKey, "partialMatchKey");
  function replaceEqualDeep(a, b) {
    if (a === b) {
      return a;
    }
    const array = isPlainArray(a) && isPlainArray(b);
    if (array || isPlainObject(a) && isPlainObject(b)) {
      const aItems = array ? a : Object.keys(a);
      const aSize = aItems.length;
      const bItems = array ? b : Object.keys(b);
      const bSize = bItems.length;
      const copy = array ? [] : {};
      let equalItems = 0;
      for (let i2 = 0; i2 < bSize; i2++) {
        const key = array ? i2 : bItems[i2];
        if ((!array && aItems.includes(key) || array) && a[key] === void 0 && b[key] === void 0) {
          copy[key] = void 0;
          equalItems++;
        } else {
          copy[key] = replaceEqualDeep(a[key], b[key]);
          if (copy[key] === a[key] && a[key] !== void 0) {
            equalItems++;
          }
        }
      }
      return aSize === bSize && equalItems === aSize ? a : copy;
    }
    return b;
  }
  __name(replaceEqualDeep, "replaceEqualDeep");
  function shallowEqualObjects(a, b) {
    if (!b || Object.keys(a).length !== Object.keys(b).length) {
      return false;
    }
    for (const key in a) {
      if (a[key] !== b[key]) {
        return false;
      }
    }
    return true;
  }
  __name(shallowEqualObjects, "shallowEqualObjects");
  function isPlainArray(value) {
    return Array.isArray(value) && value.length === Object.keys(value).length;
  }
  __name(isPlainArray, "isPlainArray");
  function isPlainObject(o2) {
    if (!hasObjectPrototype(o2)) {
      return false;
    }
    const ctor = o2.constructor;
    if (ctor === void 0) {
      return true;
    }
    const prot = ctor.prototype;
    if (!hasObjectPrototype(prot)) {
      return false;
    }
    if (!prot.hasOwnProperty("isPrototypeOf")) {
      return false;
    }
    if (Object.getPrototypeOf(o2) !== Object.prototype) {
      return false;
    }
    return true;
  }
  __name(isPlainObject, "isPlainObject");
  function hasObjectPrototype(o2) {
    return Object.prototype.toString.call(o2) === "[object Object]";
  }
  __name(hasObjectPrototype, "hasObjectPrototype");
  function sleep(timeout) {
    return new Promise((resolve) => {
      setTimeout(resolve, timeout);
    });
  }
  __name(sleep, "sleep");
  function replaceData(prevData, data, options) {
    if (typeof options.structuralSharing === "function") {
      return options.structuralSharing(prevData, data);
    } else if (options.structuralSharing !== false) {
      if (false) {
        try {
          return replaceEqualDeep(prevData, data);
        } catch (error) {
          console.error(
            `Structural sharing requires data to be JSON serializable. To fix this, turn off structuralSharing or return JSON-serializable data from your queryFn. [${options.queryHash}]: ${error}`
          );
        }
      }
      return replaceEqualDeep(prevData, data);
    }
    return data;
  }
  __name(replaceData, "replaceData");
  function addToEnd(items, item, max2 = 0) {
    const newItems = [...items, item];
    return max2 && newItems.length > max2 ? newItems.slice(1) : newItems;
  }
  __name(addToEnd, "addToEnd");
  function addToStart(items, item, max2 = 0) {
    const newItems = [item, ...items];
    return max2 && newItems.length > max2 ? newItems.slice(0, -1) : newItems;
  }
  __name(addToStart, "addToStart");
  var skipToken = Symbol();
  function ensureQueryFn(options, fetchOptions) {
    if (false) {
      if (options.queryFn === skipToken) {
        console.error(
          `Attempted to invoke queryFn when set to skipToken. This is likely a configuration error. Query hash: '${options.queryHash}'`
        );
      }
    }
    if (!options.queryFn && (fetchOptions == null ? void 0 : fetchOptions.initialPromise)) {
      return () => fetchOptions.initialPromise;
    }
    if (!options.queryFn || options.queryFn === skipToken) {
      return () => Promise.reject(new Error(`Missing queryFn: '${options.queryHash}'`));
    }
    return options.queryFn;
  }
  __name(ensureQueryFn, "ensureQueryFn");

  // node_modules/@tanstack/query-core/build/modern/focusManager.js
  var _focused, _cleanup, _setup, _a2;
  var FocusManager = (_a2 = class extends Subscribable {
    constructor() {
      super();
      __privateAdd(this, _focused);
      __privateAdd(this, _cleanup);
      __privateAdd(this, _setup);
      __privateSet(this, _setup, (onFocus) => {
        if (!isServer && window.addEventListener) {
          const listener = /* @__PURE__ */ __name(() => onFocus(), "listener");
          window.addEventListener("visibilitychange", listener, false);
          return () => {
            window.removeEventListener("visibilitychange", listener);
          };
        }
        return;
      });
    }
    onSubscribe() {
      if (!__privateGet(this, _cleanup)) {
        this.setEventListener(__privateGet(this, _setup));
      }
    }
    onUnsubscribe() {
      var _a121;
      if (!this.hasListeners()) {
        (_a121 = __privateGet(this, _cleanup)) == null ? void 0 : _a121.call(this);
        __privateSet(this, _cleanup, void 0);
      }
    }
    setEventListener(setup) {
      var _a121;
      __privateSet(this, _setup, setup);
      (_a121 = __privateGet(this, _cleanup)) == null ? void 0 : _a121.call(this);
      __privateSet(this, _cleanup, setup((focused) => {
        if (typeof focused === "boolean") {
          this.setFocused(focused);
        } else {
          this.onFocus();
        }
      }));
    }
    setFocused(focused) {
      const changed = __privateGet(this, _focused) !== focused;
      if (changed) {
        __privateSet(this, _focused, focused);
        this.onFocus();
      }
    }
    onFocus() {
      const isFocused = this.isFocused();
      this.listeners.forEach((listener) => {
        listener(isFocused);
      });
    }
    isFocused() {
      var _a121;
      if (typeof __privateGet(this, _focused) === "boolean") {
        return __privateGet(this, _focused);
      }
      return ((_a121 = globalThis.document) == null ? void 0 : _a121.visibilityState) !== "hidden";
    }
  }, _focused = new WeakMap(), _cleanup = new WeakMap(), _setup = new WeakMap(), __name(_a2, "FocusManager"), _a2);
  var focusManager = new FocusManager();

  // node_modules/@tanstack/query-core/build/modern/onlineManager.js
  var _online, _cleanup2, _setup2, _a3;
  var OnlineManager = (_a3 = class extends Subscribable {
    constructor() {
      super();
      __privateAdd(this, _online, true);
      __privateAdd(this, _cleanup2);
      __privateAdd(this, _setup2);
      __privateSet(this, _setup2, (onOnline) => {
        if (!isServer && window.addEventListener) {
          const onlineListener = /* @__PURE__ */ __name(() => onOnline(true), "onlineListener");
          const offlineListener = /* @__PURE__ */ __name(() => onOnline(false), "offlineListener");
          window.addEventListener("online", onlineListener, false);
          window.addEventListener("offline", offlineListener, false);
          return () => {
            window.removeEventListener("online", onlineListener);
            window.removeEventListener("offline", offlineListener);
          };
        }
        return;
      });
    }
    onSubscribe() {
      if (!__privateGet(this, _cleanup2)) {
        this.setEventListener(__privateGet(this, _setup2));
      }
    }
    onUnsubscribe() {
      var _a121;
      if (!this.hasListeners()) {
        (_a121 = __privateGet(this, _cleanup2)) == null ? void 0 : _a121.call(this);
        __privateSet(this, _cleanup2, void 0);
      }
    }
    setEventListener(setup) {
      var _a121;
      __privateSet(this, _setup2, setup);
      (_a121 = __privateGet(this, _cleanup2)) == null ? void 0 : _a121.call(this);
      __privateSet(this, _cleanup2, setup(this.setOnline.bind(this)));
    }
    setOnline(online) {
      const changed = __privateGet(this, _online) !== online;
      if (changed) {
        __privateSet(this, _online, online);
        this.listeners.forEach((listener) => {
          listener(online);
        });
      }
    }
    isOnline() {
      return __privateGet(this, _online);
    }
  }, _online = new WeakMap(), _cleanup2 = new WeakMap(), _setup2 = new WeakMap(), __name(_a3, "OnlineManager"), _a3);
  var onlineManager = new OnlineManager();

  // node_modules/@tanstack/query-core/build/modern/thenable.js
  function pendingThenable() {
    let resolve;
    let reject;
    const thenable = new Promise((_resolve, _reject) => {
      resolve = _resolve;
      reject = _reject;
    });
    thenable.status = "pending";
    thenable.catch(() => {
    });
    function finalize(data) {
      Object.assign(thenable, data);
      delete thenable.resolve;
      delete thenable.reject;
    }
    __name(finalize, "finalize");
    thenable.resolve = (value) => {
      finalize({
        status: "fulfilled",
        value
      });
      resolve(value);
    };
    thenable.reject = (reason) => {
      finalize({
        status: "rejected",
        reason
      });
      reject(reason);
    };
    return thenable;
  }
  __name(pendingThenable, "pendingThenable");

  // node_modules/@tanstack/query-core/build/modern/retryer.js
  function defaultRetryDelay(failureCount) {
    return Math.min(1e3 * 2 ** failureCount, 3e4);
  }
  __name(defaultRetryDelay, "defaultRetryDelay");
  function canFetch(networkMode) {
    return (networkMode != null ? networkMode : "online") === "online" ? onlineManager.isOnline() : true;
  }
  __name(canFetch, "canFetch");
  var _a4;
  var CancelledError = (_a4 = class extends Error {
    constructor(options) {
      super("CancelledError");
      this.revert = options == null ? void 0 : options.revert;
      this.silent = options == null ? void 0 : options.silent;
    }
  }, __name(_a4, "CancelledError"), _a4);
  function isCancelledError(value) {
    return value instanceof CancelledError;
  }
  __name(isCancelledError, "isCancelledError");
  function createRetryer(config) {
    let isRetryCancelled = false;
    let failureCount = 0;
    let isResolved = false;
    let continueFn;
    const thenable = pendingThenable();
    const cancel = /* @__PURE__ */ __name((cancelOptions) => {
      var _a121;
      if (!isResolved) {
        reject(new CancelledError(cancelOptions));
        (_a121 = config.abort) == null ? void 0 : _a121.call(config);
      }
    }, "cancel");
    const cancelRetry = /* @__PURE__ */ __name(() => {
      isRetryCancelled = true;
    }, "cancelRetry");
    const continueRetry = /* @__PURE__ */ __name(() => {
      isRetryCancelled = false;
    }, "continueRetry");
    const canContinue = /* @__PURE__ */ __name(() => focusManager.isFocused() && (config.networkMode === "always" || onlineManager.isOnline()) && config.canRun(), "canContinue");
    const canStart = /* @__PURE__ */ __name(() => canFetch(config.networkMode) && config.canRun(), "canStart");
    const resolve = /* @__PURE__ */ __name((value) => {
      var _a121;
      if (!isResolved) {
        isResolved = true;
        (_a121 = config.onSuccess) == null ? void 0 : _a121.call(config, value);
        continueFn == null ? void 0 : continueFn();
        thenable.resolve(value);
      }
    }, "resolve");
    const reject = /* @__PURE__ */ __name((value) => {
      var _a121;
      if (!isResolved) {
        isResolved = true;
        (_a121 = config.onError) == null ? void 0 : _a121.call(config, value);
        continueFn == null ? void 0 : continueFn();
        thenable.reject(value);
      }
    }, "reject");
    const pause = /* @__PURE__ */ __name(() => {
      return new Promise((continueResolve) => {
        var _a121;
        continueFn = /* @__PURE__ */ __name((value) => {
          if (isResolved || canContinue()) {
            continueResolve(value);
          }
        }, "continueFn");
        (_a121 = config.onPause) == null ? void 0 : _a121.call(config);
      }).then(() => {
        var _a121;
        continueFn = void 0;
        if (!isResolved) {
          (_a121 = config.onContinue) == null ? void 0 : _a121.call(config);
        }
      });
    }, "pause");
    const run = /* @__PURE__ */ __name(() => {
      if (isResolved) {
        return;
      }
      let promiseOrValue;
      const initialPromise = failureCount === 0 ? config.initialPromise : void 0;
      try {
        promiseOrValue = initialPromise != null ? initialPromise : config.fn();
      } catch (error) {
        promiseOrValue = Promise.reject(error);
      }
      Promise.resolve(promiseOrValue).then(resolve).catch((error) => {
        var _a121, _b93, _c5;
        if (isResolved) {
          return;
        }
        const retry = (_a121 = config.retry) != null ? _a121 : isServer ? 0 : 3;
        const retryDelay = (_b93 = config.retryDelay) != null ? _b93 : defaultRetryDelay;
        const delay = typeof retryDelay === "function" ? retryDelay(failureCount, error) : retryDelay;
        const shouldRetry = retry === true || typeof retry === "number" && failureCount < retry || typeof retry === "function" && retry(failureCount, error);
        if (isRetryCancelled || !shouldRetry) {
          reject(error);
          return;
        }
        failureCount++;
        (_c5 = config.onFail) == null ? void 0 : _c5.call(config, failureCount, error);
        sleep(delay).then(() => {
          return canContinue() ? void 0 : pause();
        }).then(() => {
          if (isRetryCancelled) {
            reject(error);
          } else {
            run();
          }
        });
      });
    }, "run");
    return {
      promise: thenable,
      cancel,
      continue: /* @__PURE__ */ __name(() => {
        continueFn == null ? void 0 : continueFn();
        return thenable;
      }, "continue"),
      cancelRetry,
      continueRetry,
      canStart,
      start: /* @__PURE__ */ __name(() => {
        if (canStart()) {
          run();
        } else {
          pause().then(run);
        }
        return thenable;
      }, "start")
    };
  }
  __name(createRetryer, "createRetryer");

  // node_modules/@tanstack/query-core/build/modern/notifyManager.js
  function createNotifyManager() {
    let queue = [];
    let transactions = 0;
    let notifyFn = /* @__PURE__ */ __name((callback) => {
      callback();
    }, "notifyFn");
    let batchNotifyFn = /* @__PURE__ */ __name((callback) => {
      callback();
    }, "batchNotifyFn");
    let scheduleFn = /* @__PURE__ */ __name((cb) => setTimeout(cb, 0), "scheduleFn");
    const schedule = /* @__PURE__ */ __name((callback) => {
      if (transactions) {
        queue.push(callback);
      } else {
        scheduleFn(() => {
          notifyFn(callback);
        });
      }
    }, "schedule");
    const flush = /* @__PURE__ */ __name(() => {
      const originalQueue = queue;
      queue = [];
      if (originalQueue.length) {
        scheduleFn(() => {
          batchNotifyFn(() => {
            originalQueue.forEach((callback) => {
              notifyFn(callback);
            });
          });
        });
      }
    }, "flush");
    return {
      batch: /* @__PURE__ */ __name((callback) => {
        let result;
        transactions++;
        try {
          result = callback();
        } finally {
          transactions--;
          if (!transactions) {
            flush();
          }
        }
        return result;
      }, "batch"),
      /**
       * All calls to the wrapped function will be batched.
       */
      batchCalls: /* @__PURE__ */ __name((callback) => {
        return (...args) => {
          schedule(() => {
            callback(...args);
          });
        };
      }, "batchCalls"),
      schedule,
      /**
       * Use this method to set a custom notify function.
       * This can be used to for example wrap notifications with `React.act` while running tests.
       */
      setNotifyFunction: /* @__PURE__ */ __name((fn) => {
        notifyFn = fn;
      }, "setNotifyFunction"),
      /**
       * Use this method to set a custom function to batch notifications together into a single tick.
       * By default React Query will use the batch function provided by ReactDOM or React Native.
       */
      setBatchNotifyFunction: /* @__PURE__ */ __name((fn) => {
        batchNotifyFn = fn;
      }, "setBatchNotifyFunction"),
      setScheduler: /* @__PURE__ */ __name((fn) => {
        scheduleFn = fn;
      }, "setScheduler")
    };
  }
  __name(createNotifyManager, "createNotifyManager");
  var notifyManager = createNotifyManager();

  // node_modules/@tanstack/query-core/build/modern/removable.js
  var _gcTimeout, _a5;
  var Removable = (_a5 = class {
    constructor() {
      __privateAdd(this, _gcTimeout);
    }
    destroy() {
      this.clearGcTimeout();
    }
    scheduleGc() {
      this.clearGcTimeout();
      if (isValidTimeout(this.gcTime)) {
        __privateSet(this, _gcTimeout, setTimeout(() => {
          this.optionalRemove();
        }, this.gcTime));
      }
    }
    updateGcTime(newGcTime) {
      this.gcTime = Math.max(
        this.gcTime || 0,
        newGcTime != null ? newGcTime : isServer ? Infinity : 5 * 60 * 1e3
      );
    }
    clearGcTimeout() {
      if (__privateGet(this, _gcTimeout)) {
        clearTimeout(__privateGet(this, _gcTimeout));
        __privateSet(this, _gcTimeout, void 0);
      }
    }
  }, _gcTimeout = new WeakMap(), __name(_a5, "Removable"), _a5);

  // node_modules/@tanstack/query-core/build/modern/query.js
  var _initialState, _revertState, _cache, _retryer, _defaultOptions, _abortSignalConsumed, __this_instances, dispatch_fn, _a6;
  var Query = (_a6 = class extends Removable {
    constructor(config) {
      var _a121;
      super();
      __privateAdd(this, __this_instances);
      __privateAdd(this, _initialState);
      __privateAdd(this, _revertState);
      __privateAdd(this, _cache);
      __privateAdd(this, _retryer);
      __privateAdd(this, _defaultOptions);
      __privateAdd(this, _abortSignalConsumed);
      __privateSet(this, _abortSignalConsumed, false);
      __privateSet(this, _defaultOptions, config.defaultOptions);
      this.setOptions(config.options);
      this.observers = [];
      __privateSet(this, _cache, config.cache);
      this.queryKey = config.queryKey;
      this.queryHash = config.queryHash;
      __privateSet(this, _initialState, getDefaultState(this.options));
      this.state = (_a121 = config.state) != null ? _a121 : __privateGet(this, _initialState);
      this.scheduleGc();
    }
    get meta() {
      return this.options.meta;
    }
    get promise() {
      var _a121;
      return (_a121 = __privateGet(this, _retryer)) == null ? void 0 : _a121.promise;
    }
    setOptions(options) {
      this.options = __spreadValues(__spreadValues({}, __privateGet(this, _defaultOptions)), options);
      this.updateGcTime(this.options.gcTime);
    }
    optionalRemove() {
      if (!this.observers.length && this.state.fetchStatus === "idle") {
        __privateGet(this, _cache).remove(this);
      }
    }
    setData(newData, options) {
      const data = replaceData(this.state.data, newData, this.options);
      __privateMethod(this, __this_instances, dispatch_fn).call(this, {
        data,
        type: "success",
        dataUpdatedAt: options == null ? void 0 : options.updatedAt,
        manual: options == null ? void 0 : options.manual
      });
      return data;
    }
    setState(state, setStateOptions) {
      __privateMethod(this, __this_instances, dispatch_fn).call(this, { type: "setState", state, setStateOptions });
    }
    cancel(options) {
      var _a121, _b93;
      const promise = (_a121 = __privateGet(this, _retryer)) == null ? void 0 : _a121.promise;
      (_b93 = __privateGet(this, _retryer)) == null ? void 0 : _b93.cancel(options);
      return promise ? promise.then(noop).catch(noop) : Promise.resolve();
    }
    destroy() {
      super.destroy();
      this.cancel({ silent: true });
    }
    reset() {
      this.destroy();
      this.setState(__privateGet(this, _initialState));
    }
    isActive() {
      return this.observers.some(
        (observer) => resolveEnabled(observer.options.enabled, this) !== false
      );
    }
    isDisabled() {
      if (this.getObserversCount() > 0) {
        return !this.isActive();
      }
      return this.options.queryFn === skipToken || this.state.dataUpdateCount + this.state.errorUpdateCount === 0;
    }
    isStale() {
      if (this.state.isInvalidated) {
        return true;
      }
      if (this.getObserversCount() > 0) {
        return this.observers.some(
          (observer) => observer.getCurrentResult().isStale
        );
      }
      return this.state.data === void 0;
    }
    isStaleByTime(staleTime = 0) {
      return this.state.isInvalidated || this.state.data === void 0 || !timeUntilStale(this.state.dataUpdatedAt, staleTime);
    }
    onFocus() {
      var _a121;
      const observer = this.observers.find((x) => x.shouldFetchOnWindowFocus());
      observer == null ? void 0 : observer.refetch({ cancelRefetch: false });
      (_a121 = __privateGet(this, _retryer)) == null ? void 0 : _a121.continue();
    }
    onOnline() {
      var _a121;
      const observer = this.observers.find((x) => x.shouldFetchOnReconnect());
      observer == null ? void 0 : observer.refetch({ cancelRefetch: false });
      (_a121 = __privateGet(this, _retryer)) == null ? void 0 : _a121.continue();
    }
    addObserver(observer) {
      if (!this.observers.includes(observer)) {
        this.observers.push(observer);
        this.clearGcTimeout();
        __privateGet(this, _cache).notify({ type: "observerAdded", query: this, observer });
      }
    }
    removeObserver(observer) {
      if (this.observers.includes(observer)) {
        this.observers = this.observers.filter((x) => x !== observer);
        if (!this.observers.length) {
          if (__privateGet(this, _retryer)) {
            if (__privateGet(this, _abortSignalConsumed)) {
              __privateGet(this, _retryer).cancel({ revert: true });
            } else {
              __privateGet(this, _retryer).cancelRetry();
            }
          }
          this.scheduleGc();
        }
        __privateGet(this, _cache).notify({ type: "observerRemoved", query: this, observer });
      }
    }
    getObserversCount() {
      return this.observers.length;
    }
    invalidate() {
      if (!this.state.isInvalidated) {
        __privateMethod(this, __this_instances, dispatch_fn).call(this, { type: "invalidate" });
      }
    }
    fetch(options, fetchOptions) {
      var _a121, _b93, _c5;
      if (this.state.fetchStatus !== "idle") {
        if (this.state.data !== void 0 && (fetchOptions == null ? void 0 : fetchOptions.cancelRefetch)) {
          this.cancel({ silent: true });
        } else if (__privateGet(this, _retryer)) {
          __privateGet(this, _retryer).continueRetry();
          return __privateGet(this, _retryer).promise;
        }
      }
      if (options) {
        this.setOptions(options);
      }
      if (!this.options.queryFn) {
        const observer = this.observers.find((x) => x.options.queryFn);
        if (observer) {
          this.setOptions(observer.options);
        }
      }
      if (false) {
        if (!Array.isArray(this.options.queryKey)) {
          console.error(
            `As of v4, queryKey needs to be an Array. If you are using a string like 'repoData', please change it to an Array, e.g. ['repoData']`
          );
        }
      }
      const abortController = new AbortController();
      const addSignalProperty = /* @__PURE__ */ __name((object) => {
        Object.defineProperty(object, "signal", {
          enumerable: true,
          get: /* @__PURE__ */ __name(() => {
            __privateSet(this, _abortSignalConsumed, true);
            return abortController.signal;
          }, "get")
        });
      }, "addSignalProperty");
      const fetchFn = /* @__PURE__ */ __name(() => {
        const queryFn = ensureQueryFn(this.options, fetchOptions);
        const queryFnContext = {
          queryKey: this.queryKey,
          meta: this.meta
        };
        addSignalProperty(queryFnContext);
        __privateSet(this, _abortSignalConsumed, false);
        if (this.options.persister) {
          return this.options.persister(
            queryFn,
            queryFnContext,
            this
          );
        }
        return queryFn(queryFnContext);
      }, "fetchFn");
      const context = {
        fetchOptions,
        options: this.options,
        queryKey: this.queryKey,
        state: this.state,
        fetchFn
      };
      addSignalProperty(context);
      (_a121 = this.options.behavior) == null ? void 0 : _a121.onFetch(
        context,
        this
      );
      __privateSet(this, _revertState, this.state);
      if (this.state.fetchStatus === "idle" || this.state.fetchMeta !== ((_b93 = context.fetchOptions) == null ? void 0 : _b93.meta)) {
        __privateMethod(this, __this_instances, dispatch_fn).call(this, { type: "fetch", meta: (_c5 = context.fetchOptions) == null ? void 0 : _c5.meta });
      }
      const onError = /* @__PURE__ */ __name((error) => {
        var _a122, _b94, _c6, _d4;
        if (!(isCancelledError(error) && error.silent)) {
          __privateMethod(this, __this_instances, dispatch_fn).call(this, {
            type: "error",
            error
          });
        }
        if (!isCancelledError(error)) {
          (_b94 = (_a122 = __privateGet(this, _cache).config).onError) == null ? void 0 : _b94.call(
            _a122,
            error,
            this
          );
          (_d4 = (_c6 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d4.call(
            _c6,
            this.state.data,
            error,
            this
          );
        }
        this.scheduleGc();
      }, "onError");
      __privateSet(this, _retryer, createRetryer({
        initialPromise: fetchOptions == null ? void 0 : fetchOptions.initialPromise,
        fn: context.fetchFn,
        abort: abortController.abort.bind(abortController),
        onSuccess: /* @__PURE__ */ __name((data) => {
          var _a122, _b94, _c6, _d4;
          if (data === void 0) {
            if (false) {
              console.error(
                `Query data cannot be undefined. Please make sure to return a value other than undefined from your query function. Affected query key: ${this.queryHash}`
              );
            }
            onError(new Error(`${this.queryHash} data is undefined`));
            return;
          }
          try {
            this.setData(data);
          } catch (error) {
            onError(error);
            return;
          }
          (_b94 = (_a122 = __privateGet(this, _cache).config).onSuccess) == null ? void 0 : _b94.call(_a122, data, this);
          (_d4 = (_c6 = __privateGet(this, _cache).config).onSettled) == null ? void 0 : _d4.call(
            _c6,
            data,
            this.state.error,
            this
          );
          this.scheduleGc();
        }, "onSuccess"),
        onError,
        onFail: /* @__PURE__ */ __name((failureCount, error) => {
          __privateMethod(this, __this_instances, dispatch_fn).call(this, { type: "failed", failureCount, error });
        }, "onFail"),
        onPause: /* @__PURE__ */ __name(() => {
          __privateMethod(this, __this_instances, dispatch_fn).call(this, { type: "pause" });
        }, "onPause"),
        onContinue: /* @__PURE__ */ __name(() => {
          __privateMethod(this, __this_instances, dispatch_fn).call(this, { type: "continue" });
        }, "onContinue"),
        retry: context.options.retry,
        retryDelay: context.options.retryDelay,
        networkMode: context.options.networkMode,
        canRun: /* @__PURE__ */ __name(() => true, "canRun")
      }));
      return __privateGet(this, _retryer).start();
    }
  }, _initialState = new WeakMap(), _revertState = new WeakMap(), _cache = new WeakMap(), _retryer = new WeakMap(), _defaultOptions = new WeakMap(), _abortSignalConsumed = new WeakMap(), __this_instances = new WeakSet(), dispatch_fn = /* @__PURE__ */ __name(function(action) {
    const reducer3 = /* @__PURE__ */ __name((state) => {
      var _a121, _b93;
      switch (action.type) {
        case "failed":
          return __spreadProps(__spreadValues({}, state), {
            fetchFailureCount: action.failureCount,
            fetchFailureReason: action.error
          });
        case "pause":
          return __spreadProps(__spreadValues({}, state), {
            fetchStatus: "paused"
          });
        case "continue":
          return __spreadProps(__spreadValues({}, state), {
            fetchStatus: "fetching"
          });
        case "fetch":
          return __spreadProps(__spreadValues(__spreadValues({}, state), fetchState(state.data, this.options)), {
            fetchMeta: (_a121 = action.meta) != null ? _a121 : null
          });
        case "success":
          return __spreadValues(__spreadProps(__spreadValues({}, state), {
            data: action.data,
            dataUpdateCount: state.dataUpdateCount + 1,
            dataUpdatedAt: (_b93 = action.dataUpdatedAt) != null ? _b93 : Date.now(),
            error: null,
            isInvalidated: false,
            status: "success"
          }), !action.manual && {
            fetchStatus: "idle",
            fetchFailureCount: 0,
            fetchFailureReason: null
          });
        case "error":
          const error = action.error;
          if (isCancelledError(error) && error.revert && __privateGet(this, _revertState)) {
            return __spreadProps(__spreadValues({}, __privateGet(this, _revertState)), { fetchStatus: "idle" });
          }
          return __spreadProps(__spreadValues({}, state), {
            error,
            errorUpdateCount: state.errorUpdateCount + 1,
            errorUpdatedAt: Date.now(),
            fetchFailureCount: state.fetchFailureCount + 1,
            fetchFailureReason: error,
            fetchStatus: "idle",
            status: "error"
          });
        case "invalidate":
          return __spreadProps(__spreadValues({}, state), {
            isInvalidated: true
          });
        case "setState":
          return __spreadValues(__spreadValues({}, state), action.state);
      }
    }, "reducer");
    this.state = reducer3(this.state);
    notifyManager.batch(() => {
      this.observers.forEach((observer) => {
        observer.onQueryUpdate();
      });
      __privateGet(this, _cache).notify({ query: this, type: "updated", action });
    });
  }, "#dispatch"), __name(_a6, "Query"), _a6);
  function fetchState(data, options) {
    return __spreadValues({
      fetchFailureCount: 0,
      fetchFailureReason: null,
      fetchStatus: canFetch(options.networkMode) ? "fetching" : "paused"
    }, data === void 0 && {
      error: null,
      status: "pending"
    });
  }
  __name(fetchState, "fetchState");
  function getDefaultState(options) {
    const data = typeof options.initialData === "function" ? options.initialData() : options.initialData;
    const hasData = data !== void 0;
    const initialDataUpdatedAt = hasData ? typeof options.initialDataUpdatedAt === "function" ? options.initialDataUpdatedAt() : options.initialDataUpdatedAt : 0;
    return {
      data,
      dataUpdateCount: 0,
      dataUpdatedAt: hasData ? initialDataUpdatedAt != null ? initialDataUpdatedAt : Date.now() : 0,
      error: null,
      errorUpdateCount: 0,
      errorUpdatedAt: 0,
      fetchFailureCount: 0,
      fetchFailureReason: null,
      fetchMeta: null,
      isInvalidated: false,
      status: hasData ? "success" : "pending",
      fetchStatus: "idle"
    };
  }
  __name(getDefaultState, "getDefaultState");

  // node_modules/@tanstack/query-core/build/modern/queryCache.js
  var _queries, _a7;
  var QueryCache = (_a7 = class extends Subscribable {
    constructor(config = {}) {
      super();
      __privateAdd(this, _queries);
      this.config = config;
      __privateSet(this, _queries, /* @__PURE__ */ new Map());
    }
    build(client, options, state) {
      var _a121;
      const queryKey = options.queryKey;
      const queryHash = (_a121 = options.queryHash) != null ? _a121 : hashQueryKeyByOptions(queryKey, options);
      let query = this.get(queryHash);
      if (!query) {
        query = new Query({
          cache: this,
          queryKey,
          queryHash,
          options: client.defaultQueryOptions(options),
          state,
          defaultOptions: client.getQueryDefaults(queryKey)
        });
        this.add(query);
      }
      return query;
    }
    add(query) {
      if (!__privateGet(this, _queries).has(query.queryHash)) {
        __privateGet(this, _queries).set(query.queryHash, query);
        this.notify({
          type: "added",
          query
        });
      }
    }
    remove(query) {
      const queryInMap = __privateGet(this, _queries).get(query.queryHash);
      if (queryInMap) {
        query.destroy();
        if (queryInMap === query) {
          __privateGet(this, _queries).delete(query.queryHash);
        }
        this.notify({ type: "removed", query });
      }
    }
    clear() {
      notifyManager.batch(() => {
        this.getAll().forEach((query) => {
          this.remove(query);
        });
      });
    }
    get(queryHash) {
      return __privateGet(this, _queries).get(queryHash);
    }
    getAll() {
      return [...__privateGet(this, _queries).values()];
    }
    find(filters) {
      const defaultedFilters = __spreadValues({ exact: true }, filters);
      return this.getAll().find(
        (query) => matchQuery(defaultedFilters, query)
      );
    }
    findAll(filters = {}) {
      const queries = this.getAll();
      return Object.keys(filters).length > 0 ? queries.filter((query) => matchQuery(filters, query)) : queries;
    }
    notify(event) {
      notifyManager.batch(() => {
        this.listeners.forEach((listener) => {
          listener(event);
        });
      });
    }
    onFocus() {
      notifyManager.batch(() => {
        this.getAll().forEach((query) => {
          query.onFocus();
        });
      });
    }
    onOnline() {
      notifyManager.batch(() => {
        this.getAll().forEach((query) => {
          query.onOnline();
        });
      });
    }
  }, _queries = new WeakMap(), __name(_a7, "QueryCache"), _a7);

  // node_modules/@tanstack/query-core/build/modern/mutation.js
  var _observers, _mutationCache, _retryer2, __this_instances2, dispatch_fn2, _a8;
  var Mutation = (_a8 = class extends Removable {
    constructor(config) {
      super();
      __privateAdd(this, __this_instances2);
      __privateAdd(this, _observers);
      __privateAdd(this, _mutationCache);
      __privateAdd(this, _retryer2);
      this.mutationId = config.mutationId;
      __privateSet(this, _mutationCache, config.mutationCache);
      __privateSet(this, _observers, []);
      this.state = config.state || getDefaultState2();
      this.setOptions(config.options);
      this.scheduleGc();
    }
    setOptions(options) {
      this.options = options;
      this.updateGcTime(this.options.gcTime);
    }
    get meta() {
      return this.options.meta;
    }
    addObserver(observer) {
      if (!__privateGet(this, _observers).includes(observer)) {
        __privateGet(this, _observers).push(observer);
        this.clearGcTimeout();
        __privateGet(this, _mutationCache).notify({
          type: "observerAdded",
          mutation: this,
          observer
        });
      }
    }
    removeObserver(observer) {
      __privateSet(this, _observers, __privateGet(this, _observers).filter((x) => x !== observer));
      this.scheduleGc();
      __privateGet(this, _mutationCache).notify({
        type: "observerRemoved",
        mutation: this,
        observer
      });
    }
    optionalRemove() {
      if (!__privateGet(this, _observers).length) {
        if (this.state.status === "pending") {
          this.scheduleGc();
        } else {
          __privateGet(this, _mutationCache).remove(this);
        }
      }
    }
    continue() {
      var _a121, _b93;
      return (_b93 = (_a121 = __privateGet(this, _retryer2)) == null ? void 0 : _a121.continue()) != null ? _b93 : (
        // continuing a mutation assumes that variables are set, mutation must have been dehydrated before
        this.execute(this.state.variables)
      );
    }
    async execute(variables) {
      var _a121, _b93, _c5, _d4, _e4, _f2, _g2, _h2, _i2, _j2, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t, _u;
      __privateSet(this, _retryer2, createRetryer({
        fn: /* @__PURE__ */ __name(() => {
          if (!this.options.mutationFn) {
            return Promise.reject(new Error("No mutationFn found"));
          }
          return this.options.mutationFn(variables);
        }, "fn"),
        onFail: /* @__PURE__ */ __name((failureCount, error) => {
          __privateMethod(this, __this_instances2, dispatch_fn2).call(this, { type: "failed", failureCount, error });
        }, "onFail"),
        onPause: /* @__PURE__ */ __name(() => {
          __privateMethod(this, __this_instances2, dispatch_fn2).call(this, { type: "pause" });
        }, "onPause"),
        onContinue: /* @__PURE__ */ __name(() => {
          __privateMethod(this, __this_instances2, dispatch_fn2).call(this, { type: "continue" });
        }, "onContinue"),
        retry: (_a121 = this.options.retry) != null ? _a121 : 0,
        retryDelay: this.options.retryDelay,
        networkMode: this.options.networkMode,
        canRun: /* @__PURE__ */ __name(() => __privateGet(this, _mutationCache).canRun(this), "canRun")
      }));
      const restored = this.state.status === "pending";
      const isPaused = !__privateGet(this, _retryer2).canStart();
      try {
        if (!restored) {
          __privateMethod(this, __this_instances2, dispatch_fn2).call(this, { type: "pending", variables, isPaused });
          await ((_c5 = (_b93 = __privateGet(this, _mutationCache).config).onMutate) == null ? void 0 : _c5.call(
            _b93,
            variables,
            this
          ));
          const context = await ((_e4 = (_d4 = this.options).onMutate) == null ? void 0 : _e4.call(_d4, variables));
          if (context !== this.state.context) {
            __privateMethod(this, __this_instances2, dispatch_fn2).call(this, {
              type: "pending",
              context,
              variables,
              isPaused
            });
          }
        }
        const data = await __privateGet(this, _retryer2).start();
        await ((_g2 = (_f2 = __privateGet(this, _mutationCache).config).onSuccess) == null ? void 0 : _g2.call(
          _f2,
          data,
          variables,
          this.state.context,
          this
        ));
        await ((_i2 = (_h2 = this.options).onSuccess) == null ? void 0 : _i2.call(_h2, data, variables, this.state.context));
        await ((_k = (_j2 = __privateGet(this, _mutationCache).config).onSettled) == null ? void 0 : _k.call(
          _j2,
          data,
          null,
          this.state.variables,
          this.state.context,
          this
        ));
        await ((_m = (_l = this.options).onSettled) == null ? void 0 : _m.call(_l, data, null, variables, this.state.context));
        __privateMethod(this, __this_instances2, dispatch_fn2).call(this, { type: "success", data });
        return data;
      } catch (error) {
        try {
          await ((_o = (_n = __privateGet(this, _mutationCache).config).onError) == null ? void 0 : _o.call(
            _n,
            error,
            variables,
            this.state.context,
            this
          ));
          await ((_q = (_p = this.options).onError) == null ? void 0 : _q.call(
            _p,
            error,
            variables,
            this.state.context
          ));
          await ((_s = (_r = __privateGet(this, _mutationCache).config).onSettled) == null ? void 0 : _s.call(
            _r,
            void 0,
            error,
            this.state.variables,
            this.state.context,
            this
          ));
          await ((_u = (_t = this.options).onSettled) == null ? void 0 : _u.call(
            _t,
            void 0,
            error,
            variables,
            this.state.context
          ));
          throw error;
        } finally {
          __privateMethod(this, __this_instances2, dispatch_fn2).call(this, { type: "error", error });
        }
      } finally {
        __privateGet(this, _mutationCache).runNext(this);
      }
    }
  }, _observers = new WeakMap(), _mutationCache = new WeakMap(), _retryer2 = new WeakMap(), __this_instances2 = new WeakSet(), dispatch_fn2 = /* @__PURE__ */ __name(function(action) {
    const reducer3 = /* @__PURE__ */ __name((state) => {
      switch (action.type) {
        case "failed":
          return __spreadProps(__spreadValues({}, state), {
            failureCount: action.failureCount,
            failureReason: action.error
          });
        case "pause":
          return __spreadProps(__spreadValues({}, state), {
            isPaused: true
          });
        case "continue":
          return __spreadProps(__spreadValues({}, state), {
            isPaused: false
          });
        case "pending":
          return __spreadProps(__spreadValues({}, state), {
            context: action.context,
            data: void 0,
            failureCount: 0,
            failureReason: null,
            error: null,
            isPaused: action.isPaused,
            status: "pending",
            variables: action.variables,
            submittedAt: Date.now()
          });
        case "success":
          return __spreadProps(__spreadValues({}, state), {
            data: action.data,
            failureCount: 0,
            failureReason: null,
            error: null,
            status: "success",
            isPaused: false
          });
        case "error":
          return __spreadProps(__spreadValues({}, state), {
            data: void 0,
            error: action.error,
            failureCount: state.failureCount + 1,
            failureReason: action.error,
            isPaused: false,
            status: "error"
          });
      }
    }, "reducer");
    this.state = reducer3(this.state);
    notifyManager.batch(() => {
      __privateGet(this, _observers).forEach((observer) => {
        observer.onMutationUpdate(action);
      });
      __privateGet(this, _mutationCache).notify({
        mutation: this,
        type: "updated",
        action
      });
    });
  }, "#dispatch"), __name(_a8, "Mutation"), _a8);
  function getDefaultState2() {
    return {
      context: void 0,
      data: void 0,
      error: null,
      failureCount: 0,
      failureReason: null,
      isPaused: false,
      status: "idle",
      variables: void 0,
      submittedAt: 0
    };
  }
  __name(getDefaultState2, "getDefaultState");

  // node_modules/@tanstack/query-core/build/modern/mutationCache.js
  var _mutations, _mutationId, _a9;
  var MutationCache = (_a9 = class extends Subscribable {
    constructor(config = {}) {
      super();
      __privateAdd(this, _mutations);
      __privateAdd(this, _mutationId);
      this.config = config;
      __privateSet(this, _mutations, /* @__PURE__ */ new Map());
      __privateSet(this, _mutationId, Date.now());
    }
    build(client, options, state) {
      const mutation = new Mutation({
        mutationCache: this,
        mutationId: ++__privateWrapper(this, _mutationId)._,
        options: client.defaultMutationOptions(options),
        state
      });
      this.add(mutation);
      return mutation;
    }
    add(mutation) {
      var _a121;
      const scope = scopeFor(mutation);
      const mutations = (_a121 = __privateGet(this, _mutations).get(scope)) != null ? _a121 : [];
      mutations.push(mutation);
      __privateGet(this, _mutations).set(scope, mutations);
      this.notify({ type: "added", mutation });
    }
    remove(mutation) {
      var _a121;
      const scope = scopeFor(mutation);
      if (__privateGet(this, _mutations).has(scope)) {
        const mutations = (_a121 = __privateGet(this, _mutations).get(scope)) == null ? void 0 : _a121.filter((x) => x !== mutation);
        if (mutations) {
          if (mutations.length === 0) {
            __privateGet(this, _mutations).delete(scope);
          } else {
            __privateGet(this, _mutations).set(scope, mutations);
          }
        }
      }
      this.notify({ type: "removed", mutation });
    }
    canRun(mutation) {
      var _a121;
      const firstPendingMutation = (_a121 = __privateGet(this, _mutations).get(scopeFor(mutation))) == null ? void 0 : _a121.find((m2) => m2.state.status === "pending");
      return !firstPendingMutation || firstPendingMutation === mutation;
    }
    runNext(mutation) {
      var _a121, _b93;
      const foundMutation = (_a121 = __privateGet(this, _mutations).get(scopeFor(mutation))) == null ? void 0 : _a121.find((m2) => m2 !== mutation && m2.state.isPaused);
      return (_b93 = foundMutation == null ? void 0 : foundMutation.continue()) != null ? _b93 : Promise.resolve();
    }
    clear() {
      notifyManager.batch(() => {
        this.getAll().forEach((mutation) => {
          this.remove(mutation);
        });
      });
    }
    getAll() {
      return [...__privateGet(this, _mutations).values()].flat();
    }
    find(filters) {
      const defaultedFilters = __spreadValues({ exact: true }, filters);
      return this.getAll().find(
        (mutation) => matchMutation(defaultedFilters, mutation)
      );
    }
    findAll(filters = {}) {
      return this.getAll().filter((mutation) => matchMutation(filters, mutation));
    }
    notify(event) {
      notifyManager.batch(() => {
        this.listeners.forEach((listener) => {
          listener(event);
        });
      });
    }
    resumePausedMutations() {
      const pausedMutations = this.getAll().filter((x) => x.state.isPaused);
      return notifyManager.batch(
        () => Promise.all(
          pausedMutations.map((mutation) => mutation.continue().catch(noop))
        )
      );
    }
  }, _mutations = new WeakMap(), _mutationId = new WeakMap(), __name(_a9, "MutationCache"), _a9);
  function scopeFor(mutation) {
    var _a121, _b93;
    return (_b93 = (_a121 = mutation.options.scope) == null ? void 0 : _a121.id) != null ? _b93 : String(mutation.mutationId);
  }
  __name(scopeFor, "scopeFor");

  // node_modules/@tanstack/query-core/build/modern/infiniteQueryBehavior.js
  function infiniteQueryBehavior(pages) {
    return {
      onFetch: /* @__PURE__ */ __name((context, query) => {
        var _a121, _b93, _c5, _d4, _e4;
        const options = context.options;
        const direction = (_c5 = (_b93 = (_a121 = context.fetchOptions) == null ? void 0 : _a121.meta) == null ? void 0 : _b93.fetchMore) == null ? void 0 : _c5.direction;
        const oldPages = ((_d4 = context.state.data) == null ? void 0 : _d4.pages) || [];
        const oldPageParams = ((_e4 = context.state.data) == null ? void 0 : _e4.pageParams) || [];
        let result = { pages: [], pageParams: [] };
        let currentPage = 0;
        const fetchFn = /* @__PURE__ */ __name(async () => {
          var _a122;
          let cancelled = false;
          const addSignalProperty = /* @__PURE__ */ __name((object) => {
            Object.defineProperty(object, "signal", {
              enumerable: true,
              get: /* @__PURE__ */ __name(() => {
                if (context.signal.aborted) {
                  cancelled = true;
                } else {
                  context.signal.addEventListener("abort", () => {
                    cancelled = true;
                  });
                }
                return context.signal;
              }, "get")
            });
          }, "addSignalProperty");
          const queryFn = ensureQueryFn(context.options, context.fetchOptions);
          const fetchPage = /* @__PURE__ */ __name(async (data, param, previous) => {
            if (cancelled) {
              return Promise.reject();
            }
            if (param == null && data.pages.length) {
              return Promise.resolve(data);
            }
            const queryFnContext = {
              queryKey: context.queryKey,
              pageParam: param,
              direction: previous ? "backward" : "forward",
              meta: context.options.meta
            };
            addSignalProperty(queryFnContext);
            const page = await queryFn(
              queryFnContext
            );
            const { maxPages } = context.options;
            const addTo = previous ? addToStart : addToEnd;
            return {
              pages: addTo(data.pages, page, maxPages),
              pageParams: addTo(data.pageParams, param, maxPages)
            };
          }, "fetchPage");
          if (direction && oldPages.length) {
            const previous = direction === "backward";
            const pageParamFn = previous ? getPreviousPageParam : getNextPageParam;
            const oldData = {
              pages: oldPages,
              pageParams: oldPageParams
            };
            const param = pageParamFn(options, oldData);
            result = await fetchPage(oldData, param, previous);
          } else {
            const remainingPages = pages != null ? pages : oldPages.length;
            do {
              const param = currentPage === 0 ? (_a122 = oldPageParams[0]) != null ? _a122 : options.initialPageParam : getNextPageParam(options, result);
              if (currentPage > 0 && param == null) {
                break;
              }
              result = await fetchPage(result, param);
              currentPage++;
            } while (currentPage < remainingPages);
          }
          return result;
        }, "fetchFn");
        if (context.options.persister) {
          context.fetchFn = () => {
            var _a122, _b94;
            return (_b94 = (_a122 = context.options).persister) == null ? void 0 : _b94.call(
              _a122,
              fetchFn,
              {
                queryKey: context.queryKey,
                meta: context.options.meta,
                signal: context.signal
              },
              query
            );
          };
        } else {
          context.fetchFn = fetchFn;
        }
      }, "onFetch")
    };
  }
  __name(infiniteQueryBehavior, "infiniteQueryBehavior");
  function getNextPageParam(options, { pages, pageParams }) {
    const lastIndex = pages.length - 1;
    return pages.length > 0 ? options.getNextPageParam(
      pages[lastIndex],
      pages,
      pageParams[lastIndex],
      pageParams
    ) : void 0;
  }
  __name(getNextPageParam, "getNextPageParam");
  function getPreviousPageParam(options, { pages, pageParams }) {
    var _a121;
    return pages.length > 0 ? (_a121 = options.getPreviousPageParam) == null ? void 0 : _a121.call(options, pages[0], pages, pageParams[0], pageParams) : void 0;
  }
  __name(getPreviousPageParam, "getPreviousPageParam");

  // node_modules/@tanstack/query-core/build/modern/queryClient.js
  var _queryCache, _mutationCache2, _defaultOptions2, _queryDefaults, _mutationDefaults, _mountCount, _unsubscribeFocus, _unsubscribeOnline, _a10;
  var QueryClient = (_a10 = class {
    constructor(config = {}) {
      __privateAdd(this, _queryCache);
      __privateAdd(this, _mutationCache2);
      __privateAdd(this, _defaultOptions2);
      __privateAdd(this, _queryDefaults);
      __privateAdd(this, _mutationDefaults);
      __privateAdd(this, _mountCount);
      __privateAdd(this, _unsubscribeFocus);
      __privateAdd(this, _unsubscribeOnline);
      __privateSet(this, _queryCache, config.queryCache || new QueryCache());
      __privateSet(this, _mutationCache2, config.mutationCache || new MutationCache());
      __privateSet(this, _defaultOptions2, config.defaultOptions || {});
      __privateSet(this, _queryDefaults, /* @__PURE__ */ new Map());
      __privateSet(this, _mutationDefaults, /* @__PURE__ */ new Map());
      __privateSet(this, _mountCount, 0);
    }
    mount() {
      __privateWrapper(this, _mountCount)._++;
      if (__privateGet(this, _mountCount) !== 1)
        return;
      __privateSet(this, _unsubscribeFocus, focusManager.subscribe(async (focused) => {
        if (focused) {
          await this.resumePausedMutations();
          __privateGet(this, _queryCache).onFocus();
        }
      }));
      __privateSet(this, _unsubscribeOnline, onlineManager.subscribe(async (online) => {
        if (online) {
          await this.resumePausedMutations();
          __privateGet(this, _queryCache).onOnline();
        }
      }));
    }
    unmount() {
      var _a121, _b93;
      __privateWrapper(this, _mountCount)._--;
      if (__privateGet(this, _mountCount) !== 0)
        return;
      (_a121 = __privateGet(this, _unsubscribeFocus)) == null ? void 0 : _a121.call(this);
      __privateSet(this, _unsubscribeFocus, void 0);
      (_b93 = __privateGet(this, _unsubscribeOnline)) == null ? void 0 : _b93.call(this);
      __privateSet(this, _unsubscribeOnline, void 0);
    }
    isFetching(filters) {
      return __privateGet(this, _queryCache).findAll(__spreadProps(__spreadValues({}, filters), { fetchStatus: "fetching" })).length;
    }
    isMutating(filters) {
      return __privateGet(this, _mutationCache2).findAll(__spreadProps(__spreadValues({}, filters), { status: "pending" })).length;
    }
    getQueryData(queryKey) {
      var _a121;
      const options = this.defaultQueryOptions({ queryKey });
      return (_a121 = __privateGet(this, _queryCache).get(options.queryHash)) == null ? void 0 : _a121.state.data;
    }
    ensureQueryData(options) {
      const cachedData = this.getQueryData(options.queryKey);
      if (cachedData === void 0)
        return this.fetchQuery(options);
      else {
        const defaultedOptions = this.defaultQueryOptions(options);
        const query = __privateGet(this, _queryCache).build(this, defaultedOptions);
        if (options.revalidateIfStale && query.isStaleByTime(resolveStaleTime(defaultedOptions.staleTime, query))) {
          void this.prefetchQuery(defaultedOptions);
        }
        return Promise.resolve(cachedData);
      }
    }
    getQueriesData(filters) {
      return __privateGet(this, _queryCache).findAll(filters).map(({ queryKey, state }) => {
        const data = state.data;
        return [queryKey, data];
      });
    }
    setQueryData(queryKey, updater, options) {
      const defaultedOptions = this.defaultQueryOptions({ queryKey });
      const query = __privateGet(this, _queryCache).get(
        defaultedOptions.queryHash
      );
      const prevData = query == null ? void 0 : query.state.data;
      const data = functionalUpdate(updater, prevData);
      if (data === void 0) {
        return void 0;
      }
      return __privateGet(this, _queryCache).build(this, defaultedOptions).setData(data, __spreadProps(__spreadValues({}, options), { manual: true }));
    }
    setQueriesData(filters, updater, options) {
      return notifyManager.batch(
        () => __privateGet(this, _queryCache).findAll(filters).map(({ queryKey }) => [
          queryKey,
          this.setQueryData(queryKey, updater, options)
        ])
      );
    }
    getQueryState(queryKey) {
      var _a121;
      const options = this.defaultQueryOptions({ queryKey });
      return (_a121 = __privateGet(this, _queryCache).get(options.queryHash)) == null ? void 0 : _a121.state;
    }
    removeQueries(filters) {
      const queryCache = __privateGet(this, _queryCache);
      notifyManager.batch(() => {
        queryCache.findAll(filters).forEach((query) => {
          queryCache.remove(query);
        });
      });
    }
    resetQueries(filters, options) {
      const queryCache = __privateGet(this, _queryCache);
      const refetchFilters = __spreadValues({
        type: "active"
      }, filters);
      return notifyManager.batch(() => {
        queryCache.findAll(filters).forEach((query) => {
          query.reset();
        });
        return this.refetchQueries(refetchFilters, options);
      });
    }
    cancelQueries(filters = {}, cancelOptions = {}) {
      const defaultedCancelOptions = __spreadValues({ revert: true }, cancelOptions);
      const promises = notifyManager.batch(
        () => __privateGet(this, _queryCache).findAll(filters).map((query) => query.cancel(defaultedCancelOptions))
      );
      return Promise.all(promises).then(noop).catch(noop);
    }
    invalidateQueries(filters = {}, options = {}) {
      return notifyManager.batch(() => {
        var _a121, _b93;
        __privateGet(this, _queryCache).findAll(filters).forEach((query) => {
          query.invalidate();
        });
        if (filters.refetchType === "none") {
          return Promise.resolve();
        }
        const refetchFilters = __spreadProps(__spreadValues({}, filters), {
          type: (_b93 = (_a121 = filters.refetchType) != null ? _a121 : filters.type) != null ? _b93 : "active"
        });
        return this.refetchQueries(refetchFilters, options);
      });
    }
    refetchQueries(filters = {}, options) {
      var _a121;
      const fetchOptions = __spreadProps(__spreadValues({}, options), {
        cancelRefetch: (_a121 = options == null ? void 0 : options.cancelRefetch) != null ? _a121 : true
      });
      const promises = notifyManager.batch(
        () => __privateGet(this, _queryCache).findAll(filters).filter((query) => !query.isDisabled()).map((query) => {
          let promise = query.fetch(void 0, fetchOptions);
          if (!fetchOptions.throwOnError) {
            promise = promise.catch(noop);
          }
          return query.state.fetchStatus === "paused" ? Promise.resolve() : promise;
        })
      );
      return Promise.all(promises).then(noop);
    }
    fetchQuery(options) {
      const defaultedOptions = this.defaultQueryOptions(options);
      if (defaultedOptions.retry === void 0) {
        defaultedOptions.retry = false;
      }
      const query = __privateGet(this, _queryCache).build(this, defaultedOptions);
      return query.isStaleByTime(
        resolveStaleTime(defaultedOptions.staleTime, query)
      ) ? query.fetch(defaultedOptions) : Promise.resolve(query.state.data);
    }
    prefetchQuery(options) {
      return this.fetchQuery(options).then(noop).catch(noop);
    }
    fetchInfiniteQuery(options) {
      options.behavior = infiniteQueryBehavior(options.pages);
      return this.fetchQuery(options);
    }
    prefetchInfiniteQuery(options) {
      return this.fetchInfiniteQuery(options).then(noop).catch(noop);
    }
    ensureInfiniteQueryData(options) {
      options.behavior = infiniteQueryBehavior(options.pages);
      return this.ensureQueryData(options);
    }
    resumePausedMutations() {
      if (onlineManager.isOnline()) {
        return __privateGet(this, _mutationCache2).resumePausedMutations();
      }
      return Promise.resolve();
    }
    getQueryCache() {
      return __privateGet(this, _queryCache);
    }
    getMutationCache() {
      return __privateGet(this, _mutationCache2);
    }
    getDefaultOptions() {
      return __privateGet(this, _defaultOptions2);
    }
    setDefaultOptions(options) {
      __privateSet(this, _defaultOptions2, options);
    }
    setQueryDefaults(queryKey, options) {
      __privateGet(this, _queryDefaults).set(hashKey(queryKey), {
        queryKey,
        defaultOptions: options
      });
    }
    getQueryDefaults(queryKey) {
      const defaults = [...__privateGet(this, _queryDefaults).values()];
      let result = {};
      defaults.forEach((queryDefault) => {
        if (partialMatchKey(queryKey, queryDefault.queryKey)) {
          result = __spreadValues(__spreadValues({}, result), queryDefault.defaultOptions);
        }
      });
      return result;
    }
    setMutationDefaults(mutationKey, options) {
      __privateGet(this, _mutationDefaults).set(hashKey(mutationKey), {
        mutationKey,
        defaultOptions: options
      });
    }
    getMutationDefaults(mutationKey) {
      const defaults = [...__privateGet(this, _mutationDefaults).values()];
      let result = {};
      defaults.forEach((queryDefault) => {
        if (partialMatchKey(mutationKey, queryDefault.mutationKey)) {
          result = __spreadValues(__spreadValues({}, result), queryDefault.defaultOptions);
        }
      });
      return result;
    }
    defaultQueryOptions(options) {
      if (options._defaulted) {
        return options;
      }
      const defaultedOptions = __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, __privateGet(this, _defaultOptions2).queries), this.getQueryDefaults(options.queryKey)), options), {
        _defaulted: true
      });
      if (!defaultedOptions.queryHash) {
        defaultedOptions.queryHash = hashQueryKeyByOptions(
          defaultedOptions.queryKey,
          defaultedOptions
        );
      }
      if (defaultedOptions.refetchOnReconnect === void 0) {
        defaultedOptions.refetchOnReconnect = defaultedOptions.networkMode !== "always";
      }
      if (defaultedOptions.throwOnError === void 0) {
        defaultedOptions.throwOnError = !!defaultedOptions.suspense;
      }
      if (!defaultedOptions.networkMode && defaultedOptions.persister) {
        defaultedOptions.networkMode = "offlineFirst";
      }
      if (defaultedOptions.enabled !== true && defaultedOptions.queryFn === skipToken) {
        defaultedOptions.enabled = false;
      }
      return defaultedOptions;
    }
    defaultMutationOptions(options) {
      if (options == null ? void 0 : options._defaulted) {
        return options;
      }
      return __spreadProps(__spreadValues(__spreadValues(__spreadValues({}, __privateGet(this, _defaultOptions2).mutations), (options == null ? void 0 : options.mutationKey) && this.getMutationDefaults(options.mutationKey)), options), {
        _defaulted: true
      });
    }
    clear() {
      __privateGet(this, _queryCache).clear();
      __privateGet(this, _mutationCache2).clear();
    }
  }, _queryCache = new WeakMap(), _mutationCache2 = new WeakMap(), _defaultOptions2 = new WeakMap(), _queryDefaults = new WeakMap(), _mutationDefaults = new WeakMap(), _mountCount = new WeakMap(), _unsubscribeFocus = new WeakMap(), _unsubscribeOnline = new WeakMap(), __name(_a10, "QueryClient"), _a10);

  // node_modules/@tanstack/query-core/build/modern/queryObserver.js
  var _client, _currentQuery, _currentQueryInitialState, _currentResult, _currentResultState, _currentResultOptions, _currentThenable, _selectError, _selectFn, _selectResult, _lastQueryWithDefinedData, _staleTimeoutId, _refetchIntervalId, _currentRefetchInterval, _trackedProps, __this_instances3, executeFetch_fn, updateStaleTimeout_fn, computeRefetchInterval_fn, updateRefetchInterval_fn, updateTimers_fn, clearStaleTimeout_fn, clearRefetchInterval_fn, updateQuery_fn, notify_fn, _b;
  var QueryObserver = (_b = class extends Subscribable {
    constructor(client, options) {
      super();
      __privateAdd(this, __this_instances3);
      __privateAdd(this, _client);
      __privateAdd(this, _currentQuery);
      __privateAdd(this, _currentQueryInitialState);
      __privateAdd(this, _currentResult);
      __privateAdd(this, _currentResultState);
      __privateAdd(this, _currentResultOptions);
      __privateAdd(this, _currentThenable);
      __privateAdd(this, _selectError);
      __privateAdd(this, _selectFn);
      __privateAdd(this, _selectResult);
      // This property keeps track of the last query with defined data.
      // It will be used to pass the previous data and query to the placeholder function between renders.
      __privateAdd(this, _lastQueryWithDefinedData);
      __privateAdd(this, _staleTimeoutId);
      __privateAdd(this, _refetchIntervalId);
      __privateAdd(this, _currentRefetchInterval);
      __privateAdd(this, _trackedProps, /* @__PURE__ */ new Set());
      this.options = options;
      __privateSet(this, _client, client);
      __privateSet(this, _selectError, null);
      __privateSet(this, _currentThenable, pendingThenable());
      if (!this.options.experimental_prefetchInRender) {
        __privateGet(this, _currentThenable).reject(
          new Error("experimental_prefetchInRender feature flag is not enabled")
        );
      }
      this.bindMethods();
      this.setOptions(options);
    }
    bindMethods() {
      this.refetch = this.refetch.bind(this);
    }
    onSubscribe() {
      if (this.listeners.size === 1) {
        __privateGet(this, _currentQuery).addObserver(this);
        if (shouldFetchOnMount(__privateGet(this, _currentQuery), this.options)) {
          __privateMethod(this, __this_instances3, executeFetch_fn).call(this);
        } else {
          this.updateResult();
        }
        __privateMethod(this, __this_instances3, updateTimers_fn).call(this);
      }
    }
    onUnsubscribe() {
      if (!this.hasListeners()) {
        this.destroy();
      }
    }
    shouldFetchOnReconnect() {
      return shouldFetchOn(
        __privateGet(this, _currentQuery),
        this.options,
        this.options.refetchOnReconnect
      );
    }
    shouldFetchOnWindowFocus() {
      return shouldFetchOn(
        __privateGet(this, _currentQuery),
        this.options,
        this.options.refetchOnWindowFocus
      );
    }
    destroy() {
      this.listeners = /* @__PURE__ */ new Set();
      __privateMethod(this, __this_instances3, clearStaleTimeout_fn).call(this);
      __privateMethod(this, __this_instances3, clearRefetchInterval_fn).call(this);
      __privateGet(this, _currentQuery).removeObserver(this);
    }
    setOptions(options, notifyOptions) {
      const prevOptions = this.options;
      const prevQuery = __privateGet(this, _currentQuery);
      this.options = __privateGet(this, _client).defaultQueryOptions(options);
      if (this.options.enabled !== void 0 && typeof this.options.enabled !== "boolean" && typeof this.options.enabled !== "function" && typeof resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== "boolean") {
        throw new Error(
          "Expected enabled to be a boolean or a callback that returns a boolean"
        );
      }
      __privateMethod(this, __this_instances3, updateQuery_fn).call(this);
      __privateGet(this, _currentQuery).setOptions(this.options);
      if (prevOptions._defaulted && !shallowEqualObjects(this.options, prevOptions)) {
        __privateGet(this, _client).getQueryCache().notify({
          type: "observerOptionsUpdated",
          query: __privateGet(this, _currentQuery),
          observer: this
        });
      }
      const mounted = this.hasListeners();
      if (mounted && shouldFetchOptionally(
        __privateGet(this, _currentQuery),
        prevQuery,
        this.options,
        prevOptions
      )) {
        __privateMethod(this, __this_instances3, executeFetch_fn).call(this);
      }
      this.updateResult(notifyOptions);
      if (mounted && (__privateGet(this, _currentQuery) !== prevQuery || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== resolveEnabled(prevOptions.enabled, __privateGet(this, _currentQuery)) || resolveStaleTime(this.options.staleTime, __privateGet(this, _currentQuery)) !== resolveStaleTime(prevOptions.staleTime, __privateGet(this, _currentQuery)))) {
        __privateMethod(this, __this_instances3, updateStaleTimeout_fn).call(this);
      }
      const nextRefetchInterval = __privateMethod(this, __this_instances3, computeRefetchInterval_fn).call(this);
      if (mounted && (__privateGet(this, _currentQuery) !== prevQuery || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) !== resolveEnabled(prevOptions.enabled, __privateGet(this, _currentQuery)) || nextRefetchInterval !== __privateGet(this, _currentRefetchInterval))) {
        __privateMethod(this, __this_instances3, updateRefetchInterval_fn).call(this, nextRefetchInterval);
      }
    }
    getOptimisticResult(options) {
      const query = __privateGet(this, _client).getQueryCache().build(__privateGet(this, _client), options);
      const result = this.createResult(query, options);
      if (shouldAssignObserverCurrentProperties(this, result)) {
        __privateSet(this, _currentResult, result);
        __privateSet(this, _currentResultOptions, this.options);
        __privateSet(this, _currentResultState, __privateGet(this, _currentQuery).state);
      }
      return result;
    }
    getCurrentResult() {
      return __privateGet(this, _currentResult);
    }
    trackResult(result, onPropTracked) {
      const trackedResult = {};
      Object.keys(result).forEach((key) => {
        Object.defineProperty(trackedResult, key, {
          configurable: false,
          enumerable: true,
          get: /* @__PURE__ */ __name(() => {
            this.trackProp(key);
            onPropTracked == null ? void 0 : onPropTracked(key);
            return result[key];
          }, "get")
        });
      });
      return trackedResult;
    }
    trackProp(key) {
      __privateGet(this, _trackedProps).add(key);
    }
    getCurrentQuery() {
      return __privateGet(this, _currentQuery);
    }
    refetch(_a121 = {}) {
      var options = __objRest(_a121, []);
      return this.fetch(__spreadValues({}, options));
    }
    fetchOptimistic(options) {
      const defaultedOptions = __privateGet(this, _client).defaultQueryOptions(options);
      const query = __privateGet(this, _client).getQueryCache().build(__privateGet(this, _client), defaultedOptions);
      return query.fetch().then(() => this.createResult(query, defaultedOptions));
    }
    fetch(fetchOptions) {
      var _a121;
      return __privateMethod(this, __this_instances3, executeFetch_fn).call(this, __spreadProps(__spreadValues({}, fetchOptions), {
        cancelRefetch: (_a121 = fetchOptions.cancelRefetch) != null ? _a121 : true
      })).then(() => {
        this.updateResult();
        return __privateGet(this, _currentResult);
      });
    }
    createResult(query, options) {
      var _a121;
      const prevQuery = __privateGet(this, _currentQuery);
      const prevOptions = this.options;
      const prevResult = __privateGet(this, _currentResult);
      const prevResultState = __privateGet(this, _currentResultState);
      const prevResultOptions = __privateGet(this, _currentResultOptions);
      const queryChange = query !== prevQuery;
      const queryInitialState = queryChange ? query.state : __privateGet(this, _currentQueryInitialState);
      const { state } = query;
      let newState = __spreadValues({}, state);
      let isPlaceholderData = false;
      let data;
      if (options._optimisticResults) {
        const mounted = this.hasListeners();
        const fetchOnMount = !mounted && shouldFetchOnMount(query, options);
        const fetchOptionally = mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions);
        if (fetchOnMount || fetchOptionally) {
          newState = __spreadValues(__spreadValues({}, newState), fetchState(state.data, query.options));
        }
        if (options._optimisticResults === "isRestoring") {
          newState.fetchStatus = "idle";
        }
      }
      let { error, errorUpdatedAt, status } = newState;
      if (options.select && newState.data !== void 0) {
        if (prevResult && newState.data === (prevResultState == null ? void 0 : prevResultState.data) && options.select === __privateGet(this, _selectFn)) {
          data = __privateGet(this, _selectResult);
        } else {
          try {
            __privateSet(this, _selectFn, options.select);
            data = options.select(newState.data);
            data = replaceData(prevResult == null ? void 0 : prevResult.data, data, options);
            __privateSet(this, _selectResult, data);
            __privateSet(this, _selectError, null);
          } catch (selectError) {
            __privateSet(this, _selectError, selectError);
          }
        }
      } else {
        data = newState.data;
      }
      if (options.placeholderData !== void 0 && data === void 0 && status === "pending") {
        let placeholderData;
        if ((prevResult == null ? void 0 : prevResult.isPlaceholderData) && options.placeholderData === (prevResultOptions == null ? void 0 : prevResultOptions.placeholderData)) {
          placeholderData = prevResult.data;
        } else {
          placeholderData = typeof options.placeholderData === "function" ? options.placeholderData(
            (_a121 = __privateGet(this, _lastQueryWithDefinedData)) == null ? void 0 : _a121.state.data,
            __privateGet(this, _lastQueryWithDefinedData)
          ) : options.placeholderData;
          if (options.select && placeholderData !== void 0) {
            try {
              placeholderData = options.select(placeholderData);
              __privateSet(this, _selectError, null);
            } catch (selectError) {
              __privateSet(this, _selectError, selectError);
            }
          }
        }
        if (placeholderData !== void 0) {
          status = "success";
          data = replaceData(
            prevResult == null ? void 0 : prevResult.data,
            placeholderData,
            options
          );
          isPlaceholderData = true;
        }
      }
      if (__privateGet(this, _selectError)) {
        error = __privateGet(this, _selectError);
        data = __privateGet(this, _selectResult);
        errorUpdatedAt = Date.now();
        status = "error";
      }
      const isFetching = newState.fetchStatus === "fetching";
      const isPending = status === "pending";
      const isError = status === "error";
      const isLoading = isPending && isFetching;
      const hasData = data !== void 0;
      const result = {
        status,
        fetchStatus: newState.fetchStatus,
        isPending,
        isSuccess: status === "success",
        isError,
        isInitialLoading: isLoading,
        isLoading,
        data,
        dataUpdatedAt: newState.dataUpdatedAt,
        error,
        errorUpdatedAt,
        failureCount: newState.fetchFailureCount,
        failureReason: newState.fetchFailureReason,
        errorUpdateCount: newState.errorUpdateCount,
        isFetched: newState.dataUpdateCount > 0 || newState.errorUpdateCount > 0,
        isFetchedAfterMount: newState.dataUpdateCount > queryInitialState.dataUpdateCount || newState.errorUpdateCount > queryInitialState.errorUpdateCount,
        isFetching,
        isRefetching: isFetching && !isPending,
        isLoadingError: isError && !hasData,
        isPaused: newState.fetchStatus === "paused",
        isPlaceholderData,
        isRefetchError: isError && hasData,
        isStale: isStale(query, options),
        refetch: this.refetch,
        promise: __privateGet(this, _currentThenable)
      };
      const nextResult = result;
      if (this.options.experimental_prefetchInRender) {
        const finalizeThenableIfPossible = /* @__PURE__ */ __name((thenable) => {
          if (nextResult.status === "error") {
            thenable.reject(nextResult.error);
          } else if (nextResult.data !== void 0) {
            thenable.resolve(nextResult.data);
          }
        }, "finalizeThenableIfPossible");
        const recreateThenable = /* @__PURE__ */ __name(() => {
          const pending = __privateSet(this, _currentThenable, nextResult.promise = pendingThenable());
          finalizeThenableIfPossible(pending);
        }, "recreateThenable");
        const prevThenable = __privateGet(this, _currentThenable);
        switch (prevThenable.status) {
          case "pending":
            if (query.queryHash === prevQuery.queryHash) {
              finalizeThenableIfPossible(prevThenable);
            }
            break;
          case "fulfilled":
            if (nextResult.status === "error" || nextResult.data !== prevThenable.value) {
              recreateThenable();
            }
            break;
          case "rejected":
            if (nextResult.status !== "error" || nextResult.error !== prevThenable.reason) {
              recreateThenable();
            }
            break;
        }
      }
      return nextResult;
    }
    updateResult(notifyOptions) {
      const prevResult = __privateGet(this, _currentResult);
      const nextResult = this.createResult(__privateGet(this, _currentQuery), this.options);
      __privateSet(this, _currentResultState, __privateGet(this, _currentQuery).state);
      __privateSet(this, _currentResultOptions, this.options);
      if (__privateGet(this, _currentResultState).data !== void 0) {
        __privateSet(this, _lastQueryWithDefinedData, __privateGet(this, _currentQuery));
      }
      if (shallowEqualObjects(nextResult, prevResult)) {
        return;
      }
      __privateSet(this, _currentResult, nextResult);
      const defaultNotifyOptions = {};
      const shouldNotifyListeners = /* @__PURE__ */ __name(() => {
        if (!prevResult) {
          return true;
        }
        const { notifyOnChangeProps } = this.options;
        const notifyOnChangePropsValue = typeof notifyOnChangeProps === "function" ? notifyOnChangeProps() : notifyOnChangeProps;
        if (notifyOnChangePropsValue === "all" || !notifyOnChangePropsValue && !__privateGet(this, _trackedProps).size) {
          return true;
        }
        const includedProps = new Set(
          notifyOnChangePropsValue != null ? notifyOnChangePropsValue : __privateGet(this, _trackedProps)
        );
        if (this.options.throwOnError) {
          includedProps.add("error");
        }
        return Object.keys(__privateGet(this, _currentResult)).some((key) => {
          const typedKey = key;
          const changed = __privateGet(this, _currentResult)[typedKey] !== prevResult[typedKey];
          return changed && includedProps.has(typedKey);
        });
      }, "shouldNotifyListeners");
      if ((notifyOptions == null ? void 0 : notifyOptions.listeners) !== false && shouldNotifyListeners()) {
        defaultNotifyOptions.listeners = true;
      }
      __privateMethod(this, __this_instances3, notify_fn).call(this, __spreadValues(__spreadValues({}, defaultNotifyOptions), notifyOptions));
    }
    onQueryUpdate() {
      this.updateResult();
      if (this.hasListeners()) {
        __privateMethod(this, __this_instances3, updateTimers_fn).call(this);
      }
    }
  }, _client = new WeakMap(), _currentQuery = new WeakMap(), _currentQueryInitialState = new WeakMap(), _currentResult = new WeakMap(), _currentResultState = new WeakMap(), _currentResultOptions = new WeakMap(), _currentThenable = new WeakMap(), _selectError = new WeakMap(), _selectFn = new WeakMap(), _selectResult = new WeakMap(), _lastQueryWithDefinedData = new WeakMap(), _staleTimeoutId = new WeakMap(), _refetchIntervalId = new WeakMap(), _currentRefetchInterval = new WeakMap(), _trackedProps = new WeakMap(), __this_instances3 = new WeakSet(), executeFetch_fn = /* @__PURE__ */ __name(function(fetchOptions) {
    __privateMethod(this, __this_instances3, updateQuery_fn).call(this);
    let promise = __privateGet(this, _currentQuery).fetch(
      this.options,
      fetchOptions
    );
    if (!(fetchOptions == null ? void 0 : fetchOptions.throwOnError)) {
      promise = promise.catch(noop);
    }
    return promise;
  }, "#executeFetch"), updateStaleTimeout_fn = /* @__PURE__ */ __name(function() {
    __privateMethod(this, __this_instances3, clearStaleTimeout_fn).call(this);
    const staleTime = resolveStaleTime(
      this.options.staleTime,
      __privateGet(this, _currentQuery)
    );
    if (isServer || __privateGet(this, _currentResult).isStale || !isValidTimeout(staleTime)) {
      return;
    }
    const time2 = timeUntilStale(__privateGet(this, _currentResult).dataUpdatedAt, staleTime);
    const timeout = time2 + 1;
    __privateSet(this, _staleTimeoutId, setTimeout(() => {
      if (!__privateGet(this, _currentResult).isStale) {
        this.updateResult();
      }
    }, timeout));
  }, "#updateStaleTimeout"), computeRefetchInterval_fn = /* @__PURE__ */ __name(function() {
    var _a121;
    return (_a121 = typeof this.options.refetchInterval === "function" ? this.options.refetchInterval(__privateGet(this, _currentQuery)) : this.options.refetchInterval) != null ? _a121 : false;
  }, "#computeRefetchInterval"), updateRefetchInterval_fn = /* @__PURE__ */ __name(function(nextInterval) {
    __privateMethod(this, __this_instances3, clearRefetchInterval_fn).call(this);
    __privateSet(this, _currentRefetchInterval, nextInterval);
    if (isServer || resolveEnabled(this.options.enabled, __privateGet(this, _currentQuery)) === false || !isValidTimeout(__privateGet(this, _currentRefetchInterval)) || __privateGet(this, _currentRefetchInterval) === 0) {
      return;
    }
    __privateSet(this, _refetchIntervalId, setInterval(() => {
      if (this.options.refetchIntervalInBackground || focusManager.isFocused()) {
        __privateMethod(this, __this_instances3, executeFetch_fn).call(this);
      }
    }, __privateGet(this, _currentRefetchInterval)));
  }, "#updateRefetchInterval"), updateTimers_fn = /* @__PURE__ */ __name(function() {
    __privateMethod(this, __this_instances3, updateStaleTimeout_fn).call(this);
    __privateMethod(this, __this_instances3, updateRefetchInterval_fn).call(this, __privateMethod(this, __this_instances3, computeRefetchInterval_fn).call(this));
  }, "#updateTimers"), clearStaleTimeout_fn = /* @__PURE__ */ __name(function() {
    if (__privateGet(this, _staleTimeoutId)) {
      clearTimeout(__privateGet(this, _staleTimeoutId));
      __privateSet(this, _staleTimeoutId, void 0);
    }
  }, "#clearStaleTimeout"), clearRefetchInterval_fn = /* @__PURE__ */ __name(function() {
    if (__privateGet(this, _refetchIntervalId)) {
      clearInterval(__privateGet(this, _refetchIntervalId));
      __privateSet(this, _refetchIntervalId, void 0);
    }
  }, "#clearRefetchInterval"), updateQuery_fn = /* @__PURE__ */ __name(function() {
    const query = __privateGet(this, _client).getQueryCache().build(__privateGet(this, _client), this.options);
    if (query === __privateGet(this, _currentQuery)) {
      return;
    }
    const prevQuery = __privateGet(this, _currentQuery);
    __privateSet(this, _currentQuery, query);
    __privateSet(this, _currentQueryInitialState, query.state);
    if (this.hasListeners()) {
      prevQuery == null ? void 0 : prevQuery.removeObserver(this);
      query.addObserver(this);
    }
  }, "#updateQuery"), notify_fn = /* @__PURE__ */ __name(function(notifyOptions) {
    notifyManager.batch(() => {
      if (notifyOptions.listeners) {
        this.listeners.forEach((listener) => {
          listener(__privateGet(this, _currentResult));
        });
      }
      __privateGet(this, _client).getQueryCache().notify({
        query: __privateGet(this, _currentQuery),
        type: "observerResultsUpdated"
      });
    });
  }, "#notify"), __name(_b, "QueryObserver"), _b);
  function shouldLoadOnMount(query, options) {
    return resolveEnabled(options.enabled, query) !== false && query.state.data === void 0 && !(query.state.status === "error" && options.retryOnMount === false);
  }
  __name(shouldLoadOnMount, "shouldLoadOnMount");
  function shouldFetchOnMount(query, options) {
    return shouldLoadOnMount(query, options) || query.state.data !== void 0 && shouldFetchOn(query, options, options.refetchOnMount);
  }
  __name(shouldFetchOnMount, "shouldFetchOnMount");
  function shouldFetchOn(query, options, field) {
    if (resolveEnabled(options.enabled, query) !== false) {
      const value = typeof field === "function" ? field(query) : field;
      return value === "always" || value !== false && isStale(query, options);
    }
    return false;
  }
  __name(shouldFetchOn, "shouldFetchOn");
  function shouldFetchOptionally(query, prevQuery, options, prevOptions) {
    return (query !== prevQuery || resolveEnabled(prevOptions.enabled, query) === false) && (!options.suspense || query.state.status !== "error") && isStale(query, options);
  }
  __name(shouldFetchOptionally, "shouldFetchOptionally");
  function isStale(query, options) {
    return resolveEnabled(options.enabled, query) !== false && query.isStaleByTime(resolveStaleTime(options.staleTime, query));
  }
  __name(isStale, "isStale");
  function shouldAssignObserverCurrentProperties(observer, optimisticResult) {
    if (!shallowEqualObjects(observer.getCurrentResult(), optimisticResult)) {
      return true;
    }
    return false;
  }
  __name(shouldAssignObserverCurrentProperties, "shouldAssignObserverCurrentProperties");

  // node_modules/@tanstack/query-core/build/modern/mutationObserver.js
  var _client2, _currentResult2, _currentMutation, _mutateOptions, __this_instances4, updateResult_fn, notify_fn2, _a11;
  var MutationObserver2 = (_a11 = class extends Subscribable {
    constructor(client, options) {
      super();
      __privateAdd(this, __this_instances4);
      __privateAdd(this, _client2);
      __privateAdd(this, _currentResult2);
      __privateAdd(this, _currentMutation);
      __privateAdd(this, _mutateOptions);
      __privateSet(this, _client2, client);
      this.setOptions(options);
      this.bindMethods();
      __privateMethod(this, __this_instances4, updateResult_fn).call(this);
    }
    bindMethods() {
      this.mutate = this.mutate.bind(this);
      this.reset = this.reset.bind(this);
    }
    setOptions(options) {
      var _a121;
      const prevOptions = this.options;
      this.options = __privateGet(this, _client2).defaultMutationOptions(options);
      if (!shallowEqualObjects(this.options, prevOptions)) {
        __privateGet(this, _client2).getMutationCache().notify({
          type: "observerOptionsUpdated",
          mutation: __privateGet(this, _currentMutation),
          observer: this
        });
      }
      if ((prevOptions == null ? void 0 : prevOptions.mutationKey) && this.options.mutationKey && hashKey(prevOptions.mutationKey) !== hashKey(this.options.mutationKey)) {
        this.reset();
      } else if (((_a121 = __privateGet(this, _currentMutation)) == null ? void 0 : _a121.state.status) === "pending") {
        __privateGet(this, _currentMutation).setOptions(this.options);
      }
    }
    onUnsubscribe() {
      var _a121;
      if (!this.hasListeners()) {
        (_a121 = __privateGet(this, _currentMutation)) == null ? void 0 : _a121.removeObserver(this);
      }
    }
    onMutationUpdate(action) {
      __privateMethod(this, __this_instances4, updateResult_fn).call(this);
      __privateMethod(this, __this_instances4, notify_fn2).call(this, action);
    }
    getCurrentResult() {
      return __privateGet(this, _currentResult2);
    }
    reset() {
      var _a121;
      (_a121 = __privateGet(this, _currentMutation)) == null ? void 0 : _a121.removeObserver(this);
      __privateSet(this, _currentMutation, void 0);
      __privateMethod(this, __this_instances4, updateResult_fn).call(this);
      __privateMethod(this, __this_instances4, notify_fn2).call(this);
    }
    mutate(variables, options) {
      var _a121;
      __privateSet(this, _mutateOptions, options);
      (_a121 = __privateGet(this, _currentMutation)) == null ? void 0 : _a121.removeObserver(this);
      __privateSet(this, _currentMutation, __privateGet(this, _client2).getMutationCache().build(__privateGet(this, _client2), this.options));
      __privateGet(this, _currentMutation).addObserver(this);
      return __privateGet(this, _currentMutation).execute(variables);
    }
  }, _client2 = new WeakMap(), _currentResult2 = new WeakMap(), _currentMutation = new WeakMap(), _mutateOptions = new WeakMap(), __this_instances4 = new WeakSet(), updateResult_fn = /* @__PURE__ */ __name(function() {
    var _a121, _b93;
    const state = (_b93 = (_a121 = __privateGet(this, _currentMutation)) == null ? void 0 : _a121.state) != null ? _b93 : getDefaultState2();
    __privateSet(this, _currentResult2, __spreadProps(__spreadValues({}, state), {
      isPending: state.status === "pending",
      isSuccess: state.status === "success",
      isError: state.status === "error",
      isIdle: state.status === "idle",
      mutate: this.mutate,
      reset: this.reset
    }));
  }, "#updateResult"), notify_fn2 = /* @__PURE__ */ __name(function(action) {
    notifyManager.batch(() => {
      var _a121, _b93, _c5, _d4, _e4, _f2, _g2, _h2;
      if (__privateGet(this, _mutateOptions) && this.hasListeners()) {
        const variables = __privateGet(this, _currentResult2).variables;
        const context = __privateGet(this, _currentResult2).context;
        if ((action == null ? void 0 : action.type) === "success") {
          (_b93 = (_a121 = __privateGet(this, _mutateOptions)).onSuccess) == null ? void 0 : _b93.call(_a121, action.data, variables, context);
          (_d4 = (_c5 = __privateGet(this, _mutateOptions)).onSettled) == null ? void 0 : _d4.call(_c5, action.data, null, variables, context);
        } else if ((action == null ? void 0 : action.type) === "error") {
          (_f2 = (_e4 = __privateGet(this, _mutateOptions)).onError) == null ? void 0 : _f2.call(_e4, action.error, variables, context);
          (_h2 = (_g2 = __privateGet(this, _mutateOptions)).onSettled) == null ? void 0 : _h2.call(
            _g2,
            void 0,
            action.error,
            variables,
            context
          );
        }
      }
      this.listeners.forEach((listener) => {
        listener(__privateGet(this, _currentResult2));
      });
    });
  }, "#notify"), __name(_a11, "MutationObserver"), _a11);

  // node_modules/@tanstack/react-query/build/modern/QueryClientProvider.js
  var React3 = __toESM(require_react(), 1);
  var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
  var QueryClientContext = React3.createContext(
    void 0
  );
  var useQueryClient = /* @__PURE__ */ __name((queryClient2) => {
    const client = React3.useContext(QueryClientContext);
    if (queryClient2) {
      return queryClient2;
    }
    if (!client) {
      throw new Error("No QueryClient set, use QueryClientProvider to set one");
    }
    return client;
  }, "useQueryClient");
  var QueryClientProvider = /* @__PURE__ */ __name(({
    client,
    children
  }) => {
    React3.useEffect(() => {
      client.mount();
      return () => {
        client.unmount();
      };
    }, [client]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(QueryClientContext.Provider, { value: client, children });
  }, "QueryClientProvider");

  // node_modules/@tanstack/react-query/build/modern/isRestoring.js
  var React4 = __toESM(require_react(), 1);
  var IsRestoringContext = React4.createContext(false);
  var useIsRestoring = /* @__PURE__ */ __name(() => React4.useContext(IsRestoringContext), "useIsRestoring");
  var IsRestoringProvider = IsRestoringContext.Provider;

  // node_modules/@tanstack/react-query/build/modern/QueryErrorResetBoundary.js
  var React5 = __toESM(require_react(), 1);
  var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
  function createValue() {
    let isReset = false;
    return {
      clearReset: /* @__PURE__ */ __name(() => {
        isReset = false;
      }, "clearReset"),
      reset: /* @__PURE__ */ __name(() => {
        isReset = true;
      }, "reset"),
      isReset: /* @__PURE__ */ __name(() => {
        return isReset;
      }, "isReset")
    };
  }
  __name(createValue, "createValue");
  var QueryErrorResetBoundaryContext = React5.createContext(createValue());
  var useQueryErrorResetBoundary = /* @__PURE__ */ __name(() => React5.useContext(QueryErrorResetBoundaryContext), "useQueryErrorResetBoundary");

  // node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js
  var React6 = __toESM(require_react(), 1);

  // node_modules/@tanstack/react-query/build/modern/utils.js
  function shouldThrowError(throwError, params) {
    if (typeof throwError === "function") {
      return throwError(...params);
    }
    return !!throwError;
  }
  __name(shouldThrowError, "shouldThrowError");
  function noop2() {
  }
  __name(noop2, "noop");

  // node_modules/@tanstack/react-query/build/modern/errorBoundaryUtils.js
  var ensurePreventErrorBoundaryRetry = /* @__PURE__ */ __name((options, errorResetBoundary) => {
    if (options.suspense || options.throwOnError || options.experimental_prefetchInRender) {
      if (!errorResetBoundary.isReset()) {
        options.retryOnMount = false;
      }
    }
  }, "ensurePreventErrorBoundaryRetry");
  var useClearResetErrorBoundary = /* @__PURE__ */ __name((errorResetBoundary) => {
    React6.useEffect(() => {
      errorResetBoundary.clearReset();
    }, [errorResetBoundary]);
  }, "useClearResetErrorBoundary");
  var getHasError = /* @__PURE__ */ __name(({
    result,
    errorResetBoundary,
    throwOnError,
    query
  }) => {
    return result.isError && !errorResetBoundary.isReset() && !result.isFetching && query && shouldThrowError(throwOnError, [result.error, query]);
  }, "getHasError");

  // node_modules/@tanstack/react-query/build/modern/suspense.js
  var ensureSuspenseTimers = /* @__PURE__ */ __name((defaultedOptions) => {
    if (defaultedOptions.suspense) {
      if (defaultedOptions.staleTime === void 0) {
        defaultedOptions.staleTime = 1e3;
      }
      if (typeof defaultedOptions.gcTime === "number") {
        defaultedOptions.gcTime = Math.max(defaultedOptions.gcTime, 1e3);
      }
    }
  }, "ensureSuspenseTimers");
  var willFetch = /* @__PURE__ */ __name((result, isRestoring) => result.isLoading && result.isFetching && !isRestoring, "willFetch");
  var shouldSuspend = /* @__PURE__ */ __name((defaultedOptions, result) => (defaultedOptions == null ? void 0 : defaultedOptions.suspense) && result.isPending, "shouldSuspend");
  var fetchOptimistic = /* @__PURE__ */ __name((defaultedOptions, observer, errorResetBoundary) => observer.fetchOptimistic(defaultedOptions).catch(() => {
    errorResetBoundary.clearReset();
  }), "fetchOptimistic");

  // node_modules/@tanstack/react-query/build/modern/useBaseQuery.js
  var React7 = __toESM(require_react(), 1);
  function useBaseQuery(options, Observer, queryClient2) {
    var _a121, _b93, _c5, _d4, _e4;
    if (false) {
      if (typeof options !== "object" || Array.isArray(options)) {
        throw new Error(
          'Bad argument type. Starting with v5, only the "Object" form is allowed when calling query related functions. Please use the error stack to find the culprit call. More info here: https://tanstack.com/query/latest/docs/react/guides/migrating-to-v5#supports-a-single-signature-one-object'
        );
      }
    }
    const client = useQueryClient(queryClient2);
    const isRestoring = useIsRestoring();
    const errorResetBoundary = useQueryErrorResetBoundary();
    const defaultedOptions = client.defaultQueryOptions(options);
    (_b93 = (_a121 = client.getDefaultOptions().queries) == null ? void 0 : _a121._experimental_beforeQuery) == null ? void 0 : _b93.call(
      _a121,
      defaultedOptions
    );
    defaultedOptions._optimisticResults = isRestoring ? "isRestoring" : "optimistic";
    ensureSuspenseTimers(defaultedOptions);
    ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);
    useClearResetErrorBoundary(errorResetBoundary);
    const isNewCacheEntry = !client.getQueryCache().get(defaultedOptions.queryHash);
    const [observer] = React7.useState(
      () => new Observer(
        client,
        defaultedOptions
      )
    );
    const result = observer.getOptimisticResult(defaultedOptions);
    React7.useSyncExternalStore(
      React7.useCallback(
        (onStoreChange) => {
          const unsubscribe = isRestoring ? noop2 : observer.subscribe(notifyManager.batchCalls(onStoreChange));
          observer.updateResult();
          return unsubscribe;
        },
        [observer, isRestoring]
      ),
      () => observer.getCurrentResult(),
      () => observer.getCurrentResult()
    );
    React7.useEffect(() => {
      observer.setOptions(defaultedOptions, { listeners: false });
    }, [defaultedOptions, observer]);
    if (shouldSuspend(defaultedOptions, result)) {
      throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary);
    }
    if (getHasError({
      result,
      errorResetBoundary,
      throwOnError: defaultedOptions.throwOnError,
      query: client.getQueryCache().get(defaultedOptions.queryHash)
    })) {
      throw result.error;
    }
    ;
    (_d4 = (_c5 = client.getDefaultOptions().queries) == null ? void 0 : _c5._experimental_afterQuery) == null ? void 0 : _d4.call(
      _c5,
      defaultedOptions,
      result
    );
    if (defaultedOptions.experimental_prefetchInRender && !isServer && willFetch(result, isRestoring)) {
      const promise = isNewCacheEntry ? (
        // Fetch immediately on render in order to ensure `.promise` is resolved even if the component is unmounted
        fetchOptimistic(defaultedOptions, observer, errorResetBoundary)
      ) : (
        // subscribe to the "cache promise" so that we can finalize the currentThenable once data comes in
        (_e4 = client.getQueryCache().get(defaultedOptions.queryHash)) == null ? void 0 : _e4.promise
      );
      promise == null ? void 0 : promise.catch(noop2).finally(() => {
        observer.updateResult();
      });
    }
    return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;
  }
  __name(useBaseQuery, "useBaseQuery");

  // node_modules/@tanstack/react-query/build/modern/useQuery.js
  function useQuery(options, queryClient2) {
    return useBaseQuery(options, QueryObserver, queryClient2);
  }
  __name(useQuery, "useQuery");

  // node_modules/@tanstack/react-query/build/modern/useMutation.js
  var React8 = __toESM(require_react(), 1);
  function useMutation(options, queryClient2) {
    const client = useQueryClient(queryClient2);
    const [observer] = React8.useState(
      () => new MutationObserver2(
        client,
        options
      )
    );
    React8.useEffect(() => {
      observer.setOptions(options);
    }, [observer, options]);
    const result = React8.useSyncExternalStore(
      React8.useCallback(
        (onStoreChange) => observer.subscribe(notifyManager.batchCalls(onStoreChange)),
        [observer]
      ),
      () => observer.getCurrentResult(),
      () => observer.getCurrentResult()
    );
    const mutate = React8.useCallback(
      (variables, mutateOptions) => {
        observer.mutate(variables, mutateOptions).catch(noop2);
      },
      [observer]
    );
    if (result.error && shouldThrowError(observer.options.throwOnError, [result.error])) {
      throw result.error;
    }
    return __spreadProps(__spreadValues({}, result), { mutate, mutateAsync: result.mutate });
  }
  __name(useMutation, "useMutation");

  // client/src/lib/queryClient.ts
  async function throwIfResNotOk(res) {
    if (!res.ok) {
      const text2 = await res.text() || res.statusText;
      throw new Error(`${res.status}: ${text2}`);
    }
  }
  __name(throwIfResNotOk, "throwIfResNotOk");
  async function apiRequest(method, url, data) {
    const res = await fetch(url, {
      method,
      headers: data ? { "Content-Type": "application/json" } : {},
      body: data ? JSON.stringify(data) : void 0,
      credentials: "include"
    });
    await throwIfResNotOk(res);
    return res;
  }
  __name(apiRequest, "apiRequest");
  var getQueryFn = /* @__PURE__ */ __name(({ on401: unauthorizedBehavior }) => async ({ queryKey }) => {
    const res = await fetch(queryKey[0], {
      credentials: "include"
    });
    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }
    await throwIfResNotOk(res);
    return await res.json();
  }, "getQueryFn");
  var queryClient = new QueryClient({
    defaultOptions: {
      queries: {
        queryFn: getQueryFn({ on401: "throw" }),
        refetchInterval: false,
        refetchOnWindowFocus: false,
        staleTime: Infinity,
        retry: false
      },
      mutations: {
        retry: false
      }
    }
  });

  // client/src/hooks/use-toast.ts
  var React9 = __toESM(require_react(), 1);
  var TOAST_LIMIT = 1;
  var TOAST_REMOVE_DELAY = 1e6;
  var count = 0;
  function genId() {
    count = (count + 1) % Number.MAX_SAFE_INTEGER;
    return count.toString();
  }
  __name(genId, "genId");
  var toastTimeouts = /* @__PURE__ */ new Map();
  var addToRemoveQueue = /* @__PURE__ */ __name((toastId) => {
    if (toastTimeouts.has(toastId)) {
      return;
    }
    const timeout = setTimeout(() => {
      toastTimeouts.delete(toastId);
      dispatch({
        type: "REMOVE_TOAST",
        toastId
      });
    }, TOAST_REMOVE_DELAY);
    toastTimeouts.set(toastId, timeout);
  }, "addToRemoveQueue");
  var reducer = /* @__PURE__ */ __name((state, action) => {
    switch (action.type) {
      case "ADD_TOAST":
        return __spreadProps(__spreadValues({}, state), {
          toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT)
        });
      case "UPDATE_TOAST":
        return __spreadProps(__spreadValues({}, state), {
          toasts: state.toasts.map(
            (t3) => t3.id === action.toast.id ? __spreadValues(__spreadValues({}, t3), action.toast) : t3
          )
        });
      case "DISMISS_TOAST": {
        const { toastId } = action;
        if (toastId) {
          addToRemoveQueue(toastId);
        } else {
          state.toasts.forEach((toast2) => {
            addToRemoveQueue(toast2.id);
          });
        }
        return __spreadProps(__spreadValues({}, state), {
          toasts: state.toasts.map(
            (t3) => t3.id === toastId || toastId === void 0 ? __spreadProps(__spreadValues({}, t3), {
              open: false
            }) : t3
          )
        });
      }
      case "REMOVE_TOAST":
        if (action.toastId === void 0) {
          return __spreadProps(__spreadValues({}, state), {
            toasts: []
          });
        }
        return __spreadProps(__spreadValues({}, state), {
          toasts: state.toasts.filter((t3) => t3.id !== action.toastId)
        });
    }
  }, "reducer");
  var listeners = [];
  var memoryState = { toasts: [] };
  function dispatch(action) {
    memoryState = reducer(memoryState, action);
    listeners.forEach((listener) => {
      listener(memoryState);
    });
  }
  __name(dispatch, "dispatch");
  function toast(_a121) {
    var props = __objRest(_a121, []);
    const id = genId();
    const update = /* @__PURE__ */ __name((props2) => dispatch({
      type: "UPDATE_TOAST",
      toast: __spreadProps(__spreadValues({}, props2), { id })
    }), "update");
    const dismiss = /* @__PURE__ */ __name(() => dispatch({ type: "DISMISS_TOAST", toastId: id }), "dismiss");
    dispatch({
      type: "ADD_TOAST",
      toast: __spreadProps(__spreadValues({}, props), {
        id,
        open: true,
        onOpenChange: /* @__PURE__ */ __name((open) => {
          if (!open) dismiss();
        }, "onOpenChange")
      })
    });
    return {
      id,
      dismiss,
      update
    };
  }
  __name(toast, "toast");
  function useToast() {
    const [state, setState] = React9.useState(memoryState);
    React9.useEffect(() => {
      listeners.push(setState);
      return () => {
        const index3 = listeners.indexOf(setState);
        if (index3 > -1) {
          listeners.splice(index3, 1);
        }
      };
    }, [state]);
    return __spreadProps(__spreadValues({}, state), {
      toast,
      dismiss: /* @__PURE__ */ __name((toastId) => dispatch({ type: "DISMISS_TOAST", toastId }), "dismiss")
    });
  }
  __name(useToast, "useToast");

  // client/src/components/ui/toast.tsx
  var React25 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-toast/dist/index.mjs
  var React24 = __toESM(require_react(), 1);
  var ReactDOM3 = __toESM(require_react_dom(), 1);

  // node_modules/@radix-ui/primitive/dist/index.mjs
  function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
    return /* @__PURE__ */ __name(function handleEvent(event) {
      originalEventHandler == null ? void 0 : originalEventHandler(event);
      if (checkForDefaultPrevented === false || !event.defaultPrevented) {
        return ourEventHandler == null ? void 0 : ourEventHandler(event);
      }
    }, "handleEvent");
  }
  __name(composeEventHandlers, "composeEventHandlers");

  // node_modules/@radix-ui/react-compose-refs/dist/index.mjs
  var React10 = __toESM(require_react(), 1);
  function setRef(ref, value) {
    if (typeof ref === "function") {
      return ref(value);
    } else if (ref !== null && ref !== void 0) {
      ref.current = value;
    }
  }
  __name(setRef, "setRef");
  function composeRefs(...refs) {
    return (node) => {
      let hasCleanup = false;
      const cleanups = refs.map((ref) => {
        const cleanup = setRef(ref, node);
        if (!hasCleanup && typeof cleanup == "function") {
          hasCleanup = true;
        }
        return cleanup;
      });
      if (hasCleanup) {
        return () => {
          for (let i2 = 0; i2 < cleanups.length; i2++) {
            const cleanup = cleanups[i2];
            if (typeof cleanup == "function") {
              cleanup();
            } else {
              setRef(refs[i2], null);
            }
          }
        };
      }
    };
  }
  __name(composeRefs, "composeRefs");
  function useComposedRefs(...refs) {
    return React10.useCallback(composeRefs(...refs), refs);
  }
  __name(useComposedRefs, "useComposedRefs");

  // node_modules/@radix-ui/react-collection/dist/index.mjs
  var import_react2 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-context/dist/index.mjs
  var React11 = __toESM(require_react(), 1);
  var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
  function createContext22(rootComponentName, defaultContext) {
    const Context2 = React11.createContext(defaultContext);
    const Provider3 = /* @__PURE__ */ __name((props) => {
      const _a121 = props, { children } = _a121, context = __objRest(_a121, ["children"]);
      const value = React11.useMemo(() => context, Object.values(context));
      return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Context2.Provider, { value, children });
    }, "Provider");
    Provider3.displayName = rootComponentName + "Provider";
    function useContext22(consumerName) {
      const context = React11.useContext(Context2);
      if (context) return context;
      if (defaultContext !== void 0) return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    __name(useContext22, "useContext2");
    return [Provider3, useContext22];
  }
  __name(createContext22, "createContext2");
  function createContextScope(scopeName, createContextScopeDeps = []) {
    let defaultContexts = [];
    function createContext32(rootComponentName, defaultContext) {
      const BaseContext = React11.createContext(defaultContext);
      const index3 = defaultContexts.length;
      defaultContexts = [...defaultContexts, defaultContext];
      const Provider3 = /* @__PURE__ */ __name((props) => {
        var _b93;
        const _a121 = props, { scope, children } = _a121, context = __objRest(_a121, ["scope", "children"]);
        const Context2 = ((_b93 = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _b93[index3]) || BaseContext;
        const value = React11.useMemo(() => context, Object.values(context));
        return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(Context2.Provider, { value, children });
      }, "Provider");
      Provider3.displayName = rootComponentName + "Provider";
      function useContext22(consumerName, scope) {
        var _a121;
        const Context2 = ((_a121 = scope == null ? void 0 : scope[scopeName]) == null ? void 0 : _a121[index3]) || BaseContext;
        const context = React11.useContext(Context2);
        if (context) return context;
        if (defaultContext !== void 0) return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      __name(useContext22, "useContext2");
      return [Provider3, useContext22];
    }
    __name(createContext32, "createContext3");
    const createScope = /* @__PURE__ */ __name(() => {
      const scopeContexts = defaultContexts.map((defaultContext) => {
        return React11.createContext(defaultContext);
      });
      return /* @__PURE__ */ __name(function useScope(scope) {
        const contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;
        return React11.useMemo(
          () => ({ [`__scope${scopeName}`]: __spreadProps(__spreadValues({}, scope), { [scopeName]: contexts }) }),
          [scope, contexts]
        );
      }, "useScope");
    }, "createScope");
    createScope.scopeName = scopeName;
    return [createContext32, composeContextScopes(createScope, ...createContextScopeDeps)];
  }
  __name(createContextScope, "createContextScope");
  function composeContextScopes(...scopes) {
    const baseScope = scopes[0];
    if (scopes.length === 1) return baseScope;
    const createScope = /* @__PURE__ */ __name(() => {
      const scopeHooks = scopes.map((createScope2) => ({
        useScope: createScope2(),
        scopeName: createScope2.scopeName
      }));
      return /* @__PURE__ */ __name(function useComposedScopes(overrideScopes) {
        const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName }) => {
          const scopeProps = useScope(overrideScopes);
          const currentScope = scopeProps[`__scope${scopeName}`];
          return __spreadValues(__spreadValues({}, nextScopes2), currentScope);
        }, {});
        return React11.useMemo(() => ({ [`__scope${baseScope.scopeName}`]: nextScopes }), [nextScopes]);
      }, "useComposedScopes");
    }, "createScope");
    createScope.scopeName = baseScope.scopeName;
    return createScope;
  }
  __name(composeContextScopes, "composeContextScopes");

  // node_modules/@radix-ui/react-slot/dist/index.mjs
  var React12 = __toESM(require_react(), 1);
  var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
  // @__NO_SIDE_EFFECTS__
  function createSlot(ownerName) {
    const SlotClone = /* @__PURE__ */ createSlotClone(ownerName);
    const Slot22 = React12.forwardRef((props, forwardedRef) => {
      const _a121 = props, { children } = _a121, slotProps = __objRest(_a121, ["children"]);
      const childrenArray = React12.Children.toArray(children);
      const slottable = childrenArray.find(isSlottable);
      if (slottable) {
        const newElement = slottable.props.children;
        const newChildren = childrenArray.map((child) => {
          if (child === slottable) {
            if (React12.Children.count(newElement) > 1) return React12.Children.only(null);
            return React12.isValidElement(newElement) ? newElement.props.children : null;
          } else {
            return child;
          }
        });
        return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(SlotClone, __spreadProps(__spreadValues({}, slotProps), { ref: forwardedRef, children: React12.isValidElement(newElement) ? React12.cloneElement(newElement, void 0, newChildren) : null }));
      }
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(SlotClone, __spreadProps(__spreadValues({}, slotProps), { ref: forwardedRef, children }));
    });
    Slot22.displayName = `${ownerName}.Slot`;
    return Slot22;
  }
  __name(createSlot, "createSlot");
  var Slot = /* @__PURE__ */ createSlot("Slot");
  // @__NO_SIDE_EFFECTS__
  function createSlotClone(ownerName) {
    const SlotClone = React12.forwardRef((props, forwardedRef) => {
      const _a121 = props, { children } = _a121, slotProps = __objRest(_a121, ["children"]);
      if (React12.isValidElement(children)) {
        const childrenRef = getElementRef(children);
        const props2 = mergeProps(slotProps, children.props);
        if (children.type !== React12.Fragment) {
          props2.ref = forwardedRef ? composeRefs(forwardedRef, childrenRef) : childrenRef;
        }
        return React12.cloneElement(children, props2);
      }
      return React12.Children.count(children) > 1 ? React12.Children.only(null) : null;
    });
    SlotClone.displayName = `${ownerName}.SlotClone`;
    return SlotClone;
  }
  __name(createSlotClone, "createSlotClone");
  var SLOTTABLE_IDENTIFIER = Symbol("radix.slottable");
  // @__NO_SIDE_EFFECTS__
  function createSlottable(ownerName) {
    const Slottable2 = /* @__PURE__ */ __name(({ children }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, { children });
    }, "Slottable2");
    Slottable2.displayName = `${ownerName}.Slottable`;
    Slottable2.__radixId = SLOTTABLE_IDENTIFIER;
    return Slottable2;
  }
  __name(createSlottable, "createSlottable");
  function isSlottable(child) {
    return React12.isValidElement(child) && typeof child.type === "function" && "__radixId" in child.type && child.type.__radixId === SLOTTABLE_IDENTIFIER;
  }
  __name(isSlottable, "isSlottable");
  function mergeProps(slotProps, childProps) {
    const overrideProps = __spreadValues({}, childProps);
    for (const propName in childProps) {
      const slotPropValue = slotProps[propName];
      const childPropValue = childProps[propName];
      const isHandler = /^on[A-Z]/.test(propName);
      if (isHandler) {
        if (slotPropValue && childPropValue) {
          overrideProps[propName] = (...args) => {
            childPropValue(...args);
            slotPropValue(...args);
          };
        } else if (slotPropValue) {
          overrideProps[propName] = slotPropValue;
        }
      } else if (propName === "style") {
        overrideProps[propName] = __spreadValues(__spreadValues({}, slotPropValue), childPropValue);
      } else if (propName === "className") {
        overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
      }
    }
    return __spreadValues(__spreadValues({}, slotProps), overrideProps);
  }
  __name(mergeProps, "mergeProps");
  function getElementRef(element) {
    var _a121, _b93;
    let getter = (_a121 = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a121.get;
    let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.ref;
    }
    getter = (_b93 = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b93.get;
    mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.props.ref;
    }
    return element.props.ref || element.ref;
  }
  __name(getElementRef, "getElementRef");

  // node_modules/@radix-ui/react-collection/dist/index.mjs
  var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
  function createCollection(name) {
    const PROVIDER_NAME3 = name + "CollectionProvider";
    const [createCollectionContext, createCollectionScope4] = createContextScope(PROVIDER_NAME3);
    const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(
      PROVIDER_NAME3,
      { collectionRef: { current: null }, itemMap: /* @__PURE__ */ new Map() }
    );
    const CollectionProvider = /* @__PURE__ */ __name((props) => {
      const { scope, children } = props;
      const ref = import_react2.default.useRef(null);
      const itemMap = import_react2.default.useRef(/* @__PURE__ */ new Map()).current;
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CollectionProviderImpl, { scope, itemMap, collectionRef: ref, children });
    }, "CollectionProvider");
    CollectionProvider.displayName = PROVIDER_NAME3;
    const COLLECTION_SLOT_NAME = name + "CollectionSlot";
    const CollectionSlotImpl = createSlot(COLLECTION_SLOT_NAME);
    const CollectionSlot = import_react2.default.forwardRef(
      (props, forwardedRef) => {
        const { scope, children } = props;
        const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
        const composedRefs = useComposedRefs(forwardedRef, context.collectionRef);
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CollectionSlotImpl, { ref: composedRefs, children });
      }
    );
    CollectionSlot.displayName = COLLECTION_SLOT_NAME;
    const ITEM_SLOT_NAME = name + "CollectionItemSlot";
    const ITEM_DATA_ATTR = "data-radix-collection-item";
    const CollectionItemSlotImpl = createSlot(ITEM_SLOT_NAME);
    const CollectionItemSlot = import_react2.default.forwardRef(
      (props, forwardedRef) => {
        const _a121 = props, { scope, children } = _a121, itemData = __objRest(_a121, ["scope", "children"]);
        const ref = import_react2.default.useRef(null);
        const composedRefs = useComposedRefs(forwardedRef, ref);
        const context = useCollectionContext(ITEM_SLOT_NAME, scope);
        import_react2.default.useEffect(() => {
          context.itemMap.set(ref, __spreadValues({ ref }, itemData));
          return () => void context.itemMap.delete(ref);
        });
        return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(CollectionItemSlotImpl, __spreadProps(__spreadValues({}, { [ITEM_DATA_ATTR]: "" }), { ref: composedRefs, children }));
      }
    );
    CollectionItemSlot.displayName = ITEM_SLOT_NAME;
    function useCollection4(scope) {
      const context = useCollectionContext(name + "CollectionConsumer", scope);
      const getItems = import_react2.default.useCallback(() => {
        const collectionNode = context.collectionRef.current;
        if (!collectionNode) return [];
        const orderedNodes = Array.from(collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`));
        const items = Array.from(context.itemMap.values());
        const orderedItems = items.sort(
          (a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)
        );
        return orderedItems;
      }, [context.collectionRef, context.itemMap]);
      return getItems;
    }
    __name(useCollection4, "useCollection");
    return [
      { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },
      useCollection4,
      createCollectionScope4
    ];
  }
  __name(createCollection, "createCollection");

  // node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
  var React17 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-primitive/dist/index.mjs
  var React14 = __toESM(require_react(), 1);
  var ReactDOM = __toESM(require_react_dom(), 1);
  var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
  var NODES = [
    "a",
    "button",
    "div",
    "form",
    "h2",
    "h3",
    "img",
    "input",
    "label",
    "li",
    "nav",
    "ol",
    "p",
    "span",
    "svg",
    "ul"
  ];
  var Primitive = NODES.reduce((primitive, node) => {
    const Slot5 = createSlot(`Primitive.${node}`);
    const Node2 = React14.forwardRef((props, forwardedRef) => {
      const _a121 = props, { asChild } = _a121, primitiveProps = __objRest(_a121, ["asChild"]);
      const Comp = asChild ? Slot5 : node;
      if (typeof window !== "undefined") {
        window[Symbol.for("radix-ui")] = true;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(Comp, __spreadProps(__spreadValues({}, primitiveProps), { ref: forwardedRef }));
    });
    Node2.displayName = `Primitive.${node}`;
    return __spreadProps(__spreadValues({}, primitive), { [node]: Node2 });
  }, {});
  function dispatchDiscreteCustomEvent(target, event) {
    if (target) ReactDOM.flushSync(() => target.dispatchEvent(event));
  }
  __name(dispatchDiscreteCustomEvent, "dispatchDiscreteCustomEvent");

  // node_modules/@radix-ui/react-use-callback-ref/dist/index.mjs
  var React15 = __toESM(require_react(), 1);
  function useCallbackRef(callback) {
    const callbackRef = React15.useRef(callback);
    React15.useEffect(() => {
      callbackRef.current = callback;
    });
    return React15.useMemo(() => (...args) => {
      var _a121;
      return (_a121 = callbackRef.current) == null ? void 0 : _a121.call(callbackRef, ...args);
    }, []);
  }
  __name(useCallbackRef, "useCallbackRef");

  // node_modules/@radix-ui/react-use-escape-keydown/dist/index.mjs
  var React16 = __toESM(require_react(), 1);
  function useEscapeKeydown(onEscapeKeyDownProp, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
    const onEscapeKeyDown = useCallbackRef(onEscapeKeyDownProp);
    React16.useEffect(() => {
      const handleKeyDown = /* @__PURE__ */ __name((event) => {
        if (event.key === "Escape") {
          onEscapeKeyDown(event);
        }
      }, "handleKeyDown");
      ownerDocument.addEventListener("keydown", handleKeyDown, { capture: true });
      return () => ownerDocument.removeEventListener("keydown", handleKeyDown, { capture: true });
    }, [onEscapeKeyDown, ownerDocument]);
  }
  __name(useEscapeKeydown, "useEscapeKeydown");

  // node_modules/@radix-ui/react-dismissable-layer/dist/index.mjs
  var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
  var DISMISSABLE_LAYER_NAME = "DismissableLayer";
  var CONTEXT_UPDATE = "dismissableLayer.update";
  var POINTER_DOWN_OUTSIDE = "dismissableLayer.pointerDownOutside";
  var FOCUS_OUTSIDE = "dismissableLayer.focusOutside";
  var originalBodyPointerEvents;
  var DismissableLayerContext = React17.createContext({
    layers: /* @__PURE__ */ new Set(),
    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
    branches: /* @__PURE__ */ new Set()
  });
  var DismissableLayer = React17.forwardRef(
    (props, forwardedRef) => {
      var _b93;
      const _a121 = props, {
        disableOutsidePointerEvents = false,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside,
        onDismiss
      } = _a121, layerProps = __objRest(_a121, [
        "disableOutsidePointerEvents",
        "onEscapeKeyDown",
        "onPointerDownOutside",
        "onFocusOutside",
        "onInteractOutside",
        "onDismiss"
      ]);
      const context = React17.useContext(DismissableLayerContext);
      const [node, setNode] = React17.useState(null);
      const ownerDocument = (_b93 = node == null ? void 0 : node.ownerDocument) != null ? _b93 : globalThis == null ? void 0 : globalThis.document;
      const [, force] = React17.useState({});
      const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
      const layers = Array.from(context.layers);
      const [highestLayerWithOutsidePointerEventsDisabled] = [...context.layersWithOutsidePointerEventsDisabled].slice(-1);
      const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(highestLayerWithOutsidePointerEventsDisabled);
      const index3 = node ? layers.indexOf(node) : -1;
      const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
      const isPointerEventsEnabled = index3 >= highestLayerWithOutsidePointerEventsDisabledIndex;
      const pointerDownOutside = usePointerDownOutside((event) => {
        const target = event.target;
        const isPointerDownOnBranch = [...context.branches].some((branch) => branch.contains(target));
        if (!isPointerEventsEnabled || isPointerDownOnBranch) return;
        onPointerDownOutside == null ? void 0 : onPointerDownOutside(event);
        onInteractOutside == null ? void 0 : onInteractOutside(event);
        if (!event.defaultPrevented) onDismiss == null ? void 0 : onDismiss();
      }, ownerDocument);
      const focusOutside = useFocusOutside((event) => {
        const target = event.target;
        const isFocusInBranch = [...context.branches].some((branch) => branch.contains(target));
        if (isFocusInBranch) return;
        onFocusOutside == null ? void 0 : onFocusOutside(event);
        onInteractOutside == null ? void 0 : onInteractOutside(event);
        if (!event.defaultPrevented) onDismiss == null ? void 0 : onDismiss();
      }, ownerDocument);
      useEscapeKeydown((event) => {
        const isHighestLayer = index3 === context.layers.size - 1;
        if (!isHighestLayer) return;
        onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event);
        if (!event.defaultPrevented && onDismiss) {
          event.preventDefault();
          onDismiss();
        }
      }, ownerDocument);
      React17.useEffect(() => {
        if (!node) return;
        if (disableOutsidePointerEvents) {
          if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
            originalBodyPointerEvents = ownerDocument.body.style.pointerEvents;
            ownerDocument.body.style.pointerEvents = "none";
          }
          context.layersWithOutsidePointerEventsDisabled.add(node);
        }
        context.layers.add(node);
        dispatchUpdate();
        return () => {
          if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {
            ownerDocument.body.style.pointerEvents = originalBodyPointerEvents;
          }
        };
      }, [node, ownerDocument, disableOutsidePointerEvents, context]);
      React17.useEffect(() => {
        return () => {
          if (!node) return;
          context.layers.delete(node);
          context.layersWithOutsidePointerEventsDisabled.delete(node);
          dispatchUpdate();
        };
      }, [node, context]);
      React17.useEffect(() => {
        const handleUpdate = /* @__PURE__ */ __name(() => force({}), "handleUpdate");
        document.addEventListener(CONTEXT_UPDATE, handleUpdate);
        return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
        Primitive.div,
        __spreadProps(__spreadValues({}, layerProps), {
          ref: composedRefs,
          style: __spreadValues({
            pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0
          }, props.style),
          onFocusCapture: composeEventHandlers(props.onFocusCapture, focusOutside.onFocusCapture),
          onBlurCapture: composeEventHandlers(props.onBlurCapture, focusOutside.onBlurCapture),
          onPointerDownCapture: composeEventHandlers(
            props.onPointerDownCapture,
            pointerDownOutside.onPointerDownCapture
          )
        })
      );
    }
  );
  DismissableLayer.displayName = DISMISSABLE_LAYER_NAME;
  var BRANCH_NAME = "DismissableLayerBranch";
  var DismissableLayerBranch = React17.forwardRef((props, forwardedRef) => {
    const context = React17.useContext(DismissableLayerContext);
    const ref = React17.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    React17.useEffect(() => {
      const node = ref.current;
      if (node) {
        context.branches.add(node);
        return () => {
          context.branches.delete(node);
        };
      }
    }, [context.branches]);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(Primitive.div, __spreadProps(__spreadValues({}, props), { ref: composedRefs }));
  });
  DismissableLayerBranch.displayName = BRANCH_NAME;
  function usePointerDownOutside(onPointerDownOutside, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
    const handlePointerDownOutside = useCallbackRef(onPointerDownOutside);
    const isPointerInsideReactTreeRef = React17.useRef(false);
    const handleClickRef = React17.useRef(() => {
    });
    React17.useEffect(() => {
      const handlePointerDown = /* @__PURE__ */ __name((event) => {
        if (event.target && !isPointerInsideReactTreeRef.current) {
          let handleAndDispatchPointerDownOutsideEvent2 = /* @__PURE__ */ __name(function() {
            handleAndDispatchCustomEvent(
              POINTER_DOWN_OUTSIDE,
              handlePointerDownOutside,
              eventDetail,
              { discrete: true }
            );
          }, "handleAndDispatchPointerDownOutsideEvent2");
          var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;
          const eventDetail = { originalEvent: event };
          if (event.pointerType === "touch") {
            ownerDocument.removeEventListener("click", handleClickRef.current);
            handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
            ownerDocument.addEventListener("click", handleClickRef.current, { once: true });
          } else {
            handleAndDispatchPointerDownOutsideEvent2();
          }
        } else {
          ownerDocument.removeEventListener("click", handleClickRef.current);
        }
        isPointerInsideReactTreeRef.current = false;
      }, "handlePointerDown");
      const timerId = window.setTimeout(() => {
        ownerDocument.addEventListener("pointerdown", handlePointerDown);
      }, 0);
      return () => {
        window.clearTimeout(timerId);
        ownerDocument.removeEventListener("pointerdown", handlePointerDown);
        ownerDocument.removeEventListener("click", handleClickRef.current);
      };
    }, [ownerDocument, handlePointerDownOutside]);
    return {
      // ensures we check React component tree (not just DOM tree)
      onPointerDownCapture: /* @__PURE__ */ __name(() => isPointerInsideReactTreeRef.current = true, "onPointerDownCapture")
    };
  }
  __name(usePointerDownOutside, "usePointerDownOutside");
  function useFocusOutside(onFocusOutside, ownerDocument = globalThis == null ? void 0 : globalThis.document) {
    const handleFocusOutside = useCallbackRef(onFocusOutside);
    const isFocusInsideReactTreeRef = React17.useRef(false);
    React17.useEffect(() => {
      const handleFocus = /* @__PURE__ */ __name((event) => {
        if (event.target && !isFocusInsideReactTreeRef.current) {
          const eventDetail = { originalEvent: event };
          handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
            discrete: false
          });
        }
      }, "handleFocus");
      ownerDocument.addEventListener("focusin", handleFocus);
      return () => ownerDocument.removeEventListener("focusin", handleFocus);
    }, [ownerDocument, handleFocusOutside]);
    return {
      onFocusCapture: /* @__PURE__ */ __name(() => isFocusInsideReactTreeRef.current = true, "onFocusCapture"),
      onBlurCapture: /* @__PURE__ */ __name(() => isFocusInsideReactTreeRef.current = false, "onBlurCapture")
    };
  }
  __name(useFocusOutside, "useFocusOutside");
  function dispatchUpdate() {
    const event = new CustomEvent(CONTEXT_UPDATE);
    document.dispatchEvent(event);
  }
  __name(dispatchUpdate, "dispatchUpdate");
  function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
    const target = detail.originalEvent.target;
    const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });
    if (handler) target.addEventListener(name, handler, { once: true });
    if (discrete) {
      dispatchDiscreteCustomEvent(target, event);
    } else {
      target.dispatchEvent(event);
    }
  }
  __name(handleAndDispatchCustomEvent, "handleAndDispatchCustomEvent");
  var Root = DismissableLayer;
  var Branch = DismissableLayerBranch;

  // node_modules/@radix-ui/react-portal/dist/index.mjs
  var React19 = __toESM(require_react(), 1);
  var import_react_dom = __toESM(require_react_dom(), 1);

  // node_modules/@radix-ui/react-use-layout-effect/dist/index.mjs
  var React18 = __toESM(require_react(), 1);
  var useLayoutEffect22 = (globalThis == null ? void 0 : globalThis.document) ? React18.useLayoutEffect : () => {
  };

  // node_modules/@radix-ui/react-portal/dist/index.mjs
  var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
  var PORTAL_NAME = "Portal";
  var Portal = React19.forwardRef((props, forwardedRef) => {
    var _b93;
    const _a121 = props, { container: containerProp } = _a121, portalProps = __objRest(_a121, ["container"]);
    const [mounted, setMounted] = React19.useState(false);
    useLayoutEffect22(() => setMounted(true), []);
    const container = containerProp || mounted && ((_b93 = globalThis == null ? void 0 : globalThis.document) == null ? void 0 : _b93.body);
    return container ? import_react_dom.default.createPortal(/* @__PURE__ */ (0, import_jsx_runtime8.jsx)(Primitive.div, __spreadProps(__spreadValues({}, portalProps), { ref: forwardedRef })), container) : null;
  });
  Portal.displayName = PORTAL_NAME;

  // node_modules/@radix-ui/react-presence/dist/index.mjs
  var React22 = __toESM(require_react(), 1);
  var React20 = __toESM(require_react(), 1);
  function useStateMachine(initialState2, machine) {
    return React20.useReducer((state, event) => {
      const nextState = machine[state][event];
      return nextState != null ? nextState : state;
    }, initialState2);
  }
  __name(useStateMachine, "useStateMachine");
  var Presence = /* @__PURE__ */ __name((props) => {
    const { present, children } = props;
    const presence = usePresence(present);
    const child = typeof children === "function" ? children({ present: presence.isPresent }) : React22.Children.only(children);
    const ref = useComposedRefs(presence.ref, getElementRef2(child));
    const forceMount = typeof children === "function";
    return forceMount || presence.isPresent ? React22.cloneElement(child, { ref }) : null;
  }, "Presence");
  Presence.displayName = "Presence";
  function usePresence(present) {
    const [node, setNode] = React22.useState();
    const stylesRef = React22.useRef({});
    const prevPresentRef = React22.useRef(present);
    const prevAnimationNameRef = React22.useRef("none");
    const initialState2 = present ? "mounted" : "unmounted";
    const [state, send] = useStateMachine(initialState2, {
      mounted: {
        UNMOUNT: "unmounted",
        ANIMATION_OUT: "unmountSuspended"
      },
      unmountSuspended: {
        MOUNT: "mounted",
        ANIMATION_END: "unmounted"
      },
      unmounted: {
        MOUNT: "mounted"
      }
    });
    React22.useEffect(() => {
      const currentAnimationName = getAnimationName(stylesRef.current);
      prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
    }, [state]);
    useLayoutEffect22(() => {
      const styles = stylesRef.current;
      const wasPresent = prevPresentRef.current;
      const hasPresentChanged = wasPresent !== present;
      if (hasPresentChanged) {
        const prevAnimationName = prevAnimationNameRef.current;
        const currentAnimationName = getAnimationName(styles);
        if (present) {
          send("MOUNT");
        } else if (currentAnimationName === "none" || (styles == null ? void 0 : styles.display) === "none") {
          send("UNMOUNT");
        } else {
          const isAnimating = prevAnimationName !== currentAnimationName;
          if (wasPresent && isAnimating) {
            send("ANIMATION_OUT");
          } else {
            send("UNMOUNT");
          }
        }
        prevPresentRef.current = present;
      }
    }, [present, send]);
    useLayoutEffect22(() => {
      var _a121;
      if (node) {
        let timeoutId;
        const ownerWindow = (_a121 = node.ownerDocument.defaultView) != null ? _a121 : window;
        const handleAnimationEnd = /* @__PURE__ */ __name((event) => {
          const currentAnimationName = getAnimationName(stylesRef.current);
          const isCurrentAnimation = currentAnimationName.includes(event.animationName);
          if (event.target === node && isCurrentAnimation) {
            send("ANIMATION_END");
            if (!prevPresentRef.current) {
              const currentFillMode = node.style.animationFillMode;
              node.style.animationFillMode = "forwards";
              timeoutId = ownerWindow.setTimeout(() => {
                if (node.style.animationFillMode === "forwards") {
                  node.style.animationFillMode = currentFillMode;
                }
              });
            }
          }
        }, "handleAnimationEnd");
        const handleAnimationStart = /* @__PURE__ */ __name((event) => {
          if (event.target === node) {
            prevAnimationNameRef.current = getAnimationName(stylesRef.current);
          }
        }, "handleAnimationStart");
        node.addEventListener("animationstart", handleAnimationStart);
        node.addEventListener("animationcancel", handleAnimationEnd);
        node.addEventListener("animationend", handleAnimationEnd);
        return () => {
          ownerWindow.clearTimeout(timeoutId);
          node.removeEventListener("animationstart", handleAnimationStart);
          node.removeEventListener("animationcancel", handleAnimationEnd);
          node.removeEventListener("animationend", handleAnimationEnd);
        };
      } else {
        send("ANIMATION_END");
      }
    }, [node, send]);
    return {
      isPresent: ["mounted", "unmountSuspended"].includes(state),
      ref: React22.useCallback((node2) => {
        if (node2) stylesRef.current = getComputedStyle(node2);
        setNode(node2);
      }, [])
    };
  }
  __name(usePresence, "usePresence");
  function getAnimationName(styles) {
    return (styles == null ? void 0 : styles.animationName) || "none";
  }
  __name(getAnimationName, "getAnimationName");
  function getElementRef2(element) {
    var _a121, _b93;
    let getter = (_a121 = Object.getOwnPropertyDescriptor(element.props, "ref")) == null ? void 0 : _a121.get;
    let mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.ref;
    }
    getter = (_b93 = Object.getOwnPropertyDescriptor(element, "ref")) == null ? void 0 : _b93.get;
    mayWarn = getter && "isReactWarning" in getter && getter.isReactWarning;
    if (mayWarn) {
      return element.props.ref;
    }
    return element.props.ref || element.ref;
  }
  __name(getElementRef2, "getElementRef");

  // node_modules/@radix-ui/react-use-controllable-state/dist/index.mjs
  var React21 = __toESM(require_react(), 1);
  function useControllableState({
    prop,
    defaultProp,
    onChange = /* @__PURE__ */ __name(() => {
    }, "onChange")
  }) {
    const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({ defaultProp, onChange });
    const isControlled = prop !== void 0;
    const value = isControlled ? prop : uncontrolledProp;
    const handleChange = useCallbackRef(onChange);
    const setValue = React21.useCallback(
      (nextValue) => {
        if (isControlled) {
          const setter = nextValue;
          const value2 = typeof nextValue === "function" ? setter(prop) : nextValue;
          if (value2 !== prop) handleChange(value2);
        } else {
          setUncontrolledProp(nextValue);
        }
      },
      [isControlled, prop, setUncontrolledProp, handleChange]
    );
    return [value, setValue];
  }
  __name(useControllableState, "useControllableState");
  function useUncontrolledState({
    defaultProp,
    onChange
  }) {
    const uncontrolledState = React21.useState(defaultProp);
    const [value] = uncontrolledState;
    const prevValueRef = React21.useRef(value);
    const handleChange = useCallbackRef(onChange);
    React21.useEffect(() => {
      if (prevValueRef.current !== value) {
        handleChange(value);
        prevValueRef.current = value;
      }
    }, [value, prevValueRef, handleChange]);
    return uncontrolledState;
  }
  __name(useUncontrolledState, "useUncontrolledState");

  // node_modules/@radix-ui/react-visually-hidden/dist/index.mjs
  var React23 = __toESM(require_react(), 1);
  var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
  var NAME = "VisuallyHidden";
  var VisuallyHidden = React23.forwardRef(
    (props, forwardedRef) => {
      return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
        Primitive.span,
        __spreadProps(__spreadValues({}, props), {
          ref: forwardedRef,
          style: __spreadValues({
            // See: https://github.com/twbs/bootstrap/blob/main/scss/mixins/_visually-hidden.scss
            position: "absolute",
            border: 0,
            width: 1,
            height: 1,
            padding: 0,
            margin: -1,
            overflow: "hidden",
            clip: "rect(0, 0, 0, 0)",
            whiteSpace: "nowrap",
            wordWrap: "normal"
          }, props.style)
        })
      );
    }
  );
  VisuallyHidden.displayName = NAME;
  var Root2 = VisuallyHidden;

  // node_modules/@radix-ui/react-toast/dist/index.mjs
  var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
  var PROVIDER_NAME = "ToastProvider";
  var [Collection, useCollection, createCollectionScope] = createCollection("Toast");
  var [createToastContext, createToastScope] = createContextScope("Toast", [createCollectionScope]);
  var [ToastProviderProvider, useToastProviderContext] = createToastContext(PROVIDER_NAME);
  var ToastProvider = /* @__PURE__ */ __name((props) => {
    const {
      __scopeToast,
      label = "Notification",
      duration = 5e3,
      swipeDirection = "right",
      swipeThreshold = 50,
      children
    } = props;
    const [viewport, setViewport] = React24.useState(null);
    const [toastCount, setToastCount] = React24.useState(0);
    const isFocusedToastEscapeKeyDownRef = React24.useRef(false);
    const isClosePausedRef = React24.useRef(false);
    if (!label.trim()) {
      console.error(
        `Invalid prop \`label\` supplied to \`${PROVIDER_NAME}\`. Expected non-empty \`string\`.`
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Collection.Provider, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      ToastProviderProvider,
      {
        scope: __scopeToast,
        label,
        duration,
        swipeDirection,
        swipeThreshold,
        toastCount,
        viewport,
        onViewportChange: setViewport,
        onToastAdd: React24.useCallback(() => setToastCount((prevCount) => prevCount + 1), []),
        onToastRemove: React24.useCallback(() => setToastCount((prevCount) => prevCount - 1), []),
        isFocusedToastEscapeKeyDownRef,
        isClosePausedRef,
        children
      }
    ) });
  }, "ToastProvider");
  ToastProvider.displayName = PROVIDER_NAME;
  var VIEWPORT_NAME = "ToastViewport";
  var VIEWPORT_DEFAULT_HOTKEY = ["F8"];
  var VIEWPORT_PAUSE = "toast.viewportPause";
  var VIEWPORT_RESUME = "toast.viewportResume";
  var ToastViewport = React24.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeToast,
        hotkey = VIEWPORT_DEFAULT_HOTKEY,
        label = "Notifications ({hotkey})"
      } = _a121, viewportProps = __objRest(_a121, [
        "__scopeToast",
        "hotkey",
        "label"
      ]);
      const context = useToastProviderContext(VIEWPORT_NAME, __scopeToast);
      const getItems = useCollection(__scopeToast);
      const wrapperRef = React24.useRef(null);
      const headFocusProxyRef = React24.useRef(null);
      const tailFocusProxyRef = React24.useRef(null);
      const ref = React24.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref, context.onViewportChange);
      const hotkeyLabel = hotkey.join("+").replace(/Key/g, "").replace(/Digit/g, "");
      const hasToasts = context.toastCount > 0;
      React24.useEffect(() => {
        const handleKeyDown = /* @__PURE__ */ __name((event) => {
          var _a122;
          const isHotkeyPressed = hotkey.length !== 0 && hotkey.every((key) => event[key] || event.code === key);
          if (isHotkeyPressed) (_a122 = ref.current) == null ? void 0 : _a122.focus();
        }, "handleKeyDown");
        document.addEventListener("keydown", handleKeyDown);
        return () => document.removeEventListener("keydown", handleKeyDown);
      }, [hotkey]);
      React24.useEffect(() => {
        const wrapper = wrapperRef.current;
        const viewport = ref.current;
        if (hasToasts && wrapper && viewport) {
          const handlePause = /* @__PURE__ */ __name(() => {
            if (!context.isClosePausedRef.current) {
              const pauseEvent = new CustomEvent(VIEWPORT_PAUSE);
              viewport.dispatchEvent(pauseEvent);
              context.isClosePausedRef.current = true;
            }
          }, "handlePause");
          const handleResume = /* @__PURE__ */ __name(() => {
            if (context.isClosePausedRef.current) {
              const resumeEvent = new CustomEvent(VIEWPORT_RESUME);
              viewport.dispatchEvent(resumeEvent);
              context.isClosePausedRef.current = false;
            }
          }, "handleResume");
          const handleFocusOutResume = /* @__PURE__ */ __name((event) => {
            const isFocusMovingOutside = !wrapper.contains(event.relatedTarget);
            if (isFocusMovingOutside) handleResume();
          }, "handleFocusOutResume");
          const handlePointerLeaveResume = /* @__PURE__ */ __name(() => {
            const isFocusInside = wrapper.contains(document.activeElement);
            if (!isFocusInside) handleResume();
          }, "handlePointerLeaveResume");
          wrapper.addEventListener("focusin", handlePause);
          wrapper.addEventListener("focusout", handleFocusOutResume);
          wrapper.addEventListener("pointermove", handlePause);
          wrapper.addEventListener("pointerleave", handlePointerLeaveResume);
          window.addEventListener("blur", handlePause);
          window.addEventListener("focus", handleResume);
          return () => {
            wrapper.removeEventListener("focusin", handlePause);
            wrapper.removeEventListener("focusout", handleFocusOutResume);
            wrapper.removeEventListener("pointermove", handlePause);
            wrapper.removeEventListener("pointerleave", handlePointerLeaveResume);
            window.removeEventListener("blur", handlePause);
            window.removeEventListener("focus", handleResume);
          };
        }
      }, [hasToasts, context.isClosePausedRef]);
      const getSortedTabbableCandidates = React24.useCallback(
        ({ tabbingDirection }) => {
          const toastItems = getItems();
          const tabbableCandidates = toastItems.map((toastItem) => {
            const toastNode = toastItem.ref.current;
            const toastTabbableCandidates = [toastNode, ...getTabbableCandidates(toastNode)];
            return tabbingDirection === "forwards" ? toastTabbableCandidates : toastTabbableCandidates.reverse();
          });
          return (tabbingDirection === "forwards" ? tabbableCandidates.reverse() : tabbableCandidates).flat();
        },
        [getItems]
      );
      React24.useEffect(() => {
        const viewport = ref.current;
        if (viewport) {
          const handleKeyDown = /* @__PURE__ */ __name((event) => {
            var _a122, _b93, _c5;
            const isMetaKey = event.altKey || event.ctrlKey || event.metaKey;
            const isTabKey = event.key === "Tab" && !isMetaKey;
            if (isTabKey) {
              const focusedElement = document.activeElement;
              const isTabbingBackwards = event.shiftKey;
              const targetIsViewport = event.target === viewport;
              if (targetIsViewport && isTabbingBackwards) {
                (_a122 = headFocusProxyRef.current) == null ? void 0 : _a122.focus();
                return;
              }
              const tabbingDirection = isTabbingBackwards ? "backwards" : "forwards";
              const sortedCandidates = getSortedTabbableCandidates({ tabbingDirection });
              const index3 = sortedCandidates.findIndex((candidate) => candidate === focusedElement);
              if (focusFirst(sortedCandidates.slice(index3 + 1))) {
                event.preventDefault();
              } else {
                isTabbingBackwards ? (_b93 = headFocusProxyRef.current) == null ? void 0 : _b93.focus() : (_c5 = tailFocusProxyRef.current) == null ? void 0 : _c5.focus();
              }
            }
          }, "handleKeyDown");
          viewport.addEventListener("keydown", handleKeyDown);
          return () => viewport.removeEventListener("keydown", handleKeyDown);
        }
      }, [getItems, getSortedTabbableCandidates]);
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(
        Branch,
        {
          ref: wrapperRef,
          role: "region",
          "aria-label": label.replace("{hotkey}", hotkeyLabel),
          tabIndex: -1,
          style: { pointerEvents: hasToasts ? void 0 : "none" },
          children: [
            hasToasts && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
              FocusProxy,
              {
                ref: headFocusProxyRef,
                onFocusFromOutsideViewport: /* @__PURE__ */ __name(() => {
                  const tabbableCandidates = getSortedTabbableCandidates({
                    tabbingDirection: "forwards"
                  });
                  focusFirst(tabbableCandidates);
                }, "onFocusFromOutsideViewport")
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Collection.Slot, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Primitive.ol, __spreadProps(__spreadValues({ tabIndex: -1 }, viewportProps), { ref: composedRefs })) }),
            hasToasts && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
              FocusProxy,
              {
                ref: tailFocusProxyRef,
                onFocusFromOutsideViewport: /* @__PURE__ */ __name(() => {
                  const tabbableCandidates = getSortedTabbableCandidates({
                    tabbingDirection: "backwards"
                  });
                  focusFirst(tabbableCandidates);
                }, "onFocusFromOutsideViewport")
              }
            )
          ]
        }
      );
    }
  );
  ToastViewport.displayName = VIEWPORT_NAME;
  var FOCUS_PROXY_NAME = "ToastFocusProxy";
  var FocusProxy = React24.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeToast, onFocusFromOutsideViewport } = _a121, proxyProps = __objRest(_a121, ["__scopeToast", "onFocusFromOutsideViewport"]);
      const context = useToastProviderContext(FOCUS_PROXY_NAME, __scopeToast);
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        VisuallyHidden,
        __spreadProps(__spreadValues({
          "aria-hidden": true,
          tabIndex: 0
        }, proxyProps), {
          ref: forwardedRef,
          style: { position: "fixed" },
          onFocus: /* @__PURE__ */ __name((event) => {
            var _a122;
            const prevFocusedElement = event.relatedTarget;
            const isFocusFromOutsideViewport = !((_a122 = context.viewport) == null ? void 0 : _a122.contains(prevFocusedElement));
            if (isFocusFromOutsideViewport) onFocusFromOutsideViewport();
          }, "onFocus")
        })
      );
    }
  );
  FocusProxy.displayName = FOCUS_PROXY_NAME;
  var TOAST_NAME = "Toast";
  var TOAST_SWIPE_START = "toast.swipeStart";
  var TOAST_SWIPE_MOVE = "toast.swipeMove";
  var TOAST_SWIPE_CANCEL = "toast.swipeCancel";
  var TOAST_SWIPE_END = "toast.swipeEnd";
  var Toast = React24.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { forceMount, open: openProp, defaultOpen, onOpenChange } = _a121, toastProps = __objRest(_a121, ["forceMount", "open", "defaultOpen", "onOpenChange"]);
      const [open = true, setOpen] = useControllableState({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
      });
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Presence, { present: forceMount || open, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        ToastImpl,
        __spreadProps(__spreadValues({
          open
        }, toastProps), {
          ref: forwardedRef,
          onClose: /* @__PURE__ */ __name(() => setOpen(false), "onClose"),
          onPause: useCallbackRef(props.onPause),
          onResume: useCallbackRef(props.onResume),
          onSwipeStart: composeEventHandlers(props.onSwipeStart, (event) => {
            event.currentTarget.setAttribute("data-swipe", "start");
          }),
          onSwipeMove: composeEventHandlers(props.onSwipeMove, (event) => {
            const { x, y } = event.detail.delta;
            event.currentTarget.setAttribute("data-swipe", "move");
            event.currentTarget.style.setProperty("--radix-toast-swipe-move-x", `${x}px`);
            event.currentTarget.style.setProperty("--radix-toast-swipe-move-y", `${y}px`);
          }),
          onSwipeCancel: composeEventHandlers(props.onSwipeCancel, (event) => {
            event.currentTarget.setAttribute("data-swipe", "cancel");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-end-x");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-end-y");
          }),
          onSwipeEnd: composeEventHandlers(props.onSwipeEnd, (event) => {
            const { x, y } = event.detail.delta;
            event.currentTarget.setAttribute("data-swipe", "end");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-move-x");
            event.currentTarget.style.removeProperty("--radix-toast-swipe-move-y");
            event.currentTarget.style.setProperty("--radix-toast-swipe-end-x", `${x}px`);
            event.currentTarget.style.setProperty("--radix-toast-swipe-end-y", `${y}px`);
            setOpen(false);
          })
        })
      ) });
    }
  );
  Toast.displayName = TOAST_NAME;
  var [ToastInteractiveProvider, useToastInteractiveContext] = createToastContext(TOAST_NAME, {
    onClose() {
    }
  });
  var ToastImpl = React24.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeToast,
        type = "foreground",
        duration: durationProp,
        open,
        onClose,
        onEscapeKeyDown,
        onPause,
        onResume,
        onSwipeStart,
        onSwipeMove,
        onSwipeCancel,
        onSwipeEnd
      } = _a121, toastProps = __objRest(_a121, [
        "__scopeToast",
        "type",
        "duration",
        "open",
        "onClose",
        "onEscapeKeyDown",
        "onPause",
        "onResume",
        "onSwipeStart",
        "onSwipeMove",
        "onSwipeCancel",
        "onSwipeEnd"
      ]);
      const context = useToastProviderContext(TOAST_NAME, __scopeToast);
      const [node, setNode] = React24.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node2) => setNode(node2));
      const pointerStartRef = React24.useRef(null);
      const swipeDeltaRef = React24.useRef(null);
      const duration = durationProp || context.duration;
      const closeTimerStartTimeRef = React24.useRef(0);
      const closeTimerRemainingTimeRef = React24.useRef(duration);
      const closeTimerRef = React24.useRef(0);
      const { onToastAdd, onToastRemove } = context;
      const handleClose = useCallbackRef(() => {
        var _a122;
        const isFocusInToast = node == null ? void 0 : node.contains(document.activeElement);
        if (isFocusInToast) (_a122 = context.viewport) == null ? void 0 : _a122.focus();
        onClose();
      });
      const startTimer = React24.useCallback(
        (duration2) => {
          if (!duration2 || duration2 === Infinity) return;
          window.clearTimeout(closeTimerRef.current);
          closeTimerStartTimeRef.current = (/* @__PURE__ */ new Date()).getTime();
          closeTimerRef.current = window.setTimeout(handleClose, duration2);
        },
        [handleClose]
      );
      React24.useEffect(() => {
        const viewport = context.viewport;
        if (viewport) {
          const handleResume = /* @__PURE__ */ __name(() => {
            startTimer(closeTimerRemainingTimeRef.current);
            onResume == null ? void 0 : onResume();
          }, "handleResume");
          const handlePause = /* @__PURE__ */ __name(() => {
            const elapsedTime = (/* @__PURE__ */ new Date()).getTime() - closeTimerStartTimeRef.current;
            closeTimerRemainingTimeRef.current = closeTimerRemainingTimeRef.current - elapsedTime;
            window.clearTimeout(closeTimerRef.current);
            onPause == null ? void 0 : onPause();
          }, "handlePause");
          viewport.addEventListener(VIEWPORT_PAUSE, handlePause);
          viewport.addEventListener(VIEWPORT_RESUME, handleResume);
          return () => {
            viewport.removeEventListener(VIEWPORT_PAUSE, handlePause);
            viewport.removeEventListener(VIEWPORT_RESUME, handleResume);
          };
        }
      }, [context.viewport, duration, onPause, onResume, startTimer]);
      React24.useEffect(() => {
        if (open && !context.isClosePausedRef.current) startTimer(duration);
      }, [open, duration, context.isClosePausedRef, startTimer]);
      React24.useEffect(() => {
        onToastAdd();
        return () => onToastRemove();
      }, [onToastAdd, onToastRemove]);
      const announceTextContent = React24.useMemo(() => {
        return node ? getAnnounceTextContent(node) : null;
      }, [node]);
      if (!context.viewport) return null;
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
        announceTextContent && /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
          ToastAnnounce,
          {
            __scopeToast,
            role: "status",
            "aria-live": type === "foreground" ? "assertive" : "polite",
            "aria-atomic": true,
            children: announceTextContent
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ToastInteractiveProvider, { scope: __scopeToast, onClose: handleClose, children: ReactDOM3.createPortal(
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Collection.ItemSlot, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
            Root,
            {
              asChild: true,
              onEscapeKeyDown: composeEventHandlers(onEscapeKeyDown, () => {
                if (!context.isFocusedToastEscapeKeyDownRef.current) handleClose();
                context.isFocusedToastEscapeKeyDownRef.current = false;
              }),
              children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
                Primitive.li,
                __spreadProps(__spreadValues({
                  role: "status",
                  "aria-live": "off",
                  "aria-atomic": true,
                  tabIndex: 0,
                  "data-state": open ? "open" : "closed",
                  "data-swipe-direction": context.swipeDirection
                }, toastProps), {
                  ref: composedRefs,
                  style: __spreadValues({ userSelect: "none", touchAction: "none" }, props.style),
                  onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
                    if (event.key !== "Escape") return;
                    onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event.nativeEvent);
                    if (!event.nativeEvent.defaultPrevented) {
                      context.isFocusedToastEscapeKeyDownRef.current = true;
                      handleClose();
                    }
                  }),
                  onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
                    if (event.button !== 0) return;
                    pointerStartRef.current = { x: event.clientX, y: event.clientY };
                  }),
                  onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
                    if (!pointerStartRef.current) return;
                    const x = event.clientX - pointerStartRef.current.x;
                    const y = event.clientY - pointerStartRef.current.y;
                    const hasSwipeMoveStarted = Boolean(swipeDeltaRef.current);
                    const isHorizontalSwipe = ["left", "right"].includes(context.swipeDirection);
                    const clamp3 = ["left", "up"].includes(context.swipeDirection) ? Math.min : Math.max;
                    const clampedX = isHorizontalSwipe ? clamp3(0, x) : 0;
                    const clampedY = !isHorizontalSwipe ? clamp3(0, y) : 0;
                    const moveStartBuffer = event.pointerType === "touch" ? 10 : 2;
                    const delta = { x: clampedX, y: clampedY };
                    const eventDetail = { originalEvent: event, delta };
                    if (hasSwipeMoveStarted) {
                      swipeDeltaRef.current = delta;
                      handleAndDispatchCustomEvent2(TOAST_SWIPE_MOVE, onSwipeMove, eventDetail, {
                        discrete: false
                      });
                    } else if (isDeltaInDirection(delta, context.swipeDirection, moveStartBuffer)) {
                      swipeDeltaRef.current = delta;
                      handleAndDispatchCustomEvent2(TOAST_SWIPE_START, onSwipeStart, eventDetail, {
                        discrete: false
                      });
                      event.target.setPointerCapture(event.pointerId);
                    } else if (Math.abs(x) > moveStartBuffer || Math.abs(y) > moveStartBuffer) {
                      pointerStartRef.current = null;
                    }
                  }),
                  onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
                    const delta = swipeDeltaRef.current;
                    const target = event.target;
                    if (target.hasPointerCapture(event.pointerId)) {
                      target.releasePointerCapture(event.pointerId);
                    }
                    swipeDeltaRef.current = null;
                    pointerStartRef.current = null;
                    if (delta) {
                      const toast2 = event.currentTarget;
                      const eventDetail = { originalEvent: event, delta };
                      if (isDeltaInDirection(delta, context.swipeDirection, context.swipeThreshold)) {
                        handleAndDispatchCustomEvent2(TOAST_SWIPE_END, onSwipeEnd, eventDetail, {
                          discrete: true
                        });
                      } else {
                        handleAndDispatchCustomEvent2(
                          TOAST_SWIPE_CANCEL,
                          onSwipeCancel,
                          eventDetail,
                          {
                            discrete: true
                          }
                        );
                      }
                      toast2.addEventListener("click", (event2) => event2.preventDefault(), {
                        once: true
                      });
                    }
                  })
                })
              )
            }
          ) }),
          context.viewport
        ) })
      ] });
    }
  );
  var ToastAnnounce = /* @__PURE__ */ __name((props) => {
    const _a121 = props, { __scopeToast, children } = _a121, announceProps = __objRest(_a121, ["__scopeToast", "children"]);
    const context = useToastProviderContext(TOAST_NAME, __scopeToast);
    const [renderAnnounceText, setRenderAnnounceText] = React24.useState(false);
    const [isAnnounced, setIsAnnounced] = React24.useState(false);
    useNextFrame(() => setRenderAnnounceText(true));
    React24.useEffect(() => {
      const timer = window.setTimeout(() => setIsAnnounced(true), 1e3);
      return () => window.clearTimeout(timer);
    }, []);
    return isAnnounced ? null : /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Portal, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(VisuallyHidden, __spreadProps(__spreadValues({}, announceProps), { children: renderAnnounceText && /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)(import_jsx_runtime10.Fragment, { children: [
      context.label,
      " ",
      children
    ] }) })) });
  }, "ToastAnnounce");
  var TITLE_NAME = "ToastTitle";
  var ToastTitle = React24.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeToast } = _a121, titleProps = __objRest(_a121, ["__scopeToast"]);
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Primitive.div, __spreadProps(__spreadValues({}, titleProps), { ref: forwardedRef }));
    }
  );
  ToastTitle.displayName = TITLE_NAME;
  var DESCRIPTION_NAME = "ToastDescription";
  var ToastDescription = React24.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeToast } = _a121, descriptionProps = __objRest(_a121, ["__scopeToast"]);
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(Primitive.div, __spreadProps(__spreadValues({}, descriptionProps), { ref: forwardedRef }));
    }
  );
  ToastDescription.displayName = DESCRIPTION_NAME;
  var ACTION_NAME = "ToastAction";
  var ToastAction = React24.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { altText } = _a121, actionProps = __objRest(_a121, ["altText"]);
      if (!altText.trim()) {
        console.error(
          `Invalid prop \`altText\` supplied to \`${ACTION_NAME}\`. Expected non-empty \`string\`.`
        );
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ToastAnnounceExclude, { altText, asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ToastClose, __spreadProps(__spreadValues({}, actionProps), { ref: forwardedRef })) });
    }
  );
  ToastAction.displayName = ACTION_NAME;
  var CLOSE_NAME = "ToastClose";
  var ToastClose = React24.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeToast } = _a121, closeProps = __objRest(_a121, ["__scopeToast"]);
      const interactiveContext = useToastInteractiveContext(CLOSE_NAME, __scopeToast);
      return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ToastAnnounceExclude, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
        Primitive.button,
        __spreadProps(__spreadValues({
          type: "button"
        }, closeProps), {
          ref: forwardedRef,
          onClick: composeEventHandlers(props.onClick, interactiveContext.onClose)
        })
      ) });
    }
  );
  ToastClose.displayName = CLOSE_NAME;
  var ToastAnnounceExclude = React24.forwardRef((props, forwardedRef) => {
    const _a121 = props, { __scopeToast, altText } = _a121, announceExcludeProps = __objRest(_a121, ["__scopeToast", "altText"]);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      Primitive.div,
      __spreadProps(__spreadValues({
        "data-radix-toast-announce-exclude": "",
        "data-radix-toast-announce-alt": altText || void 0
      }, announceExcludeProps), {
        ref: forwardedRef
      })
    );
  });
  function getAnnounceTextContent(container) {
    const textContent = [];
    const childNodes = Array.from(container.childNodes);
    childNodes.forEach((node) => {
      if (node.nodeType === node.TEXT_NODE && node.textContent) textContent.push(node.textContent);
      if (isHTMLElement(node)) {
        const isHidden2 = node.ariaHidden || node.hidden || node.style.display === "none";
        const isExcluded = node.dataset.radixToastAnnounceExclude === "";
        if (!isHidden2) {
          if (isExcluded) {
            const altText = node.dataset.radixToastAnnounceAlt;
            if (altText) textContent.push(altText);
          } else {
            textContent.push(...getAnnounceTextContent(node));
          }
        }
      }
    });
    return textContent;
  }
  __name(getAnnounceTextContent, "getAnnounceTextContent");
  function handleAndDispatchCustomEvent2(name, handler, detail, { discrete }) {
    const currentTarget = detail.originalEvent.currentTarget;
    const event = new CustomEvent(name, { bubbles: true, cancelable: true, detail });
    if (handler) currentTarget.addEventListener(name, handler, { once: true });
    if (discrete) {
      dispatchDiscreteCustomEvent(currentTarget, event);
    } else {
      currentTarget.dispatchEvent(event);
    }
  }
  __name(handleAndDispatchCustomEvent2, "handleAndDispatchCustomEvent");
  var isDeltaInDirection = /* @__PURE__ */ __name((delta, direction, threshold = 0) => {
    const deltaX = Math.abs(delta.x);
    const deltaY = Math.abs(delta.y);
    const isDeltaX = deltaX > deltaY;
    if (direction === "left" || direction === "right") {
      return isDeltaX && deltaX > threshold;
    } else {
      return !isDeltaX && deltaY > threshold;
    }
  }, "isDeltaInDirection");
  function useNextFrame(callback = () => {
  }) {
    const fn = useCallbackRef(callback);
    useLayoutEffect22(() => {
      let raf1 = 0;
      let raf2 = 0;
      raf1 = window.requestAnimationFrame(() => raf2 = window.requestAnimationFrame(fn));
      return () => {
        window.cancelAnimationFrame(raf1);
        window.cancelAnimationFrame(raf2);
      };
    }, [fn]);
  }
  __name(useNextFrame, "useNextFrame");
  function isHTMLElement(node) {
    return node.nodeType === node.ELEMENT_NODE;
  }
  __name(isHTMLElement, "isHTMLElement");
  function getTabbableCandidates(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      acceptNode: /* @__PURE__ */ __name((node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }, "acceptNode")
    });
    while (walker.nextNode()) nodes.push(walker.currentNode);
    return nodes;
  }
  __name(getTabbableCandidates, "getTabbableCandidates");
  function focusFirst(candidates) {
    const previouslyFocusedElement = document.activeElement;
    return candidates.some((candidate) => {
      if (candidate === previouslyFocusedElement) return true;
      candidate.focus();
      return document.activeElement !== previouslyFocusedElement;
    });
  }
  __name(focusFirst, "focusFirst");
  var Provider = ToastProvider;
  var Viewport = ToastViewport;
  var Root22 = Toast;
  var Title = ToastTitle;
  var Description = ToastDescription;
  var Action = ToastAction;
  var Close = ToastClose;

  // node_modules/clsx/dist/clsx.mjs
  function r(e) {
    var t3, f, n2 = "";
    if ("string" == typeof e || "number" == typeof e) n2 += e;
    else if ("object" == typeof e) if (Array.isArray(e)) {
      var o2 = e.length;
      for (t3 = 0; t3 < o2; t3++) e[t3] && (f = r(e[t3])) && (n2 && (n2 += " "), n2 += f);
    } else for (f in e) e[f] && (n2 && (n2 += " "), n2 += f);
    return n2;
  }
  __name(r, "r");
  function clsx() {
    for (var e, t3, f = 0, n2 = "", o2 = arguments.length; f < o2; f++) (e = arguments[f]) && (t3 = r(e)) && (n2 && (n2 += " "), n2 += t3);
    return n2;
  }
  __name(clsx, "clsx");

  // node_modules/class-variance-authority/dist/index.mjs
  var falsyToString = /* @__PURE__ */ __name((value) => typeof value === "boolean" ? `${value}` : value === 0 ? "0" : value, "falsyToString");
  var cx = clsx;
  var cva = /* @__PURE__ */ __name((base, config) => (props) => {
    var _config_compoundVariants;
    if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    const { variants, defaultVariants } = config;
    const getVariantClassNames = Object.keys(variants).map((variant) => {
      const variantProp = props === null || props === void 0 ? void 0 : props[variant];
      const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
      if (variantProp === null) return null;
      const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
      return variants[variant][variantKey];
    });
    const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
      let [key, value] = param;
      if (value === void 0) {
        return acc;
      }
      acc[key] = value;
      return acc;
    }, {});
    const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (_config_compoundVariants = config.compoundVariants) === null || _config_compoundVariants === void 0 ? void 0 : _config_compoundVariants.reduce((acc, param) => {
      let _a121 = param, { class: cvClass, className: cvClassName } = _a121, compoundVariantOptions = __objRest(_a121, ["class", "className"]);
      return Object.entries(compoundVariantOptions).every((param2) => {
        let [key, value] = param2;
        return Array.isArray(value) ? value.includes(__spreadValues(__spreadValues({}, defaultVariants), propsWithoutUndefined)[key]) : __spreadValues(__spreadValues({}, defaultVariants), propsWithoutUndefined)[key] === value;
      }) ? [
        ...acc,
        cvClass,
        cvClassName
      ] : acc;
    }, []);
    return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
  }, "cva");

  // node_modules/lucide-react/dist/esm/createLucideIcon.js
  var import_react4 = __toESM(require_react());

  // node_modules/lucide-react/dist/esm/shared/src/utils.js
  var toKebabCase = /* @__PURE__ */ __name((string) => string.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase(), "toKebabCase");
  var mergeClasses = /* @__PURE__ */ __name((...classes) => classes.filter((className, index3, array) => {
    return Boolean(className) && array.indexOf(className) === index3;
  }).join(" "), "mergeClasses");

  // node_modules/lucide-react/dist/esm/Icon.js
  var import_react3 = __toESM(require_react());

  // node_modules/lucide-react/dist/esm/defaultAttributes.js
  var defaultAttributes = {
    xmlns: "http://www.w3.org/2000/svg",
    width: 24,
    height: 24,
    viewBox: "0 0 24 24",
    fill: "none",
    stroke: "currentColor",
    strokeWidth: 2,
    strokeLinecap: "round",
    strokeLinejoin: "round"
  };

  // node_modules/lucide-react/dist/esm/Icon.js
  var Icon = (0, import_react3.forwardRef)(
    (_a121, ref) => {
      var _b93 = _a121, {
        color = "currentColor",
        size: size4 = 24,
        strokeWidth = 2,
        absoluteStrokeWidth,
        className = "",
        children,
        iconNode
      } = _b93, rest = __objRest(_b93, [
        "color",
        "size",
        "strokeWidth",
        "absoluteStrokeWidth",
        "className",
        "children",
        "iconNode"
      ]);
      return (0, import_react3.createElement)(
        "svg",
        __spreadValues(__spreadProps(__spreadValues({
          ref
        }, defaultAttributes), {
          width: size4,
          height: size4,
          stroke: color,
          strokeWidth: absoluteStrokeWidth ? Number(strokeWidth) * 24 / Number(size4) : strokeWidth,
          className: mergeClasses("lucide", className)
        }), rest),
        [
          ...iconNode.map(([tag, attrs]) => (0, import_react3.createElement)(tag, attrs)),
          ...Array.isArray(children) ? children : [children]
        ]
      );
    }
  );

  // node_modules/lucide-react/dist/esm/createLucideIcon.js
  var createLucideIcon = /* @__PURE__ */ __name((iconName, iconNode) => {
    const Component = (0, import_react4.forwardRef)(
      (_a121, ref) => {
        var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
        return (0, import_react4.createElement)(Icon, __spreadValues({
          ref,
          iconNode,
          className: mergeClasses(`lucide-${toKebabCase(iconName)}`, className)
        }, props));
      }
    );
    Component.displayName = `${iconName}`;
    return Component;
  }, "createLucideIcon");

  // node_modules/lucide-react/dist/esm/icons/activity.js
  var Activity = createLucideIcon("Activity", [
    [
      "path",
      {
        d: "M22 12h-2.48a2 2 0 0 0-1.93 1.46l-2.35 8.36a.25.25 0 0 1-.48 0L9.24 2.18a.25.25 0 0 0-.48 0l-2.35 8.36A2 2 0 0 1 4.49 12H2",
        key: "169zse"
      }
    ]
  ]);

  // node_modules/lucide-react/dist/esm/icons/arrow-left.js
  var ArrowLeft = createLucideIcon("ArrowLeft", [
    ["path", { d: "m12 19-7-7 7-7", key: "1l729n" }],
    ["path", { d: "M19 12H5", key: "x3x0zl" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/arrow-up-down.js
  var ArrowUpDown = createLucideIcon("ArrowUpDown", [
    ["path", { d: "m21 16-4 4-4-4", key: "f6ql7i" }],
    ["path", { d: "M17 20V4", key: "1ejh1v" }],
    ["path", { d: "m3 8 4-4 4 4", key: "11wl7u" }],
    ["path", { d: "M7 4v16", key: "1glfcx" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/bell.js
  var Bell = createLucideIcon("Bell", [
    ["path", { d: "M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9", key: "1qo2s2" }],
    ["path", { d: "M10.3 21a1.94 1.94 0 0 0 3.4 0", key: "qgo35s" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/building.js
  var Building = createLucideIcon("Building", [
    ["rect", { width: "16", height: "20", x: "4", y: "2", rx: "2", ry: "2", key: "76otgf" }],
    ["path", { d: "M9 22v-4h6v4", key: "r93iot" }],
    ["path", { d: "M8 6h.01", key: "1dz90k" }],
    ["path", { d: "M16 6h.01", key: "1x0f13" }],
    ["path", { d: "M12 6h.01", key: "1vi96p" }],
    ["path", { d: "M12 10h.01", key: "1nrarc" }],
    ["path", { d: "M12 14h.01", key: "1etili" }],
    ["path", { d: "M16 10h.01", key: "1m94wz" }],
    ["path", { d: "M16 14h.01", key: "1gbofw" }],
    ["path", { d: "M8 10h.01", key: "19clt8" }],
    ["path", { d: "M8 14h.01", key: "6423bh" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/calendar.js
  var Calendar = createLucideIcon("Calendar", [
    ["path", { d: "M8 2v4", key: "1cmpym" }],
    ["path", { d: "M16 2v4", key: "4m81vk" }],
    ["rect", { width: "18", height: "18", x: "3", y: "4", rx: "2", key: "1hopcy" }],
    ["path", { d: "M3 10h18", key: "8toen8" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/check.js
  var Check = createLucideIcon("Check", [["path", { d: "M20 6 9 17l-5-5", key: "1gmf2c" }]]);

  // node_modules/lucide-react/dist/esm/icons/chevron-down.js
  var ChevronDown = createLucideIcon("ChevronDown", [
    ["path", { d: "m6 9 6 6 6-6", key: "qrunsl" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/chevron-left.js
  var ChevronLeft = createLucideIcon("ChevronLeft", [
    ["path", { d: "m15 18-6-6 6-6", key: "1wnfg3" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/chevron-right.js
  var ChevronRight = createLucideIcon("ChevronRight", [
    ["path", { d: "m9 18 6-6-6-6", key: "mthhwq" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/chevron-up.js
  var ChevronUp = createLucideIcon("ChevronUp", [["path", { d: "m18 15-6-6-6 6", key: "153udz" }]]);

  // node_modules/lucide-react/dist/esm/icons/circle-alert.js
  var CircleAlert = createLucideIcon("CircleAlert", [
    ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
    ["line", { x1: "12", x2: "12", y1: "8", y2: "12", key: "1pkeuh" }],
    ["line", { x1: "12", x2: "12.01", y1: "16", y2: "16", key: "4dfq90" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/circle-check-big.js
  var CircleCheckBig = createLucideIcon("CircleCheckBig", [
    ["path", { d: "M21.801 10A10 10 0 1 1 17 3.335", key: "yps3ct" }],
    ["path", { d: "m9 11 3 3L22 4", key: "1pflzl" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/copy.js
  var Copy = createLucideIcon("Copy", [
    ["rect", { width: "14", height: "14", x: "8", y: "8", rx: "2", ry: "2", key: "17jyea" }],
    ["path", { d: "M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2", key: "zix9uf" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/download.js
  var Download = createLucideIcon("Download", [
    ["path", { d: "M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4", key: "ih7n3h" }],
    ["polyline", { points: "7 10 12 15 17 10", key: "2ggqvy" }],
    ["line", { x1: "12", x2: "12", y1: "15", y2: "3", key: "1vk2je" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/external-link.js
  var ExternalLink = createLucideIcon("ExternalLink", [
    ["path", { d: "M15 3h6v6", key: "1q9fwt" }],
    ["path", { d: "M10 14 21 3", key: "gplh6r" }],
    ["path", { d: "M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6", key: "a6xqqp" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/eye.js
  var Eye = createLucideIcon("Eye", [
    [
      "path",
      {
        d: "M2.062 12.348a1 1 0 0 1 0-.696 10.75 10.75 0 0 1 19.876 0 1 1 0 0 1 0 .696 10.75 10.75 0 0 1-19.876 0",
        key: "1nclc0"
      }
    ],
    ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/filter.js
  var Filter = createLucideIcon("Filter", [
    ["polygon", { points: "22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3", key: "1yg77f" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/globe.js
  var Globe = createLucideIcon("Globe", [
    ["circle", { cx: "12", cy: "12", r: "10", key: "1mglay" }],
    ["path", { d: "M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20", key: "13o1zl" }],
    ["path", { d: "M2 12h20", key: "9i4pu4" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/graduation-cap.js
  var GraduationCap = createLucideIcon("GraduationCap", [
    [
      "path",
      {
        d: "M21.42 10.922a1 1 0 0 0-.019-1.838L12.83 5.18a2 2 0 0 0-1.66 0L2.6 9.08a1 1 0 0 0 0 1.832l8.57 3.908a2 2 0 0 0 1.66 0z",
        key: "j76jl0"
      }
    ],
    ["path", { d: "M22 10v6", key: "1lu8f3" }],
    ["path", { d: "M6 12.5V16a6 3 0 0 0 12 0v-3.5", key: "1r8lef" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/grid-3x3.js
  var Grid3x3 = createLucideIcon("Grid3x3", [
    ["rect", { width: "18", height: "18", x: "3", y: "3", rx: "2", key: "afitv7" }],
    ["path", { d: "M3 9h18", key: "1pudct" }],
    ["path", { d: "M3 15h18", key: "5xshup" }],
    ["path", { d: "M9 3v18", key: "fh3hqa" }],
    ["path", { d: "M15 3v18", key: "14nvp0" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/grip-vertical.js
  var GripVertical = createLucideIcon("GripVertical", [
    ["circle", { cx: "9", cy: "12", r: "1", key: "1vctgf" }],
    ["circle", { cx: "9", cy: "5", r: "1", key: "hp0tcf" }],
    ["circle", { cx: "9", cy: "19", r: "1", key: "fkjjf6" }],
    ["circle", { cx: "15", cy: "12", r: "1", key: "1tmaij" }],
    ["circle", { cx: "15", cy: "5", r: "1", key: "19l28e" }],
    ["circle", { cx: "15", cy: "19", r: "1", key: "f4zoj3" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/key-round.js
  var KeyRound = createLucideIcon("KeyRound", [
    [
      "path",
      {
        d: "M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z",
        key: "1s6t7t"
      }
    ],
    ["circle", { cx: "16.5", cy: "7.5", r: ".5", fill: "currentColor", key: "w0ekpg" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/key.js
  var Key = createLucideIcon("Key", [
    ["path", { d: "m15.5 7.5 2.3 2.3a1 1 0 0 0 1.4 0l2.1-2.1a1 1 0 0 0 0-1.4L19 4", key: "g0fldk" }],
    ["path", { d: "m21 2-9.6 9.6", key: "1j0ho8" }],
    ["circle", { cx: "7.5", cy: "15.5", r: "5.5", key: "yqb3hr" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/monitor.js
  var Monitor = createLucideIcon("Monitor", [
    ["rect", { width: "20", height: "14", x: "2", y: "3", rx: "2", key: "48i651" }],
    ["line", { x1: "8", x2: "16", y1: "21", y2: "21", key: "1svkeh" }],
    ["line", { x1: "12", x2: "12", y1: "17", y2: "21", key: "vw1qmm" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/moon.js
  var Moon = createLucideIcon("Moon", [
    ["path", { d: "M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z", key: "a7tn18" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/plus.js
  var Plus = createLucideIcon("Plus", [
    ["path", { d: "M5 12h14", key: "1ays0h" }],
    ["path", { d: "M12 5v14", key: "s699le" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/refresh-cw.js
  var RefreshCw = createLucideIcon("RefreshCw", [
    ["path", { d: "M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8", key: "v9h5vc" }],
    ["path", { d: "M21 3v5h-5", key: "1q7to0" }],
    ["path", { d: "M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16", key: "3uifl3" }],
    ["path", { d: "M8 16H3v5", key: "1cv678" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/rotate-ccw.js
  var RotateCcw = createLucideIcon("RotateCcw", [
    ["path", { d: "M3 12a9 9 0 1 0 9-9 9.75 9.75 0 0 0-6.74 2.74L3 8", key: "1357e3" }],
    ["path", { d: "M3 3v5h5", key: "1xhq8a" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/save.js
  var Save = createLucideIcon("Save", [
    [
      "path",
      {
        d: "M15.2 3a2 2 0 0 1 1.4.6l3.8 3.8a2 2 0 0 1 .6 1.4V19a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2z",
        key: "1c8476"
      }
    ],
    ["path", { d: "M17 21v-7a1 1 0 0 0-1-1H8a1 1 0 0 0-1 1v7", key: "1ydtos" }],
    ["path", { d: "M7 3v4a1 1 0 0 0 1 1h7", key: "t51u73" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/search.js
  var Search = createLucideIcon("Search", [
    ["circle", { cx: "11", cy: "11", r: "8", key: "4ej97u" }],
    ["path", { d: "m21 21-4.3-4.3", key: "1qie3q" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/settings.js
  var Settings = createLucideIcon("Settings", [
    [
      "path",
      {
        d: "M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z",
        key: "1qme2f"
      }
    ],
    ["circle", { cx: "12", cy: "12", r: "3", key: "1v7zrd" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/shield.js
  var Shield = createLucideIcon("Shield", [
    [
      "path",
      {
        d: "M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",
        key: "oel41y"
      }
    ]
  ]);

  // node_modules/lucide-react/dist/esm/icons/smartphone.js
  var Smartphone = createLucideIcon("Smartphone", [
    ["rect", { width: "14", height: "20", x: "5", y: "2", rx: "2", ry: "2", key: "1yt0o3" }],
    ["path", { d: "M12 18h.01", key: "mhygvu" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/square-pen.js
  var SquarePen = createLucideIcon("SquarePen", [
    ["path", { d: "M12 3H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7", key: "1m0v6g" }],
    [
      "path",
      {
        d: "M18.375 2.625a1 1 0 0 1 3 3l-9.013 9.014a2 2 0 0 1-.853.505l-2.873.84a.5.5 0 0 1-.62-.62l.84-2.873a2 2 0 0 1 .506-.852z",
        key: "ohrbg2"
      }
    ]
  ]);

  // node_modules/lucide-react/dist/esm/icons/sun.js
  var Sun = createLucideIcon("Sun", [
    ["circle", { cx: "12", cy: "12", r: "4", key: "4exip2" }],
    ["path", { d: "M12 2v2", key: "tus03m" }],
    ["path", { d: "M12 20v2", key: "1lh1kg" }],
    ["path", { d: "m4.93 4.93 1.41 1.41", key: "149t6j" }],
    ["path", { d: "m17.66 17.66 1.41 1.41", key: "ptbguv" }],
    ["path", { d: "M2 12h2", key: "1t8f8n" }],
    ["path", { d: "M20 12h2", key: "1q8mjw" }],
    ["path", { d: "m6.34 17.66-1.41 1.41", key: "1m8zz5" }],
    ["path", { d: "m19.07 4.93-1.41 1.41", key: "1shlcs" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/trash-2.js
  var Trash2 = createLucideIcon("Trash2", [
    ["path", { d: "M3 6h18", key: "d0wm0j" }],
    ["path", { d: "M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6", key: "4alrt4" }],
    ["path", { d: "M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2", key: "v07s0e" }],
    ["line", { x1: "10", x2: "10", y1: "11", y2: "17", key: "1uufr5" }],
    ["line", { x1: "14", x2: "14", y1: "11", y2: "17", key: "xtxkd" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/triangle-alert.js
  var TriangleAlert = createLucideIcon("TriangleAlert", [
    [
      "path",
      {
        d: "m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3",
        key: "wmoenq"
      }
    ],
    ["path", { d: "M12 9v4", key: "juzpu7" }],
    ["path", { d: "M12 17h.01", key: "p32p05" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/user-check.js
  var UserCheck = createLucideIcon("UserCheck", [
    ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
    ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
    ["polyline", { points: "16 11 18 13 22 9", key: "1pwet4" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/user-plus.js
  var UserPlus = createLucideIcon("UserPlus", [
    ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
    ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
    ["line", { x1: "19", x2: "19", y1: "8", y2: "14", key: "1bvyxn" }],
    ["line", { x1: "22", x2: "16", y1: "11", y2: "11", key: "1shjgl" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/user-x.js
  var UserX = createLucideIcon("UserX", [
    ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
    ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
    ["line", { x1: "17", x2: "22", y1: "8", y2: "13", key: "3nzzx3" }],
    ["line", { x1: "22", x2: "17", y1: "8", y2: "13", key: "1swrse" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/users.js
  var Users = createLucideIcon("Users", [
    ["path", { d: "M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2", key: "1yyitq" }],
    ["circle", { cx: "9", cy: "7", r: "4", key: "nufk8" }],
    ["path", { d: "M22 21v-2a4 4 0 0 0-3-3.87", key: "kshegd" }],
    ["path", { d: "M16 3.13a4 4 0 0 1 0 7.75", key: "1da9ce" }]
  ]);

  // node_modules/lucide-react/dist/esm/icons/x.js
  var X = createLucideIcon("X", [
    ["path", { d: "M18 6 6 18", key: "1bl5f8" }],
    ["path", { d: "m6 6 12 12", key: "d8bk6v" }]
  ]);

  // node_modules/tailwind-merge/dist/bundle-mjs.mjs
  var CLASS_PART_SEPARATOR = "-";
  var createClassGroupUtils = /* @__PURE__ */ __name((config) => {
    const classMap = createClassMap(config);
    const {
      conflictingClassGroups,
      conflictingClassGroupModifiers
    } = config;
    const getClassGroupId = /* @__PURE__ */ __name((className) => {
      const classParts = className.split(CLASS_PART_SEPARATOR);
      if (classParts[0] === "" && classParts.length !== 1) {
        classParts.shift();
      }
      return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
    }, "getClassGroupId");
    const getConflictingClassGroupIds = /* @__PURE__ */ __name((classGroupId, hasPostfixModifier) => {
      const conflicts = conflictingClassGroups[classGroupId] || [];
      if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
        return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
      }
      return conflicts;
    }, "getConflictingClassGroupIds");
    return {
      getClassGroupId,
      getConflictingClassGroupIds
    };
  }, "createClassGroupUtils");
  var getGroupRecursive = /* @__PURE__ */ __name((classParts, classPartObject) => {
    var _a121;
    if (classParts.length === 0) {
      return classPartObject.classGroupId;
    }
    const currentClassPart = classParts[0];
    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
    const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
    if (classGroupFromNextClassPart) {
      return classGroupFromNextClassPart;
    }
    if (classPartObject.validators.length === 0) {
      return void 0;
    }
    const classRest = classParts.join(CLASS_PART_SEPARATOR);
    return (_a121 = classPartObject.validators.find(({
      validator
    }) => validator(classRest))) == null ? void 0 : _a121.classGroupId;
  }, "getGroupRecursive");
  var arbitraryPropertyRegex = /^\[(.+)\]$/;
  var getGroupIdForArbitraryProperty = /* @__PURE__ */ __name((className) => {
    if (arbitraryPropertyRegex.test(className)) {
      const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
      const property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
      if (property) {
        return "arbitrary.." + property;
      }
    }
  }, "getGroupIdForArbitraryProperty");
  var createClassMap = /* @__PURE__ */ __name((config) => {
    const {
      theme,
      prefix
    } = config;
    const classMap = {
      nextPart: /* @__PURE__ */ new Map(),
      validators: []
    };
    const prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
    prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {
      processClassesRecursively(classGroup, classMap, classGroupId, theme);
    });
    return classMap;
  }, "createClassMap");
  var processClassesRecursively = /* @__PURE__ */ __name((classGroup, classPartObject, classGroupId, theme) => {
    classGroup.forEach((classDefinition) => {
      if (typeof classDefinition === "string") {
        const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
        classPartObjectToEdit.classGroupId = classGroupId;
        return;
      }
      if (typeof classDefinition === "function") {
        if (isThemeGetter(classDefinition)) {
          processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
          return;
        }
        classPartObject.validators.push({
          validator: classDefinition,
          classGroupId
        });
        return;
      }
      Object.entries(classDefinition).forEach(([key, classGroup2]) => {
        processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
      });
    });
  }, "processClassesRecursively");
  var getPart = /* @__PURE__ */ __name((classPartObject, path) => {
    let currentClassPartObject = classPartObject;
    path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
      if (!currentClassPartObject.nextPart.has(pathPart)) {
        currentClassPartObject.nextPart.set(pathPart, {
          nextPart: /* @__PURE__ */ new Map(),
          validators: []
        });
      }
      currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
    });
    return currentClassPartObject;
  }, "getPart");
  var isThemeGetter = /* @__PURE__ */ __name((func) => func.isThemeGetter, "isThemeGetter");
  var getPrefixedClassGroupEntries = /* @__PURE__ */ __name((classGroupEntries, prefix) => {
    if (!prefix) {
      return classGroupEntries;
    }
    return classGroupEntries.map(([classGroupId, classGroup]) => {
      const prefixedClassGroup = classGroup.map((classDefinition) => {
        if (typeof classDefinition === "string") {
          return prefix + classDefinition;
        }
        if (typeof classDefinition === "object") {
          return Object.fromEntries(Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]));
        }
        return classDefinition;
      });
      return [classGroupId, prefixedClassGroup];
    });
  }, "getPrefixedClassGroupEntries");
  var createLruCache = /* @__PURE__ */ __name((maxCacheSize) => {
    if (maxCacheSize < 1) {
      return {
        get: /* @__PURE__ */ __name(() => void 0, "get"),
        set: /* @__PURE__ */ __name(() => {
        }, "set")
      };
    }
    let cacheSize = 0;
    let cache = /* @__PURE__ */ new Map();
    let previousCache = /* @__PURE__ */ new Map();
    const update = /* @__PURE__ */ __name((key, value) => {
      cache.set(key, value);
      cacheSize++;
      if (cacheSize > maxCacheSize) {
        cacheSize = 0;
        previousCache = cache;
        cache = /* @__PURE__ */ new Map();
      }
    }, "update");
    return {
      get(key) {
        let value = cache.get(key);
        if (value !== void 0) {
          return value;
        }
        if ((value = previousCache.get(key)) !== void 0) {
          update(key, value);
          return value;
        }
      },
      set(key, value) {
        if (cache.has(key)) {
          cache.set(key, value);
        } else {
          update(key, value);
        }
      }
    };
  }, "createLruCache");
  var IMPORTANT_MODIFIER = "!";
  var createParseClassName = /* @__PURE__ */ __name((config) => {
    const {
      separator,
      experimentalParseClassName
    } = config;
    const isSeparatorSingleCharacter = separator.length === 1;
    const firstSeparatorCharacter = separator[0];
    const separatorLength = separator.length;
    const parseClassName = /* @__PURE__ */ __name((className) => {
      const modifiers = [];
      let bracketDepth = 0;
      let modifierStart = 0;
      let postfixModifierPosition;
      for (let index3 = 0; index3 < className.length; index3++) {
        let currentCharacter = className[index3];
        if (bracketDepth === 0) {
          if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index3, index3 + separatorLength) === separator)) {
            modifiers.push(className.slice(modifierStart, index3));
            modifierStart = index3 + separatorLength;
            continue;
          }
          if (currentCharacter === "/") {
            postfixModifierPosition = index3;
            continue;
          }
        }
        if (currentCharacter === "[") {
          bracketDepth++;
        } else if (currentCharacter === "]") {
          bracketDepth--;
        }
      }
      const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
      const hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
      const baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
      const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
      return {
        modifiers,
        hasImportantModifier,
        baseClassName,
        maybePostfixModifierPosition
      };
    }, "parseClassName");
    if (experimentalParseClassName) {
      return (className) => experimentalParseClassName({
        className,
        parseClassName
      });
    }
    return parseClassName;
  }, "createParseClassName");
  var sortModifiers = /* @__PURE__ */ __name((modifiers) => {
    if (modifiers.length <= 1) {
      return modifiers;
    }
    const sortedModifiers = [];
    let unsortedModifiers = [];
    modifiers.forEach((modifier) => {
      const isArbitraryVariant = modifier[0] === "[";
      if (isArbitraryVariant) {
        sortedModifiers.push(...unsortedModifiers.sort(), modifier);
        unsortedModifiers = [];
      } else {
        unsortedModifiers.push(modifier);
      }
    });
    sortedModifiers.push(...unsortedModifiers.sort());
    return sortedModifiers;
  }, "sortModifiers");
  var createConfigUtils = /* @__PURE__ */ __name((config) => __spreadValues({
    cache: createLruCache(config.cacheSize),
    parseClassName: createParseClassName(config)
  }, createClassGroupUtils(config)), "createConfigUtils");
  var SPLIT_CLASSES_REGEX = /\s+/;
  var mergeClassList = /* @__PURE__ */ __name((classList, configUtils) => {
    const {
      parseClassName,
      getClassGroupId,
      getConflictingClassGroupIds
    } = configUtils;
    const classGroupsInConflict = [];
    const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
    let result = "";
    for (let index3 = classNames.length - 1; index3 >= 0; index3 -= 1) {
      const originalClassName = classNames[index3];
      const {
        modifiers,
        hasImportantModifier,
        baseClassName,
        maybePostfixModifierPosition
      } = parseClassName(originalClassName);
      let hasPostfixModifier = Boolean(maybePostfixModifierPosition);
      let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
      if (!classGroupId) {
        if (!hasPostfixModifier) {
          result = originalClassName + (result.length > 0 ? " " + result : result);
          continue;
        }
        classGroupId = getClassGroupId(baseClassName);
        if (!classGroupId) {
          result = originalClassName + (result.length > 0 ? " " + result : result);
          continue;
        }
        hasPostfixModifier = false;
      }
      const variantModifier = sortModifiers(modifiers).join(":");
      const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
      const classId = modifierId + classGroupId;
      if (classGroupsInConflict.includes(classId)) {
        continue;
      }
      classGroupsInConflict.push(classId);
      const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
      for (let i2 = 0; i2 < conflictGroups.length; ++i2) {
        const group = conflictGroups[i2];
        classGroupsInConflict.push(modifierId + group);
      }
      result = originalClassName + (result.length > 0 ? " " + result : result);
    }
    return result;
  }, "mergeClassList");
  function twJoin() {
    let index3 = 0;
    let argument;
    let resolvedValue;
    let string = "";
    while (index3 < arguments.length) {
      if (argument = arguments[index3++]) {
        if (resolvedValue = toValue(argument)) {
          string && (string += " ");
          string += resolvedValue;
        }
      }
    }
    return string;
  }
  __name(twJoin, "twJoin");
  var toValue = /* @__PURE__ */ __name((mix) => {
    if (typeof mix === "string") {
      return mix;
    }
    let resolvedValue;
    let string = "";
    for (let k3 = 0; k3 < mix.length; k3++) {
      if (mix[k3]) {
        if (resolvedValue = toValue(mix[k3])) {
          string && (string += " ");
          string += resolvedValue;
        }
      }
    }
    return string;
  }, "toValue");
  function createTailwindMerge(createConfigFirst, ...createConfigRest) {
    let configUtils;
    let cacheGet;
    let cacheSet;
    let functionToCall = initTailwindMerge;
    function initTailwindMerge(classList) {
      const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
      configUtils = createConfigUtils(config);
      cacheGet = configUtils.cache.get;
      cacheSet = configUtils.cache.set;
      functionToCall = tailwindMerge;
      return tailwindMerge(classList);
    }
    __name(initTailwindMerge, "initTailwindMerge");
    function tailwindMerge(classList) {
      const cachedResult = cacheGet(classList);
      if (cachedResult) {
        return cachedResult;
      }
      const result = mergeClassList(classList, configUtils);
      cacheSet(classList, result);
      return result;
    }
    __name(tailwindMerge, "tailwindMerge");
    return /* @__PURE__ */ __name(function callTailwindMerge() {
      return functionToCall(twJoin.apply(null, arguments));
    }, "callTailwindMerge");
  }
  __name(createTailwindMerge, "createTailwindMerge");
  var fromTheme = /* @__PURE__ */ __name((key) => {
    const themeGetter = /* @__PURE__ */ __name((theme) => theme[key] || [], "themeGetter");
    themeGetter.isThemeGetter = true;
    return themeGetter;
  }, "fromTheme");
  var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
  var fractionRegex = /^\d+\/\d+$/;
  var stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
  var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
  var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
  var colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch))\(.+\)$/;
  var shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
  var imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
  var isLength = /* @__PURE__ */ __name((value) => isNumber(value) || stringLengths.has(value) || fractionRegex.test(value), "isLength");
  var isArbitraryLength = /* @__PURE__ */ __name((value) => getIsArbitraryValue(value, "length", isLengthOnly), "isArbitraryLength");
  var isNumber = /* @__PURE__ */ __name((value) => Boolean(value) && !Number.isNaN(Number(value)), "isNumber");
  var isArbitraryNumber = /* @__PURE__ */ __name((value) => getIsArbitraryValue(value, "number", isNumber), "isArbitraryNumber");
  var isInteger = /* @__PURE__ */ __name((value) => Boolean(value) && Number.isInteger(Number(value)), "isInteger");
  var isPercent = /* @__PURE__ */ __name((value) => value.endsWith("%") && isNumber(value.slice(0, -1)), "isPercent");
  var isArbitraryValue = /* @__PURE__ */ __name((value) => arbitraryValueRegex.test(value), "isArbitraryValue");
  var isTshirtSize = /* @__PURE__ */ __name((value) => tshirtUnitRegex.test(value), "isTshirtSize");
  var sizeLabels = /* @__PURE__ */ new Set(["length", "size", "percentage"]);
  var isArbitrarySize = /* @__PURE__ */ __name((value) => getIsArbitraryValue(value, sizeLabels, isNever), "isArbitrarySize");
  var isArbitraryPosition = /* @__PURE__ */ __name((value) => getIsArbitraryValue(value, "position", isNever), "isArbitraryPosition");
  var imageLabels = /* @__PURE__ */ new Set(["image", "url"]);
  var isArbitraryImage = /* @__PURE__ */ __name((value) => getIsArbitraryValue(value, imageLabels, isImage), "isArbitraryImage");
  var isArbitraryShadow = /* @__PURE__ */ __name((value) => getIsArbitraryValue(value, "", isShadow), "isArbitraryShadow");
  var isAny = /* @__PURE__ */ __name(() => true, "isAny");
  var getIsArbitraryValue = /* @__PURE__ */ __name((value, label, testValue) => {
    const result = arbitraryValueRegex.exec(value);
    if (result) {
      if (result[1]) {
        return typeof label === "string" ? result[1] === label : label.has(result[1]);
      }
      return testValue(result[2]);
    }
    return false;
  }, "getIsArbitraryValue");
  var isLengthOnly = /* @__PURE__ */ __name((value) => (
    // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
    // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
    // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
    lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
  ), "isLengthOnly");
  var isNever = /* @__PURE__ */ __name(() => false, "isNever");
  var isShadow = /* @__PURE__ */ __name((value) => shadowRegex.test(value), "isShadow");
  var isImage = /* @__PURE__ */ __name((value) => imageRegex.test(value), "isImage");
  var getDefaultConfig = /* @__PURE__ */ __name(() => {
    const colors = fromTheme("colors");
    const spacing = fromTheme("spacing");
    const blur = fromTheme("blur");
    const brightness = fromTheme("brightness");
    const borderColor = fromTheme("borderColor");
    const borderRadius = fromTheme("borderRadius");
    const borderSpacing = fromTheme("borderSpacing");
    const borderWidth = fromTheme("borderWidth");
    const contrast = fromTheme("contrast");
    const grayscale = fromTheme("grayscale");
    const hueRotate = fromTheme("hueRotate");
    const invert = fromTheme("invert");
    const gap = fromTheme("gap");
    const gradientColorStops = fromTheme("gradientColorStops");
    const gradientColorStopPositions = fromTheme("gradientColorStopPositions");
    const inset = fromTheme("inset");
    const margin = fromTheme("margin");
    const opacity = fromTheme("opacity");
    const padding = fromTheme("padding");
    const saturate = fromTheme("saturate");
    const scale = fromTheme("scale");
    const sepia = fromTheme("sepia");
    const skew = fromTheme("skew");
    const space = fromTheme("space");
    const translate = fromTheme("translate");
    const getOverscroll = /* @__PURE__ */ __name(() => ["auto", "contain", "none"], "getOverscroll");
    const getOverflow = /* @__PURE__ */ __name(() => ["auto", "hidden", "clip", "visible", "scroll"], "getOverflow");
    const getSpacingWithAutoAndArbitrary = /* @__PURE__ */ __name(() => ["auto", isArbitraryValue, spacing], "getSpacingWithAutoAndArbitrary");
    const getSpacingWithArbitrary = /* @__PURE__ */ __name(() => [isArbitraryValue, spacing], "getSpacingWithArbitrary");
    const getLengthWithEmptyAndArbitrary = /* @__PURE__ */ __name(() => ["", isLength, isArbitraryLength], "getLengthWithEmptyAndArbitrary");
    const getNumberWithAutoAndArbitrary = /* @__PURE__ */ __name(() => ["auto", isNumber, isArbitraryValue], "getNumberWithAutoAndArbitrary");
    const getPositions = /* @__PURE__ */ __name(() => ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"], "getPositions");
    const getLineStyles = /* @__PURE__ */ __name(() => ["solid", "dashed", "dotted", "double", "none"], "getLineStyles");
    const getBlendModes = /* @__PURE__ */ __name(() => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"], "getBlendModes");
    const getAlign = /* @__PURE__ */ __name(() => ["start", "end", "center", "between", "around", "evenly", "stretch"], "getAlign");
    const getZeroAndEmpty = /* @__PURE__ */ __name(() => ["", "0", isArbitraryValue], "getZeroAndEmpty");
    const getBreaks = /* @__PURE__ */ __name(() => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"], "getBreaks");
    const getNumberAndArbitrary = /* @__PURE__ */ __name(() => [isNumber, isArbitraryValue], "getNumberAndArbitrary");
    return {
      cacheSize: 500,
      separator: ":",
      theme: {
        colors: [isAny],
        spacing: [isLength, isArbitraryLength],
        blur: ["none", "", isTshirtSize, isArbitraryValue],
        brightness: getNumberAndArbitrary(),
        borderColor: [colors],
        borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
        borderSpacing: getSpacingWithArbitrary(),
        borderWidth: getLengthWithEmptyAndArbitrary(),
        contrast: getNumberAndArbitrary(),
        grayscale: getZeroAndEmpty(),
        hueRotate: getNumberAndArbitrary(),
        invert: getZeroAndEmpty(),
        gap: getSpacingWithArbitrary(),
        gradientColorStops: [colors],
        gradientColorStopPositions: [isPercent, isArbitraryLength],
        inset: getSpacingWithAutoAndArbitrary(),
        margin: getSpacingWithAutoAndArbitrary(),
        opacity: getNumberAndArbitrary(),
        padding: getSpacingWithArbitrary(),
        saturate: getNumberAndArbitrary(),
        scale: getNumberAndArbitrary(),
        sepia: getZeroAndEmpty(),
        skew: getNumberAndArbitrary(),
        space: getSpacingWithArbitrary(),
        translate: getSpacingWithArbitrary()
      },
      classGroups: {
        // Layout
        /**
         * Aspect Ratio
         * @see https://tailwindcss.com/docs/aspect-ratio
         */
        aspect: [{
          aspect: ["auto", "square", "video", isArbitraryValue]
        }],
        /**
         * Container
         * @see https://tailwindcss.com/docs/container
         */
        container: ["container"],
        /**
         * Columns
         * @see https://tailwindcss.com/docs/columns
         */
        columns: [{
          columns: [isTshirtSize]
        }],
        /**
         * Break After
         * @see https://tailwindcss.com/docs/break-after
         */
        "break-after": [{
          "break-after": getBreaks()
        }],
        /**
         * Break Before
         * @see https://tailwindcss.com/docs/break-before
         */
        "break-before": [{
          "break-before": getBreaks()
        }],
        /**
         * Break Inside
         * @see https://tailwindcss.com/docs/break-inside
         */
        "break-inside": [{
          "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
        }],
        /**
         * Box Decoration Break
         * @see https://tailwindcss.com/docs/box-decoration-break
         */
        "box-decoration": [{
          "box-decoration": ["slice", "clone"]
        }],
        /**
         * Box Sizing
         * @see https://tailwindcss.com/docs/box-sizing
         */
        box: [{
          box: ["border", "content"]
        }],
        /**
         * Display
         * @see https://tailwindcss.com/docs/display
         */
        display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
        /**
         * Floats
         * @see https://tailwindcss.com/docs/float
         */
        float: [{
          float: ["right", "left", "none", "start", "end"]
        }],
        /**
         * Clear
         * @see https://tailwindcss.com/docs/clear
         */
        clear: [{
          clear: ["left", "right", "both", "none", "start", "end"]
        }],
        /**
         * Isolation
         * @see https://tailwindcss.com/docs/isolation
         */
        isolation: ["isolate", "isolation-auto"],
        /**
         * Object Fit
         * @see https://tailwindcss.com/docs/object-fit
         */
        "object-fit": [{
          object: ["contain", "cover", "fill", "none", "scale-down"]
        }],
        /**
         * Object Position
         * @see https://tailwindcss.com/docs/object-position
         */
        "object-position": [{
          object: [...getPositions(), isArbitraryValue]
        }],
        /**
         * Overflow
         * @see https://tailwindcss.com/docs/overflow
         */
        overflow: [{
          overflow: getOverflow()
        }],
        /**
         * Overflow X
         * @see https://tailwindcss.com/docs/overflow
         */
        "overflow-x": [{
          "overflow-x": getOverflow()
        }],
        /**
         * Overflow Y
         * @see https://tailwindcss.com/docs/overflow
         */
        "overflow-y": [{
          "overflow-y": getOverflow()
        }],
        /**
         * Overscroll Behavior
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        overscroll: [{
          overscroll: getOverscroll()
        }],
        /**
         * Overscroll Behavior X
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        "overscroll-x": [{
          "overscroll-x": getOverscroll()
        }],
        /**
         * Overscroll Behavior Y
         * @see https://tailwindcss.com/docs/overscroll-behavior
         */
        "overscroll-y": [{
          "overscroll-y": getOverscroll()
        }],
        /**
         * Position
         * @see https://tailwindcss.com/docs/position
         */
        position: ["static", "fixed", "absolute", "relative", "sticky"],
        /**
         * Top / Right / Bottom / Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        inset: [{
          inset: [inset]
        }],
        /**
         * Right / Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        "inset-x": [{
          "inset-x": [inset]
        }],
        /**
         * Top / Bottom
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        "inset-y": [{
          "inset-y": [inset]
        }],
        /**
         * Start
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        start: [{
          start: [inset]
        }],
        /**
         * End
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        end: [{
          end: [inset]
        }],
        /**
         * Top
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        top: [{
          top: [inset]
        }],
        /**
         * Right
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        right: [{
          right: [inset]
        }],
        /**
         * Bottom
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        bottom: [{
          bottom: [inset]
        }],
        /**
         * Left
         * @see https://tailwindcss.com/docs/top-right-bottom-left
         */
        left: [{
          left: [inset]
        }],
        /**
         * Visibility
         * @see https://tailwindcss.com/docs/visibility
         */
        visibility: ["visible", "invisible", "collapse"],
        /**
         * Z-Index
         * @see https://tailwindcss.com/docs/z-index
         */
        z: [{
          z: ["auto", isInteger, isArbitraryValue]
        }],
        // Flexbox and Grid
        /**
         * Flex Basis
         * @see https://tailwindcss.com/docs/flex-basis
         */
        basis: [{
          basis: getSpacingWithAutoAndArbitrary()
        }],
        /**
         * Flex Direction
         * @see https://tailwindcss.com/docs/flex-direction
         */
        "flex-direction": [{
          flex: ["row", "row-reverse", "col", "col-reverse"]
        }],
        /**
         * Flex Wrap
         * @see https://tailwindcss.com/docs/flex-wrap
         */
        "flex-wrap": [{
          flex: ["wrap", "wrap-reverse", "nowrap"]
        }],
        /**
         * Flex
         * @see https://tailwindcss.com/docs/flex
         */
        flex: [{
          flex: ["1", "auto", "initial", "none", isArbitraryValue]
        }],
        /**
         * Flex Grow
         * @see https://tailwindcss.com/docs/flex-grow
         */
        grow: [{
          grow: getZeroAndEmpty()
        }],
        /**
         * Flex Shrink
         * @see https://tailwindcss.com/docs/flex-shrink
         */
        shrink: [{
          shrink: getZeroAndEmpty()
        }],
        /**
         * Order
         * @see https://tailwindcss.com/docs/order
         */
        order: [{
          order: ["first", "last", "none", isInteger, isArbitraryValue]
        }],
        /**
         * Grid Template Columns
         * @see https://tailwindcss.com/docs/grid-template-columns
         */
        "grid-cols": [{
          "grid-cols": [isAny]
        }],
        /**
         * Grid Column Start / End
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-start-end": [{
          col: ["auto", {
            span: ["full", isInteger, isArbitraryValue]
          }, isArbitraryValue]
        }],
        /**
         * Grid Column Start
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-start": [{
          "col-start": getNumberWithAutoAndArbitrary()
        }],
        /**
         * Grid Column End
         * @see https://tailwindcss.com/docs/grid-column
         */
        "col-end": [{
          "col-end": getNumberWithAutoAndArbitrary()
        }],
        /**
         * Grid Template Rows
         * @see https://tailwindcss.com/docs/grid-template-rows
         */
        "grid-rows": [{
          "grid-rows": [isAny]
        }],
        /**
         * Grid Row Start / End
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-start-end": [{
          row: ["auto", {
            span: [isInteger, isArbitraryValue]
          }, isArbitraryValue]
        }],
        /**
         * Grid Row Start
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-start": [{
          "row-start": getNumberWithAutoAndArbitrary()
        }],
        /**
         * Grid Row End
         * @see https://tailwindcss.com/docs/grid-row
         */
        "row-end": [{
          "row-end": getNumberWithAutoAndArbitrary()
        }],
        /**
         * Grid Auto Flow
         * @see https://tailwindcss.com/docs/grid-auto-flow
         */
        "grid-flow": [{
          "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
        }],
        /**
         * Grid Auto Columns
         * @see https://tailwindcss.com/docs/grid-auto-columns
         */
        "auto-cols": [{
          "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
        }],
        /**
         * Grid Auto Rows
         * @see https://tailwindcss.com/docs/grid-auto-rows
         */
        "auto-rows": [{
          "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
        }],
        /**
         * Gap
         * @see https://tailwindcss.com/docs/gap
         */
        gap: [{
          gap: [gap]
        }],
        /**
         * Gap X
         * @see https://tailwindcss.com/docs/gap
         */
        "gap-x": [{
          "gap-x": [gap]
        }],
        /**
         * Gap Y
         * @see https://tailwindcss.com/docs/gap
         */
        "gap-y": [{
          "gap-y": [gap]
        }],
        /**
         * Justify Content
         * @see https://tailwindcss.com/docs/justify-content
         */
        "justify-content": [{
          justify: ["normal", ...getAlign()]
        }],
        /**
         * Justify Items
         * @see https://tailwindcss.com/docs/justify-items
         */
        "justify-items": [{
          "justify-items": ["start", "end", "center", "stretch"]
        }],
        /**
         * Justify Self
         * @see https://tailwindcss.com/docs/justify-self
         */
        "justify-self": [{
          "justify-self": ["auto", "start", "end", "center", "stretch"]
        }],
        /**
         * Align Content
         * @see https://tailwindcss.com/docs/align-content
         */
        "align-content": [{
          content: ["normal", ...getAlign(), "baseline"]
        }],
        /**
         * Align Items
         * @see https://tailwindcss.com/docs/align-items
         */
        "align-items": [{
          items: ["start", "end", "center", "baseline", "stretch"]
        }],
        /**
         * Align Self
         * @see https://tailwindcss.com/docs/align-self
         */
        "align-self": [{
          self: ["auto", "start", "end", "center", "stretch", "baseline"]
        }],
        /**
         * Place Content
         * @see https://tailwindcss.com/docs/place-content
         */
        "place-content": [{
          "place-content": [...getAlign(), "baseline"]
        }],
        /**
         * Place Items
         * @see https://tailwindcss.com/docs/place-items
         */
        "place-items": [{
          "place-items": ["start", "end", "center", "baseline", "stretch"]
        }],
        /**
         * Place Self
         * @see https://tailwindcss.com/docs/place-self
         */
        "place-self": [{
          "place-self": ["auto", "start", "end", "center", "stretch"]
        }],
        // Spacing
        /**
         * Padding
         * @see https://tailwindcss.com/docs/padding
         */
        p: [{
          p: [padding]
        }],
        /**
         * Padding X
         * @see https://tailwindcss.com/docs/padding
         */
        px: [{
          px: [padding]
        }],
        /**
         * Padding Y
         * @see https://tailwindcss.com/docs/padding
         */
        py: [{
          py: [padding]
        }],
        /**
         * Padding Start
         * @see https://tailwindcss.com/docs/padding
         */
        ps: [{
          ps: [padding]
        }],
        /**
         * Padding End
         * @see https://tailwindcss.com/docs/padding
         */
        pe: [{
          pe: [padding]
        }],
        /**
         * Padding Top
         * @see https://tailwindcss.com/docs/padding
         */
        pt: [{
          pt: [padding]
        }],
        /**
         * Padding Right
         * @see https://tailwindcss.com/docs/padding
         */
        pr: [{
          pr: [padding]
        }],
        /**
         * Padding Bottom
         * @see https://tailwindcss.com/docs/padding
         */
        pb: [{
          pb: [padding]
        }],
        /**
         * Padding Left
         * @see https://tailwindcss.com/docs/padding
         */
        pl: [{
          pl: [padding]
        }],
        /**
         * Margin
         * @see https://tailwindcss.com/docs/margin
         */
        m: [{
          m: [margin]
        }],
        /**
         * Margin X
         * @see https://tailwindcss.com/docs/margin
         */
        mx: [{
          mx: [margin]
        }],
        /**
         * Margin Y
         * @see https://tailwindcss.com/docs/margin
         */
        my: [{
          my: [margin]
        }],
        /**
         * Margin Start
         * @see https://tailwindcss.com/docs/margin
         */
        ms: [{
          ms: [margin]
        }],
        /**
         * Margin End
         * @see https://tailwindcss.com/docs/margin
         */
        me: [{
          me: [margin]
        }],
        /**
         * Margin Top
         * @see https://tailwindcss.com/docs/margin
         */
        mt: [{
          mt: [margin]
        }],
        /**
         * Margin Right
         * @see https://tailwindcss.com/docs/margin
         */
        mr: [{
          mr: [margin]
        }],
        /**
         * Margin Bottom
         * @see https://tailwindcss.com/docs/margin
         */
        mb: [{
          mb: [margin]
        }],
        /**
         * Margin Left
         * @see https://tailwindcss.com/docs/margin
         */
        ml: [{
          ml: [margin]
        }],
        /**
         * Space Between X
         * @see https://tailwindcss.com/docs/space
         */
        "space-x": [{
          "space-x": [space]
        }],
        /**
         * Space Between X Reverse
         * @see https://tailwindcss.com/docs/space
         */
        "space-x-reverse": ["space-x-reverse"],
        /**
         * Space Between Y
         * @see https://tailwindcss.com/docs/space
         */
        "space-y": [{
          "space-y": [space]
        }],
        /**
         * Space Between Y Reverse
         * @see https://tailwindcss.com/docs/space
         */
        "space-y-reverse": ["space-y-reverse"],
        // Sizing
        /**
         * Width
         * @see https://tailwindcss.com/docs/width
         */
        w: [{
          w: ["auto", "min", "max", "fit", "svw", "lvw", "dvw", isArbitraryValue, spacing]
        }],
        /**
         * Min-Width
         * @see https://tailwindcss.com/docs/min-width
         */
        "min-w": [{
          "min-w": [isArbitraryValue, spacing, "min", "max", "fit"]
        }],
        /**
         * Max-Width
         * @see https://tailwindcss.com/docs/max-width
         */
        "max-w": [{
          "max-w": [isArbitraryValue, spacing, "none", "full", "min", "max", "fit", "prose", {
            screen: [isTshirtSize]
          }, isTshirtSize]
        }],
        /**
         * Height
         * @see https://tailwindcss.com/docs/height
         */
        h: [{
          h: [isArbitraryValue, spacing, "auto", "min", "max", "fit", "svh", "lvh", "dvh"]
        }],
        /**
         * Min-Height
         * @see https://tailwindcss.com/docs/min-height
         */
        "min-h": [{
          "min-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
        }],
        /**
         * Max-Height
         * @see https://tailwindcss.com/docs/max-height
         */
        "max-h": [{
          "max-h": [isArbitraryValue, spacing, "min", "max", "fit", "svh", "lvh", "dvh"]
        }],
        /**
         * Size
         * @see https://tailwindcss.com/docs/size
         */
        size: [{
          size: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
        }],
        // Typography
        /**
         * Font Size
         * @see https://tailwindcss.com/docs/font-size
         */
        "font-size": [{
          text: ["base", isTshirtSize, isArbitraryLength]
        }],
        /**
         * Font Smoothing
         * @see https://tailwindcss.com/docs/font-smoothing
         */
        "font-smoothing": ["antialiased", "subpixel-antialiased"],
        /**
         * Font Style
         * @see https://tailwindcss.com/docs/font-style
         */
        "font-style": ["italic", "not-italic"],
        /**
         * Font Weight
         * @see https://tailwindcss.com/docs/font-weight
         */
        "font-weight": [{
          font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
        }],
        /**
         * Font Family
         * @see https://tailwindcss.com/docs/font-family
         */
        "font-family": [{
          font: [isAny]
        }],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-normal": ["normal-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-ordinal": ["ordinal"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-slashed-zero": ["slashed-zero"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-figure": ["lining-nums", "oldstyle-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-spacing": ["proportional-nums", "tabular-nums"],
        /**
         * Font Variant Numeric
         * @see https://tailwindcss.com/docs/font-variant-numeric
         */
        "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
        /**
         * Letter Spacing
         * @see https://tailwindcss.com/docs/letter-spacing
         */
        tracking: [{
          tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
        }],
        /**
         * Line Clamp
         * @see https://tailwindcss.com/docs/line-clamp
         */
        "line-clamp": [{
          "line-clamp": ["none", isNumber, isArbitraryNumber]
        }],
        /**
         * Line Height
         * @see https://tailwindcss.com/docs/line-height
         */
        leading: [{
          leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isLength, isArbitraryValue]
        }],
        /**
         * List Style Image
         * @see https://tailwindcss.com/docs/list-style-image
         */
        "list-image": [{
          "list-image": ["none", isArbitraryValue]
        }],
        /**
         * List Style Type
         * @see https://tailwindcss.com/docs/list-style-type
         */
        "list-style-type": [{
          list: ["none", "disc", "decimal", isArbitraryValue]
        }],
        /**
         * List Style Position
         * @see https://tailwindcss.com/docs/list-style-position
         */
        "list-style-position": [{
          list: ["inside", "outside"]
        }],
        /**
         * Placeholder Color
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://tailwindcss.com/docs/placeholder-color
         */
        "placeholder-color": [{
          placeholder: [colors]
        }],
        /**
         * Placeholder Opacity
         * @see https://tailwindcss.com/docs/placeholder-opacity
         */
        "placeholder-opacity": [{
          "placeholder-opacity": [opacity]
        }],
        /**
         * Text Alignment
         * @see https://tailwindcss.com/docs/text-align
         */
        "text-alignment": [{
          text: ["left", "center", "right", "justify", "start", "end"]
        }],
        /**
         * Text Color
         * @see https://tailwindcss.com/docs/text-color
         */
        "text-color": [{
          text: [colors]
        }],
        /**
         * Text Opacity
         * @see https://tailwindcss.com/docs/text-opacity
         */
        "text-opacity": [{
          "text-opacity": [opacity]
        }],
        /**
         * Text Decoration
         * @see https://tailwindcss.com/docs/text-decoration
         */
        "text-decoration": ["underline", "overline", "line-through", "no-underline"],
        /**
         * Text Decoration Style
         * @see https://tailwindcss.com/docs/text-decoration-style
         */
        "text-decoration-style": [{
          decoration: [...getLineStyles(), "wavy"]
        }],
        /**
         * Text Decoration Thickness
         * @see https://tailwindcss.com/docs/text-decoration-thickness
         */
        "text-decoration-thickness": [{
          decoration: ["auto", "from-font", isLength, isArbitraryLength]
        }],
        /**
         * Text Underline Offset
         * @see https://tailwindcss.com/docs/text-underline-offset
         */
        "underline-offset": [{
          "underline-offset": ["auto", isLength, isArbitraryValue]
        }],
        /**
         * Text Decoration Color
         * @see https://tailwindcss.com/docs/text-decoration-color
         */
        "text-decoration-color": [{
          decoration: [colors]
        }],
        /**
         * Text Transform
         * @see https://tailwindcss.com/docs/text-transform
         */
        "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
        /**
         * Text Overflow
         * @see https://tailwindcss.com/docs/text-overflow
         */
        "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
        /**
         * Text Wrap
         * @see https://tailwindcss.com/docs/text-wrap
         */
        "text-wrap": [{
          text: ["wrap", "nowrap", "balance", "pretty"]
        }],
        /**
         * Text Indent
         * @see https://tailwindcss.com/docs/text-indent
         */
        indent: [{
          indent: getSpacingWithArbitrary()
        }],
        /**
         * Vertical Alignment
         * @see https://tailwindcss.com/docs/vertical-align
         */
        "vertical-align": [{
          align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
        }],
        /**
         * Whitespace
         * @see https://tailwindcss.com/docs/whitespace
         */
        whitespace: [{
          whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
        }],
        /**
         * Word Break
         * @see https://tailwindcss.com/docs/word-break
         */
        break: [{
          break: ["normal", "words", "all", "keep"]
        }],
        /**
         * Hyphens
         * @see https://tailwindcss.com/docs/hyphens
         */
        hyphens: [{
          hyphens: ["none", "manual", "auto"]
        }],
        /**
         * Content
         * @see https://tailwindcss.com/docs/content
         */
        content: [{
          content: ["none", isArbitraryValue]
        }],
        // Backgrounds
        /**
         * Background Attachment
         * @see https://tailwindcss.com/docs/background-attachment
         */
        "bg-attachment": [{
          bg: ["fixed", "local", "scroll"]
        }],
        /**
         * Background Clip
         * @see https://tailwindcss.com/docs/background-clip
         */
        "bg-clip": [{
          "bg-clip": ["border", "padding", "content", "text"]
        }],
        /**
         * Background Opacity
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://tailwindcss.com/docs/background-opacity
         */
        "bg-opacity": [{
          "bg-opacity": [opacity]
        }],
        /**
         * Background Origin
         * @see https://tailwindcss.com/docs/background-origin
         */
        "bg-origin": [{
          "bg-origin": ["border", "padding", "content"]
        }],
        /**
         * Background Position
         * @see https://tailwindcss.com/docs/background-position
         */
        "bg-position": [{
          bg: [...getPositions(), isArbitraryPosition]
        }],
        /**
         * Background Repeat
         * @see https://tailwindcss.com/docs/background-repeat
         */
        "bg-repeat": [{
          bg: ["no-repeat", {
            repeat: ["", "x", "y", "round", "space"]
          }]
        }],
        /**
         * Background Size
         * @see https://tailwindcss.com/docs/background-size
         */
        "bg-size": [{
          bg: ["auto", "cover", "contain", isArbitrarySize]
        }],
        /**
         * Background Image
         * @see https://tailwindcss.com/docs/background-image
         */
        "bg-image": [{
          bg: ["none", {
            "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
          }, isArbitraryImage]
        }],
        /**
         * Background Color
         * @see https://tailwindcss.com/docs/background-color
         */
        "bg-color": [{
          bg: [colors]
        }],
        /**
         * Gradient Color Stops From Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-from-pos": [{
          from: [gradientColorStopPositions]
        }],
        /**
         * Gradient Color Stops Via Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-via-pos": [{
          via: [gradientColorStopPositions]
        }],
        /**
         * Gradient Color Stops To Position
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-to-pos": [{
          to: [gradientColorStopPositions]
        }],
        /**
         * Gradient Color Stops From
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-from": [{
          from: [gradientColorStops]
        }],
        /**
         * Gradient Color Stops Via
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-via": [{
          via: [gradientColorStops]
        }],
        /**
         * Gradient Color Stops To
         * @see https://tailwindcss.com/docs/gradient-color-stops
         */
        "gradient-to": [{
          to: [gradientColorStops]
        }],
        // Borders
        /**
         * Border Radius
         * @see https://tailwindcss.com/docs/border-radius
         */
        rounded: [{
          rounded: [borderRadius]
        }],
        /**
         * Border Radius Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-s": [{
          "rounded-s": [borderRadius]
        }],
        /**
         * Border Radius End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-e": [{
          "rounded-e": [borderRadius]
        }],
        /**
         * Border Radius Top
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-t": [{
          "rounded-t": [borderRadius]
        }],
        /**
         * Border Radius Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-r": [{
          "rounded-r": [borderRadius]
        }],
        /**
         * Border Radius Bottom
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-b": [{
          "rounded-b": [borderRadius]
        }],
        /**
         * Border Radius Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-l": [{
          "rounded-l": [borderRadius]
        }],
        /**
         * Border Radius Start Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-ss": [{
          "rounded-ss": [borderRadius]
        }],
        /**
         * Border Radius Start End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-se": [{
          "rounded-se": [borderRadius]
        }],
        /**
         * Border Radius End End
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-ee": [{
          "rounded-ee": [borderRadius]
        }],
        /**
         * Border Radius End Start
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-es": [{
          "rounded-es": [borderRadius]
        }],
        /**
         * Border Radius Top Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-tl": [{
          "rounded-tl": [borderRadius]
        }],
        /**
         * Border Radius Top Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-tr": [{
          "rounded-tr": [borderRadius]
        }],
        /**
         * Border Radius Bottom Right
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-br": [{
          "rounded-br": [borderRadius]
        }],
        /**
         * Border Radius Bottom Left
         * @see https://tailwindcss.com/docs/border-radius
         */
        "rounded-bl": [{
          "rounded-bl": [borderRadius]
        }],
        /**
         * Border Width
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w": [{
          border: [borderWidth]
        }],
        /**
         * Border Width X
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-x": [{
          "border-x": [borderWidth]
        }],
        /**
         * Border Width Y
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-y": [{
          "border-y": [borderWidth]
        }],
        /**
         * Border Width Start
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-s": [{
          "border-s": [borderWidth]
        }],
        /**
         * Border Width End
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-e": [{
          "border-e": [borderWidth]
        }],
        /**
         * Border Width Top
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-t": [{
          "border-t": [borderWidth]
        }],
        /**
         * Border Width Right
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-r": [{
          "border-r": [borderWidth]
        }],
        /**
         * Border Width Bottom
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-b": [{
          "border-b": [borderWidth]
        }],
        /**
         * Border Width Left
         * @see https://tailwindcss.com/docs/border-width
         */
        "border-w-l": [{
          "border-l": [borderWidth]
        }],
        /**
         * Border Opacity
         * @see https://tailwindcss.com/docs/border-opacity
         */
        "border-opacity": [{
          "border-opacity": [opacity]
        }],
        /**
         * Border Style
         * @see https://tailwindcss.com/docs/border-style
         */
        "border-style": [{
          border: [...getLineStyles(), "hidden"]
        }],
        /**
         * Divide Width X
         * @see https://tailwindcss.com/docs/divide-width
         */
        "divide-x": [{
          "divide-x": [borderWidth]
        }],
        /**
         * Divide Width X Reverse
         * @see https://tailwindcss.com/docs/divide-width
         */
        "divide-x-reverse": ["divide-x-reverse"],
        /**
         * Divide Width Y
         * @see https://tailwindcss.com/docs/divide-width
         */
        "divide-y": [{
          "divide-y": [borderWidth]
        }],
        /**
         * Divide Width Y Reverse
         * @see https://tailwindcss.com/docs/divide-width
         */
        "divide-y-reverse": ["divide-y-reverse"],
        /**
         * Divide Opacity
         * @see https://tailwindcss.com/docs/divide-opacity
         */
        "divide-opacity": [{
          "divide-opacity": [opacity]
        }],
        /**
         * Divide Style
         * @see https://tailwindcss.com/docs/divide-style
         */
        "divide-style": [{
          divide: getLineStyles()
        }],
        /**
         * Border Color
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color": [{
          border: [borderColor]
        }],
        /**
         * Border Color X
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-x": [{
          "border-x": [borderColor]
        }],
        /**
         * Border Color Y
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-y": [{
          "border-y": [borderColor]
        }],
        /**
         * Border Color S
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-s": [{
          "border-s": [borderColor]
        }],
        /**
         * Border Color E
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-e": [{
          "border-e": [borderColor]
        }],
        /**
         * Border Color Top
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-t": [{
          "border-t": [borderColor]
        }],
        /**
         * Border Color Right
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-r": [{
          "border-r": [borderColor]
        }],
        /**
         * Border Color Bottom
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-b": [{
          "border-b": [borderColor]
        }],
        /**
         * Border Color Left
         * @see https://tailwindcss.com/docs/border-color
         */
        "border-color-l": [{
          "border-l": [borderColor]
        }],
        /**
         * Divide Color
         * @see https://tailwindcss.com/docs/divide-color
         */
        "divide-color": [{
          divide: [borderColor]
        }],
        /**
         * Outline Style
         * @see https://tailwindcss.com/docs/outline-style
         */
        "outline-style": [{
          outline: ["", ...getLineStyles()]
        }],
        /**
         * Outline Offset
         * @see https://tailwindcss.com/docs/outline-offset
         */
        "outline-offset": [{
          "outline-offset": [isLength, isArbitraryValue]
        }],
        /**
         * Outline Width
         * @see https://tailwindcss.com/docs/outline-width
         */
        "outline-w": [{
          outline: [isLength, isArbitraryLength]
        }],
        /**
         * Outline Color
         * @see https://tailwindcss.com/docs/outline-color
         */
        "outline-color": [{
          outline: [colors]
        }],
        /**
         * Ring Width
         * @see https://tailwindcss.com/docs/ring-width
         */
        "ring-w": [{
          ring: getLengthWithEmptyAndArbitrary()
        }],
        /**
         * Ring Width Inset
         * @see https://tailwindcss.com/docs/ring-width
         */
        "ring-w-inset": ["ring-inset"],
        /**
         * Ring Color
         * @see https://tailwindcss.com/docs/ring-color
         */
        "ring-color": [{
          ring: [colors]
        }],
        /**
         * Ring Opacity
         * @see https://tailwindcss.com/docs/ring-opacity
         */
        "ring-opacity": [{
          "ring-opacity": [opacity]
        }],
        /**
         * Ring Offset Width
         * @see https://tailwindcss.com/docs/ring-offset-width
         */
        "ring-offset-w": [{
          "ring-offset": [isLength, isArbitraryLength]
        }],
        /**
         * Ring Offset Color
         * @see https://tailwindcss.com/docs/ring-offset-color
         */
        "ring-offset-color": [{
          "ring-offset": [colors]
        }],
        // Effects
        /**
         * Box Shadow
         * @see https://tailwindcss.com/docs/box-shadow
         */
        shadow: [{
          shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
        }],
        /**
         * Box Shadow Color
         * @see https://tailwindcss.com/docs/box-shadow-color
         */
        "shadow-color": [{
          shadow: [isAny]
        }],
        /**
         * Opacity
         * @see https://tailwindcss.com/docs/opacity
         */
        opacity: [{
          opacity: [opacity]
        }],
        /**
         * Mix Blend Mode
         * @see https://tailwindcss.com/docs/mix-blend-mode
         */
        "mix-blend": [{
          "mix-blend": [...getBlendModes(), "plus-lighter", "plus-darker"]
        }],
        /**
         * Background Blend Mode
         * @see https://tailwindcss.com/docs/background-blend-mode
         */
        "bg-blend": [{
          "bg-blend": getBlendModes()
        }],
        // Filters
        /**
         * Filter
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://tailwindcss.com/docs/filter
         */
        filter: [{
          filter: ["", "none"]
        }],
        /**
         * Blur
         * @see https://tailwindcss.com/docs/blur
         */
        blur: [{
          blur: [blur]
        }],
        /**
         * Brightness
         * @see https://tailwindcss.com/docs/brightness
         */
        brightness: [{
          brightness: [brightness]
        }],
        /**
         * Contrast
         * @see https://tailwindcss.com/docs/contrast
         */
        contrast: [{
          contrast: [contrast]
        }],
        /**
         * Drop Shadow
         * @see https://tailwindcss.com/docs/drop-shadow
         */
        "drop-shadow": [{
          "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
        }],
        /**
         * Grayscale
         * @see https://tailwindcss.com/docs/grayscale
         */
        grayscale: [{
          grayscale: [grayscale]
        }],
        /**
         * Hue Rotate
         * @see https://tailwindcss.com/docs/hue-rotate
         */
        "hue-rotate": [{
          "hue-rotate": [hueRotate]
        }],
        /**
         * Invert
         * @see https://tailwindcss.com/docs/invert
         */
        invert: [{
          invert: [invert]
        }],
        /**
         * Saturate
         * @see https://tailwindcss.com/docs/saturate
         */
        saturate: [{
          saturate: [saturate]
        }],
        /**
         * Sepia
         * @see https://tailwindcss.com/docs/sepia
         */
        sepia: [{
          sepia: [sepia]
        }],
        /**
         * Backdrop Filter
         * @deprecated since Tailwind CSS v3.0.0
         * @see https://tailwindcss.com/docs/backdrop-filter
         */
        "backdrop-filter": [{
          "backdrop-filter": ["", "none"]
        }],
        /**
         * Backdrop Blur
         * @see https://tailwindcss.com/docs/backdrop-blur
         */
        "backdrop-blur": [{
          "backdrop-blur": [blur]
        }],
        /**
         * Backdrop Brightness
         * @see https://tailwindcss.com/docs/backdrop-brightness
         */
        "backdrop-brightness": [{
          "backdrop-brightness": [brightness]
        }],
        /**
         * Backdrop Contrast
         * @see https://tailwindcss.com/docs/backdrop-contrast
         */
        "backdrop-contrast": [{
          "backdrop-contrast": [contrast]
        }],
        /**
         * Backdrop Grayscale
         * @see https://tailwindcss.com/docs/backdrop-grayscale
         */
        "backdrop-grayscale": [{
          "backdrop-grayscale": [grayscale]
        }],
        /**
         * Backdrop Hue Rotate
         * @see https://tailwindcss.com/docs/backdrop-hue-rotate
         */
        "backdrop-hue-rotate": [{
          "backdrop-hue-rotate": [hueRotate]
        }],
        /**
         * Backdrop Invert
         * @see https://tailwindcss.com/docs/backdrop-invert
         */
        "backdrop-invert": [{
          "backdrop-invert": [invert]
        }],
        /**
         * Backdrop Opacity
         * @see https://tailwindcss.com/docs/backdrop-opacity
         */
        "backdrop-opacity": [{
          "backdrop-opacity": [opacity]
        }],
        /**
         * Backdrop Saturate
         * @see https://tailwindcss.com/docs/backdrop-saturate
         */
        "backdrop-saturate": [{
          "backdrop-saturate": [saturate]
        }],
        /**
         * Backdrop Sepia
         * @see https://tailwindcss.com/docs/backdrop-sepia
         */
        "backdrop-sepia": [{
          "backdrop-sepia": [sepia]
        }],
        // Tables
        /**
         * Border Collapse
         * @see https://tailwindcss.com/docs/border-collapse
         */
        "border-collapse": [{
          border: ["collapse", "separate"]
        }],
        /**
         * Border Spacing
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing": [{
          "border-spacing": [borderSpacing]
        }],
        /**
         * Border Spacing X
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing-x": [{
          "border-spacing-x": [borderSpacing]
        }],
        /**
         * Border Spacing Y
         * @see https://tailwindcss.com/docs/border-spacing
         */
        "border-spacing-y": [{
          "border-spacing-y": [borderSpacing]
        }],
        /**
         * Table Layout
         * @see https://tailwindcss.com/docs/table-layout
         */
        "table-layout": [{
          table: ["auto", "fixed"]
        }],
        /**
         * Caption Side
         * @see https://tailwindcss.com/docs/caption-side
         */
        caption: [{
          caption: ["top", "bottom"]
        }],
        // Transitions and Animation
        /**
         * Tranisition Property
         * @see https://tailwindcss.com/docs/transition-property
         */
        transition: [{
          transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
        }],
        /**
         * Transition Duration
         * @see https://tailwindcss.com/docs/transition-duration
         */
        duration: [{
          duration: getNumberAndArbitrary()
        }],
        /**
         * Transition Timing Function
         * @see https://tailwindcss.com/docs/transition-timing-function
         */
        ease: [{
          ease: ["linear", "in", "out", "in-out", isArbitraryValue]
        }],
        /**
         * Transition Delay
         * @see https://tailwindcss.com/docs/transition-delay
         */
        delay: [{
          delay: getNumberAndArbitrary()
        }],
        /**
         * Animation
         * @see https://tailwindcss.com/docs/animation
         */
        animate: [{
          animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
        }],
        // Transforms
        /**
         * Transform
         * @see https://tailwindcss.com/docs/transform
         */
        transform: [{
          transform: ["", "gpu", "none"]
        }],
        /**
         * Scale
         * @see https://tailwindcss.com/docs/scale
         */
        scale: [{
          scale: [scale]
        }],
        /**
         * Scale X
         * @see https://tailwindcss.com/docs/scale
         */
        "scale-x": [{
          "scale-x": [scale]
        }],
        /**
         * Scale Y
         * @see https://tailwindcss.com/docs/scale
         */
        "scale-y": [{
          "scale-y": [scale]
        }],
        /**
         * Rotate
         * @see https://tailwindcss.com/docs/rotate
         */
        rotate: [{
          rotate: [isInteger, isArbitraryValue]
        }],
        /**
         * Translate X
         * @see https://tailwindcss.com/docs/translate
         */
        "translate-x": [{
          "translate-x": [translate]
        }],
        /**
         * Translate Y
         * @see https://tailwindcss.com/docs/translate
         */
        "translate-y": [{
          "translate-y": [translate]
        }],
        /**
         * Skew X
         * @see https://tailwindcss.com/docs/skew
         */
        "skew-x": [{
          "skew-x": [skew]
        }],
        /**
         * Skew Y
         * @see https://tailwindcss.com/docs/skew
         */
        "skew-y": [{
          "skew-y": [skew]
        }],
        /**
         * Transform Origin
         * @see https://tailwindcss.com/docs/transform-origin
         */
        "transform-origin": [{
          origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
        }],
        // Interactivity
        /**
         * Accent Color
         * @see https://tailwindcss.com/docs/accent-color
         */
        accent: [{
          accent: ["auto", colors]
        }],
        /**
         * Appearance
         * @see https://tailwindcss.com/docs/appearance
         */
        appearance: [{
          appearance: ["none", "auto"]
        }],
        /**
         * Cursor
         * @see https://tailwindcss.com/docs/cursor
         */
        cursor: [{
          cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
        }],
        /**
         * Caret Color
         * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
         */
        "caret-color": [{
          caret: [colors]
        }],
        /**
         * Pointer Events
         * @see https://tailwindcss.com/docs/pointer-events
         */
        "pointer-events": [{
          "pointer-events": ["none", "auto"]
        }],
        /**
         * Resize
         * @see https://tailwindcss.com/docs/resize
         */
        resize: [{
          resize: ["none", "y", "x", ""]
        }],
        /**
         * Scroll Behavior
         * @see https://tailwindcss.com/docs/scroll-behavior
         */
        "scroll-behavior": [{
          scroll: ["auto", "smooth"]
        }],
        /**
         * Scroll Margin
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-m": [{
          "scroll-m": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin X
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mx": [{
          "scroll-mx": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Y
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-my": [{
          "scroll-my": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Start
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-ms": [{
          "scroll-ms": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin End
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-me": [{
          "scroll-me": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Top
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mt": [{
          "scroll-mt": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Right
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mr": [{
          "scroll-mr": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Bottom
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-mb": [{
          "scroll-mb": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Margin Left
         * @see https://tailwindcss.com/docs/scroll-margin
         */
        "scroll-ml": [{
          "scroll-ml": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-p": [{
          "scroll-p": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding X
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-px": [{
          "scroll-px": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Y
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-py": [{
          "scroll-py": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Start
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-ps": [{
          "scroll-ps": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding End
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pe": [{
          "scroll-pe": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Top
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pt": [{
          "scroll-pt": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Right
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pr": [{
          "scroll-pr": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Bottom
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pb": [{
          "scroll-pb": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Padding Left
         * @see https://tailwindcss.com/docs/scroll-padding
         */
        "scroll-pl": [{
          "scroll-pl": getSpacingWithArbitrary()
        }],
        /**
         * Scroll Snap Align
         * @see https://tailwindcss.com/docs/scroll-snap-align
         */
        "snap-align": [{
          snap: ["start", "end", "center", "align-none"]
        }],
        /**
         * Scroll Snap Stop
         * @see https://tailwindcss.com/docs/scroll-snap-stop
         */
        "snap-stop": [{
          snap: ["normal", "always"]
        }],
        /**
         * Scroll Snap Type
         * @see https://tailwindcss.com/docs/scroll-snap-type
         */
        "snap-type": [{
          snap: ["none", "x", "y", "both"]
        }],
        /**
         * Scroll Snap Type Strictness
         * @see https://tailwindcss.com/docs/scroll-snap-type
         */
        "snap-strictness": [{
          snap: ["mandatory", "proximity"]
        }],
        /**
         * Touch Action
         * @see https://tailwindcss.com/docs/touch-action
         */
        touch: [{
          touch: ["auto", "none", "manipulation"]
        }],
        /**
         * Touch Action X
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-x": [{
          "touch-pan": ["x", "left", "right"]
        }],
        /**
         * Touch Action Y
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-y": [{
          "touch-pan": ["y", "up", "down"]
        }],
        /**
         * Touch Action Pinch Zoom
         * @see https://tailwindcss.com/docs/touch-action
         */
        "touch-pz": ["touch-pinch-zoom"],
        /**
         * User Select
         * @see https://tailwindcss.com/docs/user-select
         */
        select: [{
          select: ["none", "text", "all", "auto"]
        }],
        /**
         * Will Change
         * @see https://tailwindcss.com/docs/will-change
         */
        "will-change": [{
          "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
        }],
        // SVG
        /**
         * Fill
         * @see https://tailwindcss.com/docs/fill
         */
        fill: [{
          fill: [colors, "none"]
        }],
        /**
         * Stroke Width
         * @see https://tailwindcss.com/docs/stroke-width
         */
        "stroke-w": [{
          stroke: [isLength, isArbitraryLength, isArbitraryNumber]
        }],
        /**
         * Stroke
         * @see https://tailwindcss.com/docs/stroke
         */
        stroke: [{
          stroke: [colors, "none"]
        }],
        // Accessibility
        /**
         * Screen Readers
         * @see https://tailwindcss.com/docs/screen-readers
         */
        sr: ["sr-only", "not-sr-only"],
        /**
         * Forced Color Adjust
         * @see https://tailwindcss.com/docs/forced-color-adjust
         */
        "forced-color-adjust": [{
          "forced-color-adjust": ["auto", "none"]
        }]
      },
      conflictingClassGroups: {
        overflow: ["overflow-x", "overflow-y"],
        overscroll: ["overscroll-x", "overscroll-y"],
        inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
        "inset-x": ["right", "left"],
        "inset-y": ["top", "bottom"],
        flex: ["basis", "grow", "shrink"],
        gap: ["gap-x", "gap-y"],
        p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
        px: ["pr", "pl"],
        py: ["pt", "pb"],
        m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
        mx: ["mr", "ml"],
        my: ["mt", "mb"],
        size: ["w", "h"],
        "font-size": ["leading"],
        "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
        "fvn-ordinal": ["fvn-normal"],
        "fvn-slashed-zero": ["fvn-normal"],
        "fvn-figure": ["fvn-normal"],
        "fvn-spacing": ["fvn-normal"],
        "fvn-fraction": ["fvn-normal"],
        "line-clamp": ["display", "overflow"],
        rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
        "rounded-s": ["rounded-ss", "rounded-es"],
        "rounded-e": ["rounded-se", "rounded-ee"],
        "rounded-t": ["rounded-tl", "rounded-tr"],
        "rounded-r": ["rounded-tr", "rounded-br"],
        "rounded-b": ["rounded-br", "rounded-bl"],
        "rounded-l": ["rounded-tl", "rounded-bl"],
        "border-spacing": ["border-spacing-x", "border-spacing-y"],
        "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
        "border-w-x": ["border-w-r", "border-w-l"],
        "border-w-y": ["border-w-t", "border-w-b"],
        "border-color": ["border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
        "border-color-x": ["border-color-r", "border-color-l"],
        "border-color-y": ["border-color-t", "border-color-b"],
        "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
        "scroll-mx": ["scroll-mr", "scroll-ml"],
        "scroll-my": ["scroll-mt", "scroll-mb"],
        "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
        "scroll-px": ["scroll-pr", "scroll-pl"],
        "scroll-py": ["scroll-pt", "scroll-pb"],
        touch: ["touch-x", "touch-y", "touch-pz"],
        "touch-x": ["touch"],
        "touch-y": ["touch"],
        "touch-pz": ["touch"]
      },
      conflictingClassGroupModifiers: {
        "font-size": ["leading"]
      }
    };
  }, "getDefaultConfig");
  var twMerge = /* @__PURE__ */ createTailwindMerge(getDefaultConfig);

  // client/src/lib/utils.ts
  function cn(...inputs) {
    return twMerge(clsx(inputs));
  }
  __name(cn, "cn");

  // client/src/components/ui/toast.tsx
  var ToastProvider2 = Provider;
  var ToastViewport2 = React25.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React25.createElement(
      Viewport,
      __spreadValues({
        ref,
        className: cn(
          "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
          className
        )
      }, props)
    );
  });
  ToastViewport2.displayName = Viewport.displayName;
  var toastVariants = cva(
    "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
    {
      variants: {
        variant: {
          default: "border bg-background text-foreground",
          destructive: "destructive group border-destructive bg-destructive text-destructive-foreground"
        }
      },
      defaultVariants: {
        variant: "default"
      }
    }
  );
  var Toast2 = React25.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, variant } = _b93, props = __objRest(_b93, ["className", "variant"]);
    return /* @__PURE__ */ React25.createElement(
      Root22,
      __spreadValues({
        ref,
        className: cn(toastVariants({ variant }), className)
      }, props)
    );
  });
  Toast2.displayName = Root22.displayName;
  var ToastAction2 = React25.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React25.createElement(
      Action,
      __spreadValues({
        ref,
        className: cn(
          "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
          className
        )
      }, props)
    );
  });
  ToastAction2.displayName = Action.displayName;
  var ToastClose2 = React25.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React25.createElement(
      Close,
      __spreadValues({
        ref,
        className: cn(
          "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
          className
        ),
        "toast-close": ""
      }, props),
      /* @__PURE__ */ React25.createElement(X, { className: "h-4 w-4" })
    );
  });
  ToastClose2.displayName = Close.displayName;
  var ToastTitle2 = React25.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React25.createElement(
      Title,
      __spreadValues({
        ref,
        className: cn("text-sm font-semibold", className)
      }, props)
    );
  });
  ToastTitle2.displayName = Title.displayName;
  var ToastDescription2 = React25.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React25.createElement(
      Description,
      __spreadValues({
        ref,
        className: cn("text-sm opacity-90", className)
      }, props)
    );
  });
  ToastDescription2.displayName = Description.displayName;

  // client/src/components/ui/toaster.tsx
  function Toaster() {
    const { toasts } = useToast();
    return /* @__PURE__ */ React.createElement(ToastProvider2, null, toasts.map(function(_a121) {
      var _b93 = _a121, { id, title, description, action } = _b93, props = __objRest(_b93, ["id", "title", "description", "action"]);
      return /* @__PURE__ */ React.createElement(Toast2, __spreadValues({ key: id }, props), /* @__PURE__ */ React.createElement("div", { className: "grid gap-1" }, title && /* @__PURE__ */ React.createElement(ToastTitle2, null, title), description && /* @__PURE__ */ React.createElement(ToastDescription2, null, description)), action, /* @__PURE__ */ React.createElement(ToastClose2, null));
    }), /* @__PURE__ */ React.createElement(ToastViewport2, null));
  }
  __name(Toaster, "Toaster");

  // client/src/components/ui/tooltip.tsx
  var React32 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-tooltip/dist/index.mjs
  var React31 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-id/dist/index.mjs
  var React26 = __toESM(require_react(), 1);
  var useReactId = React26[" useId ".trim().toString()] || (() => void 0);
  var count2 = 0;
  function useId(deterministicId) {
    const [id, setId] = React26.useState(useReactId());
    useLayoutEffect22(() => {
      if (!deterministicId) setId((reactId) => reactId != null ? reactId : String(count2++));
    }, [deterministicId]);
    return deterministicId || (id ? `radix-${id}` : "");
  }
  __name(useId, "useId");

  // node_modules/@radix-ui/react-popper/dist/index.mjs
  var React30 = __toESM(require_react(), 1);

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
  var sides = ["top", "right", "bottom", "left"];
  var min = Math.min;
  var max = Math.max;
  var round = Math.round;
  var floor = Math.floor;
  var createCoords = /* @__PURE__ */ __name((v) => ({
    x: v,
    y: v
  }), "createCoords");
  var oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  var oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function clamp(start, value, end) {
    return max(start, min(value, end));
  }
  __name(clamp, "clamp");
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  __name(evaluate, "evaluate");
  function getSide(placement) {
    return placement.split("-")[0];
  }
  __name(getSide, "getSide");
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  __name(getAlignment, "getAlignment");
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  __name(getOppositeAxis, "getOppositeAxis");
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  __name(getAxisLength, "getAxisLength");
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  __name(getSideAxis, "getSideAxis");
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  __name(getAlignmentAxis, "getAlignmentAxis");
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length] > rects.floating[length]) {
      mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
  }
  __name(getAlignmentSides, "getAlignmentSides");
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  __name(getExpandedPlacements, "getExpandedPlacements");
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  __name(getOppositeAlignmentPlacement, "getOppositeAlignmentPlacement");
  function getSideList(side, isStart, rtl) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl) return isStart ? rl : lr;
        return isStart ? lr : rl;
      case "left":
      case "right":
        return isStart ? tb : bt;
      default:
        return [];
    }
  }
  __name(getSideList, "getSideList");
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  __name(getOppositeAxisPlacements, "getOppositeAxisPlacements");
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  __name(getOppositePlacement, "getOppositePlacement");
  function expandPaddingObject(padding) {
    return __spreadValues({
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }, padding);
  }
  __name(expandPaddingObject, "expandPaddingObject");
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  __name(getPaddingObject, "getPaddingObject");
  function rectToClientRect(rect) {
    const {
      x,
      y,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y,
      left: x,
      right: x + width,
      bottom: y + height,
      x,
      y
    };
  }
  __name(rectToClientRect, "rectToClientRect");

  // node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  __name(computeCoordsFromPlacement, "computeCoordsFromPlacement");
  var computePosition = /* @__PURE__ */ __name(async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x,
      y
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i2 = 0; i2 < validMiddleware.length; i2++) {
      const {
        name,
        fn
      } = validMiddleware[i2];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn({
        x,
        y,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x = nextX != null ? nextX : x;
      y = nextY != null ? nextY : y;
      middlewareData = __spreadProps(__spreadValues({}, middlewareData), {
        [name]: __spreadValues(__spreadValues({}, middlewareData[name]), data)
      });
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i2 = -1;
      }
    }
    return {
      x,
      y,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  }, "computePosition");
  async function detectOverflow(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x,
      y,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      x,
      y,
      width: rects.floating.width,
      height: rects.floating.height
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      elements,
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  __name(detectOverflow, "detectOverflow");
  var arrow = /* @__PURE__ */ __name((options) => ({
    name: "arrow",
    options,
    async fn(state) {
      const {
        x,
        y,
        placement,
        rects,
        platform: platform2,
        elements,
        middlewareData
      } = state;
      const {
        element,
        padding = 0
      } = evaluate(options, state) || {};
      if (element == null) {
        return {};
      }
      const paddingObject = getPaddingObject(padding);
      const coords = {
        x,
        y
      };
      const axis = getAlignmentAxis(placement);
      const length = getAxisLength(axis);
      const arrowDimensions = await platform2.getDimensions(element);
      const isYAxis = axis === "y";
      const minProp = isYAxis ? "top" : "left";
      const maxProp = isYAxis ? "bottom" : "right";
      const clientProp = isYAxis ? "clientHeight" : "clientWidth";
      const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
      const startDiff = coords[axis] - rects.reference[axis];
      const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
      let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
      if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
        clientSize = elements.floating[clientProp] || rects.floating[length];
      }
      const centerToReference = endDiff / 2 - startDiff / 2;
      const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
      const minPadding = min(paddingObject[minProp], largestPossiblePadding);
      const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
      const min$1 = minPadding;
      const max2 = clientSize - arrowDimensions[length] - maxPadding;
      const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
      const offset4 = clamp(min$1, center, max2);
      const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset4 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
      const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
      return {
        [axis]: coords[axis] + alignmentOffset,
        data: __spreadValues({
          [axis]: offset4,
          centerOffset: center - offset4 - alignmentOffset
        }, shouldAddOffset && {
          alignmentOffset
        }),
        reset: shouldAddOffset
      };
    }
  }), "arrow");
  var flip = /* @__PURE__ */ __name(function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state;
        const _a121 = evaluate(options, state), {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true
        } = _a121, detectOverflowOptions = __objRest(_a121, [
          "mainAxis",
          "crossAxis",
          "fallbackPlacements",
          "fallbackStrategy",
          "fallbackAxisSideDirection",
          "flipAlignment"
        ]);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const initialSideAxis = getSideAxis(initialPlacement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
        const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
        if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements2 = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements2[nextIndex];
          if (nextPlacement) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$filter2;
                const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                  if (hasFallbackAxisSideDirection) {
                    const currentSideAxis = getSideAxis(d.placement);
                    return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                    // reading directions favoring greater width.
                    currentSideAxis === "y";
                  }
                  return true;
                }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  }, "flip");
  function getSideOffsets(overflow, rect) {
    return {
      top: overflow.top - rect.height,
      right: overflow.right - rect.width,
      bottom: overflow.bottom - rect.height,
      left: overflow.left - rect.width
    };
  }
  __name(getSideOffsets, "getSideOffsets");
  function isAnySideFullyClipped(overflow) {
    return sides.some((side) => overflow[side] >= 0);
  }
  __name(isAnySideFullyClipped, "isAnySideFullyClipped");
  var hide = /* @__PURE__ */ __name(function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "hide",
      options,
      async fn(state) {
        const {
          rects
        } = state;
        const _a121 = evaluate(options, state), {
          strategy = "referenceHidden"
        } = _a121, detectOverflowOptions = __objRest(_a121, [
          "strategy"
        ]);
        switch (strategy) {
          case "referenceHidden": {
            const overflow = await detectOverflow(state, __spreadProps(__spreadValues({}, detectOverflowOptions), {
              elementContext: "reference"
            }));
            const offsets = getSideOffsets(overflow, rects.reference);
            return {
              data: {
                referenceHiddenOffsets: offsets,
                referenceHidden: isAnySideFullyClipped(offsets)
              }
            };
          }
          case "escaped": {
            const overflow = await detectOverflow(state, __spreadProps(__spreadValues({}, detectOverflowOptions), {
              altBoundary: true
            }));
            const offsets = getSideOffsets(overflow, rects.floating);
            return {
              data: {
                escapedOffsets: offsets,
                escaped: isAnySideFullyClipped(offsets)
              }
            };
          }
          default: {
            return {};
          }
        }
      }
    };
  }, "hide");
  async function convertValueToCoords(state, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: rawValue.mainAxis || 0,
      crossAxis: rawValue.crossAxis || 0,
      alignmentAxis: rawValue.alignmentAxis
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  __name(convertValueToCoords, "convertValueToCoords");
  var offset = /* @__PURE__ */ __name(function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state) {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x,
          y,
          placement,
          middlewareData
        } = state;
        const diffCoords = await convertValueToCoords(state, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x + diffCoords.x,
          y: y + diffCoords.y,
          data: __spreadProps(__spreadValues({}, diffCoords), {
            placement
          })
        };
      }
    };
  }, "offset");
  var shift = /* @__PURE__ */ __name(function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "shift",
      options,
      async fn(state) {
        const {
          x,
          y,
          placement
        } = state;
        const _a121 = evaluate(options, state), {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = false,
          limiter = {
            fn: /* @__PURE__ */ __name((_ref) => {
              let {
                x: x2,
                y: y2
              } = _ref;
              return {
                x: x2,
                y: y2
              };
            }, "fn")
          }
        } = _a121, detectOverflowOptions = __objRest(_a121, [
          "mainAxis",
          "crossAxis",
          "limiter"
        ]);
        const coords = {
          x,
          y
        };
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const crossAxis = getSideAxis(getSide(placement));
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        if (checkMainAxis) {
          const minSide = mainAxis === "y" ? "top" : "left";
          const maxSide = mainAxis === "y" ? "bottom" : "right";
          const min2 = mainAxisCoord + overflow[minSide];
          const max2 = mainAxisCoord - overflow[maxSide];
          mainAxisCoord = clamp(min2, mainAxisCoord, max2);
        }
        if (checkCrossAxis) {
          const minSide = crossAxis === "y" ? "top" : "left";
          const maxSide = crossAxis === "y" ? "bottom" : "right";
          const min2 = crossAxisCoord + overflow[minSide];
          const max2 = crossAxisCoord - overflow[maxSide];
          crossAxisCoord = clamp(min2, crossAxisCoord, max2);
        }
        const limitedCoords = limiter.fn(__spreadProps(__spreadValues({}, state), {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        }));
        return __spreadProps(__spreadValues({}, limitedCoords), {
          data: {
            x: limitedCoords.x - x,
            y: limitedCoords.y - y,
            enabled: {
              [mainAxis]: checkMainAxis,
              [crossAxis]: checkCrossAxis
            }
          }
        });
      }
    };
  }, "shift");
  var limitShift = /* @__PURE__ */ __name(function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      options,
      fn(state) {
        const {
          x,
          y,
          placement,
          rects,
          middlewareData
        } = state;
        const {
          offset: offset4 = 0,
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true
        } = evaluate(options, state);
        const coords = {
          x,
          y
        };
        const crossAxis = getSideAxis(placement);
        const mainAxis = getOppositeAxis(crossAxis);
        let mainAxisCoord = coords[mainAxis];
        let crossAxisCoord = coords[crossAxis];
        const rawOffset = evaluate(offset4, state);
        const computedOffset = typeof rawOffset === "number" ? {
          mainAxis: rawOffset,
          crossAxis: 0
        } : __spreadValues({
          mainAxis: 0,
          crossAxis: 0
        }, rawOffset);
        if (checkMainAxis) {
          const len = mainAxis === "y" ? "height" : "width";
          const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
          const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
          if (mainAxisCoord < limitMin) {
            mainAxisCoord = limitMin;
          } else if (mainAxisCoord > limitMax) {
            mainAxisCoord = limitMax;
          }
        }
        if (checkCrossAxis) {
          var _middlewareData$offse, _middlewareData$offse2;
          const len = mainAxis === "y" ? "width" : "height";
          const isOriginSide = ["top", "left"].includes(getSide(placement));
          const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
          const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
          if (crossAxisCoord < limitMin) {
            crossAxisCoord = limitMin;
          } else if (crossAxisCoord > limitMax) {
            crossAxisCoord = limitMax;
          }
        }
        return {
          [mainAxis]: mainAxisCoord,
          [crossAxis]: crossAxisCoord
        };
      }
    };
  }, "limitShift");
  var size = /* @__PURE__ */ __name(function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "size",
      options,
      async fn(state) {
        var _state$middlewareData, _state$middlewareData2;
        const {
          placement,
          rects,
          platform: platform2,
          elements
        } = state;
        const _a121 = evaluate(options, state), {
          apply = /* @__PURE__ */ __name(() => {
          }, "apply")
        } = _a121, detectOverflowOptions = __objRest(_a121, [
          "apply"
        ]);
        const overflow = await detectOverflow(state, detectOverflowOptions);
        const side = getSide(placement);
        const alignment = getAlignment(placement);
        const isYAxis = getSideAxis(placement) === "y";
        const {
          width,
          height
        } = rects.floating;
        let heightSide;
        let widthSide;
        if (side === "top" || side === "bottom") {
          heightSide = side;
          widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
        } else {
          widthSide = side;
          heightSide = alignment === "end" ? "top" : "bottom";
        }
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        const maximumClippingWidth = width - overflow.left - overflow.right;
        const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
        const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
        const noShift = !state.middlewareData.shift;
        let availableHeight = overflowAvailableHeight;
        let availableWidth = overflowAvailableWidth;
        if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
          availableWidth = maximumClippingWidth;
        }
        if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
          availableHeight = maximumClippingHeight;
        }
        if (noShift && !alignment) {
          const xMin = max(overflow.left, 0);
          const xMax = max(overflow.right, 0);
          const yMin = max(overflow.top, 0);
          const yMax = max(overflow.bottom, 0);
          if (isYAxis) {
            availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
          } else {
            availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
          }
        }
        await apply(__spreadProps(__spreadValues({}, state), {
          availableWidth,
          availableHeight
        }));
        const nextDimensions = await platform2.getDimensions(elements.floating);
        if (width !== nextDimensions.width || height !== nextDimensions.height) {
          return {
            reset: {
              rects: true
            }
          };
        }
        return {};
      }
    };
  }, "size");

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
  function hasWindow() {
    return typeof window !== "undefined";
  }
  __name(hasWindow, "hasWindow");
  function getNodeName(node) {
    if (isNode(node)) {
      return (node.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  __name(getNodeName, "getNodeName");
  function getWindow(node) {
    var _node$ownerDocument;
    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  __name(getWindow, "getWindow");
  function getDocumentElement(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  __name(getDocumentElement, "getDocumentElement");
  function isNode(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow(value).Node;
  }
  __name(isNode, "isNode");
  function isElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow(value).Element;
  }
  __name(isElement, "isElement");
  function isHTMLElement2(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  __name(isHTMLElement2, "isHTMLElement");
  function isShadowRoot(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
  }
  __name(isShadowRoot, "isShadowRoot");
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle2(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  __name(isOverflowElement, "isOverflowElement");
  function isTableElement(element) {
    return ["table", "td", "th"].includes(getNodeName(element));
  }
  __name(isTableElement, "isTableElement");
  function isTopLayer(element) {
    return [":popover-open", ":modal"].some((selector) => {
      try {
        return element.matches(selector);
      } catch (e) {
        return false;
      }
    });
  }
  __name(isTopLayer, "isTopLayer");
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
    return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
  }
  __name(isContainingBlock, "isContainingBlock");
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement2(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode(currentNode);
    }
    return null;
  }
  __name(getContainingBlock, "getContainingBlock");
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports) return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  __name(isWebKit, "isWebKit");
  function isLastTraversableNode(node) {
    return ["html", "body", "#document"].includes(getNodeName(node));
  }
  __name(isLastTraversableNode, "isLastTraversableNode");
  function getComputedStyle2(element) {
    return getWindow(element).getComputedStyle(element);
  }
  __name(getComputedStyle2, "getComputedStyle");
  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.scrollX,
      scrollTop: element.scrollY
    };
  }
  __name(getNodeScroll, "getNodeScroll");
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node.assignedSlot || // DOM Element detected.
      node.parentNode || // ShadowRoot detected.
      isShadowRoot(node) && node.host || // Fallback.
      getDocumentElement(node)
    );
    return isShadowRoot(result) ? result.host : result;
  }
  __name(getParentNode, "getParentNode");
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement2(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  __name(getNearestOverflowAncestor, "getNearestOverflowAncestor");
  function getOverflowAncestors(node, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  __name(getOverflowAncestors, "getOverflowAncestors");
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }
  __name(getFrameElement, "getFrameElement");

  // node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function getCssDimensions(element) {
    const css = getComputedStyle2(element);
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement2(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  __name(getCssDimensions, "getCssDimensions");
  function unwrapElement(element) {
    return !isElement(element) ? element.contextElement : element;
  }
  __name(unwrapElement, "unwrapElement");
  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement2(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $: $2
    } = getCssDimensions(domElement);
    let x = ($2 ? round(rect.width) : rect.width) / width;
    let y = ($2 ? round(rect.height) : rect.height) / height;
    if (!x || !Number.isFinite(x)) {
      x = 1;
    }
    if (!y || !Number.isFinite(y)) {
      y = 1;
    }
    return {
      x,
      y
    };
  }
  __name(getScale, "getScale");
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  __name(getVisualOffsets, "getVisualOffsets");
  function shouldAddVisualOffsets(element, isFixed2, floatingOffsetParent) {
    if (isFixed2 === void 0) {
      isFixed2 = false;
    }
    if (!floatingOffsetParent || isFixed2 && floatingOffsetParent !== getWindow(element)) {
      return false;
    }
    return isFixed2;
  }
  __name(shouldAddVisualOffsets, "shouldAddVisualOffsets");
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle2(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x *= iframeScale.x;
        y *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x += left;
        y += top;
        currentWin = getWindow(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x,
      y
    });
  }
  __name(getBoundingClientRect, "getBoundingClientRect");
  function getWindowScrollBarX(element, rect) {
    const leftScroll = getNodeScroll(element).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  __name(getWindowScrollBarX, "getWindowScrollBarX");
  function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
    if (ignoreScrollbarX === void 0) {
      ignoreScrollbarX = false;
    }
    const htmlRect = documentElement.getBoundingClientRect();
    const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
      // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect)
    ));
    const y = htmlRect.top + scroll.scrollTop;
    return {
      x,
      y
    };
  }
  __name(getHTMLOffset, "getHTMLOffset");
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      elements,
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isFixed2 = strategy === "fixed";
    const documentElement = getDocumentElement(offsetParent);
    const topLayer = elements ? isTopLayer(elements.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed2) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement2(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed2) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement2(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed2 ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
    };
  }
  __name(convertOffsetParentRelativeRectToViewportRelativeRect, "convertOffsetParentRelativeRectToViewportRelativeRect");
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  __name(getClientRects, "getClientRects");
  function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y = -scroll.scrollTop;
    if (getComputedStyle2(body).direction === "rtl") {
      x += max(html.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  __name(getDocumentRect, "getDocumentRect");
  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  __name(getViewportRect, "getViewportRect");
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale = isHTMLElement2(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x = left * scale.x;
    const y = top * scale.y;
    return {
      width,
      height,
      x,
      y
    };
  }
  __name(getInnerBoundingClientRect, "getInnerBoundingClientRect");
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y,
        width: clippingAncestor.width,
        height: clippingAncestor.height
      };
    }
    return rectToClientRect(rect);
  }
  __name(getClientRectFromClippingAncestor, "getClientRectFromClippingAncestor");
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  __name(hasFixedPositionAncestor, "hasFixedPositionAncestor");
  function getClippingElementAncestors(element, cache) {
    const cachedResult = cache.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle2(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle2(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache.set(element, result);
    return result;
  }
  __name(getClippingElementAncestors, "getClippingElementAncestors");
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  __name(getClippingRect, "getClippingRect");
  function getDimensions(element) {
    const {
      width,
      height
    } = getCssDimensions(element);
    return {
      width,
      height
    };
  }
  __name(getDimensions, "getDimensions");
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement2(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed2 = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed2, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed2) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed2, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed2 ? getHTMLOffset(documentElement, scroll) : createCoords(0);
    const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
    const y = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
    return {
      x,
      y,
      width: rect.width,
      height: rect.height
    };
  }
  __name(getRectRelativeToOffsetParent, "getRectRelativeToOffsetParent");
  function isStaticPositioned(element) {
    return getComputedStyle2(element).position === "static";
  }
  __name(isStaticPositioned, "isStaticPositioned");
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement2(element) || getComputedStyle2(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    let rawOffsetParent = element.offsetParent;
    if (getDocumentElement(element) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  __name(getTrueOffsetParent, "getTrueOffsetParent");
  function getOffsetParent(element, polyfill) {
    const win = getWindow(element);
    if (isTopLayer(element)) {
      return win;
    }
    if (!isHTMLElement2(element)) {
      let svgOffsetParent = getParentNode(element);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element) || win;
  }
  __name(getOffsetParent, "getOffsetParent");
  var getElementRects = /* @__PURE__ */ __name(async function(data) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data.floating);
    return {
      reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  }, "getElementRects");
  function isRTL(element) {
    return getComputedStyle2(element).direction === "rtl";
  }
  __name(isRTL, "isRTL");
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL
  };
  function rectsAreEqual(a, b) {
    return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height;
  }
  __name(rectsAreEqual, "rectsAreEqual");
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement(element);
    function cleanup() {
      var _io;
      clearTimeout(timeoutId);
      (_io = io) == null || _io.disconnect();
      io = null;
    }
    __name(cleanup, "cleanup");
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const elementRectForRootMargin = element.getBoundingClientRect();
      const {
        left,
        top,
        width,
        height
      } = elementRectForRootMargin;
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor(top);
      const insetRight = floor(root.clientWidth - (left + width));
      const insetBottom = floor(root.clientHeight - (top + height));
      const insetLeft = floor(left);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max(0, min(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 1e3);
          } else {
            refresh(false, ratio);
          }
        }
        if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
          refresh();
        }
        isFirstUpdate = false;
      }
      __name(handleObserve, "handleObserve");
      try {
        io = new IntersectionObserver(handleObserve, __spreadProps(__spreadValues({}, options), {
          // Handle <iframe>s
          root: root.ownerDocument
        }));
      } catch (e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    __name(refresh, "refresh");
    refresh(true);
    return cleanup;
  }
  __name(observeMove, "observeMove");
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref) => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
          });
        }
        update();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    __name(frameLoop, "frameLoop");
    update();
    return () => {
      var _resizeObserver2;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      cleanupIo == null || cleanupIo();
      (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  __name(autoUpdate, "autoUpdate");
  var offset2 = offset;
  var shift2 = shift;
  var flip2 = flip;
  var size2 = size;
  var hide2 = hide;
  var arrow2 = arrow;
  var limitShift2 = limitShift;
  var computePosition2 = /* @__PURE__ */ __name((reference, floating, options) => {
    const cache = /* @__PURE__ */ new Map();
    const mergedOptions = __spreadValues({
      platform
    }, options);
    const platformWithCache = __spreadProps(__spreadValues({}, mergedOptions.platform), {
      _c: cache
    });
    return computePosition(reference, floating, __spreadProps(__spreadValues({}, mergedOptions), {
      platform: platformWithCache
    }));
  }, "computePosition");

  // node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
  var React27 = __toESM(require_react(), 1);
  var import_react5 = __toESM(require_react(), 1);
  var ReactDOM4 = __toESM(require_react_dom(), 1);
  var index = typeof document !== "undefined" ? import_react5.useLayoutEffect : import_react5.useEffect;
  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (typeof a !== typeof b) {
      return false;
    }
    if (typeof a === "function" && a.toString() === b.toString()) {
      return true;
    }
    let length;
    let i2;
    let keys;
    if (a && b && typeof a === "object") {
      if (Array.isArray(a)) {
        length = a.length;
        if (length !== b.length) return false;
        for (i2 = length; i2-- !== 0; ) {
          if (!deepEqual(a[i2], b[i2])) {
            return false;
          }
        }
        return true;
      }
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length) {
        return false;
      }
      for (i2 = length; i2-- !== 0; ) {
        if (!{}.hasOwnProperty.call(b, keys[i2])) {
          return false;
        }
      }
      for (i2 = length; i2-- !== 0; ) {
        const key = keys[i2];
        if (key === "_owner" && a.$$typeof) {
          continue;
        }
        if (!deepEqual(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    return a !== a && b !== b;
  }
  __name(deepEqual, "deepEqual");
  function getDPR(element) {
    if (typeof window === "undefined") {
      return 1;
    }
    const win = element.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
  }
  __name(getDPR, "getDPR");
  function roundByDPR(element, value) {
    const dpr = getDPR(element);
    return Math.round(value * dpr) / dpr;
  }
  __name(roundByDPR, "roundByDPR");
  function useLatestRef(value) {
    const ref = React27.useRef(value);
    index(() => {
      ref.current = value;
    });
    return ref;
  }
  __name(useLatestRef, "useLatestRef");
  function useFloating(options) {
    if (options === void 0) {
      options = {};
    }
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2,
      elements: {
        reference: externalReference,
        floating: externalFloating
      } = {},
      transform = true,
      whileElementsMounted,
      open
    } = options;
    const [data, setData] = React27.useState({
      x: 0,
      y: 0,
      strategy,
      placement,
      middlewareData: {},
      isPositioned: false
    });
    const [latestMiddleware, setLatestMiddleware] = React27.useState(middleware);
    if (!deepEqual(latestMiddleware, middleware)) {
      setLatestMiddleware(middleware);
    }
    const [_reference, _setReference] = React27.useState(null);
    const [_floating, _setFloating] = React27.useState(null);
    const setReference = React27.useCallback((node) => {
      if (node !== referenceRef.current) {
        referenceRef.current = node;
        _setReference(node);
      }
    }, []);
    const setFloating = React27.useCallback((node) => {
      if (node !== floatingRef.current) {
        floatingRef.current = node;
        _setFloating(node);
      }
    }, []);
    const referenceEl = externalReference || _reference;
    const floatingEl = externalFloating || _floating;
    const referenceRef = React27.useRef(null);
    const floatingRef = React27.useRef(null);
    const dataRef = React27.useRef(data);
    const hasWhileElementsMounted = whileElementsMounted != null;
    const whileElementsMountedRef = useLatestRef(whileElementsMounted);
    const platformRef = useLatestRef(platform2);
    const openRef = useLatestRef(open);
    const update = React27.useCallback(() => {
      if (!referenceRef.current || !floatingRef.current) {
        return;
      }
      const config = {
        placement,
        strategy,
        middleware: latestMiddleware
      };
      if (platformRef.current) {
        config.platform = platformRef.current;
      }
      computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
        const fullData = __spreadProps(__spreadValues({}, data2), {
          // The floating element's position may be recomputed while it's closed
          // but still mounted (such as when transitioning out). To ensure
          // `isPositioned` will be `false` initially on the next open, avoid
          // setting it to `true` when `open === false` (must be specified).
          isPositioned: openRef.current !== false
        });
        if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
          dataRef.current = fullData;
          ReactDOM4.flushSync(() => {
            setData(fullData);
          });
        }
      });
    }, [latestMiddleware, placement, strategy, platformRef, openRef]);
    index(() => {
      if (open === false && dataRef.current.isPositioned) {
        dataRef.current.isPositioned = false;
        setData((data2) => __spreadProps(__spreadValues({}, data2), {
          isPositioned: false
        }));
      }
    }, [open]);
    const isMountedRef = React27.useRef(false);
    index(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    index(() => {
      if (referenceEl) referenceRef.current = referenceEl;
      if (floatingEl) floatingRef.current = floatingEl;
      if (referenceEl && floatingEl) {
        if (whileElementsMountedRef.current) {
          return whileElementsMountedRef.current(referenceEl, floatingEl, update);
        }
        update();
      }
    }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
    const refs = React27.useMemo(() => ({
      reference: referenceRef,
      floating: floatingRef,
      setReference,
      setFloating
    }), [setReference, setFloating]);
    const elements = React27.useMemo(() => ({
      reference: referenceEl,
      floating: floatingEl
    }), [referenceEl, floatingEl]);
    const floatingStyles = React27.useMemo(() => {
      const initialStyles = {
        position: strategy,
        left: 0,
        top: 0
      };
      if (!elements.floating) {
        return initialStyles;
      }
      const x = roundByDPR(elements.floating, data.x);
      const y = roundByDPR(elements.floating, data.y);
      if (transform) {
        return __spreadValues(__spreadProps(__spreadValues({}, initialStyles), {
          transform: "translate(" + x + "px, " + y + "px)"
        }), getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        });
      }
      return {
        position: strategy,
        left: x,
        top: y
      };
    }, [strategy, transform, elements.floating, data.x, data.y]);
    return React27.useMemo(() => __spreadProps(__spreadValues({}, data), {
      update,
      refs,
      elements,
      floatingStyles
    }), [data, update, refs, elements, floatingStyles]);
  }
  __name(useFloating, "useFloating");
  var arrow$1 = /* @__PURE__ */ __name((options) => {
    function isRef(value) {
      return {}.hasOwnProperty.call(value, "current");
    }
    __name(isRef, "isRef");
    return {
      name: "arrow",
      options,
      fn(state) {
        const {
          element,
          padding
        } = typeof options === "function" ? options(state) : options;
        if (element && isRef(element)) {
          if (element.current != null) {
            return arrow2({
              element: element.current,
              padding
            }).fn(state);
          }
          return {};
        }
        if (element) {
          return arrow2({
            element,
            padding
          }).fn(state);
        }
        return {};
      }
    };
  }, "arrow$1");
  var offset3 = /* @__PURE__ */ __name((options, deps) => __spreadProps(__spreadValues({}, offset2(options)), {
    options: [options, deps]
  }), "offset");
  var shift3 = /* @__PURE__ */ __name((options, deps) => __spreadProps(__spreadValues({}, shift2(options)), {
    options: [options, deps]
  }), "shift");
  var limitShift3 = /* @__PURE__ */ __name((options, deps) => __spreadProps(__spreadValues({}, limitShift2(options)), {
    options: [options, deps]
  }), "limitShift");
  var flip3 = /* @__PURE__ */ __name((options, deps) => __spreadProps(__spreadValues({}, flip2(options)), {
    options: [options, deps]
  }), "flip");
  var size3 = /* @__PURE__ */ __name((options, deps) => __spreadProps(__spreadValues({}, size2(options)), {
    options: [options, deps]
  }), "size");
  var hide3 = /* @__PURE__ */ __name((options, deps) => __spreadProps(__spreadValues({}, hide2(options)), {
    options: [options, deps]
  }), "hide");
  var arrow3 = /* @__PURE__ */ __name((options, deps) => __spreadProps(__spreadValues({}, arrow$1(options)), {
    options: [options, deps]
  }), "arrow");

  // node_modules/@radix-ui/react-arrow/dist/index.mjs
  var React28 = __toESM(require_react(), 1);
  var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
  var NAME2 = "Arrow";
  var Arrow = React28.forwardRef((props, forwardedRef) => {
    const _a121 = props, { children, width = 10, height = 5 } = _a121, arrowProps = __objRest(_a121, ["children", "width", "height"]);
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
      Primitive.svg,
      __spreadProps(__spreadValues({}, arrowProps), {
        ref: forwardedRef,
        width,
        height,
        viewBox: "0 0 30 10",
        preserveAspectRatio: "none",
        children: props.asChild ? children : /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("polygon", { points: "0,0 30,0 15,10" })
      })
    );
  });
  Arrow.displayName = NAME2;
  var Root3 = Arrow;

  // node_modules/@radix-ui/react-use-size/dist/index.mjs
  var React29 = __toESM(require_react(), 1);
  function useSize(element) {
    const [size4, setSize] = React29.useState(void 0);
    useLayoutEffect22(() => {
      if (element) {
        setSize({ width: element.offsetWidth, height: element.offsetHeight });
        const resizeObserver = new ResizeObserver((entries) => {
          if (!Array.isArray(entries)) {
            return;
          }
          if (!entries.length) {
            return;
          }
          const entry = entries[0];
          let width;
          let height;
          if ("borderBoxSize" in entry) {
            const borderSizeEntry = entry["borderBoxSize"];
            const borderSize = Array.isArray(borderSizeEntry) ? borderSizeEntry[0] : borderSizeEntry;
            width = borderSize["inlineSize"];
            height = borderSize["blockSize"];
          } else {
            width = element.offsetWidth;
            height = element.offsetHeight;
          }
          setSize({ width, height });
        });
        resizeObserver.observe(element, { box: "border-box" });
        return () => resizeObserver.unobserve(element);
      } else {
        setSize(void 0);
      }
    }, [element]);
    return size4;
  }
  __name(useSize, "useSize");

  // node_modules/@radix-ui/react-popper/dist/index.mjs
  var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
  var POPPER_NAME = "Popper";
  var [createPopperContext, createPopperScope] = createContextScope(POPPER_NAME);
  var [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
  var Popper = /* @__PURE__ */ __name((props) => {
    const { __scopePopper, children } = props;
    const [anchor, setAnchor] = React30.useState(null);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PopperProvider, { scope: __scopePopper, anchor, onAnchorChange: setAnchor, children });
  }, "Popper");
  Popper.displayName = POPPER_NAME;
  var ANCHOR_NAME = "PopperAnchor";
  var PopperAnchor = React30.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopePopper, virtualRef } = _a121, anchorProps = __objRest(_a121, ["__scopePopper", "virtualRef"]);
      const context = usePopperContext(ANCHOR_NAME, __scopePopper);
      const ref = React30.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      React30.useEffect(() => {
        context.onAnchorChange((virtualRef == null ? void 0 : virtualRef.current) || ref.current);
      });
      return virtualRef ? null : /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Primitive.div, __spreadProps(__spreadValues({}, anchorProps), { ref: composedRefs }));
    }
  );
  PopperAnchor.displayName = ANCHOR_NAME;
  var CONTENT_NAME = "PopperContent";
  var [PopperContentProvider, useContentContext] = createPopperContext(CONTENT_NAME);
  var PopperContent = React30.forwardRef(
    (props, forwardedRef) => {
      var _b93, _c5, _d4, _e4, _f2, _g2, _h2, _i2;
      const _a121 = props, {
        __scopePopper,
        side = "bottom",
        sideOffset = 0,
        align = "center",
        alignOffset = 0,
        arrowPadding = 0,
        avoidCollisions = true,
        collisionBoundary = [],
        collisionPadding: collisionPaddingProp = 0,
        sticky = "partial",
        hideWhenDetached = false,
        updatePositionStrategy = "optimized",
        onPlaced
      } = _a121, contentProps = __objRest(_a121, [
        "__scopePopper",
        "side",
        "sideOffset",
        "align",
        "alignOffset",
        "arrowPadding",
        "avoidCollisions",
        "collisionBoundary",
        "collisionPadding",
        "sticky",
        "hideWhenDetached",
        "updatePositionStrategy",
        "onPlaced"
      ]);
      const context = usePopperContext(CONTENT_NAME, __scopePopper);
      const [content, setContent] = React30.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
      const [arrow4, setArrow] = React30.useState(null);
      const arrowSize = useSize(arrow4);
      const arrowWidth = (_b93 = arrowSize == null ? void 0 : arrowSize.width) != null ? _b93 : 0;
      const arrowHeight = (_c5 = arrowSize == null ? void 0 : arrowSize.height) != null ? _c5 : 0;
      const desiredPlacement = side + (align !== "center" ? "-" + align : "");
      const collisionPadding = typeof collisionPaddingProp === "number" ? collisionPaddingProp : __spreadValues({ top: 0, right: 0, bottom: 0, left: 0 }, collisionPaddingProp);
      const boundary = Array.isArray(collisionBoundary) ? collisionBoundary : [collisionBoundary];
      const hasExplicitBoundaries = boundary.length > 0;
      const detectOverflowOptions = {
        padding: collisionPadding,
        boundary: boundary.filter(isNotNull),
        // with `strategy: 'fixed'`, this is the only way to get it to respect boundaries
        altBoundary: hasExplicitBoundaries
      };
      const { refs, floatingStyles, placement, isPositioned, middlewareData } = useFloating({
        // default to `fixed` strategy so users don't have to pick and we also avoid focus scroll issues
        strategy: "fixed",
        placement: desiredPlacement,
        whileElementsMounted: /* @__PURE__ */ __name((...args) => {
          const cleanup = autoUpdate(...args, {
            animationFrame: updatePositionStrategy === "always"
          });
          return cleanup;
        }, "whileElementsMounted"),
        elements: {
          reference: context.anchor
        },
        middleware: [
          offset3({ mainAxis: sideOffset + arrowHeight, alignmentAxis: alignOffset }),
          avoidCollisions && shift3(__spreadValues({
            mainAxis: true,
            crossAxis: false,
            limiter: sticky === "partial" ? limitShift3() : void 0
          }, detectOverflowOptions)),
          avoidCollisions && flip3(__spreadValues({}, detectOverflowOptions)),
          size3(__spreadProps(__spreadValues({}, detectOverflowOptions), {
            apply: /* @__PURE__ */ __name(({ elements, rects, availableWidth, availableHeight }) => {
              const { width: anchorWidth, height: anchorHeight } = rects.reference;
              const contentStyle = elements.floating.style;
              contentStyle.setProperty("--radix-popper-available-width", `${availableWidth}px`);
              contentStyle.setProperty("--radix-popper-available-height", `${availableHeight}px`);
              contentStyle.setProperty("--radix-popper-anchor-width", `${anchorWidth}px`);
              contentStyle.setProperty("--radix-popper-anchor-height", `${anchorHeight}px`);
            }, "apply")
          })),
          arrow4 && arrow3({ element: arrow4, padding: arrowPadding }),
          transformOrigin({ arrowWidth, arrowHeight }),
          hideWhenDetached && hide3(__spreadValues({ strategy: "referenceHidden" }, detectOverflowOptions))
        ]
      });
      const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
      const handlePlaced = useCallbackRef(onPlaced);
      useLayoutEffect22(() => {
        if (isPositioned) {
          handlePlaced == null ? void 0 : handlePlaced();
        }
      }, [isPositioned, handlePlaced]);
      const arrowX = (_d4 = middlewareData.arrow) == null ? void 0 : _d4.x;
      const arrowY = (_e4 = middlewareData.arrow) == null ? void 0 : _e4.y;
      const cannotCenterArrow = ((_f2 = middlewareData.arrow) == null ? void 0 : _f2.centerOffset) !== 0;
      const [contentZIndex, setContentZIndex] = React30.useState();
      useLayoutEffect22(() => {
        if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
      }, [content]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "div",
        {
          ref: refs.setFloating,
          "data-radix-popper-content-wrapper": "",
          style: __spreadValues(__spreadProps(__spreadValues({}, floatingStyles), {
            transform: isPositioned ? floatingStyles.transform : "translate(0, -200%)",
            // keep off the page when measuring
            minWidth: "max-content",
            zIndex: contentZIndex,
            ["--radix-popper-transform-origin"]: [
              (_g2 = middlewareData.transformOrigin) == null ? void 0 : _g2.x,
              (_h2 = middlewareData.transformOrigin) == null ? void 0 : _h2.y
            ].join(" ")
          }), ((_i2 = middlewareData.hide) == null ? void 0 : _i2.referenceHidden) && {
            visibility: "hidden",
            pointerEvents: "none"
          }),
          dir: props.dir,
          children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            PopperContentProvider,
            {
              scope: __scopePopper,
              placedSide,
              onArrowChange: setArrow,
              arrowX,
              arrowY,
              shouldHideArrow: cannotCenterArrow,
              children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                Primitive.div,
                __spreadProps(__spreadValues({
                  "data-side": placedSide,
                  "data-align": placedAlign
                }, contentProps), {
                  ref: composedRefs,
                  style: __spreadProps(__spreadValues({}, contentProps.style), {
                    // if the PopperContent hasn't been placed yet (not all measurements done)
                    // we prevent animations so that users's animation don't kick in too early referring wrong sides
                    animation: !isPositioned ? "none" : void 0
                  })
                })
              )
            }
          )
        }
      );
    }
  );
  PopperContent.displayName = CONTENT_NAME;
  var ARROW_NAME = "PopperArrow";
  var OPPOSITE_SIDE = {
    top: "bottom",
    right: "left",
    bottom: "top",
    left: "right"
  };
  var PopperArrow = React30.forwardRef(/* @__PURE__ */ __name(function PopperArrow2(props, forwardedRef) {
    const _a121 = props, { __scopePopper } = _a121, arrowProps = __objRest(_a121, ["__scopePopper"]);
    const contentContext = useContentContext(ARROW_NAME, __scopePopper);
    const baseSide = OPPOSITE_SIDE[contentContext.placedSide];
    return (
      // we have to use an extra wrapper because `ResizeObserver` (used by `useSize`)
      // doesn't report size as we'd expect on SVG elements.
      // it reports their bounding box which is effectively the largest path inside the SVG.
      /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "span",
        {
          ref: contentContext.onArrowChange,
          style: {
            position: "absolute",
            left: contentContext.arrowX,
            top: contentContext.arrowY,
            [baseSide]: 0,
            transformOrigin: {
              top: "",
              right: "0 0",
              bottom: "center 0",
              left: "100% 0"
            }[contentContext.placedSide],
            transform: {
              top: "translateY(100%)",
              right: "translateY(50%) rotate(90deg) translateX(-50%)",
              bottom: `rotate(180deg)`,
              left: "translateY(50%) rotate(-90deg) translateX(50%)"
            }[contentContext.placedSide],
            visibility: contentContext.shouldHideArrow ? "hidden" : void 0
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            Root3,
            __spreadProps(__spreadValues({}, arrowProps), {
              ref: forwardedRef,
              style: __spreadProps(__spreadValues({}, arrowProps.style), {
                // ensures the element can be measured correctly (mostly for if SVG)
                display: "block"
              })
            })
          )
        }
      )
    );
  }, "PopperArrow2"));
  PopperArrow.displayName = ARROW_NAME;
  function isNotNull(value) {
    return value !== null;
  }
  __name(isNotNull, "isNotNull");
  var transformOrigin = /* @__PURE__ */ __name((options) => ({
    name: "transformOrigin",
    options,
    fn(data) {
      var _a121, _b93, _c5, _d4, _e4;
      const { placement, rects, middlewareData } = data;
      const cannotCenterArrow = ((_a121 = middlewareData.arrow) == null ? void 0 : _a121.centerOffset) !== 0;
      const isArrowHidden = cannotCenterArrow;
      const arrowWidth = isArrowHidden ? 0 : options.arrowWidth;
      const arrowHeight = isArrowHidden ? 0 : options.arrowHeight;
      const [placedSide, placedAlign] = getSideAndAlignFromPlacement(placement);
      const noArrowAlign = { start: "0%", center: "50%", end: "100%" }[placedAlign];
      const arrowXCenter = ((_c5 = (_b93 = middlewareData.arrow) == null ? void 0 : _b93.x) != null ? _c5 : 0) + arrowWidth / 2;
      const arrowYCenter = ((_e4 = (_d4 = middlewareData.arrow) == null ? void 0 : _d4.y) != null ? _e4 : 0) + arrowHeight / 2;
      let x = "";
      let y = "";
      if (placedSide === "bottom") {
        x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
        y = `${-arrowHeight}px`;
      } else if (placedSide === "top") {
        x = isArrowHidden ? noArrowAlign : `${arrowXCenter}px`;
        y = `${rects.floating.height + arrowHeight}px`;
      } else if (placedSide === "right") {
        x = `${-arrowHeight}px`;
        y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
      } else if (placedSide === "left") {
        x = `${rects.floating.width + arrowHeight}px`;
        y = isArrowHidden ? noArrowAlign : `${arrowYCenter}px`;
      }
      return { data: { x, y } };
    }
  }), "transformOrigin");
  function getSideAndAlignFromPlacement(placement) {
    const [side, align = "center"] = placement.split("-");
    return [side, align];
  }
  __name(getSideAndAlignFromPlacement, "getSideAndAlignFromPlacement");
  var Root23 = Popper;
  var Anchor = PopperAnchor;
  var Content = PopperContent;
  var Arrow2 = PopperArrow;

  // node_modules/@radix-ui/react-tooltip/dist/index.mjs
  var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
  var [createTooltipContext, createTooltipScope] = createContextScope("Tooltip", [
    createPopperScope
  ]);
  var usePopperScope = createPopperScope();
  var PROVIDER_NAME2 = "TooltipProvider";
  var DEFAULT_DELAY_DURATION = 700;
  var TOOLTIP_OPEN = "tooltip.open";
  var [TooltipProviderContextProvider, useTooltipProviderContext] = createTooltipContext(PROVIDER_NAME2);
  var TooltipProvider = /* @__PURE__ */ __name((props) => {
    const {
      __scopeTooltip,
      delayDuration = DEFAULT_DELAY_DURATION,
      skipDelayDuration = 300,
      disableHoverableContent = false,
      children
    } = props;
    const isOpenDelayedRef = React31.useRef(true);
    const isPointerInTransitRef = React31.useRef(false);
    const skipDelayTimerRef = React31.useRef(0);
    React31.useEffect(() => {
      const skipDelayTimer = skipDelayTimerRef.current;
      return () => window.clearTimeout(skipDelayTimer);
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      TooltipProviderContextProvider,
      {
        scope: __scopeTooltip,
        isOpenDelayedRef,
        delayDuration,
        onOpen: React31.useCallback(() => {
          window.clearTimeout(skipDelayTimerRef.current);
          isOpenDelayedRef.current = false;
        }, []),
        onClose: React31.useCallback(() => {
          window.clearTimeout(skipDelayTimerRef.current);
          skipDelayTimerRef.current = window.setTimeout(
            () => isOpenDelayedRef.current = true,
            skipDelayDuration
          );
        }, [skipDelayDuration]),
        isPointerInTransitRef,
        onPointerInTransitChange: React31.useCallback((inTransit) => {
          isPointerInTransitRef.current = inTransit;
        }, []),
        disableHoverableContent,
        children
      }
    );
  }, "TooltipProvider");
  TooltipProvider.displayName = PROVIDER_NAME2;
  var TOOLTIP_NAME = "Tooltip";
  var [TooltipContextProvider, useTooltipContext] = createTooltipContext(TOOLTIP_NAME);
  var Tooltip = /* @__PURE__ */ __name((props) => {
    const {
      __scopeTooltip,
      children,
      open: openProp,
      defaultOpen = false,
      onOpenChange,
      disableHoverableContent: disableHoverableContentProp,
      delayDuration: delayDurationProp
    } = props;
    const providerContext = useTooltipProviderContext(TOOLTIP_NAME, props.__scopeTooltip);
    const popperScope = usePopperScope(__scopeTooltip);
    const [trigger, setTrigger] = React31.useState(null);
    const contentId = useId();
    const openTimerRef = React31.useRef(0);
    const disableHoverableContent = disableHoverableContentProp != null ? disableHoverableContentProp : providerContext.disableHoverableContent;
    const delayDuration = delayDurationProp != null ? delayDurationProp : providerContext.delayDuration;
    const wasOpenDelayedRef = React31.useRef(false);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: /* @__PURE__ */ __name((open2) => {
        if (open2) {
          providerContext.onOpen();
          document.dispatchEvent(new CustomEvent(TOOLTIP_OPEN));
        } else {
          providerContext.onClose();
        }
        onOpenChange == null ? void 0 : onOpenChange(open2);
      }, "onChange")
    });
    const stateAttribute = React31.useMemo(() => {
      return open ? wasOpenDelayedRef.current ? "delayed-open" : "instant-open" : "closed";
    }, [open]);
    const handleOpen = React31.useCallback(() => {
      window.clearTimeout(openTimerRef.current);
      openTimerRef.current = 0;
      wasOpenDelayedRef.current = false;
      setOpen(true);
    }, [setOpen]);
    const handleClose = React31.useCallback(() => {
      window.clearTimeout(openTimerRef.current);
      openTimerRef.current = 0;
      setOpen(false);
    }, [setOpen]);
    const handleDelayedOpen = React31.useCallback(() => {
      window.clearTimeout(openTimerRef.current);
      openTimerRef.current = window.setTimeout(() => {
        wasOpenDelayedRef.current = true;
        setOpen(true);
        openTimerRef.current = 0;
      }, delayDuration);
    }, [delayDuration, setOpen]);
    React31.useEffect(() => {
      return () => {
        if (openTimerRef.current) {
          window.clearTimeout(openTimerRef.current);
          openTimerRef.current = 0;
        }
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Root23, __spreadProps(__spreadValues({}, popperScope), { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
      TooltipContextProvider,
      {
        scope: __scopeTooltip,
        contentId,
        open,
        stateAttribute,
        trigger,
        onTriggerChange: setTrigger,
        onTriggerEnter: React31.useCallback(() => {
          if (providerContext.isOpenDelayedRef.current) handleDelayedOpen();
          else handleOpen();
        }, [providerContext.isOpenDelayedRef, handleDelayedOpen, handleOpen]),
        onTriggerLeave: React31.useCallback(() => {
          if (disableHoverableContent) {
            handleClose();
          } else {
            window.clearTimeout(openTimerRef.current);
            openTimerRef.current = 0;
          }
        }, [handleClose, disableHoverableContent]),
        onOpen: handleOpen,
        onClose: handleClose,
        disableHoverableContent,
        children
      }
    ) }));
  }, "Tooltip");
  Tooltip.displayName = TOOLTIP_NAME;
  var TRIGGER_NAME = "TooltipTrigger";
  var TooltipTrigger = React31.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeTooltip } = _a121, triggerProps = __objRest(_a121, ["__scopeTooltip"]);
      const context = useTooltipContext(TRIGGER_NAME, __scopeTooltip);
      const providerContext = useTooltipProviderContext(TRIGGER_NAME, __scopeTooltip);
      const popperScope = usePopperScope(__scopeTooltip);
      const ref = React31.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref, context.onTriggerChange);
      const isPointerDownRef = React31.useRef(false);
      const hasPointerMoveOpenedRef = React31.useRef(false);
      const handlePointerUp = React31.useCallback(() => isPointerDownRef.current = false, []);
      React31.useEffect(() => {
        return () => document.removeEventListener("pointerup", handlePointerUp);
      }, [handlePointerUp]);
      return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Anchor, __spreadProps(__spreadValues({ asChild: true }, popperScope), { children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
        Primitive.button,
        __spreadProps(__spreadValues({
          "aria-describedby": context.open ? context.contentId : void 0,
          "data-state": context.stateAttribute
        }, triggerProps), {
          ref: composedRefs,
          onPointerMove: composeEventHandlers(props.onPointerMove, (event) => {
            if (event.pointerType === "touch") return;
            if (!hasPointerMoveOpenedRef.current && !providerContext.isPointerInTransitRef.current) {
              context.onTriggerEnter();
              hasPointerMoveOpenedRef.current = true;
            }
          }),
          onPointerLeave: composeEventHandlers(props.onPointerLeave, () => {
            context.onTriggerLeave();
            hasPointerMoveOpenedRef.current = false;
          }),
          onPointerDown: composeEventHandlers(props.onPointerDown, () => {
            if (context.open) {
              context.onClose();
            }
            isPointerDownRef.current = true;
            document.addEventListener("pointerup", handlePointerUp, { once: true });
          }),
          onFocus: composeEventHandlers(props.onFocus, () => {
            if (!isPointerDownRef.current) context.onOpen();
          }),
          onBlur: composeEventHandlers(props.onBlur, context.onClose),
          onClick: composeEventHandlers(props.onClick, context.onClose)
        })
      ) }));
    }
  );
  TooltipTrigger.displayName = TRIGGER_NAME;
  var PORTAL_NAME2 = "TooltipPortal";
  var [PortalProvider, usePortalContext] = createTooltipContext(PORTAL_NAME2, {
    forceMount: void 0
  });
  var TooltipPortal = /* @__PURE__ */ __name((props) => {
    const { __scopeTooltip, forceMount, children, container } = props;
    const context = useTooltipContext(PORTAL_NAME2, __scopeTooltip);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(PortalProvider, { scope: __scopeTooltip, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Portal, { asChild: true, container, children }) }) });
  }, "TooltipPortal");
  TooltipPortal.displayName = PORTAL_NAME2;
  var CONTENT_NAME2 = "TooltipContent";
  var TooltipContent = React31.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext(CONTENT_NAME2, props.__scopeTooltip);
      const _a121 = props, { forceMount = portalContext.forceMount, side = "top" } = _a121, contentProps = __objRest(_a121, ["forceMount", "side"]);
      const context = useTooltipContext(CONTENT_NAME2, props.__scopeTooltip);
      return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Presence, { present: forceMount || context.open, children: context.disableHoverableContent ? /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(TooltipContentImpl, __spreadProps(__spreadValues({ side }, contentProps), { ref: forwardedRef })) : /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(TooltipContentHoverable, __spreadProps(__spreadValues({ side }, contentProps), { ref: forwardedRef })) });
    }
  );
  var TooltipContentHoverable = React31.forwardRef((props, forwardedRef) => {
    const context = useTooltipContext(CONTENT_NAME2, props.__scopeTooltip);
    const providerContext = useTooltipProviderContext(CONTENT_NAME2, props.__scopeTooltip);
    const ref = React31.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const [pointerGraceArea, setPointerGraceArea] = React31.useState(null);
    const { trigger, onClose } = context;
    const content = ref.current;
    const { onPointerInTransitChange } = providerContext;
    const handleRemoveGraceArea = React31.useCallback(() => {
      setPointerGraceArea(null);
      onPointerInTransitChange(false);
    }, [onPointerInTransitChange]);
    const handleCreateGraceArea = React31.useCallback(
      (event, hoverTarget) => {
        const currentTarget = event.currentTarget;
        const exitPoint = { x: event.clientX, y: event.clientY };
        const exitSide = getExitSideFromRect(exitPoint, currentTarget.getBoundingClientRect());
        const paddedExitPoints = getPaddedExitPoints(exitPoint, exitSide);
        const hoverTargetPoints = getPointsFromRect(hoverTarget.getBoundingClientRect());
        const graceArea = getHull([...paddedExitPoints, ...hoverTargetPoints]);
        setPointerGraceArea(graceArea);
        onPointerInTransitChange(true);
      },
      [onPointerInTransitChange]
    );
    React31.useEffect(() => {
      return () => handleRemoveGraceArea();
    }, [handleRemoveGraceArea]);
    React31.useEffect(() => {
      if (trigger && content) {
        const handleTriggerLeave = /* @__PURE__ */ __name((event) => handleCreateGraceArea(event, content), "handleTriggerLeave");
        const handleContentLeave = /* @__PURE__ */ __name((event) => handleCreateGraceArea(event, trigger), "handleContentLeave");
        trigger.addEventListener("pointerleave", handleTriggerLeave);
        content.addEventListener("pointerleave", handleContentLeave);
        return () => {
          trigger.removeEventListener("pointerleave", handleTriggerLeave);
          content.removeEventListener("pointerleave", handleContentLeave);
        };
      }
    }, [trigger, content, handleCreateGraceArea, handleRemoveGraceArea]);
    React31.useEffect(() => {
      if (pointerGraceArea) {
        const handleTrackPointerGrace = /* @__PURE__ */ __name((event) => {
          const target = event.target;
          const pointerPosition = { x: event.clientX, y: event.clientY };
          const hasEnteredTarget = (trigger == null ? void 0 : trigger.contains(target)) || (content == null ? void 0 : content.contains(target));
          const isPointerOutsideGraceArea = !isPointInPolygon(pointerPosition, pointerGraceArea);
          if (hasEnteredTarget) {
            handleRemoveGraceArea();
          } else if (isPointerOutsideGraceArea) {
            handleRemoveGraceArea();
            onClose();
          }
        }, "handleTrackPointerGrace");
        document.addEventListener("pointermove", handleTrackPointerGrace);
        return () => document.removeEventListener("pointermove", handleTrackPointerGrace);
      }
    }, [trigger, content, pointerGraceArea, onClose, handleRemoveGraceArea]);
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(TooltipContentImpl, __spreadProps(__spreadValues({}, props), { ref: composedRefs }));
  });
  var [VisuallyHiddenContentContextProvider, useVisuallyHiddenContentContext] = createTooltipContext(TOOLTIP_NAME, { isInside: false });
  var Slottable = createSlottable("TooltipContent");
  var TooltipContentImpl = React31.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeTooltip,
        children,
        "aria-label": ariaLabel,
        onEscapeKeyDown,
        onPointerDownOutside
      } = _a121, contentProps = __objRest(_a121, [
        "__scopeTooltip",
        "children",
        "aria-label",
        "onEscapeKeyDown",
        "onPointerDownOutside"
      ]);
      const context = useTooltipContext(CONTENT_NAME2, __scopeTooltip);
      const popperScope = usePopperScope(__scopeTooltip);
      const { onClose } = context;
      React31.useEffect(() => {
        document.addEventListener(TOOLTIP_OPEN, onClose);
        return () => document.removeEventListener(TOOLTIP_OPEN, onClose);
      }, [onClose]);
      React31.useEffect(() => {
        if (context.trigger) {
          const handleScroll2 = /* @__PURE__ */ __name((event) => {
            const target = event.target;
            if (target == null ? void 0 : target.contains(context.trigger)) onClose();
          }, "handleScroll");
          window.addEventListener("scroll", handleScroll2, { capture: true });
          return () => window.removeEventListener("scroll", handleScroll2, { capture: true });
        }
      }, [context.trigger, onClose]);
      return /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
        DismissableLayer,
        {
          asChild: true,
          disableOutsidePointerEvents: false,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside: /* @__PURE__ */ __name((event) => event.preventDefault(), "onFocusOutside"),
          onDismiss: onClose,
          children: /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)(
            Content,
            __spreadProps(__spreadValues(__spreadValues({
              "data-state": context.stateAttribute
            }, popperScope), contentProps), {
              ref: forwardedRef,
              style: __spreadValues(__spreadValues({}, contentProps.style), {
                "--radix-tooltip-content-transform-origin": "var(--radix-popper-transform-origin)",
                "--radix-tooltip-content-available-width": "var(--radix-popper-available-width)",
                "--radix-tooltip-content-available-height": "var(--radix-popper-available-height)",
                "--radix-tooltip-trigger-width": "var(--radix-popper-anchor-width)",
                "--radix-tooltip-trigger-height": "var(--radix-popper-anchor-height)"
              }),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Slottable, { children }),
                /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(VisuallyHiddenContentContextProvider, { scope: __scopeTooltip, isInside: true, children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Root2, { id: context.contentId, role: "tooltip", children: ariaLabel || children }) })
              ]
            })
          )
        }
      );
    }
  );
  TooltipContent.displayName = CONTENT_NAME2;
  var ARROW_NAME2 = "TooltipArrow";
  var TooltipArrow = React31.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeTooltip } = _a121, arrowProps = __objRest(_a121, ["__scopeTooltip"]);
      const popperScope = usePopperScope(__scopeTooltip);
      const visuallyHiddenContentContext = useVisuallyHiddenContentContext(
        ARROW_NAME2,
        __scopeTooltip
      );
      return visuallyHiddenContentContext.isInside ? null : /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(Arrow2, __spreadProps(__spreadValues(__spreadValues({}, popperScope), arrowProps), { ref: forwardedRef }));
    }
  );
  TooltipArrow.displayName = ARROW_NAME2;
  function getExitSideFromRect(point2, rect) {
    const top = Math.abs(rect.top - point2.y);
    const bottom = Math.abs(rect.bottom - point2.y);
    const right = Math.abs(rect.right - point2.x);
    const left = Math.abs(rect.left - point2.x);
    switch (Math.min(top, bottom, right, left)) {
      case left:
        return "left";
      case right:
        return "right";
      case top:
        return "top";
      case bottom:
        return "bottom";
      default:
        throw new Error("unreachable");
    }
  }
  __name(getExitSideFromRect, "getExitSideFromRect");
  function getPaddedExitPoints(exitPoint, exitSide, padding = 5) {
    const paddedExitPoints = [];
    switch (exitSide) {
      case "top":
        paddedExitPoints.push(
          { x: exitPoint.x - padding, y: exitPoint.y + padding },
          { x: exitPoint.x + padding, y: exitPoint.y + padding }
        );
        break;
      case "bottom":
        paddedExitPoints.push(
          { x: exitPoint.x - padding, y: exitPoint.y - padding },
          { x: exitPoint.x + padding, y: exitPoint.y - padding }
        );
        break;
      case "left":
        paddedExitPoints.push(
          { x: exitPoint.x + padding, y: exitPoint.y - padding },
          { x: exitPoint.x + padding, y: exitPoint.y + padding }
        );
        break;
      case "right":
        paddedExitPoints.push(
          { x: exitPoint.x - padding, y: exitPoint.y - padding },
          { x: exitPoint.x - padding, y: exitPoint.y + padding }
        );
        break;
    }
    return paddedExitPoints;
  }
  __name(getPaddedExitPoints, "getPaddedExitPoints");
  function getPointsFromRect(rect) {
    const { top, right, bottom, left } = rect;
    return [
      { x: left, y: top },
      { x: right, y: top },
      { x: right, y: bottom },
      { x: left, y: bottom }
    ];
  }
  __name(getPointsFromRect, "getPointsFromRect");
  function isPointInPolygon(point2, polygon) {
    const { x, y } = point2;
    let inside = false;
    for (let i2 = 0, j = polygon.length - 1; i2 < polygon.length; j = i2++) {
      const xi = polygon[i2].x;
      const yi = polygon[i2].y;
      const xj = polygon[j].x;
      const yj = polygon[j].y;
      const intersect = yi > y !== yj > y && x < (xj - xi) * (y - yi) / (yj - yi) + xi;
      if (intersect) inside = !inside;
    }
    return inside;
  }
  __name(isPointInPolygon, "isPointInPolygon");
  function getHull(points) {
    const newPoints = points.slice();
    newPoints.sort((a, b) => {
      if (a.x < b.x) return -1;
      else if (a.x > b.x) return 1;
      else if (a.y < b.y) return -1;
      else if (a.y > b.y) return 1;
      else return 0;
    });
    return getHullPresorted(newPoints);
  }
  __name(getHull, "getHull");
  function getHullPresorted(points) {
    if (points.length <= 1) return points.slice();
    const upperHull = [];
    for (let i2 = 0; i2 < points.length; i2++) {
      const p2 = points[i2];
      while (upperHull.length >= 2) {
        const q = upperHull[upperHull.length - 1];
        const r3 = upperHull[upperHull.length - 2];
        if ((q.x - r3.x) * (p2.y - r3.y) >= (q.y - r3.y) * (p2.x - r3.x)) upperHull.pop();
        else break;
      }
      upperHull.push(p2);
    }
    upperHull.pop();
    const lowerHull = [];
    for (let i2 = points.length - 1; i2 >= 0; i2--) {
      const p2 = points[i2];
      while (lowerHull.length >= 2) {
        const q = lowerHull[lowerHull.length - 1];
        const r3 = lowerHull[lowerHull.length - 2];
        if ((q.x - r3.x) * (p2.y - r3.y) >= (q.y - r3.y) * (p2.x - r3.x)) lowerHull.pop();
        else break;
      }
      lowerHull.push(p2);
    }
    lowerHull.pop();
    if (upperHull.length === 1 && lowerHull.length === 1 && upperHull[0].x === lowerHull[0].x && upperHull[0].y === lowerHull[0].y) {
      return upperHull;
    } else {
      return upperHull.concat(lowerHull);
    }
  }
  __name(getHullPresorted, "getHullPresorted");
  var Provider2 = TooltipProvider;
  var Content2 = TooltipContent;

  // client/src/components/ui/tooltip.tsx
  var TooltipProvider2 = Provider2;
  var TooltipContent2 = React32.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, sideOffset = 4 } = _b93, props = __objRest(_b93, ["className", "sideOffset"]);
    return /* @__PURE__ */ React32.createElement(
      Content2,
      __spreadValues({
        ref,
        sideOffset,
        className: cn(
          "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]",
          className
        )
      }, props)
    );
  });
  TooltipContent2.displayName = Content2.displayName;

  // client/src/hooks/useAuth.ts
  function useAuth() {
    const { data: user, isLoading } = useQuery({
      queryKey: ["/api/auth/user"],
      retry: false,
      queryFn: /* @__PURE__ */ __name(async () => {
        const response = await fetch("/api/auth/user", {
          credentials: "include"
        });
        if (response.status === 401) {
          return null;
        }
        if (!response.ok) {
          throw new Error(`${response.status}: ${response.statusText}`);
        }
        return response.json();
      }, "queryFn")
    });
    return {
      user,
      isLoading,
      isAuthenticated: !!user
    };
  }
  __name(useAuth, "useAuth");

  // client/src/components/ui/button.tsx
  var React33 = __toESM(require_react(), 1);
  var buttonVariants = cva(
    "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
    {
      variants: {
        variant: {
          default: "bg-primary text-primary-foreground hover:bg-primary/90",
          destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
          outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
          secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
          ghost: "hover:bg-accent hover:text-accent-foreground",
          link: "text-primary underline-offset-4 hover:underline"
        },
        size: {
          default: "h-10 px-4 py-2",
          sm: "h-9 rounded-md px-3",
          lg: "h-11 rounded-md px-8",
          icon: "h-10 w-10"
        }
      },
      defaultVariants: {
        variant: "default",
        size: "default"
      }
    }
  );
  var Button = React33.forwardRef(
    (_a121, ref) => {
      var _b93 = _a121, { className, variant, size: size4, asChild = false } = _b93, props = __objRest(_b93, ["className", "variant", "size", "asChild"]);
      const Comp = asChild ? Slot : "button";
      return /* @__PURE__ */ React33.createElement(
        Comp,
        __spreadValues({
          className: cn(buttonVariants({ variant, size: size4, className })),
          ref
        }, props)
      );
    }
  );
  Button.displayName = "Button";

  // client/src/hooks/use-theme.tsx
  var import_react6 = __toESM(require_react(), 1);
  var initialState = {
    theme: "system",
    setTheme: /* @__PURE__ */ __name(() => null, "setTheme")
  };
  var ThemeProviderContext = (0, import_react6.createContext)(initialState);
  function ThemeProvider(_a121) {
    var _b93 = _a121, {
      children,
      defaultTheme = "system",
      storageKey = "ui-theme"
    } = _b93, props = __objRest(_b93, [
      "children",
      "defaultTheme",
      "storageKey"
    ]);
    const [theme, setTheme] = (0, import_react6.useState)(
      () => localStorage.getItem(storageKey) || defaultTheme
    );
    (0, import_react6.useEffect)(() => {
      const root = window.document.documentElement;
      root.classList.remove("light", "dark");
      if (theme === "system") {
        const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light";
        root.classList.add(systemTheme);
        const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
        const handleChange = /* @__PURE__ */ __name((e) => {
          root.classList.remove("light", "dark");
          root.classList.add(e.matches ? "dark" : "light");
        }, "handleChange");
        mediaQuery.addEventListener("change", handleChange);
        return () => mediaQuery.removeEventListener("change", handleChange);
      }
      root.classList.add(theme);
    }, [theme]);
    const value = {
      theme,
      setTheme: /* @__PURE__ */ __name((theme2) => {
        localStorage.setItem(storageKey, theme2);
        setTheme(theme2);
      }, "setTheme")
    };
    return /* @__PURE__ */ React.createElement(ThemeProviderContext.Provider, __spreadProps(__spreadValues({}, props), { value }), children);
  }
  __name(ThemeProvider, "ThemeProvider");
  var useTheme = /* @__PURE__ */ __name(() => {
    const context = (0, import_react6.useContext)(ThemeProviderContext);
    if (context === void 0)
      throw new Error("useTheme must be used within a ThemeProvider");
    return context;
  }, "useTheme");

  // client/src/components/theme-toggle.tsx
  function ThemeToggle() {
    const { theme, setTheme } = useTheme();
    return /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "icon",
        onClick: () => setTheme(theme === "light" ? "dark" : "light"),
        className: "w-9 h-9"
      },
      /* @__PURE__ */ React.createElement(Sun, { className: "h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" }),
      /* @__PURE__ */ React.createElement(Moon, { className: "absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" }),
      /* @__PURE__ */ React.createElement("span", { className: "sr-only" }, "Toggle theme")
    );
  }
  __name(ThemeToggle, "ThemeToggle");

  // client/src/components/sidebar.tsx
  var import_react7 = __toESM(require_react(), 1);
  var navigation = [
    { name: "Users", href: "/users", icon: Users, current: true }
  ];
  function Sidebar() {
    var _a121, _b93;
    const [location2] = useLocation();
    const { user: currentUser } = useAuth();
    const [showUserDropdown, setShowUserDropdown] = (0, import_react7.useState)(false);
    const { toast: toast2 } = useToast();
    const dropdownRef = (0, import_react7.useRef)(null);
    (0, import_react7.useEffect)(() => {
      function handleClickOutside(event) {
        if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
          setShowUserDropdown(false);
        }
      }
      __name(handleClickOutside, "handleClickOutside");
      document.addEventListener("mousedown", handleClickOutside);
      return () => {
        document.removeEventListener("mousedown", handleClickOutside);
      };
    }, []);
    const oktaSyncMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async () => {
        const response = await apiRequest("POST", "/api/sync-okta");
        return response.json();
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name(() => {
        queryClient.invalidateQueries({ queryKey: ["/api/users"] });
        queryClient.invalidateQueries({ queryKey: ["/api/employee-type-counts"] });
        toast2({
          title: "Success",
          description: "OKTA users synchronized successfully"
        });
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error) => {
        toast2({
          title: "Error",
          description: `Failed to sync OKTA users: ${error.message}`,
          variant: "destructive"
        });
      }, "onError")
    });
    return /* @__PURE__ */ React.createElement("aside", { className: "w-32 bg-background shadow-md border-r border-border flex-shrink-0 flex flex-col" }, /* @__PURE__ */ React.createElement("div", { className: "p-3 border-b border-border bg-purple-600 dark:bg-purple-700 flex flex-col rounded-br-lg" }, /* @__PURE__ */ React.createElement("div", { className: "text-center flex-1" }, /* @__PURE__ */ React.createElement("div", { className: "relative inline-block mb-1" }, /* @__PURE__ */ React.createElement("div", { className: "relative w-24 h-24 mx-auto rounded bg-purple-600 flex items-center justify-center" }, /* @__PURE__ */ React.createElement("div", { className: "relative w-20 h-20" }, /* @__PURE__ */ React.createElement(
      "img",
      {
        src: "/maze-logo.png",
        alt: "MAZE Logo",
        className: "w-20 h-20 absolute inset-0 object-contain",
        style: {
          filter: "invert(1)"
        }
      }
    ), /* @__PURE__ */ React.createElement(
      "div",
      {
        className: "w-20 h-20 absolute inset-0",
        style: {
          backgroundColor: "#f97316",
          mixBlendMode: "multiply"
        }
      }
    ))))), /* @__PURE__ */ React.createElement("div", { className: "text-[10px] text-white/80 leading-none mt-auto whitespace-nowrap -ml-1" }, "Powered by ClockWerk.it")), /* @__PURE__ */ React.createElement("nav", { className: "p-4 flex-1" }, /* @__PURE__ */ React.createElement("ul", { className: "space-y-2" }, navigation.map((item) => {
      const isActive = location2 === item.href || item.href === "/" && location2.startsWith("/users");
      return /* @__PURE__ */ React.createElement("li", { key: item.name }, /* @__PURE__ */ React.createElement(
        Link,
        {
          href: item.href,
          className: cn(
            "flex items-center space-x-3 px-3 py-2 rounded-lg text-sm font-medium transition-colors",
            isActive ? "bg-primary/10 text-primary" : "text-muted-foreground hover:bg-muted hover:text-foreground"
          )
        },
        /* @__PURE__ */ React.createElement(item.icon, { className: "w-5 h-5" }),
        /* @__PURE__ */ React.createElement("span", null, item.name)
      ));
    }))), /* @__PURE__ */ React.createElement("div", { className: "p-4 border-t border-border" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-center gap-3" }, /* @__PURE__ */ React.createElement("div", { className: "relative", ref: dropdownRef }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "ghost",
        className: "w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center p-0 hover:bg-blue-700",
        onClick: () => setShowUserDropdown(!showUserDropdown)
      },
      /* @__PURE__ */ React.createElement("span", { className: "text-white text-sm font-medium" }, (_a121 = currentUser == null ? void 0 : currentUser.firstName) == null ? void 0 : _a121[0], (_b93 = currentUser == null ? void 0 : currentUser.lastName) == null ? void 0 : _b93[0])
    ), showUserDropdown && /* @__PURE__ */ React.createElement("div", { className: "absolute bottom-10 left-0 w-64 bg-background border border-border rounded-lg shadow-lg z-50" }, /* @__PURE__ */ React.createElement("div", { className: "p-3 border-b border-border" }, /* @__PURE__ */ React.createElement("p", { className: "font-medium text-foreground" }, currentUser == null ? void 0 : currentUser.firstName, " ", currentUser == null ? void 0 : currentUser.lastName), /* @__PURE__ */ React.createElement("p", { className: "text-sm text-muted-foreground" }, currentUser == null ? void 0 : currentUser.email)), /* @__PURE__ */ React.createElement("div", { className: "p-3" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        onClick: () => {
          oktaSyncMutation.mutate();
          setShowUserDropdown(false);
        },
        disabled: oktaSyncMutation.isPending,
        className: "w-full border-orange-300 text-orange-700 hover:bg-orange-50"
      },
      /* @__PURE__ */ React.createElement(RotateCcw, { className: `w-4 h-4 mr-2 ${oktaSyncMutation.isPending ? "animate-spin" : ""}` }),
      "Sync OKTA"
    )))), /* @__PURE__ */ React.createElement(ThemeToggle, null))));
  }
  __name(Sidebar, "Sidebar");

  // client/src/components/sso-layout.tsx
  function SSOLayout({ children }) {
    var _a121, _b93;
    const { isAuthenticated, user } = useAuth();
    if (!isAuthenticated) {
      return /* @__PURE__ */ React.createElement(React.Fragment, null, children);
    }
    const handleLogout = /* @__PURE__ */ __name(() => {
      window.location.href = "/api/logout";
    }, "handleLogout");
    const userInitials = user ? `${((_a121 = user.firstName) == null ? void 0 : _a121.charAt(0)) || ""}${((_b93 = user.lastName) == null ? void 0 : _b93.charAt(0)) || ""}`.toUpperCase() || "U" : "U";
    return /* @__PURE__ */ React.createElement("div", { className: "flex h-screen bg-background" }, /* @__PURE__ */ React.createElement(Sidebar, null), /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex flex-col" }, /* @__PURE__ */ React.createElement("main", { className: "flex-1 overflow-auto" }, children)));
  }
  __name(SSOLayout, "SSOLayout");

  // client/src/pages/login.tsx
  var import_react8 = __toESM(require_react(), 1);

  // client/src/components/ui/input.tsx
  var React34 = __toESM(require_react(), 1);
  var Input = React34.forwardRef(
    (_a121, ref) => {
      var _b93 = _a121, { className, type } = _b93, props = __objRest(_b93, ["className", "type"]);
      return /* @__PURE__ */ React34.createElement(
        "input",
        __spreadValues({
          type,
          className: cn(
            "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
            className
          ),
          ref
        }, props)
      );
    }
  );
  Input.displayName = "Input";

  // client/src/components/ui/label.tsx
  var React36 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-label/dist/index.mjs
  var React35 = __toESM(require_react(), 1);
  var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
  var NAME3 = "Label";
  var Label = React35.forwardRef((props, forwardedRef) => {
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
      Primitive.label,
      __spreadProps(__spreadValues({}, props), {
        ref: forwardedRef,
        onMouseDown: /* @__PURE__ */ __name((event) => {
          var _a121;
          const target = event.target;
          if (target.closest("button, input, select, textarea")) return;
          (_a121 = props.onMouseDown) == null ? void 0 : _a121.call(props, event);
          if (!event.defaultPrevented && event.detail > 1) event.preventDefault();
        }, "onMouseDown")
      })
    );
  });
  Label.displayName = NAME3;
  var Root4 = Label;

  // client/src/components/ui/label.tsx
  var labelVariants = cva(
    "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
  );
  var Label2 = React36.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React36.createElement(
      Root4,
      __spreadValues({
        ref,
        className: cn(labelVariants(), className)
      }, props)
    );
  });
  Label2.displayName = Root4.displayName;

  // client/src/components/ui/card.tsx
  var React37 = __toESM(require_react(), 1);
  var Card = React37.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React37.createElement(
      "div",
      __spreadValues({
        ref,
        className: cn(
          "rounded-lg border bg-card text-card-foreground shadow-sm",
          className
        )
      }, props)
    );
  });
  Card.displayName = "Card";
  var CardHeader = React37.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React37.createElement("div", __spreadValues({ ref, className: cn("flex flex-col space-y-1.5 p-6", className) }, props));
  });
  CardHeader.displayName = "CardHeader";
  var CardTitle = React37.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React37.createElement(
      "h3",
      __spreadValues({
        ref,
        className: cn(
          "text-2xl font-semibold leading-none tracking-tight",
          className
        )
      }, props)
    );
  });
  CardTitle.displayName = "CardTitle";
  var CardDescription = React37.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React37.createElement(
      "p",
      __spreadValues({
        ref,
        className: cn("text-sm text-muted-foreground", className)
      }, props)
    );
  });
  CardDescription.displayName = "CardDescription";
  var CardContent = React37.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React37.createElement("div", __spreadValues({ ref, className: cn("p-6 pt-0", className) }, props));
  });
  CardContent.displayName = "CardContent";
  var CardFooter = React37.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React37.createElement("div", __spreadValues({ ref, className: cn("flex items-center p-6 pt-0", className) }, props));
  });
  CardFooter.displayName = "CardFooter";

  // client/src/pages/login.tsx
  function Login() {
    const [, setLocation] = useLocation();
    const [username, setUsername] = (0, import_react8.useState)("CW-Admin");
    const [password, setPassword] = (0, import_react8.useState)("YellowDr@g0nFly");
    const { toast: toast2 } = useToast();
    const loginMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async (credentials) => {
        const response = await apiRequest("POST", "/api/login", credentials);
        return await response.json();
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name((user) => {
        queryClient.setQueryData(["/api/auth/user"], user);
        toast2({
          title: "Login successful",
          description: "Welcome back!"
        });
        setLocation("/");
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error) => {
        toast2({
          title: "Login failed",
          description: error.message,
          variant: "destructive"
        });
      }, "onError")
    });
    (0, import_react8.useEffect)(() => {
      if (username && password && !loginMutation.isPending) {
        const timer = setTimeout(() => {
          loginMutation.mutate({ username, password });
        }, 500);
        return () => clearTimeout(timer);
      }
    }, []);
    const handleSubmit = /* @__PURE__ */ __name((e) => {
      e.preventDefault();
      if (!username || !password) {
        toast2({
          title: "Missing credentials",
          description: "Please enter both username and password",
          variant: "destructive"
        });
        return;
      }
      loginMutation.mutate({ username, password });
    }, "handleSubmit");
    return /* @__PURE__ */ React.createElement("div", { className: "min-h-screen flex items-center justify-center bg-gray-50" }, /* @__PURE__ */ React.createElement(Card, { className: "w-full max-w-md" }, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Admin Login"), /* @__PURE__ */ React.createElement(CardDescription, null, "Sign in to access the OKTA Admin Dashboard")), /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement("form", { onSubmit: handleSubmit, className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "username" }, "Username"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "username",
        type: "text",
        value: username,
        onChange: (e) => setUsername(e.target.value),
        placeholder: "Enter your username",
        disabled: loginMutation.isPending
      }
    )), /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "password" }, "Password"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "password",
        type: "password",
        value: password,
        onChange: (e) => setPassword(e.target.value),
        placeholder: "Enter your password",
        disabled: loginMutation.isPending
      }
    )), /* @__PURE__ */ React.createElement(
      Button,
      {
        type: "submit",
        className: "w-full",
        disabled: loginMutation.isPending
      },
      loginMutation.isPending ? "Signing in..." : "Sign In"
    )))));
  }
  __name(Login, "Login");

  // client/src/pages/dashboard.tsx
  var import_react17 = __toESM(require_react(), 1);

  // client/src/components/user-table.tsx
  var import_react14 = __toESM(require_react(), 1);

  // node_modules/date-fns/toDate.mjs
  function toDate(argument) {
    const argStr = Object.prototype.toString.call(argument);
    if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
      return new argument.constructor(+argument);
    } else if (typeof argument === "number" || argStr === "[object Number]" || typeof argument === "string" || argStr === "[object String]") {
      return new Date(argument);
    } else {
      return /* @__PURE__ */ new Date(NaN);
    }
  }
  __name(toDate, "toDate");

  // node_modules/date-fns/constructFrom.mjs
  function constructFrom(date2, value) {
    if (date2 instanceof Date) {
      return new date2.constructor(value);
    } else {
      return new Date(value);
    }
  }
  __name(constructFrom, "constructFrom");

  // node_modules/date-fns/constants.mjs
  var daysInYear = 365.2425;
  var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
  var minTime = -maxTime;
  var millisecondsInWeek = 6048e5;
  var millisecondsInDay = 864e5;
  var minutesInMonth = 43200;
  var minutesInDay = 1440;
  var secondsInHour = 3600;
  var secondsInDay = secondsInHour * 24;
  var secondsInWeek = secondsInDay * 7;
  var secondsInYear = secondsInDay * daysInYear;
  var secondsInMonth = secondsInYear / 12;
  var secondsInQuarter = secondsInMonth * 3;

  // node_modules/date-fns/_lib/defaultOptions.mjs
  var defaultOptions = {};
  function getDefaultOptions() {
    return defaultOptions;
  }
  __name(getDefaultOptions, "getDefaultOptions");

  // node_modules/date-fns/startOfWeek.mjs
  function startOfWeek(date2, options) {
    var _a121, _b93, _c5, _d4, _e4, _f2, _g2, _h2;
    const defaultOptions4 = getDefaultOptions();
    const weekStartsOn = (_h2 = (_g2 = (_d4 = (_c5 = options == null ? void 0 : options.weekStartsOn) != null ? _c5 : (_b93 = (_a121 = options == null ? void 0 : options.locale) == null ? void 0 : _a121.options) == null ? void 0 : _b93.weekStartsOn) != null ? _d4 : defaultOptions4.weekStartsOn) != null ? _g2 : (_f2 = (_e4 = defaultOptions4.locale) == null ? void 0 : _e4.options) == null ? void 0 : _f2.weekStartsOn) != null ? _h2 : 0;
    const _date = toDate(date2);
    const day = _date.getDay();
    const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    _date.setDate(_date.getDate() - diff);
    _date.setHours(0, 0, 0, 0);
    return _date;
  }
  __name(startOfWeek, "startOfWeek");

  // node_modules/date-fns/startOfISOWeek.mjs
  function startOfISOWeek(date2) {
    return startOfWeek(date2, { weekStartsOn: 1 });
  }
  __name(startOfISOWeek, "startOfISOWeek");

  // node_modules/date-fns/getISOWeekYear.mjs
  function getISOWeekYear(date2) {
    const _date = toDate(date2);
    const year = _date.getFullYear();
    const fourthOfJanuaryOfNextYear = constructFrom(date2, 0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
    const fourthOfJanuaryOfThisYear = constructFrom(date2, 0);
    fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
    const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
    if (_date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (_date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }
  __name(getISOWeekYear, "getISOWeekYear");

  // node_modules/date-fns/startOfDay.mjs
  function startOfDay(date2) {
    const _date = toDate(date2);
    _date.setHours(0, 0, 0, 0);
    return _date;
  }
  __name(startOfDay, "startOfDay");

  // node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs
  function getTimezoneOffsetInMilliseconds(date2) {
    const _date = toDate(date2);
    const utcDate = new Date(
      Date.UTC(
        _date.getFullYear(),
        _date.getMonth(),
        _date.getDate(),
        _date.getHours(),
        _date.getMinutes(),
        _date.getSeconds(),
        _date.getMilliseconds()
      )
    );
    utcDate.setUTCFullYear(_date.getFullYear());
    return +date2 - +utcDate;
  }
  __name(getTimezoneOffsetInMilliseconds, "getTimezoneOffsetInMilliseconds");

  // node_modules/date-fns/differenceInCalendarDays.mjs
  function differenceInCalendarDays(dateLeft, dateRight) {
    const startOfDayLeft = startOfDay(dateLeft);
    const startOfDayRight = startOfDay(dateRight);
    const timestampLeft = +startOfDayLeft - getTimezoneOffsetInMilliseconds(startOfDayLeft);
    const timestampRight = +startOfDayRight - getTimezoneOffsetInMilliseconds(startOfDayRight);
    return Math.round((timestampLeft - timestampRight) / millisecondsInDay);
  }
  __name(differenceInCalendarDays, "differenceInCalendarDays");

  // node_modules/date-fns/startOfISOWeekYear.mjs
  function startOfISOWeekYear(date2) {
    const year = getISOWeekYear(date2);
    const fourthOfJanuary = constructFrom(date2, 0);
    fourthOfJanuary.setFullYear(year, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    return startOfISOWeek(fourthOfJanuary);
  }
  __name(startOfISOWeekYear, "startOfISOWeekYear");

  // node_modules/date-fns/compareAsc.mjs
  function compareAsc(dateLeft, dateRight) {
    const _dateLeft = toDate(dateLeft);
    const _dateRight = toDate(dateRight);
    const diff = _dateLeft.getTime() - _dateRight.getTime();
    if (diff < 0) {
      return -1;
    } else if (diff > 0) {
      return 1;
    } else {
      return diff;
    }
  }
  __name(compareAsc, "compareAsc");

  // node_modules/date-fns/constructNow.mjs
  function constructNow(date2) {
    return constructFrom(date2, Date.now());
  }
  __name(constructNow, "constructNow");

  // node_modules/date-fns/isDate.mjs
  function isDate(value) {
    return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
  }
  __name(isDate, "isDate");

  // node_modules/date-fns/isValid.mjs
  function isValid(date2) {
    if (!isDate(date2) && typeof date2 !== "number") {
      return false;
    }
    const _date = toDate(date2);
    return !isNaN(Number(_date));
  }
  __name(isValid, "isValid");

  // node_modules/date-fns/differenceInCalendarMonths.mjs
  function differenceInCalendarMonths(dateLeft, dateRight) {
    const _dateLeft = toDate(dateLeft);
    const _dateRight = toDate(dateRight);
    const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();
    const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();
    return yearDiff * 12 + monthDiff;
  }
  __name(differenceInCalendarMonths, "differenceInCalendarMonths");

  // node_modules/date-fns/_lib/getRoundingMethod.mjs
  function getRoundingMethod(method) {
    return (number) => {
      const round2 = method ? Math[method] : Math.trunc;
      const result = round2(number);
      return result === 0 ? 0 : result;
    };
  }
  __name(getRoundingMethod, "getRoundingMethod");

  // node_modules/date-fns/differenceInMilliseconds.mjs
  function differenceInMilliseconds(dateLeft, dateRight) {
    return +toDate(dateLeft) - +toDate(dateRight);
  }
  __name(differenceInMilliseconds, "differenceInMilliseconds");

  // node_modules/date-fns/endOfDay.mjs
  function endOfDay(date2) {
    const _date = toDate(date2);
    _date.setHours(23, 59, 59, 999);
    return _date;
  }
  __name(endOfDay, "endOfDay");

  // node_modules/date-fns/endOfMonth.mjs
  function endOfMonth(date2) {
    const _date = toDate(date2);
    const month = _date.getMonth();
    _date.setFullYear(_date.getFullYear(), month + 1, 0);
    _date.setHours(23, 59, 59, 999);
    return _date;
  }
  __name(endOfMonth, "endOfMonth");

  // node_modules/date-fns/isLastDayOfMonth.mjs
  function isLastDayOfMonth(date2) {
    const _date = toDate(date2);
    return +endOfDay(_date) === +endOfMonth(_date);
  }
  __name(isLastDayOfMonth, "isLastDayOfMonth");

  // node_modules/date-fns/differenceInMonths.mjs
  function differenceInMonths(dateLeft, dateRight) {
    const _dateLeft = toDate(dateLeft);
    const _dateRight = toDate(dateRight);
    const sign = compareAsc(_dateLeft, _dateRight);
    const difference = Math.abs(
      differenceInCalendarMonths(_dateLeft, _dateRight)
    );
    let result;
    if (difference < 1) {
      result = 0;
    } else {
      if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {
        _dateLeft.setDate(30);
      }
      _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);
      let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;
      if (isLastDayOfMonth(toDate(dateLeft)) && difference === 1 && compareAsc(dateLeft, _dateRight) === 1) {
        isLastMonthNotFull = false;
      }
      result = sign * (difference - Number(isLastMonthNotFull));
    }
    return result === 0 ? 0 : result;
  }
  __name(differenceInMonths, "differenceInMonths");

  // node_modules/date-fns/differenceInSeconds.mjs
  function differenceInSeconds(dateLeft, dateRight, options) {
    const diff = differenceInMilliseconds(dateLeft, dateRight) / 1e3;
    return getRoundingMethod(options == null ? void 0 : options.roundingMethod)(diff);
  }
  __name(differenceInSeconds, "differenceInSeconds");

  // node_modules/date-fns/startOfYear.mjs
  function startOfYear(date2) {
    const cleanDate = toDate(date2);
    const _date = constructFrom(date2, 0);
    _date.setFullYear(cleanDate.getFullYear(), 0, 1);
    _date.setHours(0, 0, 0, 0);
    return _date;
  }
  __name(startOfYear, "startOfYear");

  // node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs
  var formatDistanceLocale = {
    lessThanXSeconds: {
      one: "less than a second",
      other: "less than {{count}} seconds"
    },
    xSeconds: {
      one: "1 second",
      other: "{{count}} seconds"
    },
    halfAMinute: "half a minute",
    lessThanXMinutes: {
      one: "less than a minute",
      other: "less than {{count}} minutes"
    },
    xMinutes: {
      one: "1 minute",
      other: "{{count}} minutes"
    },
    aboutXHours: {
      one: "about 1 hour",
      other: "about {{count}} hours"
    },
    xHours: {
      one: "1 hour",
      other: "{{count}} hours"
    },
    xDays: {
      one: "1 day",
      other: "{{count}} days"
    },
    aboutXWeeks: {
      one: "about 1 week",
      other: "about {{count}} weeks"
    },
    xWeeks: {
      one: "1 week",
      other: "{{count}} weeks"
    },
    aboutXMonths: {
      one: "about 1 month",
      other: "about {{count}} months"
    },
    xMonths: {
      one: "1 month",
      other: "{{count}} months"
    },
    aboutXYears: {
      one: "about 1 year",
      other: "about {{count}} years"
    },
    xYears: {
      one: "1 year",
      other: "{{count}} years"
    },
    overXYears: {
      one: "over 1 year",
      other: "over {{count}} years"
    },
    almostXYears: {
      one: "almost 1 year",
      other: "almost {{count}} years"
    }
  };
  var formatDistance = /* @__PURE__ */ __name((token, count4, options) => {
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") {
      result = tokenValue;
    } else if (count4 === 1) {
      result = tokenValue.one;
    } else {
      result = tokenValue.other.replace("{{count}}", count4.toString());
    }
    if (options == null ? void 0 : options.addSuffix) {
      if (options.comparison && options.comparison > 0) {
        return "in " + result;
      } else {
        return result + " ago";
      }
    }
    return result;
  }, "formatDistance");

  // node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs
  function buildFormatLongFn(args) {
    return (options = {}) => {
      const width = options.width ? String(options.width) : args.defaultWidth;
      const format2 = args.formats[width] || args.formats[args.defaultWidth];
      return format2;
    };
  }
  __name(buildFormatLongFn, "buildFormatLongFn");

  // node_modules/date-fns/locale/en-US/_lib/formatLong.mjs
  var dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
  };
  var timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
  };
  var dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
  };
  var formatLong = {
    date: buildFormatLongFn({
      formats: dateFormats,
      defaultWidth: "full"
    }),
    time: buildFormatLongFn({
      formats: timeFormats,
      defaultWidth: "full"
    }),
    dateTime: buildFormatLongFn({
      formats: dateTimeFormats,
      defaultWidth: "full"
    })
  };

  // node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs
  var formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: "P"
  };
  var formatRelative = /* @__PURE__ */ __name((token, _date, _baseDate, _options) => formatRelativeLocale[token], "formatRelative");

  // node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs
  function buildLocalizeFn(args) {
    return (value, options) => {
      const context = (options == null ? void 0 : options.context) ? String(options.context) : "standalone";
      let valuesArray;
      if (context === "formatting" && args.formattingValues) {
        const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
        const width = (options == null ? void 0 : options.width) ? String(options.width) : defaultWidth;
        valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
      } else {
        const defaultWidth = args.defaultWidth;
        const width = (options == null ? void 0 : options.width) ? String(options.width) : args.defaultWidth;
        valuesArray = args.values[width] || args.values[defaultWidth];
      }
      const index3 = args.argumentCallback ? args.argumentCallback(value) : value;
      return valuesArray[index3];
    };
  }
  __name(buildLocalizeFn, "buildLocalizeFn");

  // node_modules/date-fns/locale/en-US/_lib/localize.mjs
  var eraValues = {
    narrow: ["B", "A"],
    abbreviated: ["BC", "AD"],
    wide: ["Before Christ", "Anno Domini"]
  };
  var quarterValues = {
    narrow: ["1", "2", "3", "4"],
    abbreviated: ["Q1", "Q2", "Q3", "Q4"],
    wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
  };
  var monthValues = {
    narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
    abbreviated: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    wide: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ]
  };
  var dayValues = {
    narrow: ["S", "M", "T", "W", "T", "F", "S"],
    short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
    abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    wide: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ]
  };
  var dayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "morning",
      afternoon: "afternoon",
      evening: "evening",
      night: "night"
    }
  };
  var formattingDayPeriodValues = {
    narrow: {
      am: "a",
      pm: "p",
      midnight: "mi",
      noon: "n",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    abbreviated: {
      am: "AM",
      pm: "PM",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    },
    wide: {
      am: "a.m.",
      pm: "p.m.",
      midnight: "midnight",
      noon: "noon",
      morning: "in the morning",
      afternoon: "in the afternoon",
      evening: "in the evening",
      night: "at night"
    }
  };
  var ordinalNumber = /* @__PURE__ */ __name((dirtyNumber, _options) => {
    const number = Number(dirtyNumber);
    const rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) {
      switch (rem100 % 10) {
        case 1:
          return number + "st";
        case 2:
          return number + "nd";
        case 3:
          return number + "rd";
      }
    }
    return number + "th";
  }, "ordinalNumber");
  var localize = {
    ordinalNumber,
    era: buildLocalizeFn({
      values: eraValues,
      defaultWidth: "wide"
    }),
    quarter: buildLocalizeFn({
      values: quarterValues,
      defaultWidth: "wide",
      argumentCallback: /* @__PURE__ */ __name((quarter) => quarter - 1, "argumentCallback")
    }),
    month: buildLocalizeFn({
      values: monthValues,
      defaultWidth: "wide"
    }),
    day: buildLocalizeFn({
      values: dayValues,
      defaultWidth: "wide"
    }),
    dayPeriod: buildLocalizeFn({
      values: dayPeriodValues,
      defaultWidth: "wide",
      formattingValues: formattingDayPeriodValues,
      defaultFormattingWidth: "wide"
    })
  };

  // node_modules/date-fns/locale/_lib/buildMatchFn.mjs
  function buildMatchFn(args) {
    return (string, options = {}) => {
      const width = options.width;
      const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
      const matchResult = string.match(matchPattern);
      if (!matchResult) {
        return null;
      }
      const matchedString = matchResult[0];
      const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
      const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString)) : (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        findKey(parsePatterns, (pattern) => pattern.test(matchedString))
      );
      let value;
      value = args.valueCallback ? args.valueCallback(key) : key;
      value = options.valueCallback ? (
        // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        options.valueCallback(value)
      ) : value;
      const rest = string.slice(matchedString.length);
      return { value, rest };
    };
  }
  __name(buildMatchFn, "buildMatchFn");
  function findKey(object, predicate) {
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) {
        return key;
      }
    }
    return void 0;
  }
  __name(findKey, "findKey");
  function findIndex(array, predicate) {
    for (let key = 0; key < array.length; key++) {
      if (predicate(array[key])) {
        return key;
      }
    }
    return void 0;
  }
  __name(findIndex, "findIndex");

  // node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs
  function buildMatchPatternFn(args) {
    return (string, options = {}) => {
      const matchResult = string.match(args.matchPattern);
      if (!matchResult) return null;
      const matchedString = matchResult[0];
      const parseResult = string.match(args.parsePattern);
      if (!parseResult) return null;
      let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
      value = options.valueCallback ? options.valueCallback(value) : value;
      const rest = string.slice(matchedString.length);
      return { value, rest };
    };
  }
  __name(buildMatchPatternFn, "buildMatchPatternFn");

  // node_modules/date-fns/locale/en-US/_lib/match.mjs
  var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
  var parseOrdinalNumberPattern = /\d+/i;
  var matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
  };
  var parseEraPatterns = {
    any: [/^b/i, /^(a|c)/i]
  };
  var matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
  };
  var parseQuarterPatterns = {
    any: [/1/i, /2/i, /3/i, /4/i]
  };
  var matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
  };
  var parseMonthPatterns = {
    narrow: [
      /^j/i,
      /^f/i,
      /^m/i,
      /^a/i,
      /^m/i,
      /^j/i,
      /^j/i,
      /^a/i,
      /^s/i,
      /^o/i,
      /^n/i,
      /^d/i
    ],
    any: [
      /^ja/i,
      /^f/i,
      /^mar/i,
      /^ap/i,
      /^may/i,
      /^jun/i,
      /^jul/i,
      /^au/i,
      /^s/i,
      /^o/i,
      /^n/i,
      /^d/i
    ]
  };
  var matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
  };
  var parseDayPatterns = {
    narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
    any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
  };
  var matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
  };
  var parseDayPeriodPatterns = {
    any: {
      am: /^a/i,
      pm: /^p/i,
      midnight: /^mi/i,
      noon: /^no/i,
      morning: /morning/i,
      afternoon: /afternoon/i,
      evening: /evening/i,
      night: /night/i
    }
  };
  var match = {
    ordinalNumber: buildMatchPatternFn({
      matchPattern: matchOrdinalNumberPattern,
      parsePattern: parseOrdinalNumberPattern,
      valueCallback: /* @__PURE__ */ __name((value) => parseInt(value, 10), "valueCallback")
    }),
    era: buildMatchFn({
      matchPatterns: matchEraPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseEraPatterns,
      defaultParseWidth: "any"
    }),
    quarter: buildMatchFn({
      matchPatterns: matchQuarterPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseQuarterPatterns,
      defaultParseWidth: "any",
      valueCallback: /* @__PURE__ */ __name((index3) => index3 + 1, "valueCallback")
    }),
    month: buildMatchFn({
      matchPatterns: matchMonthPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseMonthPatterns,
      defaultParseWidth: "any"
    }),
    day: buildMatchFn({
      matchPatterns: matchDayPatterns,
      defaultMatchWidth: "wide",
      parsePatterns: parseDayPatterns,
      defaultParseWidth: "any"
    }),
    dayPeriod: buildMatchFn({
      matchPatterns: matchDayPeriodPatterns,
      defaultMatchWidth: "any",
      parsePatterns: parseDayPeriodPatterns,
      defaultParseWidth: "any"
    })
  };

  // node_modules/date-fns/locale/en-US.mjs
  var enUS = {
    code: "en-US",
    formatDistance,
    formatLong,
    formatRelative,
    localize,
    match,
    options: {
      weekStartsOn: 0,
      firstWeekContainsDate: 1
    }
  };

  // node_modules/date-fns/getDayOfYear.mjs
  function getDayOfYear(date2) {
    const _date = toDate(date2);
    const diff = differenceInCalendarDays(_date, startOfYear(_date));
    const dayOfYear = diff + 1;
    return dayOfYear;
  }
  __name(getDayOfYear, "getDayOfYear");

  // node_modules/date-fns/getISOWeek.mjs
  function getISOWeek(date2) {
    const _date = toDate(date2);
    const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);
    return Math.round(diff / millisecondsInWeek) + 1;
  }
  __name(getISOWeek, "getISOWeek");

  // node_modules/date-fns/getWeekYear.mjs
  function getWeekYear(date2, options) {
    var _a121, _b93, _c5, _d4, _e4, _f2, _g2, _h2;
    const _date = toDate(date2);
    const year = _date.getFullYear();
    const defaultOptions4 = getDefaultOptions();
    const firstWeekContainsDate = (_h2 = (_g2 = (_d4 = (_c5 = options == null ? void 0 : options.firstWeekContainsDate) != null ? _c5 : (_b93 = (_a121 = options == null ? void 0 : options.locale) == null ? void 0 : _a121.options) == null ? void 0 : _b93.firstWeekContainsDate) != null ? _d4 : defaultOptions4.firstWeekContainsDate) != null ? _g2 : (_f2 = (_e4 = defaultOptions4.locale) == null ? void 0 : _e4.options) == null ? void 0 : _f2.firstWeekContainsDate) != null ? _h2 : 1;
    const firstWeekOfNextYear = constructFrom(date2, 0);
    firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setHours(0, 0, 0, 0);
    const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
    const firstWeekOfThisYear = constructFrom(date2, 0);
    firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setHours(0, 0, 0, 0);
    const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
    if (_date.getTime() >= startOfNextYear.getTime()) {
      return year + 1;
    } else if (_date.getTime() >= startOfThisYear.getTime()) {
      return year;
    } else {
      return year - 1;
    }
  }
  __name(getWeekYear, "getWeekYear");

  // node_modules/date-fns/startOfWeekYear.mjs
  function startOfWeekYear(date2, options) {
    var _a121, _b93, _c5, _d4, _e4, _f2, _g2, _h2;
    const defaultOptions4 = getDefaultOptions();
    const firstWeekContainsDate = (_h2 = (_g2 = (_d4 = (_c5 = options == null ? void 0 : options.firstWeekContainsDate) != null ? _c5 : (_b93 = (_a121 = options == null ? void 0 : options.locale) == null ? void 0 : _a121.options) == null ? void 0 : _b93.firstWeekContainsDate) != null ? _d4 : defaultOptions4.firstWeekContainsDate) != null ? _g2 : (_f2 = (_e4 = defaultOptions4.locale) == null ? void 0 : _e4.options) == null ? void 0 : _f2.firstWeekContainsDate) != null ? _h2 : 1;
    const year = getWeekYear(date2, options);
    const firstWeek = constructFrom(date2, 0);
    firstWeek.setFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setHours(0, 0, 0, 0);
    const _date = startOfWeek(firstWeek, options);
    return _date;
  }
  __name(startOfWeekYear, "startOfWeekYear");

  // node_modules/date-fns/getWeek.mjs
  function getWeek(date2, options) {
    const _date = toDate(date2);
    const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);
    return Math.round(diff / millisecondsInWeek) + 1;
  }
  __name(getWeek, "getWeek");

  // node_modules/date-fns/_lib/addLeadingZeros.mjs
  function addLeadingZeros(number, targetLength) {
    const sign = number < 0 ? "-" : "";
    const output = Math.abs(number).toString().padStart(targetLength, "0");
    return sign + output;
  }
  __name(addLeadingZeros, "addLeadingZeros");

  // node_modules/date-fns/_lib/format/lightFormatters.mjs
  var lightFormatters = {
    // Year
    y(date2, token) {
      const signedYear = date2.getFullYear();
      const year = signedYear > 0 ? signedYear : 1 - signedYear;
      return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
    },
    // Month
    M(date2, token) {
      const month = date2.getMonth();
      return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
    },
    // Day of the month
    d(date2, token) {
      return addLeadingZeros(date2.getDate(), token.length);
    },
    // AM or PM
    a(date2, token) {
      const dayPeriodEnumValue = date2.getHours() / 12 >= 1 ? "pm" : "am";
      switch (token) {
        case "a":
        case "aa":
          return dayPeriodEnumValue.toUpperCase();
        case "aaa":
          return dayPeriodEnumValue;
        case "aaaaa":
          return dayPeriodEnumValue[0];
        case "aaaa":
        default:
          return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
      }
    },
    // Hour [1-12]
    h(date2, token) {
      return addLeadingZeros(date2.getHours() % 12 || 12, token.length);
    },
    // Hour [0-23]
    H(date2, token) {
      return addLeadingZeros(date2.getHours(), token.length);
    },
    // Minute
    m(date2, token) {
      return addLeadingZeros(date2.getMinutes(), token.length);
    },
    // Second
    s(date2, token) {
      return addLeadingZeros(date2.getSeconds(), token.length);
    },
    // Fraction of second
    S(date2, token) {
      const numberOfDigits = token.length;
      const milliseconds = date2.getMilliseconds();
      const fractionalSeconds = Math.trunc(
        milliseconds * Math.pow(10, numberOfDigits - 3)
      );
      return addLeadingZeros(fractionalSeconds, token.length);
    }
  };

  // node_modules/date-fns/_lib/format/formatters.mjs
  var dayPeriodEnum = {
    am: "am",
    pm: "pm",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  };
  var formatters = {
    // Era
    G: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const era = date2.getFullYear() > 0 ? 1 : 0;
      switch (token) {
        // AD, BC
        case "G":
        case "GG":
        case "GGG":
          return localize2.era(era, { width: "abbreviated" });
        // A, B
        case "GGGGG":
          return localize2.era(era, { width: "narrow" });
        // Anno Domini, Before Christ
        case "GGGG":
        default:
          return localize2.era(era, { width: "wide" });
      }
    }, "G"),
    // Year
    y: /* @__PURE__ */ __name(function(date2, token, localize2) {
      if (token === "yo") {
        const signedYear = date2.getFullYear();
        const year = signedYear > 0 ? signedYear : 1 - signedYear;
        return localize2.ordinalNumber(year, { unit: "year" });
      }
      return lightFormatters.y(date2, token);
    }, "y"),
    // Local week-numbering year
    Y: /* @__PURE__ */ __name(function(date2, token, localize2, options) {
      const signedWeekYear = getWeekYear(date2, options);
      const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
      if (token === "YY") {
        const twoDigitYear = weekYear % 100;
        return addLeadingZeros(twoDigitYear, 2);
      }
      if (token === "Yo") {
        return localize2.ordinalNumber(weekYear, { unit: "year" });
      }
      return addLeadingZeros(weekYear, token.length);
    }, "Y"),
    // ISO week-numbering year
    R: /* @__PURE__ */ __name(function(date2, token) {
      const isoWeekYear = getISOWeekYear(date2);
      return addLeadingZeros(isoWeekYear, token.length);
    }, "R"),
    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: /* @__PURE__ */ __name(function(date2, token) {
      const year = date2.getFullYear();
      return addLeadingZeros(year, token.length);
    }, "u"),
    // Quarter
    Q: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const quarter = Math.ceil((date2.getMonth() + 1) / 3);
      switch (token) {
        // 1, 2, 3, 4
        case "Q":
          return String(quarter);
        // 01, 02, 03, 04
        case "QQ":
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th
        case "Qo":
          return localize2.ordinalNumber(quarter, { unit: "quarter" });
        // Q1, Q2, Q3, Q4
        case "QQQ":
          return localize2.quarter(quarter, {
            width: "abbreviated",
            context: "formatting"
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "QQQQQ":
          return localize2.quarter(quarter, {
            width: "narrow",
            context: "formatting"
          });
        // 1st quarter, 2nd quarter, ...
        case "QQQQ":
        default:
          return localize2.quarter(quarter, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "Q"),
    // Stand-alone quarter
    q: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const quarter = Math.ceil((date2.getMonth() + 1) / 3);
      switch (token) {
        // 1, 2, 3, 4
        case "q":
          return String(quarter);
        // 01, 02, 03, 04
        case "qq":
          return addLeadingZeros(quarter, 2);
        // 1st, 2nd, 3rd, 4th
        case "qo":
          return localize2.ordinalNumber(quarter, { unit: "quarter" });
        // Q1, Q2, Q3, Q4
        case "qqq":
          return localize2.quarter(quarter, {
            width: "abbreviated",
            context: "standalone"
          });
        // 1, 2, 3, 4 (narrow quarter; could be not numerical)
        case "qqqqq":
          return localize2.quarter(quarter, {
            width: "narrow",
            context: "standalone"
          });
        // 1st quarter, 2nd quarter, ...
        case "qqqq":
        default:
          return localize2.quarter(quarter, {
            width: "wide",
            context: "standalone"
          });
      }
    }, "q"),
    // Month
    M: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const month = date2.getMonth();
      switch (token) {
        case "M":
        case "MM":
          return lightFormatters.M(date2, token);
        // 1st, 2nd, ..., 12th
        case "Mo":
          return localize2.ordinalNumber(month + 1, { unit: "month" });
        // Jan, Feb, ..., Dec
        case "MMM":
          return localize2.month(month, {
            width: "abbreviated",
            context: "formatting"
          });
        // J, F, ..., D
        case "MMMMM":
          return localize2.month(month, {
            width: "narrow",
            context: "formatting"
          });
        // January, February, ..., December
        case "MMMM":
        default:
          return localize2.month(month, { width: "wide", context: "formatting" });
      }
    }, "M"),
    // Stand-alone month
    L: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const month = date2.getMonth();
      switch (token) {
        // 1, 2, ..., 12
        case "L":
          return String(month + 1);
        // 01, 02, ..., 12
        case "LL":
          return addLeadingZeros(month + 1, 2);
        // 1st, 2nd, ..., 12th
        case "Lo":
          return localize2.ordinalNumber(month + 1, { unit: "month" });
        // Jan, Feb, ..., Dec
        case "LLL":
          return localize2.month(month, {
            width: "abbreviated",
            context: "standalone"
          });
        // J, F, ..., D
        case "LLLLL":
          return localize2.month(month, {
            width: "narrow",
            context: "standalone"
          });
        // January, February, ..., December
        case "LLLL":
        default:
          return localize2.month(month, { width: "wide", context: "standalone" });
      }
    }, "L"),
    // Local week of year
    w: /* @__PURE__ */ __name(function(date2, token, localize2, options) {
      const week = getWeek(date2, options);
      if (token === "wo") {
        return localize2.ordinalNumber(week, { unit: "week" });
      }
      return addLeadingZeros(week, token.length);
    }, "w"),
    // ISO week of year
    I: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const isoWeek = getISOWeek(date2);
      if (token === "Io") {
        return localize2.ordinalNumber(isoWeek, { unit: "week" });
      }
      return addLeadingZeros(isoWeek, token.length);
    }, "I"),
    // Day of the month
    d: /* @__PURE__ */ __name(function(date2, token, localize2) {
      if (token === "do") {
        return localize2.ordinalNumber(date2.getDate(), { unit: "date" });
      }
      return lightFormatters.d(date2, token);
    }, "d"),
    // Day of year
    D: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const dayOfYear = getDayOfYear(date2);
      if (token === "Do") {
        return localize2.ordinalNumber(dayOfYear, { unit: "dayOfYear" });
      }
      return addLeadingZeros(dayOfYear, token.length);
    }, "D"),
    // Day of week
    E: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const dayOfWeek = date2.getDay();
      switch (token) {
        // Tue
        case "E":
        case "EE":
        case "EEE":
          return localize2.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting"
          });
        // T
        case "EEEEE":
          return localize2.day(dayOfWeek, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "EEEEEE":
          return localize2.day(dayOfWeek, {
            width: "short",
            context: "formatting"
          });
        // Tuesday
        case "EEEE":
        default:
          return localize2.day(dayOfWeek, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "E"),
    // Local day of week
    e: /* @__PURE__ */ __name(function(date2, token, localize2, options) {
      const dayOfWeek = date2.getDay();
      const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
      switch (token) {
        // Numerical value (Nth day of week with current locale or weekStartsOn)
        case "e":
          return String(localDayOfWeek);
        // Padded numerical value
        case "ee":
          return addLeadingZeros(localDayOfWeek, 2);
        // 1st, 2nd, ..., 7th
        case "eo":
          return localize2.ordinalNumber(localDayOfWeek, { unit: "day" });
        case "eee":
          return localize2.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting"
          });
        // T
        case "eeeee":
          return localize2.day(dayOfWeek, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "eeeeee":
          return localize2.day(dayOfWeek, {
            width: "short",
            context: "formatting"
          });
        // Tuesday
        case "eeee":
        default:
          return localize2.day(dayOfWeek, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "e"),
    // Stand-alone local day of week
    c: /* @__PURE__ */ __name(function(date2, token, localize2, options) {
      const dayOfWeek = date2.getDay();
      const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
      switch (token) {
        // Numerical value (same as in `e`)
        case "c":
          return String(localDayOfWeek);
        // Padded numerical value
        case "cc":
          return addLeadingZeros(localDayOfWeek, token.length);
        // 1st, 2nd, ..., 7th
        case "co":
          return localize2.ordinalNumber(localDayOfWeek, { unit: "day" });
        case "ccc":
          return localize2.day(dayOfWeek, {
            width: "abbreviated",
            context: "standalone"
          });
        // T
        case "ccccc":
          return localize2.day(dayOfWeek, {
            width: "narrow",
            context: "standalone"
          });
        // Tu
        case "cccccc":
          return localize2.day(dayOfWeek, {
            width: "short",
            context: "standalone"
          });
        // Tuesday
        case "cccc":
        default:
          return localize2.day(dayOfWeek, {
            width: "wide",
            context: "standalone"
          });
      }
    }, "c"),
    // ISO day of week
    i: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const dayOfWeek = date2.getDay();
      const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
      switch (token) {
        // 2
        case "i":
          return String(isoDayOfWeek);
        // 02
        case "ii":
          return addLeadingZeros(isoDayOfWeek, token.length);
        // 2nd
        case "io":
          return localize2.ordinalNumber(isoDayOfWeek, { unit: "day" });
        // Tue
        case "iii":
          return localize2.day(dayOfWeek, {
            width: "abbreviated",
            context: "formatting"
          });
        // T
        case "iiiii":
          return localize2.day(dayOfWeek, {
            width: "narrow",
            context: "formatting"
          });
        // Tu
        case "iiiiii":
          return localize2.day(dayOfWeek, {
            width: "short",
            context: "formatting"
          });
        // Tuesday
        case "iiii":
        default:
          return localize2.day(dayOfWeek, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "i"),
    // AM or PM
    a: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const hours = date2.getHours();
      const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
      switch (token) {
        case "a":
        case "aa":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "aaa":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          }).toLowerCase();
        case "aaaaa":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "aaaa":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "a"),
    // AM, PM, midnight, noon
    b: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const hours = date2.getHours();
      let dayPeriodEnumValue;
      if (hours === 12) {
        dayPeriodEnumValue = dayPeriodEnum.noon;
      } else if (hours === 0) {
        dayPeriodEnumValue = dayPeriodEnum.midnight;
      } else {
        dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
      }
      switch (token) {
        case "b":
        case "bb":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "bbb":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          }).toLowerCase();
        case "bbbbb":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "bbbb":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "b"),
    // in the morning, in the afternoon, in the evening, at night
    B: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const hours = date2.getHours();
      let dayPeriodEnumValue;
      if (hours >= 17) {
        dayPeriodEnumValue = dayPeriodEnum.evening;
      } else if (hours >= 12) {
        dayPeriodEnumValue = dayPeriodEnum.afternoon;
      } else if (hours >= 4) {
        dayPeriodEnumValue = dayPeriodEnum.morning;
      } else {
        dayPeriodEnumValue = dayPeriodEnum.night;
      }
      switch (token) {
        case "B":
        case "BB":
        case "BBB":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "abbreviated",
            context: "formatting"
          });
        case "BBBBB":
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "narrow",
            context: "formatting"
          });
        case "BBBB":
        default:
          return localize2.dayPeriod(dayPeriodEnumValue, {
            width: "wide",
            context: "formatting"
          });
      }
    }, "B"),
    // Hour [1-12]
    h: /* @__PURE__ */ __name(function(date2, token, localize2) {
      if (token === "ho") {
        let hours = date2.getHours() % 12;
        if (hours === 0) hours = 12;
        return localize2.ordinalNumber(hours, { unit: "hour" });
      }
      return lightFormatters.h(date2, token);
    }, "h"),
    // Hour [0-23]
    H: /* @__PURE__ */ __name(function(date2, token, localize2) {
      if (token === "Ho") {
        return localize2.ordinalNumber(date2.getHours(), { unit: "hour" });
      }
      return lightFormatters.H(date2, token);
    }, "H"),
    // Hour [0-11]
    K: /* @__PURE__ */ __name(function(date2, token, localize2) {
      const hours = date2.getHours() % 12;
      if (token === "Ko") {
        return localize2.ordinalNumber(hours, { unit: "hour" });
      }
      return addLeadingZeros(hours, token.length);
    }, "K"),
    // Hour [1-24]
    k: /* @__PURE__ */ __name(function(date2, token, localize2) {
      let hours = date2.getHours();
      if (hours === 0) hours = 24;
      if (token === "ko") {
        return localize2.ordinalNumber(hours, { unit: "hour" });
      }
      return addLeadingZeros(hours, token.length);
    }, "k"),
    // Minute
    m: /* @__PURE__ */ __name(function(date2, token, localize2) {
      if (token === "mo") {
        return localize2.ordinalNumber(date2.getMinutes(), { unit: "minute" });
      }
      return lightFormatters.m(date2, token);
    }, "m"),
    // Second
    s: /* @__PURE__ */ __name(function(date2, token, localize2) {
      if (token === "so") {
        return localize2.ordinalNumber(date2.getSeconds(), { unit: "second" });
      }
      return lightFormatters.s(date2, token);
    }, "s"),
    // Fraction of second
    S: /* @__PURE__ */ __name(function(date2, token) {
      return lightFormatters.S(date2, token);
    }, "S"),
    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: /* @__PURE__ */ __name(function(date2, token, _localize) {
      const timezoneOffset = date2.getTimezoneOffset();
      if (timezoneOffset === 0) {
        return "Z";
      }
      switch (token) {
        // Hours and optional minutes
        case "X":
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XX`
        case "XXXX":
        case "XX":
          return formatTimezone(timezoneOffset);
        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `XXX`
        case "XXXXX":
        case "XXX":
        // Hours and minutes with `:` delimiter
        default:
          return formatTimezone(timezoneOffset, ":");
      }
    }, "X"),
    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: /* @__PURE__ */ __name(function(date2, token, _localize) {
      const timezoneOffset = date2.getTimezoneOffset();
      switch (token) {
        // Hours and optional minutes
        case "x":
          return formatTimezoneWithOptionalMinutes(timezoneOffset);
        // Hours, minutes and optional seconds without `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xx`
        case "xxxx":
        case "xx":
          return formatTimezone(timezoneOffset);
        // Hours, minutes and optional seconds with `:` delimiter
        // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
        // so this token always has the same output as `xxx`
        case "xxxxx":
        case "xxx":
        // Hours and minutes with `:` delimiter
        default:
          return formatTimezone(timezoneOffset, ":");
      }
    }, "x"),
    // Timezone (GMT)
    O: /* @__PURE__ */ __name(function(date2, token, _localize) {
      const timezoneOffset = date2.getTimezoneOffset();
      switch (token) {
        // Short
        case "O":
        case "OO":
        case "OOO":
          return "GMT" + formatTimezoneShort(timezoneOffset, ":");
        // Long
        case "OOOO":
        default:
          return "GMT" + formatTimezone(timezoneOffset, ":");
      }
    }, "O"),
    // Timezone (specific non-location)
    z: /* @__PURE__ */ __name(function(date2, token, _localize) {
      const timezoneOffset = date2.getTimezoneOffset();
      switch (token) {
        // Short
        case "z":
        case "zz":
        case "zzz":
          return "GMT" + formatTimezoneShort(timezoneOffset, ":");
        // Long
        case "zzzz":
        default:
          return "GMT" + formatTimezone(timezoneOffset, ":");
      }
    }, "z"),
    // Seconds timestamp
    t: /* @__PURE__ */ __name(function(date2, token, _localize) {
      const timestamp2 = Math.trunc(date2.getTime() / 1e3);
      return addLeadingZeros(timestamp2, token.length);
    }, "t"),
    // Milliseconds timestamp
    T: /* @__PURE__ */ __name(function(date2, token, _localize) {
      const timestamp2 = date2.getTime();
      return addLeadingZeros(timestamp2, token.length);
    }, "T")
  };
  function formatTimezoneShort(offset4, delimiter = "") {
    const sign = offset4 > 0 ? "-" : "+";
    const absOffset = Math.abs(offset4);
    const hours = Math.trunc(absOffset / 60);
    const minutes = absOffset % 60;
    if (minutes === 0) {
      return sign + String(hours);
    }
    return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
  }
  __name(formatTimezoneShort, "formatTimezoneShort");
  function formatTimezoneWithOptionalMinutes(offset4, delimiter) {
    if (offset4 % 60 === 0) {
      const sign = offset4 > 0 ? "-" : "+";
      return sign + addLeadingZeros(Math.abs(offset4) / 60, 2);
    }
    return formatTimezone(offset4, delimiter);
  }
  __name(formatTimezoneWithOptionalMinutes, "formatTimezoneWithOptionalMinutes");
  function formatTimezone(offset4, delimiter = "") {
    const sign = offset4 > 0 ? "-" : "+";
    const absOffset = Math.abs(offset4);
    const hours = addLeadingZeros(Math.trunc(absOffset / 60), 2);
    const minutes = addLeadingZeros(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
  }
  __name(formatTimezone, "formatTimezone");

  // node_modules/date-fns/_lib/format/longFormatters.mjs
  var dateLongFormatter = /* @__PURE__ */ __name((pattern, formatLong2) => {
    switch (pattern) {
      case "P":
        return formatLong2.date({ width: "short" });
      case "PP":
        return formatLong2.date({ width: "medium" });
      case "PPP":
        return formatLong2.date({ width: "long" });
      case "PPPP":
      default:
        return formatLong2.date({ width: "full" });
    }
  }, "dateLongFormatter");
  var timeLongFormatter = /* @__PURE__ */ __name((pattern, formatLong2) => {
    switch (pattern) {
      case "p":
        return formatLong2.time({ width: "short" });
      case "pp":
        return formatLong2.time({ width: "medium" });
      case "ppp":
        return formatLong2.time({ width: "long" });
      case "pppp":
      default:
        return formatLong2.time({ width: "full" });
    }
  }, "timeLongFormatter");
  var dateTimeLongFormatter = /* @__PURE__ */ __name((pattern, formatLong2) => {
    const matchResult = pattern.match(/(P+)(p+)?/) || [];
    const datePattern = matchResult[1];
    const timePattern = matchResult[2];
    if (!timePattern) {
      return dateLongFormatter(pattern, formatLong2);
    }
    let dateTimeFormat;
    switch (datePattern) {
      case "P":
        dateTimeFormat = formatLong2.dateTime({ width: "short" });
        break;
      case "PP":
        dateTimeFormat = formatLong2.dateTime({ width: "medium" });
        break;
      case "PPP":
        dateTimeFormat = formatLong2.dateTime({ width: "long" });
        break;
      case "PPPP":
      default:
        dateTimeFormat = formatLong2.dateTime({ width: "full" });
        break;
    }
    return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
  }, "dateTimeLongFormatter");
  var longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
  };

  // node_modules/date-fns/_lib/protectedTokens.mjs
  var dayOfYearTokenRE = /^D+$/;
  var weekYearTokenRE = /^Y+$/;
  var throwTokens = ["D", "DD", "YY", "YYYY"];
  function isProtectedDayOfYearToken(token) {
    return dayOfYearTokenRE.test(token);
  }
  __name(isProtectedDayOfYearToken, "isProtectedDayOfYearToken");
  function isProtectedWeekYearToken(token) {
    return weekYearTokenRE.test(token);
  }
  __name(isProtectedWeekYearToken, "isProtectedWeekYearToken");
  function warnOrThrowProtectedError(token, format2, input) {
    const _message = message(token, format2, input);
    console.warn(_message);
    if (throwTokens.includes(token)) throw new RangeError(_message);
  }
  __name(warnOrThrowProtectedError, "warnOrThrowProtectedError");
  function message(token, format2, input) {
    const subject = token[0] === "Y" ? "years" : "days of the month";
    return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format2}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
  }
  __name(message, "message");

  // node_modules/date-fns/format.mjs
  var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
  var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
  var escapedStringRegExp = /^'([^]*?)'?$/;
  var doubleQuoteRegExp = /''/g;
  var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
  function format(date2, formatStr, options) {
    var _a121, _b93, _c5, _d4, _e4, _f2, _g2, _h2, _i2, _j2, _k, _l, _m, _n, _o, _p, _q, _r;
    const defaultOptions4 = getDefaultOptions();
    const locale = (_b93 = (_a121 = options == null ? void 0 : options.locale) != null ? _a121 : defaultOptions4.locale) != null ? _b93 : enUS;
    const firstWeekContainsDate = (_j2 = (_i2 = (_f2 = (_e4 = options == null ? void 0 : options.firstWeekContainsDate) != null ? _e4 : (_d4 = (_c5 = options == null ? void 0 : options.locale) == null ? void 0 : _c5.options) == null ? void 0 : _d4.firstWeekContainsDate) != null ? _f2 : defaultOptions4.firstWeekContainsDate) != null ? _i2 : (_h2 = (_g2 = defaultOptions4.locale) == null ? void 0 : _g2.options) == null ? void 0 : _h2.firstWeekContainsDate) != null ? _j2 : 1;
    const weekStartsOn = (_r = (_q = (_n = (_m = options == null ? void 0 : options.weekStartsOn) != null ? _m : (_l = (_k = options == null ? void 0 : options.locale) == null ? void 0 : _k.options) == null ? void 0 : _l.weekStartsOn) != null ? _n : defaultOptions4.weekStartsOn) != null ? _q : (_p = (_o = defaultOptions4.locale) == null ? void 0 : _o.options) == null ? void 0 : _p.weekStartsOn) != null ? _r : 0;
    const originalDate = toDate(date2);
    if (!isValid(originalDate)) {
      throw new RangeError("Invalid time value");
    }
    let parts = formatStr.match(longFormattingTokensRegExp).map((substring) => {
      const firstCharacter = substring[0];
      if (firstCharacter === "p" || firstCharacter === "P") {
        const longFormatter = longFormatters[firstCharacter];
        return longFormatter(substring, locale.formatLong);
      }
      return substring;
    }).join("").match(formattingTokensRegExp).map((substring) => {
      if (substring === "''") {
        return { isToken: false, value: "'" };
      }
      const firstCharacter = substring[0];
      if (firstCharacter === "'") {
        return { isToken: false, value: cleanEscapedString(substring) };
      }
      if (formatters[firstCharacter]) {
        return { isToken: true, value: substring };
      }
      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError(
          "Format string contains an unescaped latin alphabet character `" + firstCharacter + "`"
        );
      }
      return { isToken: false, value: substring };
    });
    if (locale.localize.preprocessor) {
      parts = locale.localize.preprocessor(originalDate, parts);
    }
    const formatterOptions = {
      firstWeekContainsDate,
      weekStartsOn,
      locale
    };
    return parts.map((part) => {
      if (!part.isToken) return part.value;
      const token = part.value;
      if (!(options == null ? void 0 : options.useAdditionalWeekYearTokens) && isProtectedWeekYearToken(token) || !(options == null ? void 0 : options.useAdditionalDayOfYearTokens) && isProtectedDayOfYearToken(token)) {
        warnOrThrowProtectedError(token, formatStr, String(date2));
      }
      const formatter = formatters[token[0]];
      return formatter(originalDate, token, locale.localize, formatterOptions);
    }).join("");
  }
  __name(format, "format");
  function cleanEscapedString(input) {
    const matched = input.match(escapedStringRegExp);
    if (!matched) {
      return input;
    }
    return matched[1].replace(doubleQuoteRegExp, "'");
  }
  __name(cleanEscapedString, "cleanEscapedString");

  // node_modules/date-fns/formatDistance.mjs
  function formatDistance2(date2, baseDate, options) {
    var _a121, _b93;
    const defaultOptions4 = getDefaultOptions();
    const locale = (_b93 = (_a121 = options == null ? void 0 : options.locale) != null ? _a121 : defaultOptions4.locale) != null ? _b93 : enUS;
    const minutesInAlmostTwoDays = 2520;
    const comparison = compareAsc(date2, baseDate);
    if (isNaN(comparison)) {
      throw new RangeError("Invalid time value");
    }
    const localizeOptions = Object.assign({}, options, {
      addSuffix: options == null ? void 0 : options.addSuffix,
      comparison
    });
    let dateLeft;
    let dateRight;
    if (comparison > 0) {
      dateLeft = toDate(baseDate);
      dateRight = toDate(date2);
    } else {
      dateLeft = toDate(date2);
      dateRight = toDate(baseDate);
    }
    const seconds = differenceInSeconds(dateRight, dateLeft);
    const offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1e3;
    const minutes = Math.round((seconds - offsetInSeconds) / 60);
    let months;
    if (minutes < 2) {
      if (options == null ? void 0 : options.includeSeconds) {
        if (seconds < 5) {
          return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
        } else if (seconds < 10) {
          return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
        } else if (seconds < 20) {
          return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
        } else if (seconds < 40) {
          return locale.formatDistance("halfAMinute", 0, localizeOptions);
        } else if (seconds < 60) {
          return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
        } else {
          return locale.formatDistance("xMinutes", 1, localizeOptions);
        }
      } else {
        if (minutes === 0) {
          return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
        } else {
          return locale.formatDistance("xMinutes", minutes, localizeOptions);
        }
      }
    } else if (minutes < 45) {
      return locale.formatDistance("xMinutes", minutes, localizeOptions);
    } else if (minutes < 90) {
      return locale.formatDistance("aboutXHours", 1, localizeOptions);
    } else if (minutes < minutesInDay) {
      const hours = Math.round(minutes / 60);
      return locale.formatDistance("aboutXHours", hours, localizeOptions);
    } else if (minutes < minutesInAlmostTwoDays) {
      return locale.formatDistance("xDays", 1, localizeOptions);
    } else if (minutes < minutesInMonth) {
      const days = Math.round(minutes / minutesInDay);
      return locale.formatDistance("xDays", days, localizeOptions);
    } else if (minutes < minutesInMonth * 2) {
      months = Math.round(minutes / minutesInMonth);
      return locale.formatDistance("aboutXMonths", months, localizeOptions);
    }
    months = differenceInMonths(dateRight, dateLeft);
    if (months < 12) {
      const nearestMonth = Math.round(minutes / minutesInMonth);
      return locale.formatDistance("xMonths", nearestMonth, localizeOptions);
    } else {
      const monthsSinceStartOfYear = months % 12;
      const years = Math.trunc(months / 12);
      if (monthsSinceStartOfYear < 3) {
        return locale.formatDistance("aboutXYears", years, localizeOptions);
      } else if (monthsSinceStartOfYear < 9) {
        return locale.formatDistance("overXYears", years, localizeOptions);
      } else {
        return locale.formatDistance("almostXYears", years + 1, localizeOptions);
      }
    }
  }
  __name(formatDistance2, "formatDistance");

  // node_modules/date-fns/formatDistanceToNow.mjs
  function formatDistanceToNow(date2, options) {
    return formatDistance2(date2, constructNow(date2), options);
  }
  __name(formatDistanceToNow, "formatDistanceToNow");

  // client/src/components/ui/table.tsx
  var React38 = __toESM(require_react(), 1);
  var Table = React38.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React38.createElement("div", { className: "relative w-full overflow-auto" }, /* @__PURE__ */ React38.createElement(
      "table",
      __spreadValues({
        ref,
        className: cn("w-full caption-bottom text-sm", className)
      }, props)
    ));
  });
  Table.displayName = "Table";
  var TableHeader = React38.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React38.createElement("thead", __spreadValues({ ref, className: cn("[&_tr]:border-b", className) }, props));
  });
  TableHeader.displayName = "TableHeader";
  var TableBody = React38.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React38.createElement(
      "tbody",
      __spreadValues({
        ref,
        className: cn("[&_tr:last-child]:border-0", className)
      }, props)
    );
  });
  TableBody.displayName = "TableBody";
  var TableFooter = React38.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React38.createElement(
      "tfoot",
      __spreadValues({
        ref,
        className: cn(
          "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
          className
        )
      }, props)
    );
  });
  TableFooter.displayName = "TableFooter";
  var TableRow = React38.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React38.createElement(
      "tr",
      __spreadValues({
        ref,
        className: cn(
          "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
          className
        )
      }, props)
    );
  });
  TableRow.displayName = "TableRow";
  var TableHead = React38.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React38.createElement(
      "th",
      __spreadValues({
        ref,
        className: cn(
          "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
          className
        )
      }, props)
    );
  });
  TableHead.displayName = "TableHead";
  var TableCell = React38.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React38.createElement(
      "td",
      __spreadValues({
        ref,
        className: cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)
      }, props)
    );
  });
  TableCell.displayName = "TableCell";
  var TableCaption = React38.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React38.createElement(
      "caption",
      __spreadValues({
        ref,
        className: cn("mt-4 text-sm text-muted-foreground", className)
      }, props)
    );
  });
  TableCaption.displayName = "TableCaption";

  // client/src/components/ui/badge.tsx
  var React39 = __toESM(require_react(), 1);
  var badgeVariants = cva(
    "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
    {
      variants: {
        variant: {
          default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
          secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
          destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
          outline: "text-foreground"
        }
      },
      defaultVariants: {
        variant: "default"
      }
    }
  );
  function Badge(_a121) {
    var _b93 = _a121, { className, variant } = _b93, props = __objRest(_b93, ["className", "variant"]);
    return /* @__PURE__ */ React39.createElement("div", __spreadValues({ className: cn(badgeVariants({ variant }), className) }, props));
  }
  __name(Badge, "Badge");

  // client/src/components/ui/skeleton.tsx
  function Skeleton(_a121) {
    var _b93 = _a121, {
      className
    } = _b93, props = __objRest(_b93, [
      "className"
    ]);
    return /* @__PURE__ */ React.createElement(
      "div",
      __spreadValues({
        className: cn("animate-pulse rounded-md bg-muted", className)
      }, props)
    );
  }
  __name(Skeleton, "Skeleton");

  // client/src/components/ui/select.tsx
  var React52 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-select/dist/index.mjs
  var React51 = __toESM(require_react(), 1);
  var ReactDOM5 = __toESM(require_react_dom(), 1);

  // node_modules/@radix-ui/number/dist/index.mjs
  function clamp2(value, [min2, max2]) {
    return Math.min(max2, Math.max(min2, value));
  }
  __name(clamp2, "clamp");

  // node_modules/@radix-ui/react-direction/dist/index.mjs
  var React40 = __toESM(require_react(), 1);
  var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
  var DirectionContext = React40.createContext(void 0);
  function useDirection(localDir) {
    const globalDir = React40.useContext(DirectionContext);
    return localDir || globalDir || "ltr";
  }
  __name(useDirection, "useDirection");

  // node_modules/@radix-ui/react-focus-guards/dist/index.mjs
  var React41 = __toESM(require_react(), 1);
  var count3 = 0;
  function useFocusGuards() {
    React41.useEffect(() => {
      var _a121, _b93;
      const edgeGuards = document.querySelectorAll("[data-radix-focus-guard]");
      document.body.insertAdjacentElement("afterbegin", (_a121 = edgeGuards[0]) != null ? _a121 : createFocusGuard());
      document.body.insertAdjacentElement("beforeend", (_b93 = edgeGuards[1]) != null ? _b93 : createFocusGuard());
      count3++;
      return () => {
        if (count3 === 1) {
          document.querySelectorAll("[data-radix-focus-guard]").forEach((node) => node.remove());
        }
        count3--;
      };
    }, []);
  }
  __name(useFocusGuards, "useFocusGuards");
  function createFocusGuard() {
    const element = document.createElement("span");
    element.setAttribute("data-radix-focus-guard", "");
    element.tabIndex = 0;
    element.style.outline = "none";
    element.style.opacity = "0";
    element.style.position = "fixed";
    element.style.pointerEvents = "none";
    return element;
  }
  __name(createFocusGuard, "createFocusGuard");

  // node_modules/@radix-ui/react-focus-scope/dist/index.mjs
  var React42 = __toESM(require_react(), 1);
  var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
  var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
  var AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
  var EVENT_OPTIONS = { bubbles: false, cancelable: true };
  var FOCUS_SCOPE_NAME = "FocusScope";
  var FocusScope = React42.forwardRef((props, forwardedRef) => {
    const _a121 = props, {
      loop = false,
      trapped = false,
      onMountAutoFocus: onMountAutoFocusProp,
      onUnmountAutoFocus: onUnmountAutoFocusProp
    } = _a121, scopeProps = __objRest(_a121, [
      "loop",
      "trapped",
      "onMountAutoFocus",
      "onUnmountAutoFocus"
    ]);
    const [container, setContainer] = React42.useState(null);
    const onMountAutoFocus = useCallbackRef(onMountAutoFocusProp);
    const onUnmountAutoFocus = useCallbackRef(onUnmountAutoFocusProp);
    const lastFocusedElementRef = React42.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContainer(node));
    const focusScope = React42.useRef({
      paused: false,
      pause() {
        this.paused = true;
      },
      resume() {
        this.paused = false;
      }
    }).current;
    React42.useEffect(() => {
      if (trapped) {
        let handleFocusIn2 = /* @__PURE__ */ __name(function(event) {
          if (focusScope.paused || !container) return;
          const target = event.target;
          if (container.contains(target)) {
            lastFocusedElementRef.current = target;
          } else {
            focus(lastFocusedElementRef.current, { select: true });
          }
        }, "handleFocusIn2"), handleFocusOut2 = /* @__PURE__ */ __name(function(event) {
          if (focusScope.paused || !container) return;
          const relatedTarget = event.relatedTarget;
          if (relatedTarget === null) return;
          if (!container.contains(relatedTarget)) {
            focus(lastFocusedElementRef.current, { select: true });
          }
        }, "handleFocusOut2"), handleMutations2 = /* @__PURE__ */ __name(function(mutations) {
          const focusedElement = document.activeElement;
          if (focusedElement !== document.body) return;
          for (const mutation of mutations) {
            if (mutation.removedNodes.length > 0) focus(container);
          }
        }, "handleMutations2");
        var handleFocusIn = handleFocusIn2, handleFocusOut = handleFocusOut2, handleMutations = handleMutations2;
        document.addEventListener("focusin", handleFocusIn2);
        document.addEventListener("focusout", handleFocusOut2);
        const mutationObserver = new MutationObserver(handleMutations2);
        if (container) mutationObserver.observe(container, { childList: true, subtree: true });
        return () => {
          document.removeEventListener("focusin", handleFocusIn2);
          document.removeEventListener("focusout", handleFocusOut2);
          mutationObserver.disconnect();
        };
      }
    }, [trapped, container, focusScope.paused]);
    React42.useEffect(() => {
      if (container) {
        focusScopesStack.add(focusScope);
        const previouslyFocusedElement = document.activeElement;
        const hasFocusedCandidate = container.contains(previouslyFocusedElement);
        if (!hasFocusedCandidate) {
          const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);
          container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          container.dispatchEvent(mountEvent);
          if (!mountEvent.defaultPrevented) {
            focusFirst2(removeLinks(getTabbableCandidates2(container)), { select: true });
            if (document.activeElement === previouslyFocusedElement) {
              focus(container);
            }
          }
        }
        return () => {
          container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
          setTimeout(() => {
            const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);
            container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            container.dispatchEvent(unmountEvent);
            if (!unmountEvent.defaultPrevented) {
              focus(previouslyFocusedElement != null ? previouslyFocusedElement : document.body, { select: true });
            }
            container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            focusScopesStack.remove(focusScope);
          }, 0);
        };
      }
    }, [container, onMountAutoFocus, onUnmountAutoFocus, focusScope]);
    const handleKeyDown = React42.useCallback(
      (event) => {
        if (!loop && !trapped) return;
        if (focusScope.paused) return;
        const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
        const focusedElement = document.activeElement;
        if (isTabKey && focusedElement) {
          const container2 = event.currentTarget;
          const [first, last] = getTabbableEdges(container2);
          const hasTabbableElementsInside = first && last;
          if (!hasTabbableElementsInside) {
            if (focusedElement === container2) event.preventDefault();
          } else {
            if (!event.shiftKey && focusedElement === last) {
              event.preventDefault();
              if (loop) focus(first, { select: true });
            } else if (event.shiftKey && focusedElement === first) {
              event.preventDefault();
              if (loop) focus(last, { select: true });
            }
          }
        }
      },
      [loop, trapped, focusScope.paused]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(Primitive.div, __spreadProps(__spreadValues({ tabIndex: -1 }, scopeProps), { ref: composedRefs, onKeyDown: handleKeyDown }));
  });
  FocusScope.displayName = FOCUS_SCOPE_NAME;
  function focusFirst2(candidates, { select = false } = {}) {
    const previouslyFocusedElement = document.activeElement;
    for (const candidate of candidates) {
      focus(candidate, { select });
      if (document.activeElement !== previouslyFocusedElement) return;
    }
  }
  __name(focusFirst2, "focusFirst");
  function getTabbableEdges(container) {
    const candidates = getTabbableCandidates2(container);
    const first = findVisible(candidates, container);
    const last = findVisible(candidates.reverse(), container);
    return [first, last];
  }
  __name(getTabbableEdges, "getTabbableEdges");
  function getTabbableCandidates2(container) {
    const nodes = [];
    const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
      acceptNode: /* @__PURE__ */ __name((node) => {
        const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
        if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;
        return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
      }, "acceptNode")
    });
    while (walker.nextNode()) nodes.push(walker.currentNode);
    return nodes;
  }
  __name(getTabbableCandidates2, "getTabbableCandidates");
  function findVisible(elements, container) {
    for (const element of elements) {
      if (!isHidden(element, { upTo: container })) return element;
    }
  }
  __name(findVisible, "findVisible");
  function isHidden(node, { upTo }) {
    if (getComputedStyle(node).visibility === "hidden") return true;
    while (node) {
      if (upTo !== void 0 && node === upTo) return false;
      if (getComputedStyle(node).display === "none") return true;
      node = node.parentElement;
    }
    return false;
  }
  __name(isHidden, "isHidden");
  function isSelectableInput(element) {
    return element instanceof HTMLInputElement && "select" in element;
  }
  __name(isSelectableInput, "isSelectableInput");
  function focus(element, { select = false } = {}) {
    if (element && element.focus) {
      const previouslyFocusedElement = document.activeElement;
      element.focus({ preventScroll: true });
      if (element !== previouslyFocusedElement && isSelectableInput(element) && select)
        element.select();
    }
  }
  __name(focus, "focus");
  var focusScopesStack = createFocusScopesStack();
  function createFocusScopesStack() {
    let stack = [];
    return {
      add(focusScope) {
        const activeFocusScope = stack[0];
        if (focusScope !== activeFocusScope) {
          activeFocusScope == null ? void 0 : activeFocusScope.pause();
        }
        stack = arrayRemove(stack, focusScope);
        stack.unshift(focusScope);
      },
      remove(focusScope) {
        var _a121;
        stack = arrayRemove(stack, focusScope);
        (_a121 = stack[0]) == null ? void 0 : _a121.resume();
      }
    };
  }
  __name(createFocusScopesStack, "createFocusScopesStack");
  function arrayRemove(array, item) {
    const updatedArray = [...array];
    const index3 = updatedArray.indexOf(item);
    if (index3 !== -1) {
      updatedArray.splice(index3, 1);
    }
    return updatedArray;
  }
  __name(arrayRemove, "arrayRemove");
  function removeLinks(items) {
    return items.filter((item) => item.tagName !== "A");
  }
  __name(removeLinks, "removeLinks");

  // node_modules/@radix-ui/react-use-previous/dist/index.mjs
  var React43 = __toESM(require_react(), 1);
  function usePrevious(value) {
    const ref = React43.useRef({ value, previous: value });
    return React43.useMemo(() => {
      if (ref.current.value !== value) {
        ref.current.previous = ref.current.value;
        ref.current.value = value;
      }
      return ref.current.previous;
    }, [value]);
  }
  __name(usePrevious, "usePrevious");

  // node_modules/aria-hidden/dist/es2015/index.js
  var getDefaultParent = /* @__PURE__ */ __name(function(originalTarget) {
    if (typeof document === "undefined") {
      return null;
    }
    var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
    return sampleTarget.ownerDocument.body;
  }, "getDefaultParent");
  var counterMap = /* @__PURE__ */ new WeakMap();
  var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
  var markerMap = {};
  var lockCount = 0;
  var unwrapHost = /* @__PURE__ */ __name(function(node) {
    return node && (node.host || unwrapHost(node.parentNode));
  }, "unwrapHost");
  var correctTargets = /* @__PURE__ */ __name(function(parent, targets) {
    return targets.map(function(target) {
      if (parent.contains(target)) {
        return target;
      }
      var correctedTarget = unwrapHost(target);
      if (correctedTarget && parent.contains(correctedTarget)) {
        return correctedTarget;
      }
      console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
      return null;
    }).filter(function(x) {
      return Boolean(x);
    });
  }, "correctTargets");
  var applyAttributeToOthers = /* @__PURE__ */ __name(function(originalTarget, parentNode, markerName, controlAttribute) {
    var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    if (!markerMap[markerName]) {
      markerMap[markerName] = /* @__PURE__ */ new WeakMap();
    }
    var markerCounter = markerMap[markerName];
    var hiddenNodes = [];
    var elementsToKeep = /* @__PURE__ */ new Set();
    var elementsToStop = new Set(targets);
    var keep = /* @__PURE__ */ __name(function(el) {
      if (!el || elementsToKeep.has(el)) {
        return;
      }
      elementsToKeep.add(el);
      keep(el.parentNode);
    }, "keep");
    targets.forEach(keep);
    var deep = /* @__PURE__ */ __name(function(parent) {
      if (!parent || elementsToStop.has(parent)) {
        return;
      }
      Array.prototype.forEach.call(parent.children, function(node) {
        if (elementsToKeep.has(node)) {
          deep(node);
        } else {
          try {
            var attr = node.getAttribute(controlAttribute);
            var alreadyHidden = attr !== null && attr !== "false";
            var counterValue = (counterMap.get(node) || 0) + 1;
            var markerValue = (markerCounter.get(node) || 0) + 1;
            counterMap.set(node, counterValue);
            markerCounter.set(node, markerValue);
            hiddenNodes.push(node);
            if (counterValue === 1 && alreadyHidden) {
              uncontrolledNodes.set(node, true);
            }
            if (markerValue === 1) {
              node.setAttribute(markerName, "true");
            }
            if (!alreadyHidden) {
              node.setAttribute(controlAttribute, "true");
            }
          } catch (e) {
            console.error("aria-hidden: cannot operate on ", node, e);
          }
        }
      });
    }, "deep");
    deep(parentNode);
    elementsToKeep.clear();
    lockCount++;
    return function() {
      hiddenNodes.forEach(function(node) {
        var counterValue = counterMap.get(node) - 1;
        var markerValue = markerCounter.get(node) - 1;
        counterMap.set(node, counterValue);
        markerCounter.set(node, markerValue);
        if (!counterValue) {
          if (!uncontrolledNodes.has(node)) {
            node.removeAttribute(controlAttribute);
          }
          uncontrolledNodes.delete(node);
        }
        if (!markerValue) {
          node.removeAttribute(markerName);
        }
      });
      lockCount--;
      if (!lockCount) {
        counterMap = /* @__PURE__ */ new WeakMap();
        counterMap = /* @__PURE__ */ new WeakMap();
        uncontrolledNodes = /* @__PURE__ */ new WeakMap();
        markerMap = {};
      }
    };
  }, "applyAttributeToOthers");
  var hideOthers = /* @__PURE__ */ __name(function(originalTarget, parentNode, markerName) {
    if (markerName === void 0) {
      markerName = "data-aria-hidden";
    }
    var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
    var activeParentNode = parentNode || getDefaultParent(originalTarget);
    if (!activeParentNode) {
      return function() {
        return null;
      };
    }
    targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
    return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
  }, "hideOthers");

  // node_modules/tslib/tslib.es6.mjs
  var __assign = /* @__PURE__ */ __name(function() {
    __assign = Object.assign || /* @__PURE__ */ __name(function __assign2(t3) {
      for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2)) t3[p2] = s2[p2];
      }
      return t3;
    }, "__assign");
    return __assign.apply(this, arguments);
  }, "__assign");
  function __rest(s2, e) {
    var t3 = {};
    for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t3[p2] = s2[p2];
    if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
      for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
        if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
          t3[p2[i2]] = s2[p2[i2]];
      }
    return t3;
  }
  __name(__rest, "__rest");
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i2 = 0, l = from.length, ar; i2 < l; i2++) {
      if (ar || !(i2 in from)) {
        if (!ar) ar = Array.prototype.slice.call(from, 0, i2);
        ar[i2] = from[i2];
      }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  __name(__spreadArray, "__spreadArray");

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var React50 = __toESM(require_react());

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var React46 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/constants.js
  var zeroRightClassName = "right-scroll-bar-position";
  var fullWidthClassName = "width-before-scroll-bar";
  var noScrollbarsClassName = "with-scroll-bars-hidden";
  var removedBarSizeVariable = "--removed-body-scroll-bar-size";

  // node_modules/use-callback-ref/dist/es2015/assignRef.js
  function assignRef(ref, value) {
    if (typeof ref === "function") {
      ref(value);
    } else if (ref) {
      ref.current = value;
    }
    return ref;
  }
  __name(assignRef, "assignRef");

  // node_modules/use-callback-ref/dist/es2015/useRef.js
  var import_react9 = __toESM(require_react());
  function useCallbackRef2(initialValue, callback) {
    var ref = (0, import_react9.useState)(function() {
      return {
        // value
        value: initialValue,
        // last callback
        callback,
        // "memoized" public interface
        facade: {
          get current() {
            return ref.value;
          },
          set current(value) {
            var last = ref.value;
            if (last !== value) {
              ref.value = value;
              ref.callback(value, last);
            }
          }
        }
      };
    })[0];
    ref.callback = callback;
    return ref.facade;
  }
  __name(useCallbackRef2, "useCallbackRef");

  // node_modules/use-callback-ref/dist/es2015/useMergeRef.js
  var React44 = __toESM(require_react());
  var useIsomorphicLayoutEffect2 = typeof window !== "undefined" ? React44.useLayoutEffect : React44.useEffect;
  var currentValues = /* @__PURE__ */ new WeakMap();
  function useMergeRefs(refs, defaultValue2) {
    var callbackRef = useCallbackRef2(defaultValue2 || null, function(newValue) {
      return refs.forEach(function(ref) {
        return assignRef(ref, newValue);
      });
    });
    useIsomorphicLayoutEffect2(function() {
      var oldValue = currentValues.get(callbackRef);
      if (oldValue) {
        var prevRefs_1 = new Set(oldValue);
        var nextRefs_1 = new Set(refs);
        var current_1 = callbackRef.current;
        prevRefs_1.forEach(function(ref) {
          if (!nextRefs_1.has(ref)) {
            assignRef(ref, null);
          }
        });
        nextRefs_1.forEach(function(ref) {
          if (!prevRefs_1.has(ref)) {
            assignRef(ref, current_1);
          }
        });
      }
      currentValues.set(callbackRef, refs);
    }, [refs]);
    return callbackRef;
  }
  __name(useMergeRefs, "useMergeRefs");

  // node_modules/use-sidecar/dist/es2015/medium.js
  function ItoI(a) {
    return a;
  }
  __name(ItoI, "ItoI");
  function innerCreateMedium(defaults, middleware) {
    if (middleware === void 0) {
      middleware = ItoI;
    }
    var buffer = [];
    var assigned = false;
    var medium = {
      read: /* @__PURE__ */ __name(function() {
        if (assigned) {
          throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
        }
        if (buffer.length) {
          return buffer[buffer.length - 1];
        }
        return defaults;
      }, "read"),
      useMedium: /* @__PURE__ */ __name(function(data) {
        var item = middleware(data, assigned);
        buffer.push(item);
        return function() {
          buffer = buffer.filter(function(x) {
            return x !== item;
          });
        };
      }, "useMedium"),
      assignSyncMedium: /* @__PURE__ */ __name(function(cb) {
        assigned = true;
        while (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
        }
        buffer = {
          push: /* @__PURE__ */ __name(function(x) {
            return cb(x);
          }, "push"),
          filter: /* @__PURE__ */ __name(function() {
            return buffer;
          }, "filter")
        };
      }, "assignSyncMedium"),
      assignMedium: /* @__PURE__ */ __name(function(cb) {
        assigned = true;
        var pendingQueue = [];
        if (buffer.length) {
          var cbs = buffer;
          buffer = [];
          cbs.forEach(cb);
          pendingQueue = buffer;
        }
        var executeQueue = /* @__PURE__ */ __name(function() {
          var cbs2 = pendingQueue;
          pendingQueue = [];
          cbs2.forEach(cb);
        }, "executeQueue");
        var cycle = /* @__PURE__ */ __name(function() {
          return Promise.resolve().then(executeQueue);
        }, "cycle");
        cycle();
        buffer = {
          push: /* @__PURE__ */ __name(function(x) {
            pendingQueue.push(x);
            cycle();
          }, "push"),
          filter: /* @__PURE__ */ __name(function(filter) {
            pendingQueue = pendingQueue.filter(filter);
            return buffer;
          }, "filter")
        };
      }, "assignMedium")
    };
    return medium;
  }
  __name(innerCreateMedium, "innerCreateMedium");
  function createSidecarMedium(options) {
    if (options === void 0) {
      options = {};
    }
    var medium = innerCreateMedium(null);
    medium.options = __assign({ async: true, ssr: false }, options);
    return medium;
  }
  __name(createSidecarMedium, "createSidecarMedium");

  // node_modules/use-sidecar/dist/es2015/exports.js
  var React45 = __toESM(require_react());
  var SideCar = /* @__PURE__ */ __name(function(_a121) {
    var sideCar = _a121.sideCar, rest = __rest(_a121, ["sideCar"]);
    if (!sideCar) {
      throw new Error("Sidecar: please provide `sideCar` property to import the right car");
    }
    var Target2 = sideCar.read();
    if (!Target2) {
      throw new Error("Sidecar medium not found");
    }
    return React45.createElement(Target2, __assign({}, rest));
  }, "SideCar");
  SideCar.isSideCarExport = true;
  function exportSidecar(medium, exported) {
    medium.useMedium(exported);
    return SideCar;
  }
  __name(exportSidecar, "exportSidecar");

  // node_modules/react-remove-scroll/dist/es2015/medium.js
  var effectCar = createSidecarMedium();

  // node_modules/react-remove-scroll/dist/es2015/UI.js
  var nothing = /* @__PURE__ */ __name(function() {
    return;
  }, "nothing");
  var RemoveScroll = React46.forwardRef(function(props, parentRef) {
    var ref = React46.useRef(null);
    var _a121 = React46.useState({
      onScrollCapture: nothing,
      onWheelCapture: nothing,
      onTouchMoveCapture: nothing
    }), callbacks = _a121[0], setCallbacks = _a121[1];
    var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b93 = props.as, Container = _b93 === void 0 ? "div" : _b93, gapMode = props.gapMode, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
    var SideCar2 = sideCar;
    var containerRef = useMergeRefs([ref, parentRef]);
    var containerProps = __assign(__assign({}, rest), callbacks);
    return React46.createElement(
      React46.Fragment,
      null,
      enabled && React46.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
      forwardProps ? React46.cloneElement(React46.Children.only(children), __assign(__assign({}, containerProps), { ref: containerRef })) : React46.createElement(Container, __assign({}, containerProps, { className, ref: containerRef }), children)
    );
  });
  RemoveScroll.defaultProps = {
    enabled: true,
    removeScrollBar: true,
    inert: false
  };
  RemoveScroll.classNames = {
    fullWidth: fullWidthClassName,
    zeroRight: zeroRightClassName
  };

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var React49 = __toESM(require_react());

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var React48 = __toESM(require_react());

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var React47 = __toESM(require_react());

  // node_modules/get-nonce/dist/es2015/index.js
  var currentNonce;
  var getNonce = /* @__PURE__ */ __name(function() {
    if (currentNonce) {
      return currentNonce;
    }
    if (typeof __webpack_nonce__ !== "undefined") {
      return __webpack_nonce__;
    }
    return void 0;
  }, "getNonce");

  // node_modules/react-style-singleton/dist/es2015/singleton.js
  function makeStyleTag() {
    if (!document)
      return null;
    var tag = document.createElement("style");
    tag.type = "text/css";
    var nonce = getNonce();
    if (nonce) {
      tag.setAttribute("nonce", nonce);
    }
    return tag;
  }
  __name(makeStyleTag, "makeStyleTag");
  function injectStyles(tag, css) {
    if (tag.styleSheet) {
      tag.styleSheet.cssText = css;
    } else {
      tag.appendChild(document.createTextNode(css));
    }
  }
  __name(injectStyles, "injectStyles");
  function insertStyleTag(tag) {
    var head = document.head || document.getElementsByTagName("head")[0];
    head.appendChild(tag);
  }
  __name(insertStyleTag, "insertStyleTag");
  var stylesheetSingleton = /* @__PURE__ */ __name(function() {
    var counter = 0;
    var stylesheet = null;
    return {
      add: /* @__PURE__ */ __name(function(style) {
        if (counter == 0) {
          if (stylesheet = makeStyleTag()) {
            injectStyles(stylesheet, style);
            insertStyleTag(stylesheet);
          }
        }
        counter++;
      }, "add"),
      remove: /* @__PURE__ */ __name(function() {
        counter--;
        if (!counter && stylesheet) {
          stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
          stylesheet = null;
        }
      }, "remove")
    };
  }, "stylesheetSingleton");

  // node_modules/react-style-singleton/dist/es2015/hook.js
  var styleHookSingleton = /* @__PURE__ */ __name(function() {
    var sheet = stylesheetSingleton();
    return function(styles, isDynamic) {
      React47.useEffect(function() {
        sheet.add(styles);
        return function() {
          sheet.remove();
        };
      }, [styles && isDynamic]);
    };
  }, "styleHookSingleton");

  // node_modules/react-style-singleton/dist/es2015/component.js
  var styleSingleton = /* @__PURE__ */ __name(function() {
    var useStyle = styleHookSingleton();
    var Sheet2 = /* @__PURE__ */ __name(function(_a121) {
      var styles = _a121.styles, dynamic = _a121.dynamic;
      useStyle(styles, dynamic);
      return null;
    }, "Sheet");
    return Sheet2;
  }, "styleSingleton");

  // node_modules/react-remove-scroll-bar/dist/es2015/utils.js
  var zeroGap = {
    left: 0,
    top: 0,
    right: 0,
    gap: 0
  };
  var parse2 = /* @__PURE__ */ __name(function(x) {
    return parseInt(x || "", 10) || 0;
  }, "parse");
  var getOffset = /* @__PURE__ */ __name(function(gapMode) {
    var cs = window.getComputedStyle(document.body);
    var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
    var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
    var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
    return [parse2(left), parse2(top), parse2(right)];
  }, "getOffset");
  var getGapWidth = /* @__PURE__ */ __name(function(gapMode) {
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    if (typeof window === "undefined") {
      return zeroGap;
    }
    var offsets = getOffset(gapMode);
    var documentWidth = document.documentElement.clientWidth;
    var windowWidth = window.innerWidth;
    return {
      left: offsets[0],
      top: offsets[1],
      right: offsets[2],
      gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
    };
  }, "getGapWidth");

  // node_modules/react-remove-scroll-bar/dist/es2015/component.js
  var Style = styleSingleton();
  var lockAttribute = "data-scroll-locked";
  var getStyles = /* @__PURE__ */ __name(function(_a121, allowRelative, gapMode, important) {
    var left = _a121.left, top = _a121.top, right = _a121.right, gap = _a121.gap;
    if (gapMode === void 0) {
      gapMode = "margin";
    }
    return "\n  .".concat(noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
      allowRelative && "position: relative ".concat(important, ";"),
      gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
      gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
    ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(zeroRightClassName, " .").concat(zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(fullWidthClassName, " .").concat(fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(lockAttribute, "] {\n    ").concat(removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
  }, "getStyles");
  var getCurrentUseCounter = /* @__PURE__ */ __name(function() {
    var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
    return isFinite(counter) ? counter : 0;
  }, "getCurrentUseCounter");
  var useLockAttribute = /* @__PURE__ */ __name(function() {
    React48.useEffect(function() {
      document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
      return function() {
        var newCounter = getCurrentUseCounter() - 1;
        if (newCounter <= 0) {
          document.body.removeAttribute(lockAttribute);
        } else {
          document.body.setAttribute(lockAttribute, newCounter.toString());
        }
      };
    }, []);
  }, "useLockAttribute");
  var RemoveScrollBar = /* @__PURE__ */ __name(function(_a121) {
    var noRelative = _a121.noRelative, noImportant = _a121.noImportant, _b93 = _a121.gapMode, gapMode = _b93 === void 0 ? "margin" : _b93;
    useLockAttribute();
    var gap = React48.useMemo(function() {
      return getGapWidth(gapMode);
    }, [gapMode]);
    return React48.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
  }, "RemoveScrollBar");

  // node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
  var passiveSupported = false;
  if (typeof window !== "undefined") {
    try {
      options = Object.defineProperty({}, "passive", {
        get: /* @__PURE__ */ __name(function() {
          passiveSupported = true;
          return true;
        }, "get")
      });
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (err) {
      passiveSupported = false;
    }
  }
  var options;
  var nonPassive = passiveSupported ? { passive: false } : false;

  // node_modules/react-remove-scroll/dist/es2015/handleScroll.js
  var alwaysContainsScroll = /* @__PURE__ */ __name(function(node) {
    return node.tagName === "TEXTAREA";
  }, "alwaysContainsScroll");
  var elementCanBeScrolled = /* @__PURE__ */ __name(function(node, overflow) {
    if (!(node instanceof Element)) {
      return false;
    }
    var styles = window.getComputedStyle(node);
    return (
      // not-not-scrollable
      styles[overflow] !== "hidden" && // contains scroll inside self
      !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
    );
  }, "elementCanBeScrolled");
  var elementCouldBeVScrolled = /* @__PURE__ */ __name(function(node) {
    return elementCanBeScrolled(node, "overflowY");
  }, "elementCouldBeVScrolled");
  var elementCouldBeHScrolled = /* @__PURE__ */ __name(function(node) {
    return elementCanBeScrolled(node, "overflowX");
  }, "elementCouldBeHScrolled");
  var locationCouldBeScrolled = /* @__PURE__ */ __name(function(axis, node) {
    var ownerDocument = node.ownerDocument;
    var current = node;
    do {
      if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
        current = current.host;
      }
      var isScrollable2 = elementCouldBeScrolled(axis, current);
      if (isScrollable2) {
        var _a121 = getScrollVariables(axis, current), scrollHeight = _a121[1], clientHeight = _a121[2];
        if (scrollHeight > clientHeight) {
          return true;
        }
      }
      current = current.parentNode;
    } while (current && current !== ownerDocument.body);
    return false;
  }, "locationCouldBeScrolled");
  var getVScrollVariables = /* @__PURE__ */ __name(function(_a121) {
    var scrollTop = _a121.scrollTop, scrollHeight = _a121.scrollHeight, clientHeight = _a121.clientHeight;
    return [
      scrollTop,
      scrollHeight,
      clientHeight
    ];
  }, "getVScrollVariables");
  var getHScrollVariables = /* @__PURE__ */ __name(function(_a121) {
    var scrollLeft = _a121.scrollLeft, scrollWidth = _a121.scrollWidth, clientWidth = _a121.clientWidth;
    return [
      scrollLeft,
      scrollWidth,
      clientWidth
    ];
  }, "getHScrollVariables");
  var elementCouldBeScrolled = /* @__PURE__ */ __name(function(axis, node) {
    return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
  }, "elementCouldBeScrolled");
  var getScrollVariables = /* @__PURE__ */ __name(function(axis, node) {
    return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
  }, "getScrollVariables");
  var getDirectionFactor = /* @__PURE__ */ __name(function(axis, direction) {
    return axis === "h" && direction === "rtl" ? -1 : 1;
  }, "getDirectionFactor");
  var handleScroll = /* @__PURE__ */ __name(function(axis, endTarget, event, sourceDelta, noOverscroll) {
    var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
    var delta = directionFactor * sourceDelta;
    var target = event.target;
    var targetInLock = endTarget.contains(target);
    var shouldCancelScroll = false;
    var isDeltaPositive = delta > 0;
    var availableScroll = 0;
    var availableScrollTop = 0;
    do {
      var _a121 = getScrollVariables(axis, target), position = _a121[0], scroll_1 = _a121[1], capacity = _a121[2];
      var elementScroll = scroll_1 - capacity - directionFactor * position;
      if (position || elementScroll) {
        if (elementCouldBeScrolled(axis, target)) {
          availableScroll += elementScroll;
          availableScrollTop += position;
        }
      }
      if (target instanceof ShadowRoot) {
        target = target.host;
      } else {
        target = target.parentNode;
      }
    } while (
      // portaled content
      !targetInLock && target !== document.body || // self content
      targetInLock && (endTarget.contains(target) || endTarget === target)
    );
    if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
      shouldCancelScroll = true;
    } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
      shouldCancelScroll = true;
    }
    return shouldCancelScroll;
  }, "handleScroll");

  // node_modules/react-remove-scroll/dist/es2015/SideEffect.js
  var getTouchXY = /* @__PURE__ */ __name(function(event) {
    return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
  }, "getTouchXY");
  var getDeltaXY = /* @__PURE__ */ __name(function(event) {
    return [event.deltaX, event.deltaY];
  }, "getDeltaXY");
  var extractRef = /* @__PURE__ */ __name(function(ref) {
    return ref && "current" in ref ? ref.current : ref;
  }, "extractRef");
  var deltaCompare = /* @__PURE__ */ __name(function(x, y) {
    return x[0] === y[0] && x[1] === y[1];
  }, "deltaCompare");
  var generateStyle = /* @__PURE__ */ __name(function(id) {
    return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
  }, "generateStyle");
  var idCounter = 0;
  var lockStack = [];
  function RemoveScrollSideCar(props) {
    var shouldPreventQueue = React49.useRef([]);
    var touchStartRef = React49.useRef([0, 0]);
    var activeAxis = React49.useRef();
    var id = React49.useState(idCounter++)[0];
    var Style2 = React49.useState(styleSingleton)[0];
    var lastProps = React49.useRef(props);
    React49.useEffect(function() {
      lastProps.current = props;
    }, [props]);
    React49.useEffect(function() {
      if (props.inert) {
        document.body.classList.add("block-interactivity-".concat(id));
        var allow_1 = __spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
        allow_1.forEach(function(el) {
          return el.classList.add("allow-interactivity-".concat(id));
        });
        return function() {
          document.body.classList.remove("block-interactivity-".concat(id));
          allow_1.forEach(function(el) {
            return el.classList.remove("allow-interactivity-".concat(id));
          });
        };
      }
      return;
    }, [props.inert, props.lockRef.current, props.shards]);
    var shouldCancelEvent = React49.useCallback(function(event, parent) {
      if ("touches" in event && event.touches.length === 2 || event.type === "wheel" && event.ctrlKey) {
        return !lastProps.current.allowPinchZoom;
      }
      var touch = getTouchXY(event);
      var touchStart = touchStartRef.current;
      var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
      var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
      var currentAxis;
      var target = event.target;
      var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
      if ("touches" in event && moveDirection === "h" && target.type === "range") {
        return false;
      }
      var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      if (!canBeScrolledInMainDirection) {
        return true;
      }
      if (canBeScrolledInMainDirection) {
        currentAxis = moveDirection;
      } else {
        currentAxis = moveDirection === "v" ? "h" : "v";
        canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
      }
      if (!canBeScrolledInMainDirection) {
        return false;
      }
      if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
        activeAxis.current = currentAxis;
      }
      if (!currentAxis) {
        return true;
      }
      var cancelingAxis = activeAxis.current || currentAxis;
      return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
    }, []);
    var shouldPrevent = React49.useCallback(function(_event) {
      var event = _event;
      if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
        return;
      }
      var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
      var sourceEvent = shouldPreventQueue.current.filter(function(e) {
        return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);
      })[0];
      if (sourceEvent && sourceEvent.should) {
        if (event.cancelable) {
          event.preventDefault();
        }
        return;
      }
      if (!sourceEvent) {
        var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
          return node.contains(event.target);
        });
        var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
        if (shouldStop) {
          if (event.cancelable) {
            event.preventDefault();
          }
        }
      }
    }, []);
    var shouldCancel = React49.useCallback(function(name, delta, target, should) {
      var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
      shouldPreventQueue.current.push(event);
      setTimeout(function() {
        shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
          return e !== event;
        });
      }, 1);
    }, []);
    var scrollTouchStart = React49.useCallback(function(event) {
      touchStartRef.current = getTouchXY(event);
      activeAxis.current = void 0;
    }, []);
    var scrollWheel = React49.useCallback(function(event) {
      shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    var scrollTouchMove = React49.useCallback(function(event) {
      shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
    }, []);
    React49.useEffect(function() {
      lockStack.push(Style2);
      props.setCallbacks({
        onScrollCapture: scrollWheel,
        onWheelCapture: scrollWheel,
        onTouchMoveCapture: scrollTouchMove
      });
      document.addEventListener("wheel", shouldPrevent, nonPassive);
      document.addEventListener("touchmove", shouldPrevent, nonPassive);
      document.addEventListener("touchstart", scrollTouchStart, nonPassive);
      return function() {
        lockStack = lockStack.filter(function(inst) {
          return inst !== Style2;
        });
        document.removeEventListener("wheel", shouldPrevent, nonPassive);
        document.removeEventListener("touchmove", shouldPrevent, nonPassive);
        document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
      };
    }, []);
    var removeScrollBar = props.removeScrollBar, inert = props.inert;
    return React49.createElement(
      React49.Fragment,
      null,
      inert ? React49.createElement(Style2, { styles: generateStyle(id) }) : null,
      removeScrollBar ? React49.createElement(RemoveScrollBar, { gapMode: props.gapMode }) : null
    );
  }
  __name(RemoveScrollSideCar, "RemoveScrollSideCar");
  function getOutermostShadowParent(node) {
    var shadowParent = null;
    while (node !== null) {
      if (node instanceof ShadowRoot) {
        shadowParent = node.host;
        node = node.host;
      }
      node = node.parentNode;
    }
    return shadowParent;
  }
  __name(getOutermostShadowParent, "getOutermostShadowParent");

  // node_modules/react-remove-scroll/dist/es2015/sidecar.js
  var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

  // node_modules/react-remove-scroll/dist/es2015/Combination.js
  var ReactRemoveScroll = React50.forwardRef(function(props, ref) {
    return React50.createElement(RemoveScroll, __assign({}, props, { ref, sideCar: sidecar_default }));
  });
  ReactRemoveScroll.classNames = RemoveScroll.classNames;
  var Combination_default = ReactRemoveScroll;

  // node_modules/@radix-ui/react-select/dist/index.mjs
  var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
  var OPEN_KEYS = [" ", "Enter", "ArrowUp", "ArrowDown"];
  var SELECTION_KEYS = [" ", "Enter"];
  var SELECT_NAME = "Select";
  var [Collection2, useCollection2, createCollectionScope2] = createCollection(SELECT_NAME);
  var [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [
    createCollectionScope2,
    createPopperScope
  ]);
  var usePopperScope2 = createPopperScope();
  var [SelectProvider, useSelectContext] = createSelectContext(SELECT_NAME);
  var [SelectNativeOptionsProvider, useSelectNativeOptionsContext] = createSelectContext(SELECT_NAME);
  var Select = /* @__PURE__ */ __name((props) => {
    const {
      __scopeSelect,
      children,
      open: openProp,
      defaultOpen,
      onOpenChange,
      value: valueProp,
      defaultValue: defaultValue2,
      onValueChange,
      dir,
      name,
      autoComplete,
      disabled,
      required,
      form
    } = props;
    const popperScope = usePopperScope2(__scopeSelect);
    const [trigger, setTrigger] = React51.useState(null);
    const [valueNode, setValueNode] = React51.useState(null);
    const [valueNodeHasChildren, setValueNodeHasChildren] = React51.useState(false);
    const direction = useDirection(dir);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    const [value, setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue2,
      onChange: onValueChange
    });
    const triggerPointerDownPosRef = React51.useRef(null);
    const isFormControl = trigger ? form || !!trigger.closest("form") : true;
    const [nativeOptionsSet, setNativeOptionsSet] = React51.useState(/* @__PURE__ */ new Set());
    const nativeSelectKey = Array.from(nativeOptionsSet).map((option) => option.props.value).join(";");
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Root23, __spreadProps(__spreadValues({}, popperScope), { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
      SelectProvider,
      {
        required,
        scope: __scopeSelect,
        trigger,
        onTriggerChange: setTrigger,
        valueNode,
        onValueNodeChange: setValueNode,
        valueNodeHasChildren,
        onValueNodeHasChildrenChange: setValueNodeHasChildren,
        contentId: useId(),
        value,
        onValueChange: setValue,
        open,
        onOpenChange: setOpen,
        dir: direction,
        triggerPointerDownPosRef,
        disabled,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Collection2.Provider, { scope: __scopeSelect, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            SelectNativeOptionsProvider,
            {
              scope: props.__scopeSelect,
              onNativeOptionAdd: React51.useCallback((option) => {
                setNativeOptionsSet((prev) => new Set(prev).add(option));
              }, []),
              onNativeOptionRemove: React51.useCallback((option) => {
                setNativeOptionsSet((prev) => {
                  const optionsSet = new Set(prev);
                  optionsSet.delete(option);
                  return optionsSet;
                });
              }, []),
              children
            }
          ) }),
          isFormControl ? /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(
            BubbleSelect,
            {
              "aria-hidden": true,
              required,
              tabIndex: -1,
              name,
              autoComplete,
              value,
              onChange: /* @__PURE__ */ __name((event) => setValue(event.target.value), "onChange"),
              disabled,
              form,
              children: [
                value === void 0 ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("option", { value: "" }) : null,
                Array.from(nativeOptionsSet)
              ]
            },
            nativeSelectKey
          ) : null
        ]
      }
    ) }));
  }, "Select");
  Select.displayName = SELECT_NAME;
  var TRIGGER_NAME2 = "SelectTrigger";
  var SelectTrigger = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect, disabled = false } = _a121, triggerProps = __objRest(_a121, ["__scopeSelect", "disabled"]);
      const popperScope = usePopperScope2(__scopeSelect);
      const context = useSelectContext(TRIGGER_NAME2, __scopeSelect);
      const isDisabled = context.disabled || disabled;
      const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);
      const getItems = useCollection2(__scopeSelect);
      const pointerTypeRef = React51.useRef("touch");
      const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {
        const enabledItems = getItems().filter((item) => !item.disabled);
        const currentItem = enabledItems.find((item) => item.value === context.value);
        const nextItem = findNextItem(enabledItems, search, currentItem);
        if (nextItem !== void 0) {
          context.onValueChange(nextItem.value);
        }
      });
      const handleOpen = /* @__PURE__ */ __name((pointerEvent) => {
        if (!isDisabled) {
          context.onOpenChange(true);
          resetTypeahead();
        }
        if (pointerEvent) {
          context.triggerPointerDownPosRef.current = {
            x: Math.round(pointerEvent.pageX),
            y: Math.round(pointerEvent.pageY)
          };
        }
      }, "handleOpen");
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Anchor, __spreadProps(__spreadValues({ asChild: true }, popperScope), { children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        Primitive.button,
        __spreadProps(__spreadValues({
          type: "button",
          role: "combobox",
          "aria-controls": context.contentId,
          "aria-expanded": context.open,
          "aria-required": context.required,
          "aria-autocomplete": "none",
          dir: context.dir,
          "data-state": context.open ? "open" : "closed",
          disabled: isDisabled,
          "data-disabled": isDisabled ? "" : void 0,
          "data-placeholder": shouldShowPlaceholder(context.value) ? "" : void 0
        }, triggerProps), {
          ref: composedRefs,
          onClick: composeEventHandlers(triggerProps.onClick, (event) => {
            event.currentTarget.focus();
            if (pointerTypeRef.current !== "mouse") {
              handleOpen(event);
            }
          }),
          onPointerDown: composeEventHandlers(triggerProps.onPointerDown, (event) => {
            pointerTypeRef.current = event.pointerType;
            const target = event.target;
            if (target.hasPointerCapture(event.pointerId)) {
              target.releasePointerCapture(event.pointerId);
            }
            if (event.button === 0 && event.ctrlKey === false && event.pointerType === "mouse") {
              handleOpen(event);
              event.preventDefault();
            }
          }),
          onKeyDown: composeEventHandlers(triggerProps.onKeyDown, (event) => {
            const isTypingAhead = searchRef.current !== "";
            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
            if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);
            if (isTypingAhead && event.key === " ") return;
            if (OPEN_KEYS.includes(event.key)) {
              handleOpen();
              event.preventDefault();
            }
          })
        })
      ) }));
    }
  );
  SelectTrigger.displayName = TRIGGER_NAME2;
  var VALUE_NAME = "SelectValue";
  var SelectValue = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect, className, style, children, placeholder = "" } = _a121, valueProps = __objRest(_a121, ["__scopeSelect", "className", "style", "children", "placeholder"]);
      const context = useSelectContext(VALUE_NAME, __scopeSelect);
      const { onValueNodeHasChildrenChange } = context;
      const hasChildren = children !== void 0;
      const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);
      useLayoutEffect22(() => {
        onValueNodeHasChildrenChange(hasChildren);
      }, [onValueNodeHasChildrenChange, hasChildren]);
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        Primitive.span,
        __spreadProps(__spreadValues({}, valueProps), {
          ref: composedRefs,
          style: { pointerEvents: "none" },
          children: shouldShowPlaceholder(context.value) ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_jsx_runtime17.Fragment, { children: placeholder }) : children
        })
      );
    }
  );
  SelectValue.displayName = VALUE_NAME;
  var ICON_NAME = "SelectIcon";
  var SelectIcon = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect, children } = _a121, iconProps = __objRest(_a121, ["__scopeSelect", "children"]);
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Primitive.span, __spreadProps(__spreadValues({ "aria-hidden": true }, iconProps), { ref: forwardedRef, children: children || "\u25BC" }));
    }
  );
  SelectIcon.displayName = ICON_NAME;
  var PORTAL_NAME3 = "SelectPortal";
  var SelectPortal = /* @__PURE__ */ __name((props) => {
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Portal, __spreadValues({ asChild: true }, props));
  }, "SelectPortal");
  SelectPortal.displayName = PORTAL_NAME3;
  var CONTENT_NAME3 = "SelectContent";
  var SelectContent = React51.forwardRef(
    (props, forwardedRef) => {
      const context = useSelectContext(CONTENT_NAME3, props.__scopeSelect);
      const [fragment, setFragment] = React51.useState();
      useLayoutEffect22(() => {
        setFragment(new DocumentFragment());
      }, []);
      if (!context.open) {
        const frag = fragment;
        return frag ? ReactDOM5.createPortal(
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectContentProvider, { scope: props.__scopeSelect, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Collection2.Slot, { scope: props.__scopeSelect, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { children: props.children }) }) }),
          frag
        ) : null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectContentImpl, __spreadProps(__spreadValues({}, props), { ref: forwardedRef }));
    }
  );
  SelectContent.displayName = CONTENT_NAME3;
  var CONTENT_MARGIN = 10;
  var [SelectContentProvider, useSelectContentContext] = createSelectContext(CONTENT_NAME3);
  var CONTENT_IMPL_NAME = "SelectContentImpl";
  var Slot2 = createSlot("SelectContent.RemoveScroll");
  var SelectContentImpl = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeSelect,
        position = "item-aligned",
        onCloseAutoFocus,
        onEscapeKeyDown,
        onPointerDownOutside,
        side: side,
        sideOffset,
        align,
        alignOffset,
        arrowPadding,
        collisionBoundary,
        collisionPadding,
        sticky,
        hideWhenDetached,
        avoidCollisions
      } = _a121, contentProps = __objRest(_a121, [
        "__scopeSelect",
        "position",
        "onCloseAutoFocus",
        "onEscapeKeyDown",
        "onPointerDownOutside",
        //
        // PopperContent props
        "side",
        "sideOffset",
        "align",
        "alignOffset",
        "arrowPadding",
        "collisionBoundary",
        "collisionPadding",
        "sticky",
        "hideWhenDetached",
        "avoidCollisions"
      ]);
      const context = useSelectContext(CONTENT_NAME3, __scopeSelect);
      const [content, setContent] = React51.useState(null);
      const [viewport, setViewport] = React51.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
      const [selectedItem, setSelectedItem] = React51.useState(null);
      const [selectedItemText, setSelectedItemText] = React51.useState(
        null
      );
      const getItems = useCollection2(__scopeSelect);
      const [isPositioned, setIsPositioned] = React51.useState(false);
      const firstValidItemFoundRef = React51.useRef(false);
      React51.useEffect(() => {
        if (content) return hideOthers(content);
      }, [content]);
      useFocusGuards();
      const focusFirst4 = React51.useCallback(
        (candidates) => {
          const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);
          const [lastItem] = restItems.slice(-1);
          const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
          for (const candidate of candidates) {
            if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
            candidate == null ? void 0 : candidate.scrollIntoView({ block: "nearest" });
            if (candidate === firstItem && viewport) viewport.scrollTop = 0;
            if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;
            candidate == null ? void 0 : candidate.focus();
            if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
          }
        },
        [getItems, viewport]
      );
      const focusSelectedItem = React51.useCallback(
        () => focusFirst4([selectedItem, content]),
        [focusFirst4, selectedItem, content]
      );
      React51.useEffect(() => {
        if (isPositioned) {
          focusSelectedItem();
        }
      }, [isPositioned, focusSelectedItem]);
      const { onOpenChange, triggerPointerDownPosRef } = context;
      React51.useEffect(() => {
        if (content) {
          let pointerMoveDelta = { x: 0, y: 0 };
          const handlePointerMove = /* @__PURE__ */ __name((event) => {
            var _a122, _b93, _c5, _d4;
            pointerMoveDelta = {
              x: Math.abs(Math.round(event.pageX) - ((_b93 = (_a122 = triggerPointerDownPosRef.current) == null ? void 0 : _a122.x) != null ? _b93 : 0)),
              y: Math.abs(Math.round(event.pageY) - ((_d4 = (_c5 = triggerPointerDownPosRef.current) == null ? void 0 : _c5.y) != null ? _d4 : 0))
            };
          }, "handlePointerMove");
          const handlePointerUp = /* @__PURE__ */ __name((event) => {
            if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {
              event.preventDefault();
            } else {
              if (!content.contains(event.target)) {
                onOpenChange(false);
              }
            }
            document.removeEventListener("pointermove", handlePointerMove);
            triggerPointerDownPosRef.current = null;
          }, "handlePointerUp");
          if (triggerPointerDownPosRef.current !== null) {
            document.addEventListener("pointermove", handlePointerMove);
            document.addEventListener("pointerup", handlePointerUp, { capture: true, once: true });
          }
          return () => {
            document.removeEventListener("pointermove", handlePointerMove);
            document.removeEventListener("pointerup", handlePointerUp, { capture: true });
          };
        }
      }, [content, onOpenChange, triggerPointerDownPosRef]);
      React51.useEffect(() => {
        const close = /* @__PURE__ */ __name(() => onOpenChange(false), "close");
        window.addEventListener("blur", close);
        window.addEventListener("resize", close);
        return () => {
          window.removeEventListener("blur", close);
          window.removeEventListener("resize", close);
        };
      }, [onOpenChange]);
      const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {
        const enabledItems = getItems().filter((item) => !item.disabled);
        const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);
        const nextItem = findNextItem(enabledItems, search, currentItem);
        if (nextItem) {
          setTimeout(() => nextItem.ref.current.focus());
        }
      });
      const itemRefCallback = React51.useCallback(
        (node, value, disabled) => {
          const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
          const isSelectedItem = context.value !== void 0 && context.value === value;
          if (isSelectedItem || isFirstValidItem) {
            setSelectedItem(node);
            if (isFirstValidItem) firstValidItemFoundRef.current = true;
          }
        },
        [context.value]
      );
      const handleItemLeave = React51.useCallback(() => content == null ? void 0 : content.focus(), [content]);
      const itemTextRefCallback = React51.useCallback(
        (node, value, disabled) => {
          const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;
          const isSelectedItem = context.value !== void 0 && context.value === value;
          if (isSelectedItem || isFirstValidItem) {
            setSelectedItemText(node);
          }
        },
        [context.value]
      );
      const SelectPosition = position === "popper" ? SelectPopperPosition : SelectItemAlignedPosition;
      const popperContentProps = SelectPosition === SelectPopperPosition ? {
        side,
        sideOffset,
        align,
        alignOffset,
        arrowPadding,
        collisionBoundary,
        collisionPadding,
        sticky,
        hideWhenDetached,
        avoidCollisions
      } : {};
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        SelectContentProvider,
        {
          scope: __scopeSelect,
          content,
          viewport,
          onViewportChange: setViewport,
          itemRefCallback,
          selectedItem,
          onItemLeave: handleItemLeave,
          itemTextRefCallback,
          focusSelectedItem,
          selectedItemText,
          position,
          isPositioned,
          searchRef,
          children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Combination_default, { as: Slot2, allowPinchZoom: true, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            FocusScope,
            {
              asChild: true,
              trapped: context.open,
              onMountAutoFocus: /* @__PURE__ */ __name((event) => {
                event.preventDefault();
              }, "onMountAutoFocus"),
              onUnmountAutoFocus: composeEventHandlers(onCloseAutoFocus, (event) => {
                var _a122;
                (_a122 = context.trigger) == null ? void 0 : _a122.focus({ preventScroll: true });
                event.preventDefault();
              }),
              children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                DismissableLayer,
                {
                  asChild: true,
                  disableOutsidePointerEvents: true,
                  onEscapeKeyDown,
                  onPointerDownOutside,
                  onFocusOutside: /* @__PURE__ */ __name((event) => event.preventDefault(), "onFocusOutside"),
                  onDismiss: /* @__PURE__ */ __name(() => context.onOpenChange(false), "onDismiss"),
                  children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                    SelectPosition,
                    __spreadProps(__spreadValues(__spreadValues({
                      role: "listbox",
                      id: context.contentId,
                      "data-state": context.open ? "open" : "closed",
                      dir: context.dir,
                      onContextMenu: /* @__PURE__ */ __name((event) => event.preventDefault(), "onContextMenu")
                    }, contentProps), popperContentProps), {
                      onPlaced: /* @__PURE__ */ __name(() => setIsPositioned(true), "onPlaced"),
                      ref: composedRefs,
                      style: __spreadValues({
                        // flex layout so we can place the scroll buttons properly
                        display: "flex",
                        flexDirection: "column",
                        // reset the outline by default as the content MAY get focused
                        outline: "none"
                      }, contentProps.style),
                      onKeyDown: composeEventHandlers(contentProps.onKeyDown, (event) => {
                        const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;
                        if (event.key === "Tab") event.preventDefault();
                        if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);
                        if (["ArrowUp", "ArrowDown", "Home", "End"].includes(event.key)) {
                          const items = getItems().filter((item) => !item.disabled);
                          let candidateNodes = items.map((item) => item.ref.current);
                          if (["ArrowUp", "End"].includes(event.key)) {
                            candidateNodes = candidateNodes.slice().reverse();
                          }
                          if (["ArrowUp", "ArrowDown"].includes(event.key)) {
                            const currentElement = event.target;
                            const currentIndex = candidateNodes.indexOf(currentElement);
                            candidateNodes = candidateNodes.slice(currentIndex + 1);
                          }
                          setTimeout(() => focusFirst4(candidateNodes));
                          event.preventDefault();
                        }
                      })
                    })
                  )
                }
              )
            }
          ) })
        }
      );
    }
  );
  SelectContentImpl.displayName = CONTENT_IMPL_NAME;
  var ITEM_ALIGNED_POSITION_NAME = "SelectItemAlignedPosition";
  var SelectItemAlignedPosition = React51.forwardRef((props, forwardedRef) => {
    const _a121 = props, { __scopeSelect, onPlaced } = _a121, popperProps = __objRest(_a121, ["__scopeSelect", "onPlaced"]);
    const context = useSelectContext(CONTENT_NAME3, __scopeSelect);
    const contentContext = useSelectContentContext(CONTENT_NAME3, __scopeSelect);
    const [contentWrapper, setContentWrapper] = React51.useState(null);
    const [content, setContent] = React51.useState(null);
    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));
    const getItems = useCollection2(__scopeSelect);
    const shouldExpandOnScrollRef = React51.useRef(false);
    const shouldRepositionRef = React51.useRef(true);
    const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;
    const position = React51.useCallback(() => {
      if (context.trigger && context.valueNode && contentWrapper && content && viewport && selectedItem && selectedItemText) {
        const triggerRect = context.trigger.getBoundingClientRect();
        const contentRect = content.getBoundingClientRect();
        const valueNodeRect = context.valueNode.getBoundingClientRect();
        const itemTextRect = selectedItemText.getBoundingClientRect();
        if (context.dir !== "rtl") {
          const itemTextOffset = itemTextRect.left - contentRect.left;
          const left = valueNodeRect.left - itemTextOffset;
          const leftDelta = triggerRect.left - left;
          const minContentWidth = triggerRect.width + leftDelta;
          const contentWidth = Math.max(minContentWidth, contentRect.width);
          const rightEdge = window.innerWidth - CONTENT_MARGIN;
          const clampedLeft = clamp2(left, [
            CONTENT_MARGIN,
            // Prevents the content from going off the starting edge of the
            // viewport. It may still go off the ending edge, but this can be
            // controlled by the user since they may want to manage overflow in a
            // specific way.
            // https://github.com/radix-ui/primitives/issues/2049
            Math.max(CONTENT_MARGIN, rightEdge - contentWidth)
          ]);
          contentWrapper.style.minWidth = minContentWidth + "px";
          contentWrapper.style.left = clampedLeft + "px";
        } else {
          const itemTextOffset = contentRect.right - itemTextRect.right;
          const right = window.innerWidth - valueNodeRect.right - itemTextOffset;
          const rightDelta = window.innerWidth - triggerRect.right - right;
          const minContentWidth = triggerRect.width + rightDelta;
          const contentWidth = Math.max(minContentWidth, contentRect.width);
          const leftEdge = window.innerWidth - CONTENT_MARGIN;
          const clampedRight = clamp2(right, [
            CONTENT_MARGIN,
            Math.max(CONTENT_MARGIN, leftEdge - contentWidth)
          ]);
          contentWrapper.style.minWidth = minContentWidth + "px";
          contentWrapper.style.right = clampedRight + "px";
        }
        const items = getItems();
        const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
        const itemsHeight = viewport.scrollHeight;
        const contentStyles = window.getComputedStyle(content);
        const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);
        const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);
        const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);
        const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);
        const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth;
        const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);
        const viewportStyles = window.getComputedStyle(viewport);
        const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);
        const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);
        const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;
        const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;
        const selectedItemHalfHeight = selectedItem.offsetHeight / 2;
        const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;
        const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;
        const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;
        const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;
        if (willAlignWithoutTopOverflow) {
          const isLastItem = items.length > 0 && selectedItem === items[items.length - 1].ref.current;
          contentWrapper.style.bottom = "0px";
          const viewportOffsetBottom = content.clientHeight - viewport.offsetTop - viewport.offsetHeight;
          const clampedTriggerMiddleToBottomEdge = Math.max(
            triggerMiddleToBottomEdge,
            selectedItemHalfHeight + // viewport might have padding bottom, include it to avoid a scrollable viewport
            (isLastItem ? viewportPaddingBottom : 0) + viewportOffsetBottom + contentBorderBottomWidth
          );
          const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;
          contentWrapper.style.height = height + "px";
        } else {
          const isFirstItem = items.length > 0 && selectedItem === items[0].ref.current;
          contentWrapper.style.top = "0px";
          const clampedTopEdgeToTriggerMiddle = Math.max(
            topEdgeToTriggerMiddle,
            contentBorderTopWidth + viewport.offsetTop + // viewport might have padding top, include it to avoid a scrollable viewport
            (isFirstItem ? viewportPaddingTop : 0) + selectedItemHalfHeight
          );
          const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;
          contentWrapper.style.height = height + "px";
          viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;
        }
        contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;
        contentWrapper.style.minHeight = minContentHeight + "px";
        contentWrapper.style.maxHeight = availableHeight + "px";
        onPlaced == null ? void 0 : onPlaced();
        requestAnimationFrame(() => shouldExpandOnScrollRef.current = true);
      }
    }, [
      getItems,
      context.trigger,
      context.valueNode,
      contentWrapper,
      content,
      viewport,
      selectedItem,
      selectedItemText,
      context.dir,
      onPlaced
    ]);
    useLayoutEffect22(() => position(), [position]);
    const [contentZIndex, setContentZIndex] = React51.useState();
    useLayoutEffect22(() => {
      if (content) setContentZIndex(window.getComputedStyle(content).zIndex);
    }, [content]);
    const handleScrollButtonChange = React51.useCallback(
      (node) => {
        if (node && shouldRepositionRef.current === true) {
          position();
          focusSelectedItem == null ? void 0 : focusSelectedItem();
          shouldRepositionRef.current = false;
        }
      },
      [position, focusSelectedItem]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      SelectViewportProvider,
      {
        scope: __scopeSelect,
        contentWrapper,
        shouldExpandOnScrollRef,
        onScrollButtonChange: handleScrollButtonChange,
        children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          "div",
          {
            ref: setContentWrapper,
            style: {
              display: "flex",
              flexDirection: "column",
              position: "fixed",
              zIndex: contentZIndex
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
              Primitive.div,
              __spreadProps(__spreadValues({}, popperProps), {
                ref: composedRefs,
                style: __spreadValues({
                  // When we get the height of the content, it includes borders. If we were to set
                  // the height without having `boxSizing: 'border-box'` it would be too big.
                  boxSizing: "border-box",
                  // We need to ensure the content doesn't get taller than the wrapper
                  maxHeight: "100%"
                }, popperProps.style)
              })
            )
          }
        )
      }
    );
  });
  SelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;
  var POPPER_POSITION_NAME = "SelectPopperPosition";
  var SelectPopperPosition = React51.forwardRef((props, forwardedRef) => {
    const _a121 = props, {
      __scopeSelect,
      align = "start",
      collisionPadding = CONTENT_MARGIN
    } = _a121, popperProps = __objRest(_a121, [
      "__scopeSelect",
      "align",
      "collisionPadding"
    ]);
    const popperScope = usePopperScope2(__scopeSelect);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      Content,
      __spreadProps(__spreadValues(__spreadValues({}, popperScope), popperProps), {
        ref: forwardedRef,
        align,
        collisionPadding,
        style: __spreadValues(__spreadValues({
          // Ensure border-box for floating-ui calculations
          boxSizing: "border-box"
        }, popperProps.style), {
          "--radix-select-content-transform-origin": "var(--radix-popper-transform-origin)",
          "--radix-select-content-available-width": "var(--radix-popper-available-width)",
          "--radix-select-content-available-height": "var(--radix-popper-available-height)",
          "--radix-select-trigger-width": "var(--radix-popper-anchor-width)",
          "--radix-select-trigger-height": "var(--radix-popper-anchor-height)"
        })
      })
    );
  });
  SelectPopperPosition.displayName = POPPER_POSITION_NAME;
  var [SelectViewportProvider, useSelectViewportContext] = createSelectContext(CONTENT_NAME3, {});
  var VIEWPORT_NAME2 = "SelectViewport";
  var SelectViewport = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect, nonce } = _a121, viewportProps = __objRest(_a121, ["__scopeSelect", "nonce"]);
      const contentContext = useSelectContentContext(VIEWPORT_NAME2, __scopeSelect);
      const viewportContext = useSelectViewportContext(VIEWPORT_NAME2, __scopeSelect);
      const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);
      const prevScrollTopRef = React51.useRef(0);
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(import_jsx_runtime17.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          "style",
          {
            dangerouslySetInnerHTML: {
              __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`
            },
            nonce
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Collection2.Slot, { scope: __scopeSelect, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
          Primitive.div,
          __spreadProps(__spreadValues({
            "data-radix-select-viewport": "",
            role: "presentation"
          }, viewportProps), {
            ref: composedRefs,
            style: __spreadValues({
              // we use position: 'relative' here on the `viewport` so that when we call
              // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport
              // (independent of the scrollUpButton).
              position: "relative",
              flex: 1,
              // Viewport should only be scrollable in the vertical direction.
              // This won't work in vertical writing modes, so we'll need to
              // revisit this if/when that is supported
              // https://developer.chrome.com/blog/vertical-form-controls
              overflow: "hidden auto"
            }, viewportProps.style),
            onScroll: composeEventHandlers(viewportProps.onScroll, (event) => {
              const viewport = event.currentTarget;
              const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;
              if ((shouldExpandOnScrollRef == null ? void 0 : shouldExpandOnScrollRef.current) && contentWrapper) {
                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);
                if (scrolledBy > 0) {
                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;
                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);
                  const cssHeight = parseFloat(contentWrapper.style.height);
                  const prevHeight = Math.max(cssMinHeight, cssHeight);
                  if (prevHeight < availableHeight) {
                    const nextHeight = prevHeight + scrolledBy;
                    const clampedNextHeight = Math.min(availableHeight, nextHeight);
                    const heightDiff = nextHeight - clampedNextHeight;
                    contentWrapper.style.height = clampedNextHeight + "px";
                    if (contentWrapper.style.bottom === "0px") {
                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;
                      contentWrapper.style.justifyContent = "flex-end";
                    }
                  }
                }
              }
              prevScrollTopRef.current = viewport.scrollTop;
            })
          })
        ) })
      ] });
    }
  );
  SelectViewport.displayName = VIEWPORT_NAME2;
  var GROUP_NAME = "SelectGroup";
  var [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME);
  var SelectGroup = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect } = _a121, groupProps = __objRest(_a121, ["__scopeSelect"]);
      const groupId = useId();
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(SelectGroupContextProvider, { scope: __scopeSelect, id: groupId, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Primitive.div, __spreadProps(__spreadValues({ role: "group", "aria-labelledby": groupId }, groupProps), { ref: forwardedRef })) });
    }
  );
  SelectGroup.displayName = GROUP_NAME;
  var LABEL_NAME = "SelectLabel";
  var SelectLabel = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect } = _a121, labelProps = __objRest(_a121, ["__scopeSelect"]);
      const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Primitive.div, __spreadProps(__spreadValues({ id: groupContext.id }, labelProps), { ref: forwardedRef }));
    }
  );
  SelectLabel.displayName = LABEL_NAME;
  var ITEM_NAME = "SelectItem";
  var [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME);
  var SelectItem = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeSelect,
        value,
        disabled = false,
        textValue: textValueProp
      } = _a121, itemProps = __objRest(_a121, [
        "__scopeSelect",
        "value",
        "disabled",
        "textValue"
      ]);
      const context = useSelectContext(ITEM_NAME, __scopeSelect);
      const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);
      const isSelected = context.value === value;
      const [textValue, setTextValue] = React51.useState(textValueProp != null ? textValueProp : "");
      const [isFocused, setIsFocused] = React51.useState(false);
      const composedRefs = useComposedRefs(
        forwardedRef,
        (node) => {
          var _a122;
          return (_a122 = contentContext.itemRefCallback) == null ? void 0 : _a122.call(contentContext, node, value, disabled);
        }
      );
      const textId = useId();
      const pointerTypeRef = React51.useRef("touch");
      const handleSelect = /* @__PURE__ */ __name(() => {
        if (!disabled) {
          context.onValueChange(value);
          context.onOpenChange(false);
        }
      }, "handleSelect");
      if (value === "") {
        throw new Error(
          "A <Select.Item /> must have a value prop that is not an empty string. This is because the Select value can be set to an empty string to clear the selection and show the placeholder."
        );
      }
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
        SelectItemContextProvider,
        {
          scope: __scopeSelect,
          value,
          disabled,
          textId,
          isSelected,
          onItemTextChange: React51.useCallback((node) => {
            setTextValue((prevTextValue) => {
              var _a122;
              return prevTextValue || ((_a122 = node == null ? void 0 : node.textContent) != null ? _a122 : "").trim();
            });
          }, []),
          children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            Collection2.ItemSlot,
            {
              scope: __scopeSelect,
              value,
              disabled,
              textValue,
              children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
                Primitive.div,
                __spreadProps(__spreadValues({
                  role: "option",
                  "aria-labelledby": textId,
                  "data-highlighted": isFocused ? "" : void 0,
                  "aria-selected": isSelected && isFocused,
                  "data-state": isSelected ? "checked" : "unchecked",
                  "aria-disabled": disabled || void 0,
                  "data-disabled": disabled ? "" : void 0,
                  tabIndex: disabled ? void 0 : -1
                }, itemProps), {
                  ref: composedRefs,
                  onFocus: composeEventHandlers(itemProps.onFocus, () => setIsFocused(true)),
                  onBlur: composeEventHandlers(itemProps.onBlur, () => setIsFocused(false)),
                  onClick: composeEventHandlers(itemProps.onClick, () => {
                    if (pointerTypeRef.current !== "mouse") handleSelect();
                  }),
                  onPointerUp: composeEventHandlers(itemProps.onPointerUp, () => {
                    if (pointerTypeRef.current === "mouse") handleSelect();
                  }),
                  onPointerDown: composeEventHandlers(itemProps.onPointerDown, (event) => {
                    pointerTypeRef.current = event.pointerType;
                  }),
                  onPointerMove: composeEventHandlers(itemProps.onPointerMove, (event) => {
                    var _a122;
                    pointerTypeRef.current = event.pointerType;
                    if (disabled) {
                      (_a122 = contentContext.onItemLeave) == null ? void 0 : _a122.call(contentContext);
                    } else if (pointerTypeRef.current === "mouse") {
                      event.currentTarget.focus({ preventScroll: true });
                    }
                  }),
                  onPointerLeave: composeEventHandlers(itemProps.onPointerLeave, (event) => {
                    var _a122;
                    if (event.currentTarget === document.activeElement) {
                      (_a122 = contentContext.onItemLeave) == null ? void 0 : _a122.call(contentContext);
                    }
                  }),
                  onKeyDown: composeEventHandlers(itemProps.onKeyDown, (event) => {
                    var _a122;
                    const isTypingAhead = ((_a122 = contentContext.searchRef) == null ? void 0 : _a122.current) !== "";
                    if (isTypingAhead && event.key === " ") return;
                    if (SELECTION_KEYS.includes(event.key)) handleSelect();
                    if (event.key === " ") event.preventDefault();
                  })
                })
              )
            }
          )
        }
      );
    }
  );
  SelectItem.displayName = ITEM_NAME;
  var ITEM_TEXT_NAME = "SelectItemText";
  var SelectItemText = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect, className, style } = _a121, itemTextProps = __objRest(_a121, ["__scopeSelect", "className", "style"]);
      const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);
      const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);
      const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);
      const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);
      const [itemTextNode, setItemTextNode] = React51.useState(null);
      const composedRefs = useComposedRefs(
        forwardedRef,
        (node) => setItemTextNode(node),
        itemContext.onItemTextChange,
        (node) => {
          var _a122;
          return (_a122 = contentContext.itemTextRefCallback) == null ? void 0 : _a122.call(contentContext, node, itemContext.value, itemContext.disabled);
        }
      );
      const textContent = itemTextNode == null ? void 0 : itemTextNode.textContent;
      const nativeOption = React51.useMemo(
        () => /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("option", { value: itemContext.value, disabled: itemContext.disabled, children: textContent }, itemContext.value),
        [itemContext.disabled, itemContext.value, textContent]
      );
      const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;
      useLayoutEffect22(() => {
        onNativeOptionAdd(nativeOption);
        return () => onNativeOptionRemove(nativeOption);
      }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)(import_jsx_runtime17.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Primitive.span, __spreadProps(__spreadValues({ id: itemContext.textId }, itemTextProps), { ref: composedRefs })),
        itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren ? ReactDOM5.createPortal(itemTextProps.children, context.valueNode) : null
      ] });
    }
  );
  SelectItemText.displayName = ITEM_TEXT_NAME;
  var ITEM_INDICATOR_NAME = "SelectItemIndicator";
  var SelectItemIndicator = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect } = _a121, itemIndicatorProps = __objRest(_a121, ["__scopeSelect"]);
      const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
      return itemContext.isSelected ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Primitive.span, __spreadProps(__spreadValues({ "aria-hidden": true }, itemIndicatorProps), { ref: forwardedRef })) : null;
    }
  );
  SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
  var SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
  var SelectScrollUpButton = React51.forwardRef((props, forwardedRef) => {
    const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
    const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);
    const [canScrollUp, setCanScrollUp] = React51.useState(false);
    const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);
    useLayoutEffect22(() => {
      if (contentContext.viewport && contentContext.isPositioned) {
        let handleScroll22 = /* @__PURE__ */ __name(function() {
          const canScrollUp2 = viewport.scrollTop > 0;
          setCanScrollUp(canScrollUp2);
        }, "handleScroll2");
        var handleScroll2 = handleScroll22;
        const viewport = contentContext.viewport;
        handleScroll22();
        viewport.addEventListener("scroll", handleScroll22);
        return () => viewport.removeEventListener("scroll", handleScroll22);
      }
    }, [contentContext.viewport, contentContext.isPositioned]);
    return canScrollUp ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      SelectScrollButtonImpl,
      __spreadProps(__spreadValues({}, props), {
        ref: composedRefs,
        onAutoScroll: /* @__PURE__ */ __name(() => {
          const { viewport, selectedItem } = contentContext;
          if (viewport && selectedItem) {
            viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;
          }
        }, "onAutoScroll")
      })
    ) : null;
  });
  SelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;
  var SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
  var SelectScrollDownButton = React51.forwardRef((props, forwardedRef) => {
    const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
    const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);
    const [canScrollDown, setCanScrollDown] = React51.useState(false);
    const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);
    useLayoutEffect22(() => {
      if (contentContext.viewport && contentContext.isPositioned) {
        let handleScroll22 = /* @__PURE__ */ __name(function() {
          const maxScroll = viewport.scrollHeight - viewport.clientHeight;
          const canScrollDown2 = Math.ceil(viewport.scrollTop) < maxScroll;
          setCanScrollDown(canScrollDown2);
        }, "handleScroll2");
        var handleScroll2 = handleScroll22;
        const viewport = contentContext.viewport;
        handleScroll22();
        viewport.addEventListener("scroll", handleScroll22);
        return () => viewport.removeEventListener("scroll", handleScroll22);
      }
    }, [contentContext.viewport, contentContext.isPositioned]);
    return canScrollDown ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      SelectScrollButtonImpl,
      __spreadProps(__spreadValues({}, props), {
        ref: composedRefs,
        onAutoScroll: /* @__PURE__ */ __name(() => {
          const { viewport, selectedItem } = contentContext;
          if (viewport && selectedItem) {
            viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;
          }
        }, "onAutoScroll")
      })
    ) : null;
  });
  SelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;
  var SelectScrollButtonImpl = React51.forwardRef((props, forwardedRef) => {
    const _a121 = props, { __scopeSelect, onAutoScroll } = _a121, scrollIndicatorProps = __objRest(_a121, ["__scopeSelect", "onAutoScroll"]);
    const contentContext = useSelectContentContext("SelectScrollButton", __scopeSelect);
    const autoScrollTimerRef = React51.useRef(null);
    const getItems = useCollection2(__scopeSelect);
    const clearAutoScrollTimer = React51.useCallback(() => {
      if (autoScrollTimerRef.current !== null) {
        window.clearInterval(autoScrollTimerRef.current);
        autoScrollTimerRef.current = null;
      }
    }, []);
    React51.useEffect(() => {
      return () => clearAutoScrollTimer();
    }, [clearAutoScrollTimer]);
    useLayoutEffect22(() => {
      var _a122;
      const activeItem = getItems().find((item) => item.ref.current === document.activeElement);
      (_a122 = activeItem == null ? void 0 : activeItem.ref.current) == null ? void 0 : _a122.scrollIntoView({ block: "nearest" });
    }, [getItems]);
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
      Primitive.div,
      __spreadProps(__spreadValues({
        "aria-hidden": true
      }, scrollIndicatorProps), {
        ref: forwardedRef,
        style: __spreadValues({ flexShrink: 0 }, scrollIndicatorProps.style),
        onPointerDown: composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {
          if (autoScrollTimerRef.current === null) {
            autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
          }
        }),
        onPointerMove: composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {
          var _a122;
          (_a122 = contentContext.onItemLeave) == null ? void 0 : _a122.call(contentContext);
          if (autoScrollTimerRef.current === null) {
            autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);
          }
        }),
        onPointerLeave: composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {
          clearAutoScrollTimer();
        })
      })
    );
  });
  var SEPARATOR_NAME = "SelectSeparator";
  var SelectSeparator = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect } = _a121, separatorProps = __objRest(_a121, ["__scopeSelect"]);
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Primitive.div, __spreadProps(__spreadValues({ "aria-hidden": true }, separatorProps), { ref: forwardedRef }));
    }
  );
  SelectSeparator.displayName = SEPARATOR_NAME;
  var ARROW_NAME3 = "SelectArrow";
  var SelectArrow = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSelect } = _a121, arrowProps = __objRest(_a121, ["__scopeSelect"]);
      const popperScope = usePopperScope2(__scopeSelect);
      const context = useSelectContext(ARROW_NAME3, __scopeSelect);
      const contentContext = useSelectContentContext(ARROW_NAME3, __scopeSelect);
      return context.open && contentContext.position === "popper" ? /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(Arrow2, __spreadProps(__spreadValues(__spreadValues({}, popperScope), arrowProps), { ref: forwardedRef })) : null;
    }
  );
  SelectArrow.displayName = ARROW_NAME3;
  function shouldShowPlaceholder(value) {
    return value === "" || value === void 0;
  }
  __name(shouldShowPlaceholder, "shouldShowPlaceholder");
  var BubbleSelect = React51.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { value } = _a121, selectProps = __objRest(_a121, ["value"]);
      const ref = React51.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, ref);
      const prevValue = usePrevious(value);
      React51.useEffect(() => {
        const select = ref.current;
        const selectProto = window.HTMLSelectElement.prototype;
        const descriptor = Object.getOwnPropertyDescriptor(
          selectProto,
          "value"
        );
        const setValue = descriptor.set;
        if (prevValue !== value && setValue) {
          const event = new Event("change", { bubbles: true });
          setValue.call(select, value);
          select.dispatchEvent(event);
        }
      }, [prevValue, value]);
      return /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(VisuallyHidden, { asChild: true, children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("select", __spreadProps(__spreadValues({}, selectProps), { ref: composedRefs, defaultValue: value })) });
    }
  );
  BubbleSelect.displayName = "BubbleSelect";
  function useTypeaheadSearch(onSearchChange) {
    const handleSearchChange = useCallbackRef(onSearchChange);
    const searchRef = React51.useRef("");
    const timerRef = React51.useRef(0);
    const handleTypeaheadSearch = React51.useCallback(
      (key) => {
        const search = searchRef.current + key;
        handleSearchChange(search);
        (/* @__PURE__ */ __name(function updateSearch(value) {
          searchRef.current = value;
          window.clearTimeout(timerRef.current);
          if (value !== "") timerRef.current = window.setTimeout(() => updateSearch(""), 1e3);
        }, "updateSearch"))(search);
      },
      [handleSearchChange]
    );
    const resetTypeahead = React51.useCallback(() => {
      searchRef.current = "";
      window.clearTimeout(timerRef.current);
    }, []);
    React51.useEffect(() => {
      return () => window.clearTimeout(timerRef.current);
    }, []);
    return [searchRef, handleTypeaheadSearch, resetTypeahead];
  }
  __name(useTypeaheadSearch, "useTypeaheadSearch");
  function findNextItem(items, search, currentItem) {
    const isRepeated = search.length > 1 && Array.from(search).every((char2) => char2 === search[0]);
    const normalizedSearch = isRepeated ? search[0] : search;
    const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;
    let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));
    const excludeCurrentItem = normalizedSearch.length === 1;
    if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);
    const nextItem = wrappedItems.find(
      (item) => item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())
    );
    return nextItem !== currentItem ? nextItem : void 0;
  }
  __name(findNextItem, "findNextItem");
  function wrapArray(array, startIndex) {
    return array.map((_, index3) => array[(startIndex + index3) % array.length]);
  }
  __name(wrapArray, "wrapArray");
  var Root24 = Select;
  var Trigger2 = SelectTrigger;
  var Value = SelectValue;
  var Icon2 = SelectIcon;
  var Portal2 = SelectPortal;
  var Content22 = SelectContent;
  var Viewport2 = SelectViewport;
  var Label3 = SelectLabel;
  var Item = SelectItem;
  var ItemText = SelectItemText;
  var ItemIndicator = SelectItemIndicator;
  var ScrollUpButton = SelectScrollUpButton;
  var ScrollDownButton = SelectScrollDownButton;
  var Separator = SelectSeparator;

  // client/src/components/ui/select.tsx
  var Select2 = Root24;
  var SelectValue2 = Value;
  var SelectTrigger2 = React52.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, children } = _b93, props = __objRest(_b93, ["className", "children"]);
    return /* @__PURE__ */ React52.createElement(
      Trigger2,
      __spreadValues({
        ref,
        className: cn(
          "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
          className
        )
      }, props),
      children,
      /* @__PURE__ */ React52.createElement(Icon2, { asChild: true }, /* @__PURE__ */ React52.createElement(ChevronDown, { className: "h-4 w-4 opacity-50" }))
    );
  });
  SelectTrigger2.displayName = Trigger2.displayName;
  var SelectScrollUpButton2 = React52.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React52.createElement(
      ScrollUpButton,
      __spreadValues({
        ref,
        className: cn(
          "flex cursor-default items-center justify-center py-1",
          className
        )
      }, props),
      /* @__PURE__ */ React52.createElement(ChevronUp, { className: "h-4 w-4" })
    );
  });
  SelectScrollUpButton2.displayName = ScrollUpButton.displayName;
  var SelectScrollDownButton2 = React52.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React52.createElement(
      ScrollDownButton,
      __spreadValues({
        ref,
        className: cn(
          "flex cursor-default items-center justify-center py-1",
          className
        )
      }, props),
      /* @__PURE__ */ React52.createElement(ChevronDown, { className: "h-4 w-4" })
    );
  });
  SelectScrollDownButton2.displayName = ScrollDownButton.displayName;
  var SelectContent2 = React52.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, children, position = "popper" } = _b93, props = __objRest(_b93, ["className", "children", "position"]);
    return /* @__PURE__ */ React52.createElement(Portal2, null, /* @__PURE__ */ React52.createElement(
      Content22,
      __spreadValues({
        ref,
        className: cn(
          "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
          position === "popper" && "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
          className
        ),
        position
      }, props),
      /* @__PURE__ */ React52.createElement(SelectScrollUpButton2, null),
      /* @__PURE__ */ React52.createElement(
        Viewport2,
        {
          className: cn(
            "p-1",
            position === "popper" && "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
          )
        },
        children
      ),
      /* @__PURE__ */ React52.createElement(SelectScrollDownButton2, null)
    ));
  });
  SelectContent2.displayName = Content22.displayName;
  var SelectLabel2 = React52.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React52.createElement(
      Label3,
      __spreadValues({
        ref,
        className: cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)
      }, props)
    );
  });
  SelectLabel2.displayName = Label3.displayName;
  var SelectItem2 = React52.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, children } = _b93, props = __objRest(_b93, ["className", "children"]);
    return /* @__PURE__ */ React52.createElement(
      Item,
      __spreadValues({
        ref,
        className: cn(
          "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
          className
        )
      }, props),
      /* @__PURE__ */ React52.createElement("span", { className: "absolute left-2 flex h-3.5 w-3.5 items-center justify-center" }, /* @__PURE__ */ React52.createElement(ItemIndicator, null, /* @__PURE__ */ React52.createElement(Check, { className: "h-4 w-4" }))),
      /* @__PURE__ */ React52.createElement(ItemText, null, children)
    );
  });
  SelectItem2.displayName = Item.displayName;
  var SelectSeparator2 = React52.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React52.createElement(
      Separator,
      __spreadValues({
        ref,
        className: cn("-mx-1 my-1 h-px bg-muted", className)
      }, props)
    );
  });
  SelectSeparator2.displayName = Separator.displayName;

  // client/src/components/ui/popover.tsx
  var React54 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-popover/dist/index.mjs
  var React53 = __toESM(require_react(), 1);
  var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
  var POPOVER_NAME = "Popover";
  var [createPopoverContext, createPopoverScope] = createContextScope(POPOVER_NAME, [
    createPopperScope
  ]);
  var usePopperScope3 = createPopperScope();
  var [PopoverProvider, usePopoverContext] = createPopoverContext(POPOVER_NAME);
  var Popover = /* @__PURE__ */ __name((props) => {
    const {
      __scopePopover,
      children,
      open: openProp,
      defaultOpen,
      onOpenChange,
      modal = false
    } = props;
    const popperScope = usePopperScope3(__scopePopover);
    const triggerRef = React53.useRef(null);
    const [hasCustomAnchor, setHasCustomAnchor] = React53.useState(false);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Root23, __spreadProps(__spreadValues({}, popperScope), { children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
      PopoverProvider,
      {
        scope: __scopePopover,
        contentId: useId(),
        triggerRef,
        open,
        onOpenChange: setOpen,
        onOpenToggle: React53.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
        hasCustomAnchor,
        onCustomAnchorAdd: React53.useCallback(() => setHasCustomAnchor(true), []),
        onCustomAnchorRemove: React53.useCallback(() => setHasCustomAnchor(false), []),
        modal,
        children
      }
    ) }));
  }, "Popover");
  Popover.displayName = POPOVER_NAME;
  var ANCHOR_NAME2 = "PopoverAnchor";
  var PopoverAnchor = React53.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopePopover } = _a121, anchorProps = __objRest(_a121, ["__scopePopover"]);
      const context = usePopoverContext(ANCHOR_NAME2, __scopePopover);
      const popperScope = usePopperScope3(__scopePopover);
      const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
      React53.useEffect(() => {
        onCustomAnchorAdd();
        return () => onCustomAnchorRemove();
      }, [onCustomAnchorAdd, onCustomAnchorRemove]);
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Anchor, __spreadProps(__spreadValues(__spreadValues({}, popperScope), anchorProps), { ref: forwardedRef }));
    }
  );
  PopoverAnchor.displayName = ANCHOR_NAME2;
  var TRIGGER_NAME3 = "PopoverTrigger";
  var PopoverTrigger = React53.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopePopover } = _a121, triggerProps = __objRest(_a121, ["__scopePopover"]);
      const context = usePopoverContext(TRIGGER_NAME3, __scopePopover);
      const popperScope = usePopperScope3(__scopePopover);
      const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
      const trigger = /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        Primitive.button,
        __spreadProps(__spreadValues({
          type: "button",
          "aria-haspopup": "dialog",
          "aria-expanded": context.open,
          "aria-controls": context.contentId,
          "data-state": getState(context.open)
        }, triggerProps), {
          ref: composedTriggerRef,
          onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
        })
      );
      return context.hasCustomAnchor ? trigger : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Anchor, __spreadProps(__spreadValues({ asChild: true }, popperScope), { children: trigger }));
    }
  );
  PopoverTrigger.displayName = TRIGGER_NAME3;
  var PORTAL_NAME4 = "PopoverPortal";
  var [PortalProvider2, usePortalContext2] = createPopoverContext(PORTAL_NAME4, {
    forceMount: void 0
  });
  var PopoverPortal = /* @__PURE__ */ __name((props) => {
    const { __scopePopover, forceMount, children, container } = props;
    const context = usePopoverContext(PORTAL_NAME4, __scopePopover);
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PortalProvider2, { scope: __scopePopover, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Portal, { asChild: true, container, children }) }) });
  }, "PopoverPortal");
  PopoverPortal.displayName = PORTAL_NAME4;
  var CONTENT_NAME4 = "PopoverContent";
  var PopoverContent = React53.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext2(CONTENT_NAME4, props.__scopePopover);
      const _a121 = props, { forceMount = portalContext.forceMount } = _a121, contentProps = __objRest(_a121, ["forceMount"]);
      const context = usePopoverContext(CONTENT_NAME4, props.__scopePopover);
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PopoverContentModal, __spreadProps(__spreadValues({}, contentProps), { ref: forwardedRef })) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PopoverContentNonModal, __spreadProps(__spreadValues({}, contentProps), { ref: forwardedRef })) });
    }
  );
  PopoverContent.displayName = CONTENT_NAME4;
  var Slot3 = createSlot("PopoverContent.RemoveScroll");
  var PopoverContentModal = React53.forwardRef(
    (props, forwardedRef) => {
      const context = usePopoverContext(CONTENT_NAME4, props.__scopePopover);
      const contentRef = React53.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, contentRef);
      const isRightClickOutsideRef = React53.useRef(false);
      React53.useEffect(() => {
        const content = contentRef.current;
        if (content) return hideOthers(content);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Combination_default, { as: Slot3, allowPinchZoom: true, children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        PopoverContentImpl,
        __spreadProps(__spreadValues({}, props), {
          ref: composedRefs,
          trapFocus: context.open,
          disableOutsidePointerEvents: true,
          onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
            var _a121;
            event.preventDefault();
            if (!isRightClickOutsideRef.current) (_a121 = context.triggerRef.current) == null ? void 0 : _a121.focus();
          }),
          onPointerDownOutside: composeEventHandlers(
            props.onPointerDownOutside,
            (event) => {
              const originalEvent = event.detail.originalEvent;
              const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
              const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
              isRightClickOutsideRef.current = isRightClick;
            },
            { checkForDefaultPrevented: false }
          ),
          onFocusOutside: composeEventHandlers(
            props.onFocusOutside,
            (event) => event.preventDefault(),
            { checkForDefaultPrevented: false }
          )
        })
      ) });
    }
  );
  var PopoverContentNonModal = React53.forwardRef(
    (props, forwardedRef) => {
      const context = usePopoverContext(CONTENT_NAME4, props.__scopePopover);
      const hasInteractedOutsideRef = React53.useRef(false);
      const hasPointerDownOutsideRef = React53.useRef(false);
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        PopoverContentImpl,
        __spreadProps(__spreadValues({}, props), {
          ref: forwardedRef,
          trapFocus: false,
          disableOutsidePointerEvents: false,
          onCloseAutoFocus: /* @__PURE__ */ __name((event) => {
            var _a121, _b93;
            (_a121 = props.onCloseAutoFocus) == null ? void 0 : _a121.call(props, event);
            if (!event.defaultPrevented) {
              if (!hasInteractedOutsideRef.current) (_b93 = context.triggerRef.current) == null ? void 0 : _b93.focus();
              event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
            hasPointerDownOutsideRef.current = false;
          }, "onCloseAutoFocus"),
          onInteractOutside: /* @__PURE__ */ __name((event) => {
            var _a121, _b93;
            (_a121 = props.onInteractOutside) == null ? void 0 : _a121.call(props, event);
            if (!event.defaultPrevented) {
              hasInteractedOutsideRef.current = true;
              if (event.detail.originalEvent.type === "pointerdown") {
                hasPointerDownOutsideRef.current = true;
              }
            }
            const target = event.target;
            const targetIsTrigger = (_b93 = context.triggerRef.current) == null ? void 0 : _b93.contains(target);
            if (targetIsTrigger) event.preventDefault();
            if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
              event.preventDefault();
            }
          }, "onInteractOutside")
        })
      );
    }
  );
  var PopoverContentImpl = React53.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopePopover,
        trapFocus,
        onOpenAutoFocus,
        onCloseAutoFocus,
        disableOutsidePointerEvents,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside
      } = _a121, contentProps = __objRest(_a121, [
        "__scopePopover",
        "trapFocus",
        "onOpenAutoFocus",
        "onCloseAutoFocus",
        "disableOutsidePointerEvents",
        "onEscapeKeyDown",
        "onPointerDownOutside",
        "onFocusOutside",
        "onInteractOutside"
      ]);
      const context = usePopoverContext(CONTENT_NAME4, __scopePopover);
      const popperScope = usePopperScope3(__scopePopover);
      useFocusGuards();
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        FocusScope,
        {
          asChild: true,
          loop: true,
          trapped: trapFocus,
          onMountAutoFocus: onOpenAutoFocus,
          onUnmountAutoFocus: onCloseAutoFocus,
          children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
            DismissableLayer,
            {
              asChild: true,
              disableOutsidePointerEvents,
              onInteractOutside,
              onEscapeKeyDown,
              onPointerDownOutside,
              onFocusOutside,
              onDismiss: /* @__PURE__ */ __name(() => context.onOpenChange(false), "onDismiss"),
              children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
                Content,
                __spreadProps(__spreadValues(__spreadValues({
                  "data-state": getState(context.open),
                  role: "dialog",
                  id: context.contentId
                }, popperScope), contentProps), {
                  ref: forwardedRef,
                  style: __spreadValues(__spreadValues({}, contentProps.style), {
                    "--radix-popover-content-transform-origin": "var(--radix-popper-transform-origin)",
                    "--radix-popover-content-available-width": "var(--radix-popper-available-width)",
                    "--radix-popover-content-available-height": "var(--radix-popper-available-height)",
                    "--radix-popover-trigger-width": "var(--radix-popper-anchor-width)",
                    "--radix-popover-trigger-height": "var(--radix-popper-anchor-height)"
                  })
                })
              )
            }
          )
        }
      );
    }
  );
  var CLOSE_NAME2 = "PopoverClose";
  var PopoverClose = React53.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopePopover } = _a121, closeProps = __objRest(_a121, ["__scopePopover"]);
      const context = usePopoverContext(CLOSE_NAME2, __scopePopover);
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        Primitive.button,
        __spreadProps(__spreadValues({
          type: "button"
        }, closeProps), {
          ref: forwardedRef,
          onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
        })
      );
    }
  );
  PopoverClose.displayName = CLOSE_NAME2;
  var ARROW_NAME4 = "PopoverArrow";
  var PopoverArrow = React53.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopePopover } = _a121, arrowProps = __objRest(_a121, ["__scopePopover"]);
      const popperScope = usePopperScope3(__scopePopover);
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(Arrow2, __spreadProps(__spreadValues(__spreadValues({}, popperScope), arrowProps), { ref: forwardedRef }));
    }
  );
  PopoverArrow.displayName = ARROW_NAME4;
  function getState(open) {
    return open ? "open" : "closed";
  }
  __name(getState, "getState");
  var Root25 = Popover;
  var Trigger3 = PopoverTrigger;
  var Portal3 = PopoverPortal;
  var Content23 = PopoverContent;

  // client/src/components/ui/popover.tsx
  var Popover2 = Root25;
  var PopoverTrigger2 = Trigger3;
  var PopoverContent2 = React54.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, align = "center", sideOffset = 4 } = _b93, props = __objRest(_b93, ["className", "align", "sideOffset"]);
    return /* @__PURE__ */ React54.createElement(Portal3, null, /* @__PURE__ */ React54.createElement(
      Content23,
      __spreadValues({
        ref,
        align,
        sideOffset,
        className: cn(
          "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]",
          className
        )
      }, props)
    ));
  });
  PopoverContent2.displayName = Content23.displayName;

  // client/src/components/ui/command.tsx
  var React57 = __toESM(require_react(), 1);

  // node_modules/cmdk/dist/chunk-NZJY6EH4.mjs
  var U = 1;
  var Y = 0.9;
  var H = 0.8;
  var J = 0.17;
  var p = 0.1;
  var u = 0.999;
  var $ = 0.9999;
  var k = 0.99;
  var m = /[\\\/_+.#"@\[\(\{&]/;
  var B = /[\\\/_+.#"@\[\(\{&]/g;
  var K = /[\s-]/;
  var X2 = /[\s-]/g;
  function G(_, C, h, P2, A, f, O) {
    if (f === C.length) return A === _.length ? U : k;
    var T2 = `${A},${f}`;
    if (O[T2] !== void 0) return O[T2];
    for (var L2 = P2.charAt(f), c = h.indexOf(L2, A), S = 0, E, N2, R, M; c >= 0; ) E = G(_, C, h, P2, c + 1, f + 1, O), E > S && (c === A ? E *= U : m.test(_.charAt(c - 1)) ? (E *= H, R = _.slice(A, c - 1).match(B), R && A > 0 && (E *= Math.pow(u, R.length))) : K.test(_.charAt(c - 1)) ? (E *= Y, M = _.slice(A, c - 1).match(X2), M && A > 0 && (E *= Math.pow(u, M.length))) : (E *= J, A > 0 && (E *= Math.pow(u, c - A))), _.charAt(c) !== C.charAt(f) && (E *= $)), (E < p && h.charAt(c - 1) === P2.charAt(f + 1) || P2.charAt(f + 1) === P2.charAt(f) && h.charAt(c - 1) !== P2.charAt(f)) && (N2 = G(_, C, h, P2, c + 1, f + 2, O), N2 * p > E && (E = N2 * p)), E > S && (S = E), c = h.indexOf(L2, c + 1);
    return O[T2] = S, S;
  }
  __name(G, "G");
  function D(_) {
    return _.toLowerCase().replace(X2, " ");
  }
  __name(D, "D");
  function W(_, C, h) {
    return _ = h && h.length > 0 ? `${_ + " " + h.join(" ")}` : _, G(_, C, D(_), D(C), 0, 0, {});
  }
  __name(W, "W");

  // node_modules/@radix-ui/react-dialog/dist/index.mjs
  var React55 = __toESM(require_react(), 1);
  var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
  var DIALOG_NAME = "Dialog";
  var [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);
  var [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);
  var Dialog = /* @__PURE__ */ __name((props) => {
    const {
      __scopeDialog,
      children,
      open: openProp,
      defaultOpen,
      onOpenChange,
      modal = true
    } = props;
    const triggerRef = React55.useRef(null);
    const contentRef = React55.useRef(null);
    const [open = false, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      DialogProvider,
      {
        scope: __scopeDialog,
        triggerRef,
        contentRef,
        contentId: useId(),
        titleId: useId(),
        descriptionId: useId(),
        open,
        onOpenChange: setOpen,
        onOpenToggle: React55.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
        modal,
        children
      }
    );
  }, "Dialog");
  Dialog.displayName = DIALOG_NAME;
  var TRIGGER_NAME4 = "DialogTrigger";
  var DialogTrigger = React55.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeDialog } = _a121, triggerProps = __objRest(_a121, ["__scopeDialog"]);
      const context = useDialogContext(TRIGGER_NAME4, __scopeDialog);
      const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        Primitive.button,
        __spreadProps(__spreadValues({
          type: "button",
          "aria-haspopup": "dialog",
          "aria-expanded": context.open,
          "aria-controls": context.contentId,
          "data-state": getState2(context.open)
        }, triggerProps), {
          ref: composedTriggerRef,
          onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
        })
      );
    }
  );
  DialogTrigger.displayName = TRIGGER_NAME4;
  var PORTAL_NAME5 = "DialogPortal";
  var [PortalProvider3, usePortalContext3] = createDialogContext(PORTAL_NAME5, {
    forceMount: void 0
  });
  var DialogPortal = /* @__PURE__ */ __name((props) => {
    const { __scopeDialog, forceMount, children, container } = props;
    const context = useDialogContext(PORTAL_NAME5, __scopeDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(PortalProvider3, { scope: __scopeDialog, forceMount, children: React55.Children.map(children, (child) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Portal, { asChild: true, container, children: child }) })) });
  }, "DialogPortal");
  DialogPortal.displayName = PORTAL_NAME5;
  var OVERLAY_NAME = "DialogOverlay";
  var DialogOverlay = React55.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext3(OVERLAY_NAME, props.__scopeDialog);
      const _a121 = props, { forceMount = portalContext.forceMount } = _a121, overlayProps = __objRest(_a121, ["forceMount"]);
      const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);
      return context.modal ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(DialogOverlayImpl, __spreadProps(__spreadValues({}, overlayProps), { ref: forwardedRef })) }) : null;
    }
  );
  DialogOverlay.displayName = OVERLAY_NAME;
  var Slot4 = createSlot("DialogOverlay.RemoveScroll");
  var DialogOverlayImpl = React55.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeDialog } = _a121, overlayProps = __objRest(_a121, ["__scopeDialog"]);
      const context = useDialogContext(OVERLAY_NAME, __scopeDialog);
      return (
        // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
        // ie. when `Overlay` and `Content` are siblings
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Combination_default, { as: Slot4, allowPinchZoom: true, shards: [context.contentRef], children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          Primitive.div,
          __spreadProps(__spreadValues({
            "data-state": getState2(context.open)
          }, overlayProps), {
            ref: forwardedRef,
            style: __spreadValues({ pointerEvents: "auto" }, overlayProps.style)
          })
        ) })
      );
    }
  );
  var CONTENT_NAME5 = "DialogContent";
  var DialogContent = React55.forwardRef(
    (props, forwardedRef) => {
      const portalContext = usePortalContext3(CONTENT_NAME5, props.__scopeDialog);
      const _a121 = props, { forceMount = portalContext.forceMount } = _a121, contentProps = __objRest(_a121, ["forceMount"]);
      const context = useDialogContext(CONTENT_NAME5, props.__scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Presence, { present: forceMount || context.open, children: context.modal ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(DialogContentModal, __spreadProps(__spreadValues({}, contentProps), { ref: forwardedRef })) : /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(DialogContentNonModal, __spreadProps(__spreadValues({}, contentProps), { ref: forwardedRef })) });
    }
  );
  DialogContent.displayName = CONTENT_NAME5;
  var DialogContentModal = React55.forwardRef(
    (props, forwardedRef) => {
      const context = useDialogContext(CONTENT_NAME5, props.__scopeDialog);
      const contentRef = React55.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);
      React55.useEffect(() => {
        const content = contentRef.current;
        if (content) return hideOthers(content);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        DialogContentImpl,
        __spreadProps(__spreadValues({}, props), {
          ref: composedRefs,
          trapFocus: context.open,
          disableOutsidePointerEvents: true,
          onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, (event) => {
            var _a121;
            event.preventDefault();
            (_a121 = context.triggerRef.current) == null ? void 0 : _a121.focus();
          }),
          onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, (event) => {
            const originalEvent = event.detail.originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            if (isRightClick) event.preventDefault();
          }),
          onFocusOutside: composeEventHandlers(
            props.onFocusOutside,
            (event) => event.preventDefault()
          )
        })
      );
    }
  );
  var DialogContentNonModal = React55.forwardRef(
    (props, forwardedRef) => {
      const context = useDialogContext(CONTENT_NAME5, props.__scopeDialog);
      const hasInteractedOutsideRef = React55.useRef(false);
      const hasPointerDownOutsideRef = React55.useRef(false);
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        DialogContentImpl,
        __spreadProps(__spreadValues({}, props), {
          ref: forwardedRef,
          trapFocus: false,
          disableOutsidePointerEvents: false,
          onCloseAutoFocus: /* @__PURE__ */ __name((event) => {
            var _a121, _b93;
            (_a121 = props.onCloseAutoFocus) == null ? void 0 : _a121.call(props, event);
            if (!event.defaultPrevented) {
              if (!hasInteractedOutsideRef.current) (_b93 = context.triggerRef.current) == null ? void 0 : _b93.focus();
              event.preventDefault();
            }
            hasInteractedOutsideRef.current = false;
            hasPointerDownOutsideRef.current = false;
          }, "onCloseAutoFocus"),
          onInteractOutside: /* @__PURE__ */ __name((event) => {
            var _a121, _b93;
            (_a121 = props.onInteractOutside) == null ? void 0 : _a121.call(props, event);
            if (!event.defaultPrevented) {
              hasInteractedOutsideRef.current = true;
              if (event.detail.originalEvent.type === "pointerdown") {
                hasPointerDownOutsideRef.current = true;
              }
            }
            const target = event.target;
            const targetIsTrigger = (_b93 = context.triggerRef.current) == null ? void 0 : _b93.contains(target);
            if (targetIsTrigger) event.preventDefault();
            if (event.detail.originalEvent.type === "focusin" && hasPointerDownOutsideRef.current) {
              event.preventDefault();
            }
          }, "onInteractOutside")
        })
      );
    }
  );
  var DialogContentImpl = React55.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus } = _a121, contentProps = __objRest(_a121, ["__scopeDialog", "trapFocus", "onOpenAutoFocus", "onCloseAutoFocus"]);
      const context = useDialogContext(CONTENT_NAME5, __scopeDialog);
      const contentRef = React55.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, contentRef);
      useFocusGuards();
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
          FocusScope,
          {
            asChild: true,
            loop: true,
            trapped: trapFocus,
            onMountAutoFocus: onOpenAutoFocus,
            onUnmountAutoFocus: onCloseAutoFocus,
            children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
              DismissableLayer,
              __spreadProps(__spreadValues({
                role: "dialog",
                id: context.contentId,
                "aria-describedby": context.descriptionId,
                "aria-labelledby": context.titleId,
                "data-state": getState2(context.open)
              }, contentProps), {
                ref: composedRefs,
                onDismiss: /* @__PURE__ */ __name(() => context.onOpenChange(false), "onDismiss")
              })
            )
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(import_jsx_runtime19.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TitleWarning, { titleId: context.titleId }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(DescriptionWarning, { contentRef, descriptionId: context.descriptionId })
        ] })
      ] });
    }
  );
  var TITLE_NAME2 = "DialogTitle";
  var DialogTitle = React55.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeDialog } = _a121, titleProps = __objRest(_a121, ["__scopeDialog"]);
      const context = useDialogContext(TITLE_NAME2, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Primitive.h2, __spreadProps(__spreadValues({ id: context.titleId }, titleProps), { ref: forwardedRef }));
    }
  );
  DialogTitle.displayName = TITLE_NAME2;
  var DESCRIPTION_NAME2 = "DialogDescription";
  var DialogDescription = React55.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeDialog } = _a121, descriptionProps = __objRest(_a121, ["__scopeDialog"]);
      const context = useDialogContext(DESCRIPTION_NAME2, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(Primitive.p, __spreadProps(__spreadValues({ id: context.descriptionId }, descriptionProps), { ref: forwardedRef }));
    }
  );
  DialogDescription.displayName = DESCRIPTION_NAME2;
  var CLOSE_NAME3 = "DialogClose";
  var DialogClose = React55.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeDialog } = _a121, closeProps = __objRest(_a121, ["__scopeDialog"]);
      const context = useDialogContext(CLOSE_NAME3, __scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
        Primitive.button,
        __spreadProps(__spreadValues({
          type: "button"
        }, closeProps), {
          ref: forwardedRef,
          onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))
        })
      );
    }
  );
  DialogClose.displayName = CLOSE_NAME3;
  function getState2(open) {
    return open ? "open" : "closed";
  }
  __name(getState2, "getState");
  var TITLE_WARNING_NAME = "DialogTitleWarning";
  var [WarningProvider, useWarningContext] = createContext22(TITLE_WARNING_NAME, {
    contentName: CONTENT_NAME5,
    titleName: TITLE_NAME2,
    docsSlug: "dialog"
  });
  var TitleWarning = /* @__PURE__ */ __name(({ titleId }) => {
    const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);
    const MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;
    React55.useEffect(() => {
      if (titleId) {
        const hasTitle = document.getElementById(titleId);
        if (!hasTitle) console.error(MESSAGE);
      }
    }, [MESSAGE, titleId]);
    return null;
  }, "TitleWarning");
  var DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning";
  var DescriptionWarning = /* @__PURE__ */ __name(({ contentRef, descriptionId }) => {
    const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);
    const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${descriptionWarningContext.contentName}}.`;
    React55.useEffect(() => {
      var _a121;
      const describedById = (_a121 = contentRef.current) == null ? void 0 : _a121.getAttribute("aria-describedby");
      if (descriptionId && describedById) {
        const hasDescription = document.getElementById(descriptionId);
        if (!hasDescription) console.warn(MESSAGE);
      }
    }, [MESSAGE, contentRef, descriptionId]);
    return null;
  }, "DescriptionWarning");
  var Root5 = Dialog;
  var Trigger4 = DialogTrigger;
  var Portal4 = DialogPortal;
  var Overlay = DialogOverlay;
  var Content3 = DialogContent;
  var Title2 = DialogTitle;
  var Description2 = DialogDescription;
  var Close2 = DialogClose;

  // node_modules/cmdk/dist/index.mjs
  var t = __toESM(require_react(), 1);
  var N = '[cmdk-group=""]';
  var Y2 = '[cmdk-group-items=""]';
  var be = '[cmdk-group-heading=""]';
  var le = '[cmdk-item=""]';
  var ce = `${le}:not([aria-disabled="true"])`;
  var Z = "cmdk-item-select";
  var T = "data-value";
  var Re = /* @__PURE__ */ __name((r3, o2, n2) => W(r3, o2, n2), "Re");
  var ue = t.createContext(void 0);
  var K2 = /* @__PURE__ */ __name(() => t.useContext(ue), "K");
  var de = t.createContext(void 0);
  var ee = /* @__PURE__ */ __name(() => t.useContext(de), "ee");
  var fe = t.createContext(void 0);
  var me = t.forwardRef((r3, o2) => {
    let n2 = L(() => {
      var e, a;
      return { search: "", value: (a = (e = r3.value) != null ? e : r3.defaultValue) != null ? a : "", selectedItemId: void 0, filtered: { count: 0, items: /* @__PURE__ */ new Map(), groups: /* @__PURE__ */ new Set() } };
    }), u2 = L(() => /* @__PURE__ */ new Set()), c = L(() => /* @__PURE__ */ new Map()), d = L(() => /* @__PURE__ */ new Map()), f = L(() => /* @__PURE__ */ new Set()), p2 = pe(r3), _a121 = r3, { label: b, children: m2, value: R, onValueChange: x, filter: C, shouldFilter: S, loop: A, disablePointerSelection: ge = false, vimBindings: j = true } = _a121, O = __objRest(_a121, ["label", "children", "value", "onValueChange", "filter", "shouldFilter", "loop", "disablePointerSelection", "vimBindings"]), $2 = useId(), q = useId(), _ = useId(), I = t.useRef(null), v = ke();
    k2(() => {
      if (R !== void 0) {
        let e = R.trim();
        n2.current.value = e, E.emit();
      }
    }, [R]), k2(() => {
      v(6, ne);
    }, []);
    let E = t.useMemo(() => ({ subscribe: /* @__PURE__ */ __name((e) => (f.current.add(e), () => f.current.delete(e)), "subscribe"), snapshot: /* @__PURE__ */ __name(() => n2.current, "snapshot"), setState: /* @__PURE__ */ __name((e, a, s2) => {
      var i2, l, g, y;
      if (!Object.is(n2.current[e], a)) {
        if (n2.current[e] = a, e === "search") J2(), z2(), v(1, W2);
        else if (e === "value") {
          if (document.activeElement.hasAttribute("cmdk-input") || document.activeElement.hasAttribute("cmdk-root")) {
            let h = document.getElementById(_);
            h ? h.focus() : (i2 = document.getElementById($2)) == null || i2.focus();
          }
          if (v(7, () => {
            var h;
            n2.current.selectedItemId = (h = M()) == null ? void 0 : h.id, E.emit();
          }), s2 || v(5, ne), ((l = p2.current) == null ? void 0 : l.value) !== void 0) {
            let h = a != null ? a : "";
            (y = (g = p2.current).onValueChange) == null || y.call(g, h);
            return;
          }
        }
        E.emit();
      }
    }, "setState"), emit: /* @__PURE__ */ __name(() => {
      f.current.forEach((e) => e());
    }, "emit") }), []), U2 = t.useMemo(() => ({ value: /* @__PURE__ */ __name((e, a, s2) => {
      var i2;
      a !== ((i2 = d.current.get(e)) == null ? void 0 : i2.value) && (d.current.set(e, { value: a, keywords: s2 }), n2.current.filtered.items.set(e, te(a, s2)), v(2, () => {
        z2(), E.emit();
      }));
    }, "value"), item: /* @__PURE__ */ __name((e, a) => (u2.current.add(e), a && (c.current.has(a) ? c.current.get(a).add(e) : c.current.set(a, /* @__PURE__ */ new Set([e]))), v(3, () => {
      J2(), z2(), n2.current.value || W2(), E.emit();
    }), () => {
      d.current.delete(e), u2.current.delete(e), n2.current.filtered.items.delete(e);
      let s2 = M();
      v(4, () => {
        J2(), (s2 == null ? void 0 : s2.getAttribute("id")) === e && W2(), E.emit();
      });
    }), "item"), group: /* @__PURE__ */ __name((e) => (c.current.has(e) || c.current.set(e, /* @__PURE__ */ new Set()), () => {
      d.current.delete(e), c.current.delete(e);
    }), "group"), filter: /* @__PURE__ */ __name(() => p2.current.shouldFilter, "filter"), label: b || r3["aria-label"], getDisablePointerSelection: /* @__PURE__ */ __name(() => p2.current.disablePointerSelection, "getDisablePointerSelection"), listId: $2, inputId: _, labelId: q, listInnerRef: I }), []);
    function te(e, a) {
      var i2, l;
      let s2 = (l = (i2 = p2.current) == null ? void 0 : i2.filter) != null ? l : Re;
      return e ? s2(e, n2.current.search, a) : 0;
    }
    __name(te, "te");
    function z2() {
      if (!n2.current.search || p2.current.shouldFilter === false) return;
      let e = n2.current.filtered.items, a = [];
      n2.current.filtered.groups.forEach((i2) => {
        let l = c.current.get(i2), g = 0;
        l.forEach((y) => {
          let h = e.get(y);
          g = Math.max(h, g);
        }), a.push([i2, g]);
      });
      let s2 = I.current;
      V().sort((i2, l) => {
        var h, F;
        let g = i2.getAttribute("id"), y = l.getAttribute("id");
        return ((h = e.get(y)) != null ? h : 0) - ((F = e.get(g)) != null ? F : 0);
      }).forEach((i2) => {
        let l = i2.closest(Y2);
        l ? l.appendChild(i2.parentElement === l ? i2 : i2.closest(`${Y2} > *`)) : s2.appendChild(i2.parentElement === s2 ? i2 : i2.closest(`${Y2} > *`));
      }), a.sort((i2, l) => l[1] - i2[1]).forEach((i2) => {
        var g;
        let l = (g = I.current) == null ? void 0 : g.querySelector(`${N}[${T}="${encodeURIComponent(i2[0])}"]`);
        l == null || l.parentElement.appendChild(l);
      });
    }
    __name(z2, "z");
    function W2() {
      let e = V().find((s2) => s2.getAttribute("aria-disabled") !== "true"), a = e == null ? void 0 : e.getAttribute(T);
      E.setState("value", a || void 0);
    }
    __name(W2, "W");
    function J2() {
      var a, s2, i2, l;
      if (!n2.current.search || p2.current.shouldFilter === false) {
        n2.current.filtered.count = u2.current.size;
        return;
      }
      n2.current.filtered.groups = /* @__PURE__ */ new Set();
      let e = 0;
      for (let g of u2.current) {
        let y = (s2 = (a = d.current.get(g)) == null ? void 0 : a.value) != null ? s2 : "", h = (l = (i2 = d.current.get(g)) == null ? void 0 : i2.keywords) != null ? l : [], F = te(y, h);
        n2.current.filtered.items.set(g, F), F > 0 && e++;
      }
      for (let [g, y] of c.current) for (let h of y) if (n2.current.filtered.items.get(h) > 0) {
        n2.current.filtered.groups.add(g);
        break;
      }
      n2.current.filtered.count = e;
    }
    __name(J2, "J");
    function ne() {
      var a, s2, i2;
      let e = M();
      e && (((a = e.parentElement) == null ? void 0 : a.firstChild) === e && ((i2 = (s2 = e.closest(N)) == null ? void 0 : s2.querySelector(be)) == null || i2.scrollIntoView({ block: "nearest" })), e.scrollIntoView({ block: "nearest" }));
    }
    __name(ne, "ne");
    function M() {
      var e;
      return (e = I.current) == null ? void 0 : e.querySelector(`${le}[aria-selected="true"]`);
    }
    __name(M, "M");
    function V() {
      var e;
      return Array.from(((e = I.current) == null ? void 0 : e.querySelectorAll(ce)) || []);
    }
    __name(V, "V");
    function X5(e) {
      let s2 = V()[e];
      s2 && E.setState("value", s2.getAttribute(T));
    }
    __name(X5, "X");
    function Q(e) {
      var g;
      let a = M(), s2 = V(), i2 = s2.findIndex((y) => y === a), l = s2[i2 + e];
      (g = p2.current) != null && g.loop && (l = i2 + e < 0 ? s2[s2.length - 1] : i2 + e === s2.length ? s2[0] : s2[i2 + e]), l && E.setState("value", l.getAttribute(T));
    }
    __name(Q, "Q");
    function re(e) {
      let a = M(), s2 = a == null ? void 0 : a.closest(N), i2;
      for (; s2 && !i2; ) s2 = e > 0 ? we(s2, N) : De(s2, N), i2 = s2 == null ? void 0 : s2.querySelector(ce);
      i2 ? E.setState("value", i2.getAttribute(T)) : Q(e);
    }
    __name(re, "re");
    let oe = /* @__PURE__ */ __name(() => X5(V().length - 1), "oe"), ie = /* @__PURE__ */ __name((e) => {
      e.preventDefault(), e.metaKey ? oe() : e.altKey ? re(1) : Q(1);
    }, "ie"), se = /* @__PURE__ */ __name((e) => {
      e.preventDefault(), e.metaKey ? X5(0) : e.altKey ? re(-1) : Q(-1);
    }, "se");
    return t.createElement(Primitive.div, __spreadProps(__spreadValues({ ref: o2, tabIndex: -1 }, O), { "cmdk-root": "", onKeyDown: /* @__PURE__ */ __name((e) => {
      var s2;
      (s2 = O.onKeyDown) == null || s2.call(O, e);
      let a = e.nativeEvent.isComposing || e.keyCode === 229;
      if (!(e.defaultPrevented || a)) switch (e.key) {
        case "n":
        case "j": {
          j && e.ctrlKey && ie(e);
          break;
        }
        case "ArrowDown": {
          ie(e);
          break;
        }
        case "p":
        case "k": {
          j && e.ctrlKey && se(e);
          break;
        }
        case "ArrowUp": {
          se(e);
          break;
        }
        case "Home": {
          e.preventDefault(), X5(0);
          break;
        }
        case "End": {
          e.preventDefault(), oe();
          break;
        }
        case "Enter": {
          e.preventDefault();
          let i2 = M();
          if (i2) {
            let l = new Event(Z);
            i2.dispatchEvent(l);
          }
        }
      }
    }, "onKeyDown") }), t.createElement("label", { "cmdk-label": "", htmlFor: U2.inputId, id: U2.labelId, style: Te }, b), B2(r3, (e) => t.createElement(de.Provider, { value: E }, t.createElement(ue.Provider, { value: U2 }, e))));
  });
  var he = t.forwardRef((r3, o2) => {
    var _, I;
    let n2 = useId(), u2 = t.useRef(null), c = t.useContext(fe), d = K2(), f = pe(r3), p2 = (I = (_ = f.current) == null ? void 0 : _.forceMount) != null ? I : c == null ? void 0 : c.forceMount;
    k2(() => {
      if (!p2) return d.item(n2, c == null ? void 0 : c.id);
    }, [p2]);
    let b = ve(n2, u2, [r3.value, r3.children, u2], r3.keywords), m2 = ee(), R = P((v) => v.value && v.value === b.current), x = P((v) => p2 || d.filter() === false ? true : v.search ? v.filtered.items.get(n2) > 0 : true);
    t.useEffect(() => {
      let v = u2.current;
      if (!(!v || r3.disabled)) return v.addEventListener(Z, C), () => v.removeEventListener(Z, C);
    }, [x, r3.onSelect, r3.disabled]);
    function C() {
      var v, E;
      S(), (E = (v = f.current).onSelect) == null || E.call(v, b.current);
    }
    __name(C, "C");
    function S() {
      m2.setState("value", b.current, true);
    }
    __name(S, "S");
    if (!x) return null;
    let _a121 = r3, { disabled: A, value: ge, onSelect: j, forceMount: O, keywords: $2 } = _a121, q = __objRest(_a121, ["disabled", "value", "onSelect", "forceMount", "keywords"]);
    return t.createElement(Primitive.div, __spreadProps(__spreadValues({ ref: composeRefs(u2, o2) }, q), { id: n2, "cmdk-item": "", role: "option", "aria-disabled": !!A, "aria-selected": !!R, "data-disabled": !!A, "data-selected": !!R, onPointerMove: A || d.getDisablePointerSelection() ? void 0 : S, onClick: A ? void 0 : C }), r3.children);
  });
  var Ee = t.forwardRef((r3, o2) => {
    let _a121 = r3, { heading: n2, children: u2, forceMount: c } = _a121, d = __objRest(_a121, ["heading", "children", "forceMount"]), f = useId(), p2 = t.useRef(null), b = t.useRef(null), m2 = useId(), R = K2(), x = P((S) => c || R.filter() === false ? true : S.search ? S.filtered.groups.has(f) : true);
    k2(() => R.group(f), []), ve(f, p2, [r3.value, r3.heading, b]);
    let C = t.useMemo(() => ({ id: f, forceMount: c }), [c]);
    return t.createElement(Primitive.div, __spreadProps(__spreadValues({ ref: composeRefs(p2, o2) }, d), { "cmdk-group": "", role: "presentation", hidden: x ? void 0 : true }), n2 && t.createElement("div", { ref: b, "cmdk-group-heading": "", "aria-hidden": true, id: m2 }, n2), B2(r3, (S) => t.createElement("div", { "cmdk-group-items": "", role: "group", "aria-labelledby": n2 ? m2 : void 0 }, t.createElement(fe.Provider, { value: C }, S))));
  });
  var ye = t.forwardRef((r3, o2) => {
    let _a121 = r3, { alwaysRender: n2 } = _a121, u2 = __objRest(_a121, ["alwaysRender"]), c = t.useRef(null), d = P((f) => !f.search);
    return !n2 && !d ? null : t.createElement(Primitive.div, __spreadProps(__spreadValues({ ref: composeRefs(c, o2) }, u2), { "cmdk-separator": "", role: "separator" }));
  });
  var Se = t.forwardRef((r3, o2) => {
    let _a121 = r3, { onValueChange: n2 } = _a121, u2 = __objRest(_a121, ["onValueChange"]), c = r3.value != null, d = ee(), f = P((m2) => m2.search), p2 = P((m2) => m2.selectedItemId), b = K2();
    return t.useEffect(() => {
      r3.value != null && d.setState("search", r3.value);
    }, [r3.value]), t.createElement(Primitive.input, __spreadProps(__spreadValues({ ref: o2 }, u2), { "cmdk-input": "", autoComplete: "off", autoCorrect: "off", spellCheck: false, "aria-autocomplete": "list", role: "combobox", "aria-expanded": true, "aria-controls": b.listId, "aria-labelledby": b.labelId, "aria-activedescendant": p2, id: b.inputId, type: "text", value: c ? r3.value : f, onChange: /* @__PURE__ */ __name((m2) => {
      c || d.setState("search", m2.target.value), n2 == null || n2(m2.target.value);
    }, "onChange") }));
  });
  var Ce = t.forwardRef((r3, o2) => {
    let _a121 = r3, { children: n2, label: u2 = "Suggestions" } = _a121, c = __objRest(_a121, ["children", "label"]), d = t.useRef(null), f = t.useRef(null), p2 = P((m2) => m2.selectedItemId), b = K2();
    return t.useEffect(() => {
      if (f.current && d.current) {
        let m2 = f.current, R = d.current, x, C = new ResizeObserver(() => {
          x = requestAnimationFrame(() => {
            let S = m2.offsetHeight;
            R.style.setProperty("--cmdk-list-height", S.toFixed(1) + "px");
          });
        });
        return C.observe(m2), () => {
          cancelAnimationFrame(x), C.unobserve(m2);
        };
      }
    }, []), t.createElement(Primitive.div, __spreadProps(__spreadValues({ ref: composeRefs(d, o2) }, c), { "cmdk-list": "", role: "listbox", tabIndex: -1, "aria-activedescendant": p2, "aria-label": u2, id: b.listId }), B2(r3, (m2) => t.createElement("div", { ref: composeRefs(f, b.listInnerRef), "cmdk-list-sizer": "" }, m2)));
  });
  var xe = t.forwardRef((r3, o2) => {
    let _a121 = r3, { open: n2, onOpenChange: u2, overlayClassName: c, contentClassName: d, container: f } = _a121, p2 = __objRest(_a121, ["open", "onOpenChange", "overlayClassName", "contentClassName", "container"]);
    return t.createElement(Root5, { open: n2, onOpenChange: u2 }, t.createElement(Portal4, { container: f }, t.createElement(Overlay, { "cmdk-overlay": "", className: c }), t.createElement(Content3, { "aria-label": r3.label, "cmdk-dialog": "", className: d }, t.createElement(me, __spreadValues({ ref: o2 }, p2)))));
  });
  var Ie = t.forwardRef((r3, o2) => P((u2) => u2.filtered.count === 0) ? t.createElement(Primitive.div, __spreadProps(__spreadValues({ ref: o2 }, r3), { "cmdk-empty": "", role: "presentation" })) : null);
  var Pe = t.forwardRef((r3, o2) => {
    let _a121 = r3, { progress: n2, children: u2, label: c = "Loading..." } = _a121, d = __objRest(_a121, ["progress", "children", "label"]);
    return t.createElement(Primitive.div, __spreadProps(__spreadValues({ ref: o2 }, d), { "cmdk-loading": "", role: "progressbar", "aria-valuenow": n2, "aria-valuemin": 0, "aria-valuemax": 100, "aria-label": c }), B2(r3, (f) => t.createElement("div", { "aria-hidden": true }, f)));
  });
  var _e = Object.assign(me, { List: Ce, Item: he, Input: Se, Group: Ee, Separator: ye, Dialog: xe, Empty: Ie, Loading: Pe });
  function we(r3, o2) {
    let n2 = r3.nextElementSibling;
    for (; n2; ) {
      if (n2.matches(o2)) return n2;
      n2 = n2.nextElementSibling;
    }
  }
  __name(we, "we");
  function De(r3, o2) {
    let n2 = r3.previousElementSibling;
    for (; n2; ) {
      if (n2.matches(o2)) return n2;
      n2 = n2.previousElementSibling;
    }
  }
  __name(De, "De");
  function pe(r3) {
    let o2 = t.useRef(r3);
    return k2(() => {
      o2.current = r3;
    }), o2;
  }
  __name(pe, "pe");
  var k2 = typeof window == "undefined" ? t.useEffect : t.useLayoutEffect;
  function L(r3) {
    let o2 = t.useRef();
    return o2.current === void 0 && (o2.current = r3()), o2;
  }
  __name(L, "L");
  function P(r3) {
    let o2 = ee(), n2 = /* @__PURE__ */ __name(() => r3(o2.snapshot()), "n");
    return t.useSyncExternalStore(o2.subscribe, n2, n2);
  }
  __name(P, "P");
  function ve(r3, o2, n2, u2 = []) {
    let c = t.useRef(), d = K2();
    return k2(() => {
      var b;
      let f = (() => {
        var m2;
        for (let R of n2) {
          if (typeof R == "string") return R.trim();
          if (typeof R == "object" && "current" in R) return R.current ? (m2 = R.current.textContent) == null ? void 0 : m2.trim() : c.current;
        }
      })(), p2 = u2.map((m2) => m2.trim());
      d.value(r3, f, p2), (b = o2.current) == null || b.setAttribute(T, f), c.current = f;
    }), c;
  }
  __name(ve, "ve");
  var ke = /* @__PURE__ */ __name(() => {
    let [r3, o2] = t.useState(), n2 = L(() => /* @__PURE__ */ new Map());
    return k2(() => {
      n2.current.forEach((u2) => u2()), n2.current = /* @__PURE__ */ new Map();
    }, [r3]), (u2, c) => {
      n2.current.set(u2, c), o2({});
    };
  }, "ke");
  function Me(r3) {
    let o2 = r3.type;
    return typeof o2 == "function" ? o2(r3.props) : "render" in o2 ? o2.render(r3.props) : r3;
  }
  __name(Me, "Me");
  function B2({ asChild: r3, children: o2 }, n2) {
    return r3 && t.isValidElement(o2) ? t.cloneElement(Me(o2), { ref: o2.ref }, n2(o2.props.children)) : n2(o2);
  }
  __name(B2, "B");
  var Te = { position: "absolute", width: "1px", height: "1px", padding: "0", margin: "-1px", overflow: "hidden", clip: "rect(0, 0, 0, 0)", whiteSpace: "nowrap", borderWidth: "0" };

  // client/src/components/ui/dialog.tsx
  var React56 = __toESM(require_react(), 1);
  var Dialog2 = Root5;
  var DialogTrigger2 = Trigger4;
  var DialogPortal2 = Portal4;
  var DialogOverlay2 = React56.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React56.createElement(
      Overlay,
      __spreadValues({
        ref,
        className: cn(
          "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
          className
        )
      }, props)
    );
  });
  DialogOverlay2.displayName = Overlay.displayName;
  var DialogContent2 = React56.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, children } = _b93, props = __objRest(_b93, ["className", "children"]);
    return /* @__PURE__ */ React56.createElement(DialogPortal2, null, /* @__PURE__ */ React56.createElement(DialogOverlay2, null), /* @__PURE__ */ React56.createElement(
      Content3,
      __spreadValues({
        ref,
        className: cn(
          "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
          className
        )
      }, props),
      children,
      /* @__PURE__ */ React56.createElement(Close2, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground" }, /* @__PURE__ */ React56.createElement(X, { className: "h-4 w-4" }), /* @__PURE__ */ React56.createElement("span", { className: "sr-only" }, "Close"))
    ));
  });
  DialogContent2.displayName = Content3.displayName;
  var DialogHeader = /* @__PURE__ */ __name((_a121) => {
    var _b93 = _a121, {
      className
    } = _b93, props = __objRest(_b93, [
      "className"
    ]);
    return /* @__PURE__ */ React56.createElement(
      "div",
      __spreadValues({
        className: cn(
          "flex flex-col space-y-1.5 text-center sm:text-left",
          className
        )
      }, props)
    );
  }, "DialogHeader");
  DialogHeader.displayName = "DialogHeader";
  var DialogFooter = /* @__PURE__ */ __name((_a121) => {
    var _b93 = _a121, {
      className
    } = _b93, props = __objRest(_b93, [
      "className"
    ]);
    return /* @__PURE__ */ React56.createElement(
      "div",
      __spreadValues({
        className: cn(
          "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
          className
        )
      }, props)
    );
  }, "DialogFooter");
  DialogFooter.displayName = "DialogFooter";
  var DialogTitle2 = React56.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React56.createElement(
      Title2,
      __spreadValues({
        ref,
        className: cn(
          "text-lg font-semibold leading-none tracking-tight",
          className
        )
      }, props)
    );
  });
  DialogTitle2.displayName = Title2.displayName;
  var DialogDescription2 = React56.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React56.createElement(
      Description2,
      __spreadValues({
        ref,
        className: cn("text-sm text-muted-foreground", className)
      }, props)
    );
  });
  DialogDescription2.displayName = Description2.displayName;

  // client/src/components/ui/command.tsx
  var Command = React57.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React57.createElement(
      _e,
      __spreadValues({
        ref,
        className: cn(
          "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
          className
        )
      }, props)
    );
  });
  Command.displayName = _e.displayName;
  var CommandInput = React57.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React57.createElement("div", { className: "flex items-center border-b px-3", "cmdk-input-wrapper": "" }, /* @__PURE__ */ React57.createElement(Search, { className: "mr-2 h-4 w-4 shrink-0 opacity-50" }), /* @__PURE__ */ React57.createElement(
      _e.Input,
      __spreadValues({
        ref,
        className: cn(
          "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
          className
        )
      }, props)
    ));
  });
  CommandInput.displayName = _e.Input.displayName;
  var CommandList = React57.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React57.createElement(
      _e.List,
      __spreadValues({
        ref,
        className: cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)
      }, props)
    );
  });
  CommandList.displayName = _e.List.displayName;
  var CommandEmpty = React57.forwardRef((props, ref) => /* @__PURE__ */ React57.createElement(
    _e.Empty,
    __spreadValues({
      ref,
      className: "py-6 text-center text-sm"
    }, props)
  ));
  CommandEmpty.displayName = _e.Empty.displayName;
  var CommandGroup = React57.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React57.createElement(
      _e.Group,
      __spreadValues({
        ref,
        className: cn(
          "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
          className
        )
      }, props)
    );
  });
  CommandGroup.displayName = _e.Group.displayName;
  var CommandSeparator = React57.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React57.createElement(
      _e.Separator,
      __spreadValues({
        ref,
        className: cn("-mx-1 h-px bg-border", className)
      }, props)
    );
  });
  CommandSeparator.displayName = _e.Separator.displayName;
  var CommandItem = React57.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React57.createElement(
      _e.Item,
      __spreadValues({
        ref,
        className: cn(
          "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
          className
        )
      }, props)
    );
  });
  CommandItem.displayName = _e.Item.displayName;
  var CommandShortcut = /* @__PURE__ */ __name((_a121) => {
    var _b93 = _a121, {
      className
    } = _b93, props = __objRest(_b93, [
      "className"
    ]);
    return /* @__PURE__ */ React57.createElement(
      "span",
      __spreadValues({
        className: cn(
          "ml-auto text-xs tracking-widest text-muted-foreground",
          className
        )
      }, props)
    );
  }, "CommandShortcut");
  CommandShortcut.displayName = "CommandShortcut";

  // client/src/components/ui/checkbox.tsx
  var React59 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-checkbox/dist/index.mjs
  var React58 = __toESM(require_react(), 1);
  var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
  var CHECKBOX_NAME = "Checkbox";
  var [createCheckboxContext, createCheckboxScope] = createContextScope(CHECKBOX_NAME);
  var [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
  var Checkbox = React58.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeCheckbox,
        name,
        checked: checkedProp,
        defaultChecked,
        required,
        disabled,
        value = "on",
        onCheckedChange,
        form
      } = _a121, checkboxProps = __objRest(_a121, [
        "__scopeCheckbox",
        "name",
        "checked",
        "defaultChecked",
        "required",
        "disabled",
        "value",
        "onCheckedChange",
        "form"
      ]);
      const [button, setButton] = React58.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
      const hasConsumerStoppedPropagationRef = React58.useRef(false);
      const isFormControl = button ? form || !!button.closest("form") : true;
      const [checked = false, setChecked] = useControllableState({
        prop: checkedProp,
        defaultProp: defaultChecked,
        onChange: onCheckedChange
      });
      const initialCheckedStateRef = React58.useRef(checked);
      React58.useEffect(() => {
        const form2 = button == null ? void 0 : button.form;
        if (form2) {
          const reset = /* @__PURE__ */ __name(() => setChecked(initialCheckedStateRef.current), "reset");
          form2.addEventListener("reset", reset);
          return () => form2.removeEventListener("reset", reset);
        }
      }, [button, setChecked]);
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(CheckboxProvider, { scope: __scopeCheckbox, state: checked, disabled, children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          Primitive.button,
          __spreadProps(__spreadValues({
            type: "button",
            role: "checkbox",
            "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
            "aria-required": required,
            "data-state": getState3(checked),
            "data-disabled": disabled ? "" : void 0,
            disabled,
            value
          }, checkboxProps), {
            ref: composedRefs,
            onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
              if (event.key === "Enter") event.preventDefault();
            }),
            onClick: composeEventHandlers(props.onClick, (event) => {
              setChecked((prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked);
              if (isFormControl) {
                hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
              }
            })
          })
        ),
        isFormControl && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
          BubbleInput,
          {
            control: button,
            bubbles: !hasConsumerStoppedPropagationRef.current,
            name,
            value,
            checked,
            required,
            disabled,
            form,
            style: { transform: "translateX(-100%)" },
            defaultChecked: isIndeterminate(defaultChecked) ? false : defaultChecked
          }
        )
      ] });
    }
  );
  Checkbox.displayName = CHECKBOX_NAME;
  var INDICATOR_NAME = "CheckboxIndicator";
  var CheckboxIndicator = React58.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeCheckbox, forceMount } = _a121, indicatorProps = __objRest(_a121, ["__scopeCheckbox", "forceMount"]);
      const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
      return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(Presence, { present: forceMount || isIndeterminate(context.state) || context.state === true, children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
        Primitive.span,
        __spreadProps(__spreadValues({
          "data-state": getState3(context.state),
          "data-disabled": context.disabled ? "" : void 0
        }, indicatorProps), {
          ref: forwardedRef,
          style: __spreadValues({ pointerEvents: "none" }, props.style)
        })
      ) });
    }
  );
  CheckboxIndicator.displayName = INDICATOR_NAME;
  var BubbleInput = /* @__PURE__ */ __name((props) => {
    const _a121 = props, { control, checked, bubbles = true, defaultChecked } = _a121, inputProps = __objRest(_a121, ["control", "checked", "bubbles", "defaultChecked"]);
    const ref = React58.useRef(null);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React58.useEffect(() => {
      const input = ref.current;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked");
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        input.indeterminate = isIndeterminate(checked);
        setChecked.call(input, isIndeterminate(checked) ? false : checked);
        input.dispatchEvent(event);
      }
    }, [prevChecked, checked, bubbles]);
    const defaultCheckedRef = React58.useRef(isIndeterminate(checked) ? false : checked);
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
      "input",
      __spreadProps(__spreadValues({
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: defaultChecked != null ? defaultChecked : defaultCheckedRef.current
      }, inputProps), {
        tabIndex: -1,
        ref,
        style: __spreadProps(__spreadValues(__spreadValues({}, props.style), controlSize), {
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        })
      })
    );
  }, "BubbleInput");
  function isIndeterminate(checked) {
    return checked === "indeterminate";
  }
  __name(isIndeterminate, "isIndeterminate");
  function getState3(checked) {
    return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
  }
  __name(getState3, "getState");
  var Root6 = Checkbox;
  var Indicator = CheckboxIndicator;

  // client/src/components/ui/checkbox.tsx
  var Checkbox2 = React59.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React59.createElement(
      Root6,
      __spreadValues({
        ref,
        className: cn(
          "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
          className
        )
      }, props),
      /* @__PURE__ */ React59.createElement(
        Indicator,
        {
          className: cn("flex items-center justify-center text-current")
        },
        /* @__PURE__ */ React59.createElement(Check, { className: "h-4 w-4" })
      )
    );
  });
  Checkbox2.displayName = Root6.displayName;

  // client/src/components/confirmation-modal.tsx
  function ConfirmationModal({
    open,
    onClose,
    onConfirm,
    title,
    message: message2,
    confirmText = "Confirm",
    cancelText = "Cancel",
    variant = "default"
  }) {
    return /* @__PURE__ */ React.createElement(Dialog2, { open, onOpenChange: onClose }, /* @__PURE__ */ React.createElement(DialogContent2, { className: "max-w-md" }, /* @__PURE__ */ React.createElement(DialogHeader, null, /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-3 mb-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex-shrink-0" }, /* @__PURE__ */ React.createElement(TriangleAlert, { className: "w-6 h-6 text-amber-500" })), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(DialogTitle2, { className: "text-lg font-semibold text-gray-900" }, title), /* @__PURE__ */ React.createElement(DialogDescription2, { className: "text-sm text-gray-500 mt-1" }, message2)))), /* @__PURE__ */ React.createElement("div", { className: "flex justify-end space-x-3" }, /* @__PURE__ */ React.createElement(Button, { type: "button", variant: "outline", onClick: onClose }, cancelText), /* @__PURE__ */ React.createElement(
      Button,
      {
        type: "button",
        variant,
        onClick: onConfirm,
        className: variant === "destructive" ? "bg-red-600 hover:bg-red-700 text-white" : "bg-blue-600 hover:bg-blue-700 text-white"
      },
      confirmText
    ))));
  }
  __name(ConfirmationModal, "ConfirmationModal");

  // node_modules/@dnd-kit/core/dist/core.esm.js
  var import_react12 = __toESM(require_react());
  var import_react_dom3 = __toESM(require_react_dom());

  // node_modules/@dnd-kit/utilities/dist/utilities.esm.js
  var import_react10 = __toESM(require_react());
  function useCombinedRefs() {
    for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {
      refs[_key] = arguments[_key];
    }
    return (0, import_react10.useMemo)(
      () => (node) => {
        refs.forEach((ref) => ref(node));
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      refs
    );
  }
  __name(useCombinedRefs, "useCombinedRefs");
  var canUseDOM2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
  function isWindow(element) {
    const elementString = Object.prototype.toString.call(element);
    return elementString === "[object Window]" || // In Electron context the Window object serializes to [object global]
    elementString === "[object global]";
  }
  __name(isWindow, "isWindow");
  function isNode2(node) {
    return "nodeType" in node;
  }
  __name(isNode2, "isNode");
  function getWindow2(target) {
    var _target$ownerDocument, _target$ownerDocument2;
    if (!target) {
      return window;
    }
    if (isWindow(target)) {
      return target;
    }
    if (!isNode2(target)) {
      return window;
    }
    return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? void 0 : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
  }
  __name(getWindow2, "getWindow");
  function isDocument(node) {
    const {
      Document
    } = getWindow2(node);
    return node instanceof Document;
  }
  __name(isDocument, "isDocument");
  function isHTMLElement3(node) {
    if (isWindow(node)) {
      return false;
    }
    return node instanceof getWindow2(node).HTMLElement;
  }
  __name(isHTMLElement3, "isHTMLElement");
  function isSVGElement(node) {
    return node instanceof getWindow2(node).SVGElement;
  }
  __name(isSVGElement, "isSVGElement");
  function getOwnerDocument(target) {
    if (!target) {
      return document;
    }
    if (isWindow(target)) {
      return target.document;
    }
    if (!isNode2(target)) {
      return document;
    }
    if (isDocument(target)) {
      return target;
    }
    if (isHTMLElement3(target) || isSVGElement(target)) {
      return target.ownerDocument;
    }
    return document;
  }
  __name(getOwnerDocument, "getOwnerDocument");
  var useIsomorphicLayoutEffect3 = canUseDOM2 ? import_react10.useLayoutEffect : import_react10.useEffect;
  function useEvent2(handler) {
    const handlerRef = (0, import_react10.useRef)(handler);
    useIsomorphicLayoutEffect3(() => {
      handlerRef.current = handler;
    });
    return (0, import_react10.useCallback)(function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      return handlerRef.current == null ? void 0 : handlerRef.current(...args);
    }, []);
  }
  __name(useEvent2, "useEvent");
  function useInterval() {
    const intervalRef = (0, import_react10.useRef)(null);
    const set2 = (0, import_react10.useCallback)((listener, duration) => {
      intervalRef.current = setInterval(listener, duration);
    }, []);
    const clear = (0, import_react10.useCallback)(() => {
      if (intervalRef.current !== null) {
        clearInterval(intervalRef.current);
        intervalRef.current = null;
      }
    }, []);
    return [set2, clear];
  }
  __name(useInterval, "useInterval");
  function useLatestValue(value, dependencies) {
    if (dependencies === void 0) {
      dependencies = [value];
    }
    const valueRef = (0, import_react10.useRef)(value);
    useIsomorphicLayoutEffect3(() => {
      if (valueRef.current !== value) {
        valueRef.current = value;
      }
    }, dependencies);
    return valueRef;
  }
  __name(useLatestValue, "useLatestValue");
  function useLazyMemo(callback, dependencies) {
    const valueRef = (0, import_react10.useRef)();
    return (0, import_react10.useMemo)(
      () => {
        const newValue = callback(valueRef.current);
        valueRef.current = newValue;
        return newValue;
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [...dependencies]
    );
  }
  __name(useLazyMemo, "useLazyMemo");
  function useNodeRef(onChange) {
    const onChangeHandler = useEvent2(onChange);
    const node = (0, import_react10.useRef)(null);
    const setNodeRef = (0, import_react10.useCallback)(
      (element) => {
        if (element !== node.current) {
          onChangeHandler == null ? void 0 : onChangeHandler(element, node.current);
        }
        node.current = element;
      },
      //eslint-disable-next-line
      []
    );
    return [node, setNodeRef];
  }
  __name(useNodeRef, "useNodeRef");
  function usePrevious2(value) {
    const ref = (0, import_react10.useRef)();
    (0, import_react10.useEffect)(() => {
      ref.current = value;
    }, [value]);
    return ref.current;
  }
  __name(usePrevious2, "usePrevious");
  var ids = {};
  function useUniqueId(prefix, value) {
    return (0, import_react10.useMemo)(() => {
      if (value) {
        return value;
      }
      const id = ids[prefix] == null ? 0 : ids[prefix] + 1;
      ids[prefix] = id;
      return prefix + "-" + id;
    }, [prefix, value]);
  }
  __name(useUniqueId, "useUniqueId");
  function createAdjustmentFn(modifier) {
    return function(object) {
      for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        adjustments[_key - 1] = arguments[_key];
      }
      return adjustments.reduce((accumulator, adjustment) => {
        const entries = Object.entries(adjustment);
        for (const [key, valueAdjustment] of entries) {
          const value = accumulator[key];
          if (value != null) {
            accumulator[key] = value + modifier * valueAdjustment;
          }
        }
        return accumulator;
      }, __spreadValues({}, object));
    };
  }
  __name(createAdjustmentFn, "createAdjustmentFn");
  var add = /* @__PURE__ */ createAdjustmentFn(1);
  var subtract = /* @__PURE__ */ createAdjustmentFn(-1);
  function hasViewportRelativeCoordinates(event) {
    return "clientX" in event && "clientY" in event;
  }
  __name(hasViewportRelativeCoordinates, "hasViewportRelativeCoordinates");
  function isKeyboardEvent(event) {
    if (!event) {
      return false;
    }
    const {
      KeyboardEvent
    } = getWindow2(event.target);
    return KeyboardEvent && event instanceof KeyboardEvent;
  }
  __name(isKeyboardEvent, "isKeyboardEvent");
  function isTouchEvent(event) {
    if (!event) {
      return false;
    }
    const {
      TouchEvent
    } = getWindow2(event.target);
    return TouchEvent && event instanceof TouchEvent;
  }
  __name(isTouchEvent, "isTouchEvent");
  function getEventCoordinates(event) {
    if (isTouchEvent(event)) {
      if (event.touches && event.touches.length) {
        const {
          clientX: x,
          clientY: y
        } = event.touches[0];
        return {
          x,
          y
        };
      } else if (event.changedTouches && event.changedTouches.length) {
        const {
          clientX: x,
          clientY: y
        } = event.changedTouches[0];
        return {
          x,
          y
        };
      }
    }
    if (hasViewportRelativeCoordinates(event)) {
      return {
        x: event.clientX,
        y: event.clientY
      };
    }
    return null;
  }
  __name(getEventCoordinates, "getEventCoordinates");
  var CSS2 = /* @__PURE__ */ Object.freeze({
    Translate: {
      toString(transform) {
        if (!transform) {
          return;
        }
        const {
          x,
          y
        } = transform;
        return "translate3d(" + (x ? Math.round(x) : 0) + "px, " + (y ? Math.round(y) : 0) + "px, 0)";
      }
    },
    Scale: {
      toString(transform) {
        if (!transform) {
          return;
        }
        const {
          scaleX,
          scaleY
        } = transform;
        return "scaleX(" + scaleX + ") scaleY(" + scaleY + ")";
      }
    },
    Transform: {
      toString(transform) {
        if (!transform) {
          return;
        }
        return [CSS2.Translate.toString(transform), CSS2.Scale.toString(transform)].join(" ");
      }
    },
    Transition: {
      toString(_ref) {
        let {
          property,
          duration,
          easing
        } = _ref;
        return property + " " + duration + "ms " + easing;
      }
    }
  });
  var SELECTOR = "a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";
  function findFirstFocusableNode(element) {
    if (element.matches(SELECTOR)) {
      return element;
    }
    return element.querySelector(SELECTOR);
  }
  __name(findFirstFocusableNode, "findFirstFocusableNode");

  // node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js
  var import_react11 = __toESM(require_react());
  var hiddenStyles = {
    display: "none"
  };
  function HiddenText(_ref) {
    let {
      id,
      value
    } = _ref;
    return import_react11.default.createElement("div", {
      id,
      style: hiddenStyles
    }, value);
  }
  __name(HiddenText, "HiddenText");
  function LiveRegion(_ref) {
    let {
      id,
      announcement,
      ariaLiveType = "assertive"
    } = _ref;
    const visuallyHidden = {
      position: "fixed",
      top: 0,
      left: 0,
      width: 1,
      height: 1,
      margin: -1,
      border: 0,
      padding: 0,
      overflow: "hidden",
      clip: "rect(0 0 0 0)",
      clipPath: "inset(100%)",
      whiteSpace: "nowrap"
    };
    return import_react11.default.createElement("div", {
      id,
      style: visuallyHidden,
      role: "status",
      "aria-live": ariaLiveType,
      "aria-atomic": true
    }, announcement);
  }
  __name(LiveRegion, "LiveRegion");
  function useAnnouncement() {
    const [announcement, setAnnouncement] = (0, import_react11.useState)("");
    const announce = (0, import_react11.useCallback)((value) => {
      if (value != null) {
        setAnnouncement(value);
      }
    }, []);
    return {
      announce,
      announcement
    };
  }
  __name(useAnnouncement, "useAnnouncement");

  // node_modules/@dnd-kit/core/dist/core.esm.js
  var DndMonitorContext = /* @__PURE__ */ (0, import_react12.createContext)(null);
  function useDndMonitor(listener) {
    const registerListener = (0, import_react12.useContext)(DndMonitorContext);
    (0, import_react12.useEffect)(() => {
      if (!registerListener) {
        throw new Error("useDndMonitor must be used within a children of <DndContext>");
      }
      const unsubscribe = registerListener(listener);
      return unsubscribe;
    }, [listener, registerListener]);
  }
  __name(useDndMonitor, "useDndMonitor");
  function useDndMonitorProvider() {
    const [listeners2] = (0, import_react12.useState)(() => /* @__PURE__ */ new Set());
    const registerListener = (0, import_react12.useCallback)((listener) => {
      listeners2.add(listener);
      return () => listeners2.delete(listener);
    }, [listeners2]);
    const dispatch2 = (0, import_react12.useCallback)((_ref) => {
      let {
        type,
        event
      } = _ref;
      listeners2.forEach((listener) => {
        var _listener$type;
        return (_listener$type = listener[type]) == null ? void 0 : _listener$type.call(listener, event);
      });
    }, [listeners2]);
    return [dispatch2, registerListener];
  }
  __name(useDndMonitorProvider, "useDndMonitorProvider");
  var defaultScreenReaderInstructions = {
    draggable: "\n    To pick up a draggable item, press the space bar.\n    While dragging, use the arrow keys to move the item.\n    Press space again to drop the item in its new position, or press escape to cancel.\n  "
  };
  var defaultAnnouncements = {
    onDragStart(_ref) {
      let {
        active
      } = _ref;
      return "Picked up draggable item " + active.id + ".";
    },
    onDragOver(_ref2) {
      let {
        active,
        over
      } = _ref2;
      if (over) {
        return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
      }
      return "Draggable item " + active.id + " is no longer over a droppable area.";
    },
    onDragEnd(_ref3) {
      let {
        active,
        over
      } = _ref3;
      if (over) {
        return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
      }
      return "Draggable item " + active.id + " was dropped.";
    },
    onDragCancel(_ref4) {
      let {
        active
      } = _ref4;
      return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
    }
  };
  function Accessibility(_ref) {
    let {
      announcements = defaultAnnouncements,
      container,
      hiddenTextDescribedById,
      screenReaderInstructions = defaultScreenReaderInstructions
    } = _ref;
    const {
      announce,
      announcement
    } = useAnnouncement();
    const liveRegionId = useUniqueId("DndLiveRegion");
    const [mounted, setMounted] = (0, import_react12.useState)(false);
    (0, import_react12.useEffect)(() => {
      setMounted(true);
    }, []);
    useDndMonitor((0, import_react12.useMemo)(() => ({
      onDragStart(_ref2) {
        let {
          active
        } = _ref2;
        announce(announcements.onDragStart({
          active
        }));
      },
      onDragMove(_ref3) {
        let {
          active,
          over
        } = _ref3;
        if (announcements.onDragMove) {
          announce(announcements.onDragMove({
            active,
            over
          }));
        }
      },
      onDragOver(_ref4) {
        let {
          active,
          over
        } = _ref4;
        announce(announcements.onDragOver({
          active,
          over
        }));
      },
      onDragEnd(_ref5) {
        let {
          active,
          over
        } = _ref5;
        announce(announcements.onDragEnd({
          active,
          over
        }));
      },
      onDragCancel(_ref6) {
        let {
          active,
          over
        } = _ref6;
        announce(announcements.onDragCancel({
          active,
          over
        }));
      }
    }), [announce, announcements]));
    if (!mounted) {
      return null;
    }
    const markup = import_react12.default.createElement(import_react12.default.Fragment, null, import_react12.default.createElement(HiddenText, {
      id: hiddenTextDescribedById,
      value: screenReaderInstructions.draggable
    }), import_react12.default.createElement(LiveRegion, {
      id: liveRegionId,
      announcement
    }));
    return container ? (0, import_react_dom3.createPortal)(markup, container) : markup;
  }
  __name(Accessibility, "Accessibility");
  var Action2;
  (function(Action3) {
    Action3["DragStart"] = "dragStart";
    Action3["DragMove"] = "dragMove";
    Action3["DragEnd"] = "dragEnd";
    Action3["DragCancel"] = "dragCancel";
    Action3["DragOver"] = "dragOver";
    Action3["RegisterDroppable"] = "registerDroppable";
    Action3["SetDroppableDisabled"] = "setDroppableDisabled";
    Action3["UnregisterDroppable"] = "unregisterDroppable";
  })(Action2 || (Action2 = {}));
  function noop3() {
  }
  __name(noop3, "noop");
  function useSensor(sensor, options) {
    return (0, import_react12.useMemo)(
      () => ({
        sensor,
        options: options != null ? options : {}
      }),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [sensor, options]
    );
  }
  __name(useSensor, "useSensor");
  function useSensors() {
    for (var _len = arguments.length, sensors = new Array(_len), _key = 0; _key < _len; _key++) {
      sensors[_key] = arguments[_key];
    }
    return (0, import_react12.useMemo)(
      () => [...sensors].filter((sensor) => sensor != null),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [...sensors]
    );
  }
  __name(useSensors, "useSensors");
  var defaultCoordinates = /* @__PURE__ */ Object.freeze({
    x: 0,
    y: 0
  });
  function distanceBetween(p1, p2) {
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
  }
  __name(distanceBetween, "distanceBetween");
  function sortCollisionsAsc(_ref, _ref2) {
    let {
      data: {
        value: a
      }
    } = _ref;
    let {
      data: {
        value: b
      }
    } = _ref2;
    return a - b;
  }
  __name(sortCollisionsAsc, "sortCollisionsAsc");
  function sortCollisionsDesc(_ref3, _ref4) {
    let {
      data: {
        value: a
      }
    } = _ref3;
    let {
      data: {
        value: b
      }
    } = _ref4;
    return b - a;
  }
  __name(sortCollisionsDesc, "sortCollisionsDesc");
  function cornersOfRectangle(_ref5) {
    let {
      left,
      top,
      height,
      width
    } = _ref5;
    return [{
      x: left,
      y: top
    }, {
      x: left + width,
      y: top
    }, {
      x: left,
      y: top + height
    }, {
      x: left + width,
      y: top + height
    }];
  }
  __name(cornersOfRectangle, "cornersOfRectangle");
  function getFirstCollision(collisions, property) {
    if (!collisions || collisions.length === 0) {
      return null;
    }
    const [firstCollision] = collisions;
    return property ? firstCollision[property] : firstCollision;
  }
  __name(getFirstCollision, "getFirstCollision");
  function centerOfRectangle(rect, left, top) {
    if (left === void 0) {
      left = rect.left;
    }
    if (top === void 0) {
      top = rect.top;
    }
    return {
      x: left + rect.width * 0.5,
      y: top + rect.height * 0.5
    };
  }
  __name(centerOfRectangle, "centerOfRectangle");
  var closestCenter = /* @__PURE__ */ __name((_ref) => {
    let {
      collisionRect,
      droppableRects,
      droppableContainers
    } = _ref;
    const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
    const collisions = [];
    for (const droppableContainer of droppableContainers) {
      const {
        id
      } = droppableContainer;
      const rect = droppableRects.get(id);
      if (rect) {
        const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
        collisions.push({
          id,
          data: {
            droppableContainer,
            value: distBetween
          }
        });
      }
    }
    return collisions.sort(sortCollisionsAsc);
  }, "closestCenter");
  var closestCorners = /* @__PURE__ */ __name((_ref) => {
    let {
      collisionRect,
      droppableRects,
      droppableContainers
    } = _ref;
    const corners = cornersOfRectangle(collisionRect);
    const collisions = [];
    for (const droppableContainer of droppableContainers) {
      const {
        id
      } = droppableContainer;
      const rect = droppableRects.get(id);
      if (rect) {
        const rectCorners = cornersOfRectangle(rect);
        const distances = corners.reduce((accumulator, corner, index3) => {
          return accumulator + distanceBetween(rectCorners[index3], corner);
        }, 0);
        const effectiveDistance = Number((distances / 4).toFixed(4));
        collisions.push({
          id,
          data: {
            droppableContainer,
            value: effectiveDistance
          }
        });
      }
    }
    return collisions.sort(sortCollisionsAsc);
  }, "closestCorners");
  function getIntersectionRatio(entry, target) {
    const top = Math.max(target.top, entry.top);
    const left = Math.max(target.left, entry.left);
    const right = Math.min(target.left + target.width, entry.left + entry.width);
    const bottom = Math.min(target.top + target.height, entry.top + entry.height);
    const width = right - left;
    const height = bottom - top;
    if (left < right && top < bottom) {
      const targetArea = target.width * target.height;
      const entryArea = entry.width * entry.height;
      const intersectionArea = width * height;
      const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
      return Number(intersectionRatio.toFixed(4));
    }
    return 0;
  }
  __name(getIntersectionRatio, "getIntersectionRatio");
  var rectIntersection = /* @__PURE__ */ __name((_ref) => {
    let {
      collisionRect,
      droppableRects,
      droppableContainers
    } = _ref;
    const collisions = [];
    for (const droppableContainer of droppableContainers) {
      const {
        id
      } = droppableContainer;
      const rect = droppableRects.get(id);
      if (rect) {
        const intersectionRatio = getIntersectionRatio(rect, collisionRect);
        if (intersectionRatio > 0) {
          collisions.push({
            id,
            data: {
              droppableContainer,
              value: intersectionRatio
            }
          });
        }
      }
    }
    return collisions.sort(sortCollisionsDesc);
  }, "rectIntersection");
  function adjustScale(transform, rect1, rect2) {
    return __spreadProps(__spreadValues({}, transform), {
      scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
      scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
    });
  }
  __name(adjustScale, "adjustScale");
  function getRectDelta(rect1, rect2) {
    return rect1 && rect2 ? {
      x: rect1.left - rect2.left,
      y: rect1.top - rect2.top
    } : defaultCoordinates;
  }
  __name(getRectDelta, "getRectDelta");
  function createRectAdjustmentFn(modifier) {
    return /* @__PURE__ */ __name(function adjustClientRect(rect) {
      for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        adjustments[_key - 1] = arguments[_key];
      }
      return adjustments.reduce((acc, adjustment) => __spreadProps(__spreadValues({}, acc), {
        top: acc.top + modifier * adjustment.y,
        bottom: acc.bottom + modifier * adjustment.y,
        left: acc.left + modifier * adjustment.x,
        right: acc.right + modifier * adjustment.x
      }), __spreadValues({}, rect));
    }, "adjustClientRect");
  }
  __name(createRectAdjustmentFn, "createRectAdjustmentFn");
  var getAdjustedRect = /* @__PURE__ */ createRectAdjustmentFn(1);
  function parseTransform(transform) {
    if (transform.startsWith("matrix3d(")) {
      const transformArray = transform.slice(9, -1).split(/, /);
      return {
        x: +transformArray[12],
        y: +transformArray[13],
        scaleX: +transformArray[0],
        scaleY: +transformArray[5]
      };
    } else if (transform.startsWith("matrix(")) {
      const transformArray = transform.slice(7, -1).split(/, /);
      return {
        x: +transformArray[4],
        y: +transformArray[5],
        scaleX: +transformArray[0],
        scaleY: +transformArray[3]
      };
    }
    return null;
  }
  __name(parseTransform, "parseTransform");
  function inverseTransform(rect, transform, transformOrigin2) {
    const parsedTransform = parseTransform(transform);
    if (!parsedTransform) {
      return rect;
    }
    const {
      scaleX,
      scaleY,
      x: translateX,
      y: translateY
    } = parsedTransform;
    const x = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin2);
    const y = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin2.slice(transformOrigin2.indexOf(" ") + 1));
    const w = scaleX ? rect.width / scaleX : rect.width;
    const h = scaleY ? rect.height / scaleY : rect.height;
    return {
      width: w,
      height: h,
      top: y,
      right: x + w,
      bottom: y + h,
      left: x
    };
  }
  __name(inverseTransform, "inverseTransform");
  var defaultOptions2 = {
    ignoreTransform: false
  };
  function getClientRect(element, options) {
    if (options === void 0) {
      options = defaultOptions2;
    }
    let rect = element.getBoundingClientRect();
    if (options.ignoreTransform) {
      const {
        transform,
        transformOrigin: transformOrigin2
      } = getWindow2(element).getComputedStyle(element);
      if (transform) {
        rect = inverseTransform(rect, transform, transformOrigin2);
      }
    }
    const {
      top,
      left,
      width,
      height,
      bottom,
      right
    } = rect;
    return {
      top,
      left,
      width,
      height,
      bottom,
      right
    };
  }
  __name(getClientRect, "getClientRect");
  function getTransformAgnosticClientRect(element) {
    return getClientRect(element, {
      ignoreTransform: true
    });
  }
  __name(getTransformAgnosticClientRect, "getTransformAgnosticClientRect");
  function getWindowClientRect(element) {
    const width = element.innerWidth;
    const height = element.innerHeight;
    return {
      top: 0,
      left: 0,
      right: width,
      bottom: height,
      width,
      height
    };
  }
  __name(getWindowClientRect, "getWindowClientRect");
  function isFixed(node, computedStyle) {
    if (computedStyle === void 0) {
      computedStyle = getWindow2(node).getComputedStyle(node);
    }
    return computedStyle.position === "fixed";
  }
  __name(isFixed, "isFixed");
  function isScrollable(element, computedStyle) {
    if (computedStyle === void 0) {
      computedStyle = getWindow2(element).getComputedStyle(element);
    }
    const overflowRegex = /(auto|scroll|overlay)/;
    const properties2 = ["overflow", "overflowX", "overflowY"];
    return properties2.some((property) => {
      const value = computedStyle[property];
      return typeof value === "string" ? overflowRegex.test(value) : false;
    });
  }
  __name(isScrollable, "isScrollable");
  function getScrollableAncestors(element, limit) {
    const scrollParents = [];
    function findScrollableAncestors(node) {
      if (limit != null && scrollParents.length >= limit) {
        return scrollParents;
      }
      if (!node) {
        return scrollParents;
      }
      if (isDocument(node) && node.scrollingElement != null && !scrollParents.includes(node.scrollingElement)) {
        scrollParents.push(node.scrollingElement);
        return scrollParents;
      }
      if (!isHTMLElement3(node) || isSVGElement(node)) {
        return scrollParents;
      }
      if (scrollParents.includes(node)) {
        return scrollParents;
      }
      const computedStyle = getWindow2(element).getComputedStyle(node);
      if (node !== element) {
        if (isScrollable(node, computedStyle)) {
          scrollParents.push(node);
        }
      }
      if (isFixed(node, computedStyle)) {
        return scrollParents;
      }
      return findScrollableAncestors(node.parentNode);
    }
    __name(findScrollableAncestors, "findScrollableAncestors");
    if (!element) {
      return scrollParents;
    }
    return findScrollableAncestors(element);
  }
  __name(getScrollableAncestors, "getScrollableAncestors");
  function getFirstScrollableAncestor(node) {
    const [firstScrollableAncestor] = getScrollableAncestors(node, 1);
    return firstScrollableAncestor != null ? firstScrollableAncestor : null;
  }
  __name(getFirstScrollableAncestor, "getFirstScrollableAncestor");
  function getScrollableElement(element) {
    if (!canUseDOM2 || !element) {
      return null;
    }
    if (isWindow(element)) {
      return element;
    }
    if (!isNode2(element)) {
      return null;
    }
    if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {
      return window;
    }
    if (isHTMLElement3(element)) {
      return element;
    }
    return null;
  }
  __name(getScrollableElement, "getScrollableElement");
  function getScrollXCoordinate(element) {
    if (isWindow(element)) {
      return element.scrollX;
    }
    return element.scrollLeft;
  }
  __name(getScrollXCoordinate, "getScrollXCoordinate");
  function getScrollYCoordinate(element) {
    if (isWindow(element)) {
      return element.scrollY;
    }
    return element.scrollTop;
  }
  __name(getScrollYCoordinate, "getScrollYCoordinate");
  function getScrollCoordinates(element) {
    return {
      x: getScrollXCoordinate(element),
      y: getScrollYCoordinate(element)
    };
  }
  __name(getScrollCoordinates, "getScrollCoordinates");
  var Direction;
  (function(Direction2) {
    Direction2[Direction2["Forward"] = 1] = "Forward";
    Direction2[Direction2["Backward"] = -1] = "Backward";
  })(Direction || (Direction = {}));
  function isDocumentScrollingElement(element) {
    if (!canUseDOM2 || !element) {
      return false;
    }
    return element === document.scrollingElement;
  }
  __name(isDocumentScrollingElement, "isDocumentScrollingElement");
  function getScrollPosition(scrollingContainer) {
    const minScroll = {
      x: 0,
      y: 0
    };
    const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
      height: window.innerHeight,
      width: window.innerWidth
    } : {
      height: scrollingContainer.clientHeight,
      width: scrollingContainer.clientWidth
    };
    const maxScroll = {
      x: scrollingContainer.scrollWidth - dimensions.width,
      y: scrollingContainer.scrollHeight - dimensions.height
    };
    const isTop = scrollingContainer.scrollTop <= minScroll.y;
    const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
    const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
    const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
    return {
      isTop,
      isLeft,
      isBottom,
      isRight,
      maxScroll,
      minScroll
    };
  }
  __name(getScrollPosition, "getScrollPosition");
  var defaultThreshold = {
    x: 0.2,
    y: 0.2
  };
  function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {
    let {
      top,
      left,
      right,
      bottom
    } = _ref;
    if (acceleration === void 0) {
      acceleration = 10;
    }
    if (thresholdPercentage === void 0) {
      thresholdPercentage = defaultThreshold;
    }
    const {
      isTop,
      isBottom,
      isLeft,
      isRight
    } = getScrollPosition(scrollContainer);
    const direction = {
      x: 0,
      y: 0
    };
    const speed = {
      x: 0,
      y: 0
    };
    const threshold = {
      height: scrollContainerRect.height * thresholdPercentage.y,
      width: scrollContainerRect.width * thresholdPercentage.x
    };
    if (!isTop && top <= scrollContainerRect.top + threshold.height) {
      direction.y = Direction.Backward;
      speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);
    } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {
      direction.y = Direction.Forward;
      speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);
    }
    if (!isRight && right >= scrollContainerRect.right - threshold.width) {
      direction.x = Direction.Forward;
      speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);
    } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {
      direction.x = Direction.Backward;
      speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);
    }
    return {
      direction,
      speed
    };
  }
  __name(getScrollDirectionAndSpeed, "getScrollDirectionAndSpeed");
  function getScrollElementRect(element) {
    if (element === document.scrollingElement) {
      const {
        innerWidth,
        innerHeight
      } = window;
      return {
        top: 0,
        left: 0,
        right: innerWidth,
        bottom: innerHeight,
        width: innerWidth,
        height: innerHeight
      };
    }
    const {
      top,
      left,
      right,
      bottom
    } = element.getBoundingClientRect();
    return {
      top,
      left,
      right,
      bottom,
      width: element.clientWidth,
      height: element.clientHeight
    };
  }
  __name(getScrollElementRect, "getScrollElementRect");
  function getScrollOffsets(scrollableAncestors) {
    return scrollableAncestors.reduce((acc, node) => {
      return add(acc, getScrollCoordinates(node));
    }, defaultCoordinates);
  }
  __name(getScrollOffsets, "getScrollOffsets");
  function getScrollXOffset(scrollableAncestors) {
    return scrollableAncestors.reduce((acc, node) => {
      return acc + getScrollXCoordinate(node);
    }, 0);
  }
  __name(getScrollXOffset, "getScrollXOffset");
  function getScrollYOffset(scrollableAncestors) {
    return scrollableAncestors.reduce((acc, node) => {
      return acc + getScrollYCoordinate(node);
    }, 0);
  }
  __name(getScrollYOffset, "getScrollYOffset");
  function scrollIntoViewIfNeeded(element, measure) {
    if (measure === void 0) {
      measure = getClientRect;
    }
    if (!element) {
      return;
    }
    const {
      top,
      left,
      bottom,
      right
    } = measure(element);
    const firstScrollableAncestor = getFirstScrollableAncestor(element);
    if (!firstScrollableAncestor) {
      return;
    }
    if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {
      element.scrollIntoView({
        block: "center",
        inline: "center"
      });
    }
  }
  __name(scrollIntoViewIfNeeded, "scrollIntoViewIfNeeded");
  var properties = [["x", ["left", "right"], getScrollXOffset], ["y", ["top", "bottom"], getScrollYOffset]];
  var _Rect = class _Rect {
    constructor(rect, element) {
      this.rect = void 0;
      this.width = void 0;
      this.height = void 0;
      this.top = void 0;
      this.bottom = void 0;
      this.right = void 0;
      this.left = void 0;
      const scrollableAncestors = getScrollableAncestors(element);
      const scrollOffsets = getScrollOffsets(scrollableAncestors);
      this.rect = __spreadValues({}, rect);
      this.width = rect.width;
      this.height = rect.height;
      for (const [axis, keys, getScrollOffset] of properties) {
        for (const key of keys) {
          Object.defineProperty(this, key, {
            get: /* @__PURE__ */ __name(() => {
              const currentOffsets = getScrollOffset(scrollableAncestors);
              const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
              return this.rect[key] + scrollOffsetsDeltla;
            }, "get"),
            enumerable: true
          });
        }
      }
      Object.defineProperty(this, "rect", {
        enumerable: false
      });
    }
  };
  __name(_Rect, "Rect");
  var Rect = _Rect;
  var _Listeners = class _Listeners {
    constructor(target) {
      this.target = void 0;
      this.listeners = [];
      this.removeAll = () => {
        this.listeners.forEach((listener) => {
          var _this$target;
          return (_this$target = this.target) == null ? void 0 : _this$target.removeEventListener(...listener);
        });
      };
      this.target = target;
    }
    add(eventName, handler, options) {
      var _this$target2;
      (_this$target2 = this.target) == null ? void 0 : _this$target2.addEventListener(eventName, handler, options);
      this.listeners.push([eventName, handler, options]);
    }
  };
  __name(_Listeners, "Listeners");
  var Listeners = _Listeners;
  function getEventListenerTarget(target) {
    const {
      EventTarget
    } = getWindow2(target);
    return target instanceof EventTarget ? target : getOwnerDocument(target);
  }
  __name(getEventListenerTarget, "getEventListenerTarget");
  function hasExceededDistance(delta, measurement) {
    const dx = Math.abs(delta.x);
    const dy = Math.abs(delta.y);
    if (typeof measurement === "number") {
      return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
    }
    if ("x" in measurement && "y" in measurement) {
      return dx > measurement.x && dy > measurement.y;
    }
    if ("x" in measurement) {
      return dx > measurement.x;
    }
    if ("y" in measurement) {
      return dy > measurement.y;
    }
    return false;
  }
  __name(hasExceededDistance, "hasExceededDistance");
  var EventName;
  (function(EventName2) {
    EventName2["Click"] = "click";
    EventName2["DragStart"] = "dragstart";
    EventName2["Keydown"] = "keydown";
    EventName2["ContextMenu"] = "contextmenu";
    EventName2["Resize"] = "resize";
    EventName2["SelectionChange"] = "selectionchange";
    EventName2["VisibilityChange"] = "visibilitychange";
  })(EventName || (EventName = {}));
  function preventDefault(event) {
    event.preventDefault();
  }
  __name(preventDefault, "preventDefault");
  function stopPropagation(event) {
    event.stopPropagation();
  }
  __name(stopPropagation, "stopPropagation");
  var KeyboardCode;
  (function(KeyboardCode2) {
    KeyboardCode2["Space"] = "Space";
    KeyboardCode2["Down"] = "ArrowDown";
    KeyboardCode2["Right"] = "ArrowRight";
    KeyboardCode2["Left"] = "ArrowLeft";
    KeyboardCode2["Up"] = "ArrowUp";
    KeyboardCode2["Esc"] = "Escape";
    KeyboardCode2["Enter"] = "Enter";
    KeyboardCode2["Tab"] = "Tab";
  })(KeyboardCode || (KeyboardCode = {}));
  var defaultKeyboardCodes = {
    start: [KeyboardCode.Space, KeyboardCode.Enter],
    cancel: [KeyboardCode.Esc],
    end: [KeyboardCode.Space, KeyboardCode.Enter, KeyboardCode.Tab]
  };
  var defaultKeyboardCoordinateGetter = /* @__PURE__ */ __name((event, _ref) => {
    let {
      currentCoordinates
    } = _ref;
    switch (event.code) {
      case KeyboardCode.Right:
        return __spreadProps(__spreadValues({}, currentCoordinates), {
          x: currentCoordinates.x + 25
        });
      case KeyboardCode.Left:
        return __spreadProps(__spreadValues({}, currentCoordinates), {
          x: currentCoordinates.x - 25
        });
      case KeyboardCode.Down:
        return __spreadProps(__spreadValues({}, currentCoordinates), {
          y: currentCoordinates.y + 25
        });
      case KeyboardCode.Up:
        return __spreadProps(__spreadValues({}, currentCoordinates), {
          y: currentCoordinates.y - 25
        });
    }
    return void 0;
  }, "defaultKeyboardCoordinateGetter");
  var _KeyboardSensor = class _KeyboardSensor {
    constructor(props) {
      this.props = void 0;
      this.autoScrollEnabled = false;
      this.referenceCoordinates = void 0;
      this.listeners = void 0;
      this.windowListeners = void 0;
      this.props = props;
      const {
        event: {
          target
        }
      } = props;
      this.props = props;
      this.listeners = new Listeners(getOwnerDocument(target));
      this.windowListeners = new Listeners(getWindow2(target));
      this.handleKeyDown = this.handleKeyDown.bind(this);
      this.handleCancel = this.handleCancel.bind(this);
      this.attach();
    }
    attach() {
      this.handleStart();
      this.windowListeners.add(EventName.Resize, this.handleCancel);
      this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
      setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
    }
    handleStart() {
      const {
        activeNode,
        onStart
      } = this.props;
      const node = activeNode.node.current;
      if (node) {
        scrollIntoViewIfNeeded(node);
      }
      onStart(defaultCoordinates);
    }
    handleKeyDown(event) {
      if (isKeyboardEvent(event)) {
        const {
          active,
          context,
          options
        } = this.props;
        const {
          keyboardCodes = defaultKeyboardCodes,
          coordinateGetter = defaultKeyboardCoordinateGetter,
          scrollBehavior = "smooth"
        } = options;
        const {
          code
        } = event;
        if (keyboardCodes.end.includes(code)) {
          this.handleEnd(event);
          return;
        }
        if (keyboardCodes.cancel.includes(code)) {
          this.handleCancel(event);
          return;
        }
        const {
          collisionRect
        } = context.current;
        const currentCoordinates = collisionRect ? {
          x: collisionRect.left,
          y: collisionRect.top
        } : defaultCoordinates;
        if (!this.referenceCoordinates) {
          this.referenceCoordinates = currentCoordinates;
        }
        const newCoordinates = coordinateGetter(event, {
          active,
          context: context.current,
          currentCoordinates
        });
        if (newCoordinates) {
          const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
          const scrollDelta = {
            x: 0,
            y: 0
          };
          const {
            scrollableAncestors
          } = context.current;
          for (const scrollContainer of scrollableAncestors) {
            const direction = event.code;
            const {
              isTop,
              isRight,
              isLeft,
              isBottom,
              maxScroll,
              minScroll
            } = getScrollPosition(scrollContainer);
            const scrollElementRect = getScrollElementRect(scrollContainer);
            const clampedCoordinates = {
              x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
              y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
            };
            const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
            const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
            if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
              const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
              const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;
              if (canScrollToNewCoordinates && !coordinatesDelta.y) {
                scrollContainer.scrollTo({
                  left: newScrollCoordinates,
                  behavior: scrollBehavior
                });
                return;
              }
              if (canScrollToNewCoordinates) {
                scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
              } else {
                scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
              }
              if (scrollDelta.x) {
                scrollContainer.scrollBy({
                  left: -scrollDelta.x,
                  behavior: scrollBehavior
                });
              }
              break;
            } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
              const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
              const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
              if (canScrollToNewCoordinates && !coordinatesDelta.x) {
                scrollContainer.scrollTo({
                  top: newScrollCoordinates,
                  behavior: scrollBehavior
                });
                return;
              }
              if (canScrollToNewCoordinates) {
                scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
              } else {
                scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
              }
              if (scrollDelta.y) {
                scrollContainer.scrollBy({
                  top: -scrollDelta.y,
                  behavior: scrollBehavior
                });
              }
              break;
            }
          }
          this.handleMove(event, add(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));
        }
      }
    }
    handleMove(event, coordinates) {
      const {
        onMove
      } = this.props;
      event.preventDefault();
      onMove(coordinates);
    }
    handleEnd(event) {
      const {
        onEnd
      } = this.props;
      event.preventDefault();
      this.detach();
      onEnd();
    }
    handleCancel(event) {
      const {
        onCancel
      } = this.props;
      event.preventDefault();
      this.detach();
      onCancel();
    }
    detach() {
      this.listeners.removeAll();
      this.windowListeners.removeAll();
    }
  };
  __name(_KeyboardSensor, "KeyboardSensor");
  var KeyboardSensor = _KeyboardSensor;
  KeyboardSensor.activators = [{
    eventName: "onKeyDown",
    handler: /* @__PURE__ */ __name((event, _ref, _ref2) => {
      let {
        keyboardCodes = defaultKeyboardCodes,
        onActivation
      } = _ref;
      let {
        active
      } = _ref2;
      const {
        code
      } = event.nativeEvent;
      if (keyboardCodes.start.includes(code)) {
        const activator = active.activatorNode.current;
        if (activator && event.target !== activator) {
          return false;
        }
        event.preventDefault();
        onActivation == null ? void 0 : onActivation({
          event: event.nativeEvent
        });
        return true;
      }
      return false;
    }, "handler")
  }];
  function isDistanceConstraint(constraint) {
    return Boolean(constraint && "distance" in constraint);
  }
  __name(isDistanceConstraint, "isDistanceConstraint");
  function isDelayConstraint(constraint) {
    return Boolean(constraint && "delay" in constraint);
  }
  __name(isDelayConstraint, "isDelayConstraint");
  var _AbstractPointerSensor = class _AbstractPointerSensor {
    constructor(props, events3, listenerTarget) {
      var _getEventCoordinates;
      if (listenerTarget === void 0) {
        listenerTarget = getEventListenerTarget(props.event.target);
      }
      this.props = void 0;
      this.events = void 0;
      this.autoScrollEnabled = true;
      this.document = void 0;
      this.activated = false;
      this.initialCoordinates = void 0;
      this.timeoutId = null;
      this.listeners = void 0;
      this.documentListeners = void 0;
      this.windowListeners = void 0;
      this.props = props;
      this.events = events3;
      const {
        event
      } = props;
      const {
        target
      } = event;
      this.props = props;
      this.events = events3;
      this.document = getOwnerDocument(target);
      this.documentListeners = new Listeners(this.document);
      this.listeners = new Listeners(listenerTarget);
      this.windowListeners = new Listeners(getWindow2(target));
      this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
      this.handleStart = this.handleStart.bind(this);
      this.handleMove = this.handleMove.bind(this);
      this.handleEnd = this.handleEnd.bind(this);
      this.handleCancel = this.handleCancel.bind(this);
      this.handleKeydown = this.handleKeydown.bind(this);
      this.removeTextSelection = this.removeTextSelection.bind(this);
      this.attach();
    }
    attach() {
      const {
        events: events3,
        props: {
          options: {
            activationConstraint,
            bypassActivationConstraint
          }
        }
      } = this;
      this.listeners.add(events3.move.name, this.handleMove, {
        passive: false
      });
      this.listeners.add(events3.end.name, this.handleEnd);
      if (events3.cancel) {
        this.listeners.add(events3.cancel.name, this.handleCancel);
      }
      this.windowListeners.add(EventName.Resize, this.handleCancel);
      this.windowListeners.add(EventName.DragStart, preventDefault);
      this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
      this.windowListeners.add(EventName.ContextMenu, preventDefault);
      this.documentListeners.add(EventName.Keydown, this.handleKeydown);
      if (activationConstraint) {
        if (bypassActivationConstraint != null && bypassActivationConstraint({
          event: this.props.event,
          activeNode: this.props.activeNode,
          options: this.props.options
        })) {
          return this.handleStart();
        }
        if (isDelayConstraint(activationConstraint)) {
          this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
          this.handlePending(activationConstraint);
          return;
        }
        if (isDistanceConstraint(activationConstraint)) {
          this.handlePending(activationConstraint);
          return;
        }
      }
      this.handleStart();
    }
    detach() {
      this.listeners.removeAll();
      this.windowListeners.removeAll();
      setTimeout(this.documentListeners.removeAll, 50);
      if (this.timeoutId !== null) {
        clearTimeout(this.timeoutId);
        this.timeoutId = null;
      }
    }
    handlePending(constraint, offset4) {
      const {
        active,
        onPending
      } = this.props;
      onPending(active, constraint, this.initialCoordinates, offset4);
    }
    handleStart() {
      const {
        initialCoordinates
      } = this;
      const {
        onStart
      } = this.props;
      if (initialCoordinates) {
        this.activated = true;
        this.documentListeners.add(EventName.Click, stopPropagation, {
          capture: true
        });
        this.removeTextSelection();
        this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
        onStart(initialCoordinates);
      }
    }
    handleMove(event) {
      var _getEventCoordinates2;
      const {
        activated,
        initialCoordinates,
        props
      } = this;
      const {
        onMove,
        options: {
          activationConstraint
        }
      } = props;
      if (!initialCoordinates) {
        return;
      }
      const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
      const delta = subtract(initialCoordinates, coordinates);
      if (!activated && activationConstraint) {
        if (isDistanceConstraint(activationConstraint)) {
          if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
            return this.handleCancel();
          }
          if (hasExceededDistance(delta, activationConstraint.distance)) {
            return this.handleStart();
          }
        }
        if (isDelayConstraint(activationConstraint)) {
          if (hasExceededDistance(delta, activationConstraint.tolerance)) {
            return this.handleCancel();
          }
        }
        this.handlePending(activationConstraint, delta);
        return;
      }
      if (event.cancelable) {
        event.preventDefault();
      }
      onMove(coordinates);
    }
    handleEnd() {
      const {
        onAbort,
        onEnd
      } = this.props;
      this.detach();
      if (!this.activated) {
        onAbort(this.props.active);
      }
      onEnd();
    }
    handleCancel() {
      const {
        onAbort,
        onCancel
      } = this.props;
      this.detach();
      if (!this.activated) {
        onAbort(this.props.active);
      }
      onCancel();
    }
    handleKeydown(event) {
      if (event.code === KeyboardCode.Esc) {
        this.handleCancel();
      }
    }
    removeTextSelection() {
      var _this$document$getSel;
      (_this$document$getSel = this.document.getSelection()) == null ? void 0 : _this$document$getSel.removeAllRanges();
    }
  };
  __name(_AbstractPointerSensor, "AbstractPointerSensor");
  var AbstractPointerSensor = _AbstractPointerSensor;
  var events2 = {
    cancel: {
      name: "pointercancel"
    },
    move: {
      name: "pointermove"
    },
    end: {
      name: "pointerup"
    }
  };
  var _PointerSensor = class _PointerSensor extends AbstractPointerSensor {
    constructor(props) {
      const {
        event
      } = props;
      const listenerTarget = getOwnerDocument(event.target);
      super(props, events2, listenerTarget);
    }
  };
  __name(_PointerSensor, "PointerSensor");
  var PointerSensor = _PointerSensor;
  PointerSensor.activators = [{
    eventName: "onPointerDown",
    handler: /* @__PURE__ */ __name((_ref, _ref2) => {
      let {
        nativeEvent: event
      } = _ref;
      let {
        onActivation
      } = _ref2;
      if (!event.isPrimary || event.button !== 0) {
        return false;
      }
      onActivation == null ? void 0 : onActivation({
        event
      });
      return true;
    }, "handler")
  }];
  var events$1 = {
    move: {
      name: "mousemove"
    },
    end: {
      name: "mouseup"
    }
  };
  var MouseButton;
  (function(MouseButton2) {
    MouseButton2[MouseButton2["RightClick"] = 2] = "RightClick";
  })(MouseButton || (MouseButton = {}));
  var _MouseSensor = class _MouseSensor extends AbstractPointerSensor {
    constructor(props) {
      super(props, events$1, getOwnerDocument(props.event.target));
    }
  };
  __name(_MouseSensor, "MouseSensor");
  var MouseSensor = _MouseSensor;
  MouseSensor.activators = [{
    eventName: "onMouseDown",
    handler: /* @__PURE__ */ __name((_ref, _ref2) => {
      let {
        nativeEvent: event
      } = _ref;
      let {
        onActivation
      } = _ref2;
      if (event.button === MouseButton.RightClick) {
        return false;
      }
      onActivation == null ? void 0 : onActivation({
        event
      });
      return true;
    }, "handler")
  }];
  var events$2 = {
    cancel: {
      name: "touchcancel"
    },
    move: {
      name: "touchmove"
    },
    end: {
      name: "touchend"
    }
  };
  var _TouchSensor = class _TouchSensor extends AbstractPointerSensor {
    constructor(props) {
      super(props, events$2);
    }
    static setup() {
      window.addEventListener(events$2.move.name, noop4, {
        capture: false,
        passive: false
      });
      return /* @__PURE__ */ __name(function teardown() {
        window.removeEventListener(events$2.move.name, noop4);
      }, "teardown");
      function noop4() {
      }
      __name(noop4, "noop");
    }
  };
  __name(_TouchSensor, "TouchSensor");
  var TouchSensor = _TouchSensor;
  TouchSensor.activators = [{
    eventName: "onTouchStart",
    handler: /* @__PURE__ */ __name((_ref, _ref2) => {
      let {
        nativeEvent: event
      } = _ref;
      let {
        onActivation
      } = _ref2;
      const {
        touches
      } = event;
      if (touches.length > 1) {
        return false;
      }
      onActivation == null ? void 0 : onActivation({
        event
      });
      return true;
    }, "handler")
  }];
  var AutoScrollActivator;
  (function(AutoScrollActivator2) {
    AutoScrollActivator2[AutoScrollActivator2["Pointer"] = 0] = "Pointer";
    AutoScrollActivator2[AutoScrollActivator2["DraggableRect"] = 1] = "DraggableRect";
  })(AutoScrollActivator || (AutoScrollActivator = {}));
  var TraversalOrder;
  (function(TraversalOrder2) {
    TraversalOrder2[TraversalOrder2["TreeOrder"] = 0] = "TreeOrder";
    TraversalOrder2[TraversalOrder2["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
  })(TraversalOrder || (TraversalOrder = {}));
  function useAutoScroller(_ref) {
    let {
      acceleration,
      activator = AutoScrollActivator.Pointer,
      canScroll,
      draggingRect,
      enabled,
      interval: interval2 = 5,
      order = TraversalOrder.TreeOrder,
      pointerCoordinates,
      scrollableAncestors,
      scrollableAncestorRects,
      delta,
      threshold
    } = _ref;
    const scrollIntent = useScrollIntent({
      delta,
      disabled: !enabled
    });
    const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();
    const scrollSpeed = (0, import_react12.useRef)({
      x: 0,
      y: 0
    });
    const scrollDirection = (0, import_react12.useRef)({
      x: 0,
      y: 0
    });
    const rect = (0, import_react12.useMemo)(() => {
      switch (activator) {
        case AutoScrollActivator.Pointer:
          return pointerCoordinates ? {
            top: pointerCoordinates.y,
            bottom: pointerCoordinates.y,
            left: pointerCoordinates.x,
            right: pointerCoordinates.x
          } : null;
        case AutoScrollActivator.DraggableRect:
          return draggingRect;
      }
    }, [activator, draggingRect, pointerCoordinates]);
    const scrollContainerRef = (0, import_react12.useRef)(null);
    const autoScroll = (0, import_react12.useCallback)(() => {
      const scrollContainer = scrollContainerRef.current;
      if (!scrollContainer) {
        return;
      }
      const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
      const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
      scrollContainer.scrollBy(scrollLeft, scrollTop);
    }, []);
    const sortedScrollableAncestors = (0, import_react12.useMemo)(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);
    (0, import_react12.useEffect)(
      () => {
        if (!enabled || !scrollableAncestors.length || !rect) {
          clearAutoScrollInterval();
          return;
        }
        for (const scrollContainer of sortedScrollableAncestors) {
          if ((canScroll == null ? void 0 : canScroll(scrollContainer)) === false) {
            continue;
          }
          const index3 = scrollableAncestors.indexOf(scrollContainer);
          const scrollContainerRect = scrollableAncestorRects[index3];
          if (!scrollContainerRect) {
            continue;
          }
          const {
            direction,
            speed
          } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
          for (const axis of ["x", "y"]) {
            if (!scrollIntent[axis][direction[axis]]) {
              speed[axis] = 0;
              direction[axis] = 0;
            }
          }
          if (speed.x > 0 || speed.y > 0) {
            clearAutoScrollInterval();
            scrollContainerRef.current = scrollContainer;
            setAutoScrollInterval(autoScroll, interval2);
            scrollSpeed.current = speed;
            scrollDirection.current = direction;
            return;
          }
        }
        scrollSpeed.current = {
          x: 0,
          y: 0
        };
        scrollDirection.current = {
          x: 0,
          y: 0
        };
        clearAutoScrollInterval();
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [
        acceleration,
        autoScroll,
        canScroll,
        clearAutoScrollInterval,
        enabled,
        interval2,
        // eslint-disable-next-line react-hooks/exhaustive-deps
        JSON.stringify(rect),
        // eslint-disable-next-line react-hooks/exhaustive-deps
        JSON.stringify(scrollIntent),
        setAutoScrollInterval,
        scrollableAncestors,
        sortedScrollableAncestors,
        scrollableAncestorRects,
        // eslint-disable-next-line react-hooks/exhaustive-deps
        JSON.stringify(threshold)
      ]
    );
  }
  __name(useAutoScroller, "useAutoScroller");
  var defaultScrollIntent = {
    x: {
      [Direction.Backward]: false,
      [Direction.Forward]: false
    },
    y: {
      [Direction.Backward]: false,
      [Direction.Forward]: false
    }
  };
  function useScrollIntent(_ref2) {
    let {
      delta,
      disabled
    } = _ref2;
    const previousDelta = usePrevious2(delta);
    return useLazyMemo((previousIntent) => {
      if (disabled || !previousDelta || !previousIntent) {
        return defaultScrollIntent;
      }
      const direction = {
        x: Math.sign(delta.x - previousDelta.x),
        y: Math.sign(delta.y - previousDelta.y)
      };
      return {
        x: {
          [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
          [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
        },
        y: {
          [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
          [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
        }
      };
    }, [disabled, delta, previousDelta]);
  }
  __name(useScrollIntent, "useScrollIntent");
  function useCachedNode(draggableNodes, id) {
    const draggableNode = id != null ? draggableNodes.get(id) : void 0;
    const node = draggableNode ? draggableNode.node.current : null;
    return useLazyMemo((cachedNode) => {
      var _ref;
      if (id == null) {
        return null;
      }
      return (_ref = node != null ? node : cachedNode) != null ? _ref : null;
    }, [node, id]);
  }
  __name(useCachedNode, "useCachedNode");
  function useCombineActivators(sensors, getSyntheticHandler) {
    return (0, import_react12.useMemo)(() => sensors.reduce((accumulator, sensor) => {
      const {
        sensor: Sensor
      } = sensor;
      const sensorActivators = Sensor.activators.map((activator) => ({
        eventName: activator.eventName,
        handler: getSyntheticHandler(activator.handler, sensor)
      }));
      return [...accumulator, ...sensorActivators];
    }, []), [sensors, getSyntheticHandler]);
  }
  __name(useCombineActivators, "useCombineActivators");
  var MeasuringStrategy;
  (function(MeasuringStrategy2) {
    MeasuringStrategy2[MeasuringStrategy2["Always"] = 0] = "Always";
    MeasuringStrategy2[MeasuringStrategy2["BeforeDragging"] = 1] = "BeforeDragging";
    MeasuringStrategy2[MeasuringStrategy2["WhileDragging"] = 2] = "WhileDragging";
  })(MeasuringStrategy || (MeasuringStrategy = {}));
  var MeasuringFrequency;
  (function(MeasuringFrequency2) {
    MeasuringFrequency2["Optimized"] = "optimized";
  })(MeasuringFrequency || (MeasuringFrequency = {}));
  var defaultValue = /* @__PURE__ */ new Map();
  function useDroppableMeasuring(containers, _ref) {
    let {
      dragging,
      dependencies,
      config
    } = _ref;
    const [queue, setQueue] = (0, import_react12.useState)(null);
    const {
      frequency,
      measure,
      strategy
    } = config;
    const containersRef = (0, import_react12.useRef)(containers);
    const disabled = isDisabled();
    const disabledRef = useLatestValue(disabled);
    const measureDroppableContainers = (0, import_react12.useCallback)(function(ids2) {
      if (ids2 === void 0) {
        ids2 = [];
      }
      if (disabledRef.current) {
        return;
      }
      setQueue((value) => {
        if (value === null) {
          return ids2;
        }
        return value.concat(ids2.filter((id) => !value.includes(id)));
      });
    }, [disabledRef]);
    const timeoutId = (0, import_react12.useRef)(null);
    const droppableRects = useLazyMemo((previousValue) => {
      if (disabled && !dragging) {
        return defaultValue;
      }
      if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {
        const map = /* @__PURE__ */ new Map();
        for (let container of containers) {
          if (!container) {
            continue;
          }
          if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {
            map.set(container.id, container.rect.current);
            continue;
          }
          const node = container.node.current;
          const rect = node ? new Rect(measure(node), node) : null;
          container.rect.current = rect;
          if (rect) {
            map.set(container.id, rect);
          }
        }
        return map;
      }
      return previousValue;
    }, [containers, queue, dragging, disabled, measure]);
    (0, import_react12.useEffect)(() => {
      containersRef.current = containers;
    }, [containers]);
    (0, import_react12.useEffect)(
      () => {
        if (disabled) {
          return;
        }
        measureDroppableContainers();
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [dragging, disabled]
    );
    (0, import_react12.useEffect)(
      () => {
        if (queue && queue.length > 0) {
          setQueue(null);
        }
      },
      //eslint-disable-next-line react-hooks/exhaustive-deps
      [JSON.stringify(queue)]
    );
    (0, import_react12.useEffect)(
      () => {
        if (disabled || typeof frequency !== "number" || timeoutId.current !== null) {
          return;
        }
        timeoutId.current = setTimeout(() => {
          measureDroppableContainers();
          timeoutId.current = null;
        }, frequency);
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [frequency, disabled, measureDroppableContainers, ...dependencies]
    );
    return {
      droppableRects,
      measureDroppableContainers,
      measuringScheduled: queue != null
    };
    function isDisabled() {
      switch (strategy) {
        case MeasuringStrategy.Always:
          return false;
        case MeasuringStrategy.BeforeDragging:
          return dragging;
        default:
          return !dragging;
      }
    }
    __name(isDisabled, "isDisabled");
  }
  __name(useDroppableMeasuring, "useDroppableMeasuring");
  function useInitialValue(value, computeFn) {
    return useLazyMemo((previousValue) => {
      if (!value) {
        return null;
      }
      if (previousValue) {
        return previousValue;
      }
      return typeof computeFn === "function" ? computeFn(value) : value;
    }, [computeFn, value]);
  }
  __name(useInitialValue, "useInitialValue");
  function useInitialRect(node, measure) {
    return useInitialValue(node, measure);
  }
  __name(useInitialRect, "useInitialRect");
  function useMutationObserver(_ref) {
    let {
      callback,
      disabled
    } = _ref;
    const handleMutations = useEvent2(callback);
    const mutationObserver = (0, import_react12.useMemo)(() => {
      if (disabled || typeof window === "undefined" || typeof window.MutationObserver === "undefined") {
        return void 0;
      }
      const {
        MutationObserver: MutationObserver3
      } = window;
      return new MutationObserver3(handleMutations);
    }, [handleMutations, disabled]);
    (0, import_react12.useEffect)(() => {
      return () => mutationObserver == null ? void 0 : mutationObserver.disconnect();
    }, [mutationObserver]);
    return mutationObserver;
  }
  __name(useMutationObserver, "useMutationObserver");
  function useResizeObserver(_ref) {
    let {
      callback,
      disabled
    } = _ref;
    const handleResize = useEvent2(callback);
    const resizeObserver = (0, import_react12.useMemo)(
      () => {
        if (disabled || typeof window === "undefined" || typeof window.ResizeObserver === "undefined") {
          return void 0;
        }
        const {
          ResizeObserver: ResizeObserver2
        } = window;
        return new ResizeObserver2(handleResize);
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [disabled]
    );
    (0, import_react12.useEffect)(() => {
      return () => resizeObserver == null ? void 0 : resizeObserver.disconnect();
    }, [resizeObserver]);
    return resizeObserver;
  }
  __name(useResizeObserver, "useResizeObserver");
  function defaultMeasure(element) {
    return new Rect(getClientRect(element), element);
  }
  __name(defaultMeasure, "defaultMeasure");
  function useRect(element, measure, fallbackRect) {
    if (measure === void 0) {
      measure = defaultMeasure;
    }
    const [rect, setRect] = (0, import_react12.useState)(null);
    function measureRect() {
      setRect((currentRect) => {
        if (!element) {
          return null;
        }
        if (element.isConnected === false) {
          var _ref;
          return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;
        }
        const newRect = measure(element);
        if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
          return currentRect;
        }
        return newRect;
      });
    }
    __name(measureRect, "measureRect");
    const mutationObserver = useMutationObserver({
      callback(records) {
        if (!element) {
          return;
        }
        for (const record of records) {
          const {
            type,
            target
          } = record;
          if (type === "childList" && target instanceof HTMLElement && target.contains(element)) {
            measureRect();
            break;
          }
        }
      }
    });
    const resizeObserver = useResizeObserver({
      callback: measureRect
    });
    useIsomorphicLayoutEffect3(() => {
      measureRect();
      if (element) {
        resizeObserver == null ? void 0 : resizeObserver.observe(element);
        mutationObserver == null ? void 0 : mutationObserver.observe(document.body, {
          childList: true,
          subtree: true
        });
      } else {
        resizeObserver == null ? void 0 : resizeObserver.disconnect();
        mutationObserver == null ? void 0 : mutationObserver.disconnect();
      }
    }, [element]);
    return rect;
  }
  __name(useRect, "useRect");
  function useRectDelta(rect) {
    const initialRect = useInitialValue(rect);
    return getRectDelta(rect, initialRect);
  }
  __name(useRectDelta, "useRectDelta");
  var defaultValue$1 = [];
  function useScrollableAncestors(node) {
    const previousNode = (0, import_react12.useRef)(node);
    const ancestors = useLazyMemo((previousValue) => {
      if (!node) {
        return defaultValue$1;
      }
      if (previousValue && previousValue !== defaultValue$1 && node && previousNode.current && node.parentNode === previousNode.current.parentNode) {
        return previousValue;
      }
      return getScrollableAncestors(node);
    }, [node]);
    (0, import_react12.useEffect)(() => {
      previousNode.current = node;
    }, [node]);
    return ancestors;
  }
  __name(useScrollableAncestors, "useScrollableAncestors");
  function useScrollOffsets(elements) {
    const [scrollCoordinates, setScrollCoordinates] = (0, import_react12.useState)(null);
    const prevElements = (0, import_react12.useRef)(elements);
    const handleScroll2 = (0, import_react12.useCallback)((event) => {
      const scrollingElement = getScrollableElement(event.target);
      if (!scrollingElement) {
        return;
      }
      setScrollCoordinates((scrollCoordinates2) => {
        if (!scrollCoordinates2) {
          return null;
        }
        scrollCoordinates2.set(scrollingElement, getScrollCoordinates(scrollingElement));
        return new Map(scrollCoordinates2);
      });
    }, []);
    (0, import_react12.useEffect)(() => {
      const previousElements = prevElements.current;
      if (elements !== previousElements) {
        cleanup(previousElements);
        const entries = elements.map((element) => {
          const scrollableElement = getScrollableElement(element);
          if (scrollableElement) {
            scrollableElement.addEventListener("scroll", handleScroll2, {
              passive: true
            });
            return [scrollableElement, getScrollCoordinates(scrollableElement)];
          }
          return null;
        }).filter((entry) => entry != null);
        setScrollCoordinates(entries.length ? new Map(entries) : null);
        prevElements.current = elements;
      }
      return () => {
        cleanup(elements);
        cleanup(previousElements);
      };
      function cleanup(elements2) {
        elements2.forEach((element) => {
          const scrollableElement = getScrollableElement(element);
          scrollableElement == null ? void 0 : scrollableElement.removeEventListener("scroll", handleScroll2);
        });
      }
      __name(cleanup, "cleanup");
    }, [handleScroll2, elements]);
    return (0, import_react12.useMemo)(() => {
      if (elements.length) {
        return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
      }
      return defaultCoordinates;
    }, [elements, scrollCoordinates]);
  }
  __name(useScrollOffsets, "useScrollOffsets");
  function useScrollOffsetsDelta(scrollOffsets, dependencies) {
    if (dependencies === void 0) {
      dependencies = [];
    }
    const initialScrollOffsets = (0, import_react12.useRef)(null);
    (0, import_react12.useEffect)(
      () => {
        initialScrollOffsets.current = null;
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      dependencies
    );
    (0, import_react12.useEffect)(() => {
      const hasScrollOffsets = scrollOffsets !== defaultCoordinates;
      if (hasScrollOffsets && !initialScrollOffsets.current) {
        initialScrollOffsets.current = scrollOffsets;
      }
      if (!hasScrollOffsets && initialScrollOffsets.current) {
        initialScrollOffsets.current = null;
      }
    }, [scrollOffsets]);
    return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
  }
  __name(useScrollOffsetsDelta, "useScrollOffsetsDelta");
  function useSensorSetup(sensors) {
    (0, import_react12.useEffect)(
      () => {
        if (!canUseDOM2) {
          return;
        }
        const teardownFns = sensors.map((_ref) => {
          let {
            sensor
          } = _ref;
          return sensor.setup == null ? void 0 : sensor.setup();
        });
        return () => {
          for (const teardown of teardownFns) {
            teardown == null ? void 0 : teardown();
          }
        };
      },
      // TO-DO: Sensors length could theoretically change which would not be a valid dependency
      // eslint-disable-next-line react-hooks/exhaustive-deps
      sensors.map((_ref2) => {
        let {
          sensor
        } = _ref2;
        return sensor;
      })
    );
  }
  __name(useSensorSetup, "useSensorSetup");
  function useSyntheticListeners(listeners2, id) {
    return (0, import_react12.useMemo)(() => {
      return listeners2.reduce((acc, _ref) => {
        let {
          eventName,
          handler
        } = _ref;
        acc[eventName] = (event) => {
          handler(event, id);
        };
        return acc;
      }, {});
    }, [listeners2, id]);
  }
  __name(useSyntheticListeners, "useSyntheticListeners");
  function useWindowRect(element) {
    return (0, import_react12.useMemo)(() => element ? getWindowClientRect(element) : null, [element]);
  }
  __name(useWindowRect, "useWindowRect");
  var defaultValue$2 = [];
  function useRects(elements, measure) {
    if (measure === void 0) {
      measure = getClientRect;
    }
    const [firstElement] = elements;
    const windowRect = useWindowRect(firstElement ? getWindow2(firstElement) : null);
    const [rects, setRects] = (0, import_react12.useState)(defaultValue$2);
    function measureRects() {
      setRects(() => {
        if (!elements.length) {
          return defaultValue$2;
        }
        return elements.map((element) => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
      });
    }
    __name(measureRects, "measureRects");
    const resizeObserver = useResizeObserver({
      callback: measureRects
    });
    useIsomorphicLayoutEffect3(() => {
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      measureRects();
      elements.forEach((element) => resizeObserver == null ? void 0 : resizeObserver.observe(element));
    }, [elements]);
    return rects;
  }
  __name(useRects, "useRects");
  function getMeasurableNode(node) {
    if (!node) {
      return null;
    }
    if (node.children.length > 1) {
      return node;
    }
    const firstChild = node.children[0];
    return isHTMLElement3(firstChild) ? firstChild : node;
  }
  __name(getMeasurableNode, "getMeasurableNode");
  function useDragOverlayMeasuring(_ref) {
    let {
      measure
    } = _ref;
    const [rect, setRect] = (0, import_react12.useState)(null);
    const handleResize = (0, import_react12.useCallback)((entries) => {
      for (const {
        target
      } of entries) {
        if (isHTMLElement3(target)) {
          setRect((rect2) => {
            const newRect = measure(target);
            return rect2 ? __spreadProps(__spreadValues({}, rect2), {
              width: newRect.width,
              height: newRect.height
            }) : newRect;
          });
          break;
        }
      }
    }, [measure]);
    const resizeObserver = useResizeObserver({
      callback: handleResize
    });
    const handleNodeChange = (0, import_react12.useCallback)((element) => {
      const node = getMeasurableNode(element);
      resizeObserver == null ? void 0 : resizeObserver.disconnect();
      if (node) {
        resizeObserver == null ? void 0 : resizeObserver.observe(node);
      }
      setRect(node ? measure(node) : null);
    }, [measure, resizeObserver]);
    const [nodeRef, setRef2] = useNodeRef(handleNodeChange);
    return (0, import_react12.useMemo)(() => ({
      nodeRef,
      rect,
      setRef: setRef2
    }), [rect, nodeRef, setRef2]);
  }
  __name(useDragOverlayMeasuring, "useDragOverlayMeasuring");
  var defaultSensors = [{
    sensor: PointerSensor,
    options: {}
  }, {
    sensor: KeyboardSensor,
    options: {}
  }];
  var defaultData = {
    current: {}
  };
  var defaultMeasuringConfiguration = {
    draggable: {
      measure: getTransformAgnosticClientRect
    },
    droppable: {
      measure: getTransformAgnosticClientRect,
      strategy: MeasuringStrategy.WhileDragging,
      frequency: MeasuringFrequency.Optimized
    },
    dragOverlay: {
      measure: getClientRect
    }
  };
  var _DroppableContainersMap = class _DroppableContainersMap extends Map {
    get(id) {
      var _super$get;
      return id != null ? (_super$get = super.get(id)) != null ? _super$get : void 0 : void 0;
    }
    toArray() {
      return Array.from(this.values());
    }
    getEnabled() {
      return this.toArray().filter((_ref) => {
        let {
          disabled
        } = _ref;
        return !disabled;
      });
    }
    getNodeFor(id) {
      var _this$get$node$curren, _this$get;
      return (_this$get$node$curren = (_this$get = this.get(id)) == null ? void 0 : _this$get.node.current) != null ? _this$get$node$curren : void 0;
    }
  };
  __name(_DroppableContainersMap, "DroppableContainersMap");
  var DroppableContainersMap = _DroppableContainersMap;
  var defaultPublicContext = {
    activatorEvent: null,
    active: null,
    activeNode: null,
    activeNodeRect: null,
    collisions: null,
    containerNodeRect: null,
    draggableNodes: /* @__PURE__ */ new Map(),
    droppableRects: /* @__PURE__ */ new Map(),
    droppableContainers: /* @__PURE__ */ new DroppableContainersMap(),
    over: null,
    dragOverlay: {
      nodeRef: {
        current: null
      },
      rect: null,
      setRef: noop3
    },
    scrollableAncestors: [],
    scrollableAncestorRects: [],
    measuringConfiguration: defaultMeasuringConfiguration,
    measureDroppableContainers: noop3,
    windowRect: null,
    measuringScheduled: false
  };
  var defaultInternalContext = {
    activatorEvent: null,
    activators: [],
    active: null,
    activeNodeRect: null,
    ariaDescribedById: {
      draggable: ""
    },
    dispatch: noop3,
    draggableNodes: /* @__PURE__ */ new Map(),
    over: null,
    measureDroppableContainers: noop3
  };
  var InternalContext = /* @__PURE__ */ (0, import_react12.createContext)(defaultInternalContext);
  var PublicContext = /* @__PURE__ */ (0, import_react12.createContext)(defaultPublicContext);
  function getInitialState() {
    return {
      draggable: {
        active: null,
        initialCoordinates: {
          x: 0,
          y: 0
        },
        nodes: /* @__PURE__ */ new Map(),
        translate: {
          x: 0,
          y: 0
        }
      },
      droppable: {
        containers: new DroppableContainersMap()
      }
    };
  }
  __name(getInitialState, "getInitialState");
  function reducer2(state, action) {
    switch (action.type) {
      case Action2.DragStart:
        return __spreadProps(__spreadValues({}, state), {
          draggable: __spreadProps(__spreadValues({}, state.draggable), {
            initialCoordinates: action.initialCoordinates,
            active: action.active
          })
        });
      case Action2.DragMove:
        if (state.draggable.active == null) {
          return state;
        }
        return __spreadProps(__spreadValues({}, state), {
          draggable: __spreadProps(__spreadValues({}, state.draggable), {
            translate: {
              x: action.coordinates.x - state.draggable.initialCoordinates.x,
              y: action.coordinates.y - state.draggable.initialCoordinates.y
            }
          })
        });
      case Action2.DragEnd:
      case Action2.DragCancel:
        return __spreadProps(__spreadValues({}, state), {
          draggable: __spreadProps(__spreadValues({}, state.draggable), {
            active: null,
            initialCoordinates: {
              x: 0,
              y: 0
            },
            translate: {
              x: 0,
              y: 0
            }
          })
        });
      case Action2.RegisterDroppable: {
        const {
          element
        } = action;
        const {
          id
        } = element;
        const containers = new DroppableContainersMap(state.droppable.containers);
        containers.set(id, element);
        return __spreadProps(__spreadValues({}, state), {
          droppable: __spreadProps(__spreadValues({}, state.droppable), {
            containers
          })
        });
      }
      case Action2.SetDroppableDisabled: {
        const {
          id,
          key,
          disabled
        } = action;
        const element = state.droppable.containers.get(id);
        if (!element || key !== element.key) {
          return state;
        }
        const containers = new DroppableContainersMap(state.droppable.containers);
        containers.set(id, __spreadProps(__spreadValues({}, element), {
          disabled
        }));
        return __spreadProps(__spreadValues({}, state), {
          droppable: __spreadProps(__spreadValues({}, state.droppable), {
            containers
          })
        });
      }
      case Action2.UnregisterDroppable: {
        const {
          id,
          key
        } = action;
        const element = state.droppable.containers.get(id);
        if (!element || key !== element.key) {
          return state;
        }
        const containers = new DroppableContainersMap(state.droppable.containers);
        containers.delete(id);
        return __spreadProps(__spreadValues({}, state), {
          droppable: __spreadProps(__spreadValues({}, state.droppable), {
            containers
          })
        });
      }
      default: {
        return state;
      }
    }
  }
  __name(reducer2, "reducer");
  function RestoreFocus(_ref) {
    let {
      disabled
    } = _ref;
    const {
      active,
      activatorEvent,
      draggableNodes
    } = (0, import_react12.useContext)(InternalContext);
    const previousActivatorEvent = usePrevious2(activatorEvent);
    const previousActiveId = usePrevious2(active == null ? void 0 : active.id);
    (0, import_react12.useEffect)(() => {
      if (disabled) {
        return;
      }
      if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
        if (!isKeyboardEvent(previousActivatorEvent)) {
          return;
        }
        if (document.activeElement === previousActivatorEvent.target) {
          return;
        }
        const draggableNode = draggableNodes.get(previousActiveId);
        if (!draggableNode) {
          return;
        }
        const {
          activatorNode,
          node
        } = draggableNode;
        if (!activatorNode.current && !node.current) {
          return;
        }
        requestAnimationFrame(() => {
          for (const element of [activatorNode.current, node.current]) {
            if (!element) {
              continue;
            }
            const focusableNode = findFirstFocusableNode(element);
            if (focusableNode) {
              focusableNode.focus();
              break;
            }
          }
        });
      }
    }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
    return null;
  }
  __name(RestoreFocus, "RestoreFocus");
  function applyModifiers(modifiers, _ref) {
    let _a121 = _ref, {
      transform
    } = _a121, args = __objRest(_a121, [
      "transform"
    ]);
    return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
      return modifier(__spreadValues({
        transform: accumulator
      }, args));
    }, transform) : transform;
  }
  __name(applyModifiers, "applyModifiers");
  function useMeasuringConfiguration(config) {
    return (0, import_react12.useMemo)(
      () => ({
        draggable: __spreadValues(__spreadValues({}, defaultMeasuringConfiguration.draggable), config == null ? void 0 : config.draggable),
        droppable: __spreadValues(__spreadValues({}, defaultMeasuringConfiguration.droppable), config == null ? void 0 : config.droppable),
        dragOverlay: __spreadValues(__spreadValues({}, defaultMeasuringConfiguration.dragOverlay), config == null ? void 0 : config.dragOverlay)
      }),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [config == null ? void 0 : config.draggable, config == null ? void 0 : config.droppable, config == null ? void 0 : config.dragOverlay]
    );
  }
  __name(useMeasuringConfiguration, "useMeasuringConfiguration");
  function useLayoutShiftScrollCompensation(_ref) {
    let {
      activeNode,
      measure,
      initialRect,
      config = true
    } = _ref;
    const initialized = (0, import_react12.useRef)(false);
    const {
      x,
      y
    } = typeof config === "boolean" ? {
      x: config,
      y: config
    } : config;
    useIsomorphicLayoutEffect3(() => {
      const disabled = !x && !y;
      if (disabled || !activeNode) {
        initialized.current = false;
        return;
      }
      if (initialized.current || !initialRect) {
        return;
      }
      const node = activeNode == null ? void 0 : activeNode.node.current;
      if (!node || node.isConnected === false) {
        return;
      }
      const rect = measure(node);
      const rectDelta = getRectDelta(rect, initialRect);
      if (!x) {
        rectDelta.x = 0;
      }
      if (!y) {
        rectDelta.y = 0;
      }
      initialized.current = true;
      if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
        const firstScrollableAncestor = getFirstScrollableAncestor(node);
        if (firstScrollableAncestor) {
          firstScrollableAncestor.scrollBy({
            top: rectDelta.y,
            left: rectDelta.x
          });
        }
      }
    }, [activeNode, x, y, initialRect, measure]);
  }
  __name(useLayoutShiftScrollCompensation, "useLayoutShiftScrollCompensation");
  var ActiveDraggableContext = /* @__PURE__ */ (0, import_react12.createContext)(__spreadProps(__spreadValues({}, defaultCoordinates), {
    scaleX: 1,
    scaleY: 1
  }));
  var Status;
  (function(Status2) {
    Status2[Status2["Uninitialized"] = 0] = "Uninitialized";
    Status2[Status2["Initializing"] = 1] = "Initializing";
    Status2[Status2["Initialized"] = 2] = "Initialized";
  })(Status || (Status = {}));
  var DndContext = /* @__PURE__ */ (0, import_react12.memo)(/* @__PURE__ */ __name(function DndContext2(_ref) {
    var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;
    let _a121 = _ref, {
      id,
      accessibility,
      autoScroll = true,
      children,
      sensors = defaultSensors,
      collisionDetection = rectIntersection,
      measuring,
      modifiers
    } = _a121, props = __objRest(_a121, [
      "id",
      "accessibility",
      "autoScroll",
      "children",
      "sensors",
      "collisionDetection",
      "measuring",
      "modifiers"
    ]);
    const store = (0, import_react12.useReducer)(reducer2, void 0, getInitialState);
    const [state, dispatch2] = store;
    const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
    const [status, setStatus] = (0, import_react12.useState)(Status.Uninitialized);
    const isInitialized = status === Status.Initialized;
    const {
      draggable: {
        active: activeId,
        nodes: draggableNodes,
        translate
      },
      droppable: {
        containers: droppableContainers
      }
    } = state;
    const node = activeId != null ? draggableNodes.get(activeId) : null;
    const activeRects = (0, import_react12.useRef)({
      initial: null,
      translated: null
    });
    const active = (0, import_react12.useMemo)(() => {
      var _node$data;
      return activeId != null ? {
        id: activeId,
        // It's possible for the active node to unmount while dragging
        data: (_node$data = node == null ? void 0 : node.data) != null ? _node$data : defaultData,
        rect: activeRects
      } : null;
    }, [activeId, node]);
    const activeRef = (0, import_react12.useRef)(null);
    const [activeSensor, setActiveSensor] = (0, import_react12.useState)(null);
    const [activatorEvent, setActivatorEvent] = (0, import_react12.useState)(null);
    const latestProps = useLatestValue(props, Object.values(props));
    const draggableDescribedById = useUniqueId("DndDescribedBy", id);
    const enabledDroppableContainers = (0, import_react12.useMemo)(() => droppableContainers.getEnabled(), [droppableContainers]);
    const measuringConfiguration = useMeasuringConfiguration(measuring);
    const {
      droppableRects,
      measureDroppableContainers,
      measuringScheduled
    } = useDroppableMeasuring(enabledDroppableContainers, {
      dragging: isInitialized,
      dependencies: [translate.x, translate.y],
      config: measuringConfiguration.droppable
    });
    const activeNode = useCachedNode(draggableNodes, activeId);
    const activationCoordinates = (0, import_react12.useMemo)(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
    const autoScrollOptions = getAutoScrollerOptions();
    const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
    useLayoutShiftScrollCompensation({
      activeNode: activeId != null ? draggableNodes.get(activeId) : null,
      config: autoScrollOptions.layoutShiftCompensation,
      initialRect: initialActiveNodeRect,
      measure: measuringConfiguration.draggable.measure
    });
    const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
    const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);
    const sensorContext = (0, import_react12.useRef)({
      activatorEvent: null,
      active: null,
      activeNode,
      collisionRect: null,
      collisions: null,
      droppableRects,
      draggableNodes,
      draggingNode: null,
      draggingNodeRect: null,
      droppableContainers,
      over: null,
      scrollableAncestors: [],
      scrollAdjustedTranslate: null
    });
    const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? void 0 : _sensorContext$curren.id);
    const dragOverlay = useDragOverlayMeasuring({
      measure: measuringConfiguration.dragOverlay.measure
    });
    const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
    const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
    const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect);
    const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);
    const windowRect = useWindowRect(draggingNode ? getWindow2(draggingNode) : null);
    const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
    const scrollableAncestorRects = useRects(scrollableAncestors);
    const modifiedTranslate = applyModifiers(modifiers, {
      transform: {
        x: translate.x - nodeRectDelta.x,
        y: translate.y - nodeRectDelta.y,
        scaleX: 1,
        scaleY: 1
      },
      activatorEvent,
      active,
      activeNodeRect,
      containerNodeRect,
      draggingNodeRect,
      over: sensorContext.current.over,
      overlayNodeRect: dragOverlay.rect,
      scrollableAncestors,
      scrollableAncestorRects,
      windowRect
    });
    const pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;
    const scrollOffsets = useScrollOffsets(scrollableAncestors);
    const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);
    const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
    const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);
    const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
    const collisions = active && collisionRect ? collisionDetection({
      active,
      collisionRect,
      droppableRects,
      droppableContainers: enabledDroppableContainers,
      pointerCoordinates
    }) : null;
    const overId = getFirstCollision(collisions, "id");
    const [over, setOver] = (0, import_react12.useState)(null);
    const appliedTranslate = usesDragOverlay ? modifiedTranslate : add(modifiedTranslate, activeNodeScrollDelta);
    const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? void 0 : over.rect) != null ? _over$rect : null, activeNodeRect);
    const activeSensorRef = (0, import_react12.useRef)(null);
    const instantiateSensor = (0, import_react12.useCallback)(
      (event, _ref2) => {
        let {
          sensor: Sensor,
          options
        } = _ref2;
        if (activeRef.current == null) {
          return;
        }
        const activeNode2 = draggableNodes.get(activeRef.current);
        if (!activeNode2) {
          return;
        }
        const activatorEvent2 = event.nativeEvent;
        const sensorInstance = new Sensor({
          active: activeRef.current,
          activeNode: activeNode2,
          event: activatorEvent2,
          options,
          // Sensors need to be instantiated with refs for arguments that change over time
          // otherwise they are frozen in time with the stale arguments
          context: sensorContext,
          onAbort(id2) {
            const draggableNode = draggableNodes.get(id2);
            if (!draggableNode) {
              return;
            }
            const {
              onDragAbort
            } = latestProps.current;
            const event2 = {
              id: id2
            };
            onDragAbort == null ? void 0 : onDragAbort(event2);
            dispatchMonitorEvent({
              type: "onDragAbort",
              event: event2
            });
          },
          onPending(id2, constraint, initialCoordinates, offset4) {
            const draggableNode = draggableNodes.get(id2);
            if (!draggableNode) {
              return;
            }
            const {
              onDragPending
            } = latestProps.current;
            const event2 = {
              id: id2,
              constraint,
              initialCoordinates,
              offset: offset4
            };
            onDragPending == null ? void 0 : onDragPending(event2);
            dispatchMonitorEvent({
              type: "onDragPending",
              event: event2
            });
          },
          onStart(initialCoordinates) {
            const id2 = activeRef.current;
            if (id2 == null) {
              return;
            }
            const draggableNode = draggableNodes.get(id2);
            if (!draggableNode) {
              return;
            }
            const {
              onDragStart
            } = latestProps.current;
            const event2 = {
              activatorEvent: activatorEvent2,
              active: {
                id: id2,
                data: draggableNode.data,
                rect: activeRects
              }
            };
            (0, import_react_dom3.unstable_batchedUpdates)(() => {
              onDragStart == null ? void 0 : onDragStart(event2);
              setStatus(Status.Initializing);
              dispatch2({
                type: Action2.DragStart,
                initialCoordinates,
                active: id2
              });
              dispatchMonitorEvent({
                type: "onDragStart",
                event: event2
              });
              setActiveSensor(activeSensorRef.current);
              setActivatorEvent(activatorEvent2);
            });
          },
          onMove(coordinates) {
            dispatch2({
              type: Action2.DragMove,
              coordinates
            });
          },
          onEnd: createHandler(Action2.DragEnd),
          onCancel: createHandler(Action2.DragCancel)
        });
        activeSensorRef.current = sensorInstance;
        function createHandler(type) {
          return /* @__PURE__ */ __name(async function handler() {
            const {
              active: active2,
              collisions: collisions2,
              over: over2,
              scrollAdjustedTranslate: scrollAdjustedTranslate2
            } = sensorContext.current;
            let event2 = null;
            if (active2 && scrollAdjustedTranslate2) {
              const {
                cancelDrop
              } = latestProps.current;
              event2 = {
                activatorEvent: activatorEvent2,
                active: active2,
                collisions: collisions2,
                delta: scrollAdjustedTranslate2,
                over: over2
              };
              if (type === Action2.DragEnd && typeof cancelDrop === "function") {
                const shouldCancel = await Promise.resolve(cancelDrop(event2));
                if (shouldCancel) {
                  type = Action2.DragCancel;
                }
              }
            }
            activeRef.current = null;
            (0, import_react_dom3.unstable_batchedUpdates)(() => {
              dispatch2({
                type
              });
              setStatus(Status.Uninitialized);
              setOver(null);
              setActiveSensor(null);
              setActivatorEvent(null);
              activeSensorRef.current = null;
              const eventName = type === Action2.DragEnd ? "onDragEnd" : "onDragCancel";
              if (event2) {
                const handler2 = latestProps.current[eventName];
                handler2 == null ? void 0 : handler2(event2);
                dispatchMonitorEvent({
                  type: eventName,
                  event: event2
                });
              }
            });
          }, "handler");
        }
        __name(createHandler, "createHandler");
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [draggableNodes]
    );
    const bindActivatorToSensorInstantiator = (0, import_react12.useCallback)((handler, sensor) => {
      return (event, active2) => {
        const nativeEvent = event.nativeEvent;
        const activeDraggableNode = draggableNodes.get(active2);
        if (
          // Another sensor is already instantiating
          activeRef.current !== null || // No active draggable
          !activeDraggableNode || // Event has already been captured
          nativeEvent.dndKit || nativeEvent.defaultPrevented
        ) {
          return;
        }
        const activationContext = {
          active: activeDraggableNode
        };
        const shouldActivate = handler(event, sensor.options, activationContext);
        if (shouldActivate === true) {
          nativeEvent.dndKit = {
            capturedBy: sensor.sensor
          };
          activeRef.current = active2;
          instantiateSensor(event, sensor);
        }
      };
    }, [draggableNodes, instantiateSensor]);
    const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
    useSensorSetup(sensors);
    useIsomorphicLayoutEffect3(() => {
      if (activeNodeRect && status === Status.Initializing) {
        setStatus(Status.Initialized);
      }
    }, [activeNodeRect, status]);
    (0, import_react12.useEffect)(
      () => {
        const {
          onDragMove
        } = latestProps.current;
        const {
          active: active2,
          activatorEvent: activatorEvent2,
          collisions: collisions2,
          over: over2
        } = sensorContext.current;
        if (!active2 || !activatorEvent2) {
          return;
        }
        const event = {
          active: active2,
          activatorEvent: activatorEvent2,
          collisions: collisions2,
          delta: {
            x: scrollAdjustedTranslate.x,
            y: scrollAdjustedTranslate.y
          },
          over: over2
        };
        (0, import_react_dom3.unstable_batchedUpdates)(() => {
          onDragMove == null ? void 0 : onDragMove(event);
          dispatchMonitorEvent({
            type: "onDragMove",
            event
          });
        });
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]
    );
    (0, import_react12.useEffect)(
      () => {
        const {
          active: active2,
          activatorEvent: activatorEvent2,
          collisions: collisions2,
          droppableContainers: droppableContainers2,
          scrollAdjustedTranslate: scrollAdjustedTranslate2
        } = sensorContext.current;
        if (!active2 || activeRef.current == null || !activatorEvent2 || !scrollAdjustedTranslate2) {
          return;
        }
        const {
          onDragOver
        } = latestProps.current;
        const overContainer = droppableContainers2.get(overId);
        const over2 = overContainer && overContainer.rect.current ? {
          id: overContainer.id,
          rect: overContainer.rect.current,
          data: overContainer.data,
          disabled: overContainer.disabled
        } : null;
        const event = {
          active: active2,
          activatorEvent: activatorEvent2,
          collisions: collisions2,
          delta: {
            x: scrollAdjustedTranslate2.x,
            y: scrollAdjustedTranslate2.y
          },
          over: over2
        };
        (0, import_react_dom3.unstable_batchedUpdates)(() => {
          setOver(over2);
          onDragOver == null ? void 0 : onDragOver(event);
          dispatchMonitorEvent({
            type: "onDragOver",
            event
          });
        });
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [overId]
    );
    useIsomorphicLayoutEffect3(() => {
      sensorContext.current = {
        activatorEvent,
        active,
        activeNode,
        collisionRect,
        collisions,
        droppableRects,
        draggableNodes,
        draggingNode,
        draggingNodeRect,
        droppableContainers,
        over,
        scrollableAncestors,
        scrollAdjustedTranslate
      };
      activeRects.current = {
        initial: draggingNodeRect,
        translated: collisionRect
      };
    }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
    useAutoScroller(__spreadProps(__spreadValues({}, autoScrollOptions), {
      delta: translate,
      draggingRect: collisionRect,
      pointerCoordinates,
      scrollableAncestors,
      scrollableAncestorRects
    }));
    const publicContext = (0, import_react12.useMemo)(() => {
      const context = {
        active,
        activeNode,
        activeNodeRect,
        activatorEvent,
        collisions,
        containerNodeRect,
        dragOverlay,
        draggableNodes,
        droppableContainers,
        droppableRects,
        over,
        measureDroppableContainers,
        scrollableAncestors,
        scrollableAncestorRects,
        measuringConfiguration,
        measuringScheduled,
        windowRect
      };
      return context;
    }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
    const internalContext = (0, import_react12.useMemo)(() => {
      const context = {
        activatorEvent,
        activators,
        active,
        activeNodeRect,
        ariaDescribedById: {
          draggable: draggableDescribedById
        },
        dispatch: dispatch2,
        draggableNodes,
        over,
        measureDroppableContainers
      };
      return context;
    }, [activatorEvent, activators, active, activeNodeRect, dispatch2, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
    return import_react12.default.createElement(DndMonitorContext.Provider, {
      value: registerMonitorListener
    }, import_react12.default.createElement(InternalContext.Provider, {
      value: internalContext
    }, import_react12.default.createElement(PublicContext.Provider, {
      value: publicContext
    }, import_react12.default.createElement(ActiveDraggableContext.Provider, {
      value: transform
    }, children)), import_react12.default.createElement(RestoreFocus, {
      disabled: (accessibility == null ? void 0 : accessibility.restoreFocus) === false
    })), import_react12.default.createElement(Accessibility, __spreadProps(__spreadValues({}, accessibility), {
      hiddenTextDescribedById: draggableDescribedById
    })));
    function getAutoScrollerOptions() {
      const activeSensorDisablesAutoscroll = (activeSensor == null ? void 0 : activeSensor.autoScrollEnabled) === false;
      const autoScrollGloballyDisabled = typeof autoScroll === "object" ? autoScroll.enabled === false : autoScroll === false;
      const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;
      if (typeof autoScroll === "object") {
        return __spreadProps(__spreadValues({}, autoScroll), {
          enabled
        });
      }
      return {
        enabled
      };
    }
    __name(getAutoScrollerOptions, "getAutoScrollerOptions");
  }, "DndContext"));
  var NullContext = /* @__PURE__ */ (0, import_react12.createContext)(null);
  var defaultRole = "button";
  var ID_PREFIX = "Draggable";
  function useDraggable(_ref) {
    let {
      id,
      data,
      disabled = false,
      attributes
    } = _ref;
    const key = useUniqueId(ID_PREFIX);
    const {
      activators,
      activatorEvent,
      active,
      activeNodeRect,
      ariaDescribedById,
      draggableNodes,
      over
    } = (0, import_react12.useContext)(InternalContext);
    const {
      role = defaultRole,
      roleDescription = "draggable",
      tabIndex = 0
    } = attributes != null ? attributes : {};
    const isDragging = (active == null ? void 0 : active.id) === id;
    const transform = (0, import_react12.useContext)(isDragging ? ActiveDraggableContext : NullContext);
    const [node, setNodeRef] = useNodeRef();
    const [activatorNode, setActivatorNodeRef] = useNodeRef();
    const listeners2 = useSyntheticListeners(activators, id);
    const dataRef = useLatestValue(data);
    useIsomorphicLayoutEffect3(
      () => {
        draggableNodes.set(id, {
          id,
          key,
          node,
          activatorNode,
          data: dataRef
        });
        return () => {
          const node2 = draggableNodes.get(id);
          if (node2 && node2.key === key) {
            draggableNodes.delete(id);
          }
        };
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [draggableNodes, id]
    );
    const memoizedAttributes = (0, import_react12.useMemo)(() => ({
      role,
      tabIndex,
      "aria-disabled": disabled,
      "aria-pressed": isDragging && role === defaultRole ? true : void 0,
      "aria-roledescription": roleDescription,
      "aria-describedby": ariaDescribedById.draggable
    }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
    return {
      active,
      activatorEvent,
      activeNodeRect,
      attributes: memoizedAttributes,
      isDragging,
      listeners: disabled ? void 0 : listeners2,
      node,
      over,
      setNodeRef,
      setActivatorNodeRef,
      transform
    };
  }
  __name(useDraggable, "useDraggable");
  function useDndContext() {
    return (0, import_react12.useContext)(PublicContext);
  }
  __name(useDndContext, "useDndContext");
  var ID_PREFIX$1 = "Droppable";
  var defaultResizeObserverConfig = {
    timeout: 25
  };
  function useDroppable(_ref) {
    let {
      data,
      disabled = false,
      id,
      resizeObserverConfig
    } = _ref;
    const key = useUniqueId(ID_PREFIX$1);
    const {
      active,
      dispatch: dispatch2,
      over,
      measureDroppableContainers
    } = (0, import_react12.useContext)(InternalContext);
    const previous = (0, import_react12.useRef)({
      disabled
    });
    const resizeObserverConnected = (0, import_react12.useRef)(false);
    const rect = (0, import_react12.useRef)(null);
    const callbackId = (0, import_react12.useRef)(null);
    const {
      disabled: resizeObserverDisabled,
      updateMeasurementsFor,
      timeout: resizeObserverTimeout
    } = __spreadValues(__spreadValues({}, defaultResizeObserverConfig), resizeObserverConfig);
    const ids2 = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);
    const handleResize = (0, import_react12.useCallback)(
      () => {
        if (!resizeObserverConnected.current) {
          resizeObserverConnected.current = true;
          return;
        }
        if (callbackId.current != null) {
          clearTimeout(callbackId.current);
        }
        callbackId.current = setTimeout(() => {
          measureDroppableContainers(Array.isArray(ids2.current) ? ids2.current : [ids2.current]);
          callbackId.current = null;
        }, resizeObserverTimeout);
      },
      //eslint-disable-next-line react-hooks/exhaustive-deps
      [resizeObserverTimeout]
    );
    const resizeObserver = useResizeObserver({
      callback: handleResize,
      disabled: resizeObserverDisabled || !active
    });
    const handleNodeChange = (0, import_react12.useCallback)((newElement, previousElement) => {
      if (!resizeObserver) {
        return;
      }
      if (previousElement) {
        resizeObserver.unobserve(previousElement);
        resizeObserverConnected.current = false;
      }
      if (newElement) {
        resizeObserver.observe(newElement);
      }
    }, [resizeObserver]);
    const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
    const dataRef = useLatestValue(data);
    (0, import_react12.useEffect)(() => {
      if (!resizeObserver || !nodeRef.current) {
        return;
      }
      resizeObserver.disconnect();
      resizeObserverConnected.current = false;
      resizeObserver.observe(nodeRef.current);
    }, [nodeRef, resizeObserver]);
    (0, import_react12.useEffect)(
      () => {
        dispatch2({
          type: Action2.RegisterDroppable,
          element: {
            id,
            key,
            disabled,
            node: nodeRef,
            rect,
            data: dataRef
          }
        });
        return () => dispatch2({
          type: Action2.UnregisterDroppable,
          key,
          id
        });
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [id]
    );
    (0, import_react12.useEffect)(() => {
      if (disabled !== previous.current.disabled) {
        dispatch2({
          type: Action2.SetDroppableDisabled,
          id,
          key,
          disabled
        });
        previous.current.disabled = disabled;
      }
    }, [id, key, disabled, dispatch2]);
    return {
      active,
      rect,
      isOver: (over == null ? void 0 : over.id) === id,
      node: nodeRef,
      over,
      setNodeRef
    };
  }
  __name(useDroppable, "useDroppable");

  // node_modules/@dnd-kit/sortable/dist/sortable.esm.js
  var import_react13 = __toESM(require_react());
  function arrayMove(array, from, to) {
    const newArray = array.slice();
    newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from, 1)[0]);
    return newArray;
  }
  __name(arrayMove, "arrayMove");
  function getSortedRects(items, rects) {
    return items.reduce((accumulator, id, index3) => {
      const rect = rects.get(id);
      if (rect) {
        accumulator[index3] = rect;
      }
      return accumulator;
    }, Array(items.length));
  }
  __name(getSortedRects, "getSortedRects");
  function isValidIndex(index3) {
    return index3 !== null && index3 >= 0;
  }
  __name(isValidIndex, "isValidIndex");
  function itemsEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (a.length !== b.length) {
      return false;
    }
    for (let i2 = 0; i2 < a.length; i2++) {
      if (a[i2] !== b[i2]) {
        return false;
      }
    }
    return true;
  }
  __name(itemsEqual, "itemsEqual");
  function normalizeDisabled(disabled) {
    if (typeof disabled === "boolean") {
      return {
        draggable: disabled,
        droppable: disabled
      };
    }
    return disabled;
  }
  __name(normalizeDisabled, "normalizeDisabled");
  var defaultScale = {
    scaleX: 1,
    scaleY: 1
  };
  var horizontalListSortingStrategy = /* @__PURE__ */ __name((_ref) => {
    var _rects$activeIndex;
    let {
      rects,
      activeNodeRect: fallbackActiveRect,
      activeIndex,
      overIndex,
      index: index3
    } = _ref;
    const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
    if (!activeNodeRect) {
      return null;
    }
    const itemGap = getItemGap(rects, index3, activeIndex);
    if (index3 === activeIndex) {
      const newIndexRect = rects[overIndex];
      if (!newIndexRect) {
        return null;
      }
      return __spreadValues({
        x: activeIndex < overIndex ? newIndexRect.left + newIndexRect.width - (activeNodeRect.left + activeNodeRect.width) : newIndexRect.left - activeNodeRect.left,
        y: 0
      }, defaultScale);
    }
    if (index3 > activeIndex && index3 <= overIndex) {
      return __spreadValues({
        x: -activeNodeRect.width - itemGap,
        y: 0
      }, defaultScale);
    }
    if (index3 < activeIndex && index3 >= overIndex) {
      return __spreadValues({
        x: activeNodeRect.width + itemGap,
        y: 0
      }, defaultScale);
    }
    return __spreadValues({
      x: 0,
      y: 0
    }, defaultScale);
  }, "horizontalListSortingStrategy");
  function getItemGap(rects, index3, activeIndex) {
    const currentRect = rects[index3];
    const previousRect = rects[index3 - 1];
    const nextRect = rects[index3 + 1];
    if (!currentRect || !previousRect && !nextRect) {
      return 0;
    }
    if (activeIndex < index3) {
      return previousRect ? currentRect.left - (previousRect.left + previousRect.width) : nextRect.left - (currentRect.left + currentRect.width);
    }
    return nextRect ? nextRect.left - (currentRect.left + currentRect.width) : currentRect.left - (previousRect.left + previousRect.width);
  }
  __name(getItemGap, "getItemGap");
  var rectSortingStrategy = /* @__PURE__ */ __name((_ref) => {
    let {
      rects,
      activeIndex,
      overIndex,
      index: index3
    } = _ref;
    const newRects = arrayMove(rects, overIndex, activeIndex);
    const oldRect = rects[index3];
    const newRect = newRects[index3];
    if (!newRect || !oldRect) {
      return null;
    }
    return {
      x: newRect.left - oldRect.left,
      y: newRect.top - oldRect.top,
      scaleX: newRect.width / oldRect.width,
      scaleY: newRect.height / oldRect.height
    };
  }, "rectSortingStrategy");
  var defaultScale$1 = {
    scaleX: 1,
    scaleY: 1
  };
  var verticalListSortingStrategy = /* @__PURE__ */ __name((_ref) => {
    var _rects$activeIndex;
    let {
      activeIndex,
      activeNodeRect: fallbackActiveRect,
      index: index3,
      rects,
      overIndex
    } = _ref;
    const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
    if (!activeNodeRect) {
      return null;
    }
    if (index3 === activeIndex) {
      const overIndexRect = rects[overIndex];
      if (!overIndexRect) {
        return null;
      }
      return __spreadValues({
        x: 0,
        y: activeIndex < overIndex ? overIndexRect.top + overIndexRect.height - (activeNodeRect.top + activeNodeRect.height) : overIndexRect.top - activeNodeRect.top
      }, defaultScale$1);
    }
    const itemGap = getItemGap$1(rects, index3, activeIndex);
    if (index3 > activeIndex && index3 <= overIndex) {
      return __spreadValues({
        x: 0,
        y: -activeNodeRect.height - itemGap
      }, defaultScale$1);
    }
    if (index3 < activeIndex && index3 >= overIndex) {
      return __spreadValues({
        x: 0,
        y: activeNodeRect.height + itemGap
      }, defaultScale$1);
    }
    return __spreadValues({
      x: 0,
      y: 0
    }, defaultScale$1);
  }, "verticalListSortingStrategy");
  function getItemGap$1(clientRects, index3, activeIndex) {
    const currentRect = clientRects[index3];
    const previousRect = clientRects[index3 - 1];
    const nextRect = clientRects[index3 + 1];
    if (!currentRect) {
      return 0;
    }
    if (activeIndex < index3) {
      return previousRect ? currentRect.top - (previousRect.top + previousRect.height) : nextRect ? nextRect.top - (currentRect.top + currentRect.height) : 0;
    }
    return nextRect ? nextRect.top - (currentRect.top + currentRect.height) : previousRect ? currentRect.top - (previousRect.top + previousRect.height) : 0;
  }
  __name(getItemGap$1, "getItemGap$1");
  var ID_PREFIX2 = "Sortable";
  var Context = /* @__PURE__ */ import_react13.default.createContext({
    activeIndex: -1,
    containerId: ID_PREFIX2,
    disableTransforms: false,
    items: [],
    overIndex: -1,
    useDragOverlay: false,
    sortedRects: [],
    strategy: rectSortingStrategy,
    disabled: {
      draggable: false,
      droppable: false
    }
  });
  function SortableContext(_ref) {
    let {
      children,
      id,
      items: userDefinedItems,
      strategy = rectSortingStrategy,
      disabled: disabledProp = false
    } = _ref;
    const {
      active,
      dragOverlay,
      droppableRects,
      over,
      measureDroppableContainers
    } = useDndContext();
    const containerId = useUniqueId(ID_PREFIX2, id);
    const useDragOverlay = Boolean(dragOverlay.rect !== null);
    const items = (0, import_react13.useMemo)(() => userDefinedItems.map((item) => typeof item === "object" && "id" in item ? item.id : item), [userDefinedItems]);
    const isDragging = active != null;
    const activeIndex = active ? items.indexOf(active.id) : -1;
    const overIndex = over ? items.indexOf(over.id) : -1;
    const previousItemsRef = (0, import_react13.useRef)(items);
    const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);
    const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;
    const disabled = normalizeDisabled(disabledProp);
    useIsomorphicLayoutEffect3(() => {
      if (itemsHaveChanged && isDragging) {
        measureDroppableContainers(items);
      }
    }, [itemsHaveChanged, items, isDragging, measureDroppableContainers]);
    (0, import_react13.useEffect)(() => {
      previousItemsRef.current = items;
    }, [items]);
    const contextValue = (0, import_react13.useMemo)(
      () => ({
        activeIndex,
        containerId,
        disabled,
        disableTransforms,
        items,
        overIndex,
        useDragOverlay,
        sortedRects: getSortedRects(items, droppableRects),
        strategy
      }),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]
    );
    return import_react13.default.createElement(Context.Provider, {
      value: contextValue
    }, children);
  }
  __name(SortableContext, "SortableContext");
  var defaultNewIndexGetter = /* @__PURE__ */ __name((_ref) => {
    let {
      id,
      items,
      activeIndex,
      overIndex
    } = _ref;
    return arrayMove(items, activeIndex, overIndex).indexOf(id);
  }, "defaultNewIndexGetter");
  var defaultAnimateLayoutChanges = /* @__PURE__ */ __name((_ref2) => {
    let {
      containerId,
      isSorting,
      wasDragging,
      index: index3,
      items,
      newIndex,
      previousItems,
      previousContainerId,
      transition
    } = _ref2;
    if (!transition || !wasDragging) {
      return false;
    }
    if (previousItems !== items && index3 === newIndex) {
      return false;
    }
    if (isSorting) {
      return true;
    }
    return newIndex !== index3 && containerId === previousContainerId;
  }, "defaultAnimateLayoutChanges");
  var defaultTransition = {
    duration: 200,
    easing: "ease"
  };
  var transitionProperty = "transform";
  var disabledTransition = /* @__PURE__ */ CSS2.Transition.toString({
    property: transitionProperty,
    duration: 0,
    easing: "linear"
  });
  var defaultAttributes2 = {
    roleDescription: "sortable"
  };
  function useDerivedTransform(_ref) {
    let {
      disabled,
      index: index3,
      node,
      rect
    } = _ref;
    const [derivedTransform, setDerivedtransform] = (0, import_react13.useState)(null);
    const previousIndex = (0, import_react13.useRef)(index3);
    useIsomorphicLayoutEffect3(() => {
      if (!disabled && index3 !== previousIndex.current && node.current) {
        const initial = rect.current;
        if (initial) {
          const current = getClientRect(node.current, {
            ignoreTransform: true
          });
          const delta = {
            x: initial.left - current.left,
            y: initial.top - current.top,
            scaleX: initial.width / current.width,
            scaleY: initial.height / current.height
          };
          if (delta.x || delta.y) {
            setDerivedtransform(delta);
          }
        }
      }
      if (index3 !== previousIndex.current) {
        previousIndex.current = index3;
      }
    }, [disabled, index3, node, rect]);
    (0, import_react13.useEffect)(() => {
      if (derivedTransform) {
        setDerivedtransform(null);
      }
    }, [derivedTransform]);
    return derivedTransform;
  }
  __name(useDerivedTransform, "useDerivedTransform");
  function useSortable(_ref) {
    let {
      animateLayoutChanges = defaultAnimateLayoutChanges,
      attributes: userDefinedAttributes,
      disabled: localDisabled,
      data: customData,
      getNewIndex = defaultNewIndexGetter,
      id,
      strategy: localStrategy,
      resizeObserverConfig,
      transition = defaultTransition
    } = _ref;
    const {
      items,
      containerId,
      activeIndex,
      disabled: globalDisabled,
      disableTransforms,
      sortedRects,
      overIndex,
      useDragOverlay,
      strategy: globalStrategy
    } = (0, import_react13.useContext)(Context);
    const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);
    const index3 = items.indexOf(id);
    const data = (0, import_react13.useMemo)(() => __spreadValues({
      sortable: {
        containerId,
        index: index3,
        items
      }
    }, customData), [containerId, customData, index3, items]);
    const itemsAfterCurrentSortable = (0, import_react13.useMemo)(() => items.slice(items.indexOf(id)), [items, id]);
    const {
      rect,
      node,
      isOver,
      setNodeRef: setDroppableNodeRef
    } = useDroppable({
      id,
      data,
      disabled: disabled.droppable,
      resizeObserverConfig: __spreadValues({
        updateMeasurementsFor: itemsAfterCurrentSortable
      }, resizeObserverConfig)
    });
    const {
      active,
      activatorEvent,
      activeNodeRect,
      attributes,
      setNodeRef: setDraggableNodeRef,
      listeners: listeners2,
      isDragging,
      over,
      setActivatorNodeRef,
      transform
    } = useDraggable({
      id,
      data,
      attributes: __spreadValues(__spreadValues({}, defaultAttributes2), userDefinedAttributes),
      disabled: disabled.draggable
    });
    const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);
    const isSorting = Boolean(active);
    const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);
    const shouldDisplaceDragSource = !useDragOverlay && isDragging;
    const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;
    const strategy = localStrategy != null ? localStrategy : globalStrategy;
    const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({
      rects: sortedRects,
      activeNodeRect,
      activeIndex,
      overIndex,
      index: index3
    }) : null;
    const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({
      id,
      items,
      activeIndex,
      overIndex
    }) : index3;
    const activeId = active == null ? void 0 : active.id;
    const previous = (0, import_react13.useRef)({
      activeId,
      items,
      newIndex,
      containerId
    });
    const itemsHaveChanged = items !== previous.current.items;
    const shouldAnimateLayoutChanges = animateLayoutChanges({
      active,
      containerId,
      isDragging,
      isSorting,
      id,
      index: index3,
      items,
      newIndex: previous.current.newIndex,
      previousItems: previous.current.items,
      previousContainerId: previous.current.containerId,
      transition,
      wasDragging: previous.current.activeId != null
    });
    const derivedTransform = useDerivedTransform({
      disabled: !shouldAnimateLayoutChanges,
      index: index3,
      node,
      rect
    });
    (0, import_react13.useEffect)(() => {
      if (isSorting && previous.current.newIndex !== newIndex) {
        previous.current.newIndex = newIndex;
      }
      if (containerId !== previous.current.containerId) {
        previous.current.containerId = containerId;
      }
      if (items !== previous.current.items) {
        previous.current.items = items;
      }
    }, [isSorting, newIndex, containerId, items]);
    (0, import_react13.useEffect)(() => {
      if (activeId === previous.current.activeId) {
        return;
      }
      if (activeId != null && previous.current.activeId == null) {
        previous.current.activeId = activeId;
        return;
      }
      const timeoutId = setTimeout(() => {
        previous.current.activeId = activeId;
      }, 50);
      return () => clearTimeout(timeoutId);
    }, [activeId]);
    return {
      active,
      activeIndex,
      attributes,
      data,
      rect,
      index: index3,
      newIndex,
      items,
      isOver,
      isSorting,
      isDragging,
      listeners: listeners2,
      node,
      overIndex,
      over,
      setNodeRef,
      setActivatorNodeRef,
      setDroppableNodeRef,
      setDraggableNodeRef,
      transform: derivedTransform != null ? derivedTransform : finalTransform,
      transition: getTransition()
    };
    function getTransition() {
      if (
        // Temporarily disable transitions for a single frame to set up derived transforms
        derivedTransform || // Or to prevent items jumping to back to their "new" position when items change
        itemsHaveChanged && previous.current.newIndex === index3
      ) {
        return disabledTransition;
      }
      if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {
        return void 0;
      }
      if (isSorting || shouldAnimateLayoutChanges) {
        return CSS2.Transition.toString(__spreadProps(__spreadValues({}, transition), {
          property: transitionProperty
        }));
      }
      return void 0;
    }
    __name(getTransition, "getTransition");
  }
  __name(useSortable, "useSortable");
  function normalizeLocalDisabled(localDisabled, globalDisabled) {
    var _localDisabled$dragga, _localDisabled$droppa;
    if (typeof localDisabled === "boolean") {
      return {
        draggable: localDisabled,
        // Backwards compatibility
        droppable: false
      };
    }
    return {
      draggable: (_localDisabled$dragga = localDisabled == null ? void 0 : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,
      droppable: (_localDisabled$droppa = localDisabled == null ? void 0 : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable
    };
  }
  __name(normalizeLocalDisabled, "normalizeLocalDisabled");
  function hasSortableData(entry) {
    if (!entry) {
      return false;
    }
    const data = entry.data.current;
    if (data && "sortable" in data && typeof data.sortable === "object" && "containerId" in data.sortable && "items" in data.sortable && "index" in data.sortable) {
      return true;
    }
    return false;
  }
  __name(hasSortableData, "hasSortableData");
  var directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];
  var sortableKeyboardCoordinates = /* @__PURE__ */ __name((event, _ref) => {
    let {
      context: {
        active,
        collisionRect,
        droppableRects,
        droppableContainers,
        over,
        scrollableAncestors
      }
    } = _ref;
    if (directions.includes(event.code)) {
      event.preventDefault();
      if (!active || !collisionRect) {
        return;
      }
      const filteredContainers = [];
      droppableContainers.getEnabled().forEach((entry) => {
        if (!entry || entry != null && entry.disabled) {
          return;
        }
        const rect = droppableRects.get(entry.id);
        if (!rect) {
          return;
        }
        switch (event.code) {
          case KeyboardCode.Down:
            if (collisionRect.top < rect.top) {
              filteredContainers.push(entry);
            }
            break;
          case KeyboardCode.Up:
            if (collisionRect.top > rect.top) {
              filteredContainers.push(entry);
            }
            break;
          case KeyboardCode.Left:
            if (collisionRect.left > rect.left) {
              filteredContainers.push(entry);
            }
            break;
          case KeyboardCode.Right:
            if (collisionRect.left < rect.left) {
              filteredContainers.push(entry);
            }
            break;
        }
      });
      const collisions = closestCorners({
        active,
        collisionRect,
        droppableRects,
        droppableContainers: filteredContainers,
        pointerCoordinates: null
      });
      let closestId = getFirstCollision(collisions, "id");
      if (closestId === (over == null ? void 0 : over.id) && collisions.length > 1) {
        closestId = collisions[1].id;
      }
      if (closestId != null) {
        const activeDroppable = droppableContainers.get(active.id);
        const newDroppable = droppableContainers.get(closestId);
        const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;
        const newNode = newDroppable == null ? void 0 : newDroppable.node.current;
        if (newNode && newRect && activeDroppable && newDroppable) {
          const newScrollAncestors = getScrollableAncestors(newNode);
          const hasDifferentScrollAncestors = newScrollAncestors.some((element, index3) => scrollableAncestors[index3] !== element);
          const hasSameContainer = isSameContainer(activeDroppable, newDroppable);
          const isAfterActive = isAfter(activeDroppable, newDroppable);
          const offset4 = hasDifferentScrollAncestors || !hasSameContainer ? {
            x: 0,
            y: 0
          } : {
            x: isAfterActive ? collisionRect.width - newRect.width : 0,
            y: isAfterActive ? collisionRect.height - newRect.height : 0
          };
          const rectCoordinates = {
            x: newRect.left,
            y: newRect.top
          };
          const newCoordinates = offset4.x && offset4.y ? rectCoordinates : subtract(rectCoordinates, offset4);
          return newCoordinates;
        }
      }
    }
    return void 0;
  }, "sortableKeyboardCoordinates");
  function isSameContainer(a, b) {
    if (!hasSortableData(a) || !hasSortableData(b)) {
      return false;
    }
    return a.data.current.sortable.containerId === b.data.current.sortable.containerId;
  }
  __name(isSameContainer, "isSameContainer");
  function isAfter(a, b) {
    if (!hasSortableData(a) || !hasSortableData(b)) {
      return false;
    }
    if (!isSameContainer(a, b)) {
      return false;
    }
    return a.data.current.sortable.index < b.data.current.sortable.index;
  }
  __name(isAfter, "isAfter");

  // client/src/components/user-table.tsx
  var COLUMN_DEFINITIONS = {
    name: { label: "Name", sortKey: "firstName", hasFilter: false },
    login: { label: "Login", sortKey: "firstName", hasFilter: false },
    title: { label: "Title", sortKey: "title", hasFilter: false },
    department: { label: "Department", sortKey: "department", hasFilter: false },
    employeeType: { label: "Employee Type", sortKey: "employeeType", hasFilter: true },
    manager: { label: "Manager", sortKey: "manager", hasFilter: true },
    mobilePhone: { label: "Mobile Phone", sortKey: "mobilePhone", hasFilter: true },
    status: { label: "Status", sortKey: "status", hasFilter: true },
    disabled: { label: "Disabled On", sortKey: "lastUpdated", hasFilter: false },
    activated: { label: "Account Created", sortKey: "activated", hasFilter: true },
    lastLogin: { label: "Last Login", sortKey: "lastLogin", hasFilter: true },
    lastUpdated: { label: "Last Updated", sortKey: "lastUpdated", hasFilter: true },
    passwordChanged: { label: "Password Changed", sortKey: "passwordChanged", hasFilter: true }
  };
  function SortableTableHeader({ columnId, children, onColumnReorder, columnConfig }) {
    const {
      attributes,
      listeners: listeners2,
      setNodeRef,
      transform,
      transition,
      isDragging
    } = useSortable({ id: columnId });
    const style = {
      transform: CSS2.Transform.toString(transform),
      transition
    };
    return /* @__PURE__ */ React.createElement(
      TableHead,
      {
        ref: setNodeRef,
        style,
        className: `relative px-6 py-4 text-center ${isDragging ? "opacity-50 z-50" : ""}`
      },
      /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-center gap-2 w-full" }, onColumnReorder && /* @__PURE__ */ React.createElement(
        "div",
        __spreadProps(__spreadValues(__spreadValues({}, attributes), listeners2), {
          className: "cursor-grab active:cursor-grabbing text-muted-foreground hover:text-foreground p-1 opacity-0 group-hover:opacity-100 transition-opacity",
          style: { touchAction: "none" }
        }),
        /* @__PURE__ */ React.createElement(GripVertical, { className: "h-3 w-3" })
      ), children)
    );
  }
  __name(SortableTableHeader, "SortableTableHeader");
  function UserTable({
    users: users2,
    total,
    currentPage,
    totalPages,
    usersPerPage,
    isLoading,
    onUserClick,
    onPageChange,
    onPerPageChange,
    sortBy,
    sortOrder,
    onSort,
    visibleColumns = ["name", "status", "lastLogin"],
    columnConfig,
    onColumnReorder,
    filters,
    onFiltersChange
  }) {
    const { toast: toast2 } = useToast();
    const [confirmAction, setConfirmAction] = (0, import_react14.useState)(null);
    const sensors = useSensors(
      useSensor(PointerSensor),
      useSensor(KeyboardSensor, {
        coordinateGetter: sortableKeyboardCoordinates
      })
    );
    const handleDragEnd = /* @__PURE__ */ __name((event) => {
      const { active, over } = event;
      if (over && active.id !== over.id && onColumnReorder && columnConfig) {
        const oldIndex = columnConfig.findIndex((col) => col.id === active.id);
        const newIndex = columnConfig.findIndex((col) => col.id === over.id);
        const newColumns = arrayMove(columnConfig, oldIndex, newIndex).map((col, index3) => __spreadProps(__spreadValues({}, col), {
          order: index3
        }));
        onColumnReorder(newColumns);
      }
    }, "handleDragEnd");
    const mobilePhoneFilter = (filters == null ? void 0 : filters.mobilePhone) || "";
    const employeeTypeFilter = (filters == null ? void 0 : filters.employeeType) || [];
    const managerFilter = (filters == null ? void 0 : filters.manager) || "";
    const statusFilter = (filters == null ? void 0 : filters.status) || [];
    const lastLoginFilter = (filters == null ? void 0 : filters.lastLogin) || "";
    const setMobilePhoneFilter = /* @__PURE__ */ __name((value) => {
      if (onFiltersChange) {
        onFiltersChange({ employeeType: employeeTypeFilter, mobilePhone: value, manager: managerFilter, status: statusFilter, lastLogin: lastLoginFilter });
      }
    }, "setMobilePhoneFilter");
    const setEmployeeTypeFilter = /* @__PURE__ */ __name((value) => {
      if (onFiltersChange) {
        onFiltersChange({ employeeType: value, mobilePhone: mobilePhoneFilter, manager: managerFilter, status: statusFilter, lastLogin: lastLoginFilter });
      }
    }, "setEmployeeTypeFilter");
    const setManagerFilter = /* @__PURE__ */ __name((value) => {
      if (onFiltersChange) {
        onFiltersChange({ employeeType: employeeTypeFilter, mobilePhone: mobilePhoneFilter, manager: value, status: statusFilter, lastLogin: lastLoginFilter });
      }
    }, "setManagerFilter");
    const setStatusFilter = /* @__PURE__ */ __name((value) => {
      if (onFiltersChange) {
        onFiltersChange({ employeeType: employeeTypeFilter, mobilePhone: mobilePhoneFilter, manager: managerFilter, status: value, lastLogin: lastLoginFilter });
      }
    }, "setStatusFilter");
    const setLastLoginFilter = /* @__PURE__ */ __name((value) => {
      if (onFiltersChange) {
        onFiltersChange({ employeeType: employeeTypeFilter, mobilePhone: mobilePhoneFilter, manager: managerFilter, status: statusFilter, lastLogin: value });
      }
    }, "setLastLoginFilter");
    const [managerSearchQuery, setManagerSearchQuery] = (0, import_react14.useState)("");
    const [managerOpen, setManagerOpen] = (0, import_react14.useState)(false);
    const { data: managerSuggestions = [] } = useQuery({
      queryKey: ["/api/managers", managerSearchQuery],
      queryFn: /* @__PURE__ */ __name(async () => {
        const params = new URLSearchParams();
        if (managerSearchQuery.trim()) {
          params.append("q", managerSearchQuery.trim());
        }
        const response = await fetch(`/api/managers?${params}`, {
          credentials: "include"
        });
        if (!response.ok) {
          throw new Error(`Failed to fetch manager suggestions: ${response.statusText}`);
        }
        return response.json();
      }, "queryFn"),
      enabled: managerOpen,
      staleTime: 5 * 60 * 1e3
      // 5 minutes
    });
    const updateStatusMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async ({ userId, status }) => {
        return apiRequest("PATCH", `/api/users/${userId}/status`, { status });
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name(() => {
        queryClient.invalidateQueries({ queryKey: ["/api/users"] });
        toast2({
          title: "Success",
          description: "User status updated successfully"
        });
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error) => {
        toast2({
          title: "Error",
          description: error.message,
          variant: "destructive"
        });
      }, "onError")
    });
    const deleteUserMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async (userId) => {
        return apiRequest("DELETE", `/api/users/${userId}`, void 0);
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name(() => {
        queryClient.invalidateQueries({ queryKey: ["/api/users"] });
        toast2({
          title: "Success",
          description: "User deleted successfully"
        });
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error) => {
        toast2({
          title: "Error",
          description: error.message,
          variant: "destructive"
        });
      }, "onError")
    });
    const handleStatusChange = /* @__PURE__ */ __name((userId, status) => {
      const actionText = status === "ACTIVE" ? "activate" : "suspend";
      setConfirmAction({
        type: status,
        title: `${actionText.charAt(0).toUpperCase() + actionText.slice(1)} User`,
        message: `Are you sure you want to ${actionText} this user?`,
        action: /* @__PURE__ */ __name(() => updateStatusMutation.mutate({ userId, status }), "action")
      });
    }, "handleStatusChange");
    const handleDeleteUser = /* @__PURE__ */ __name((userId) => {
      setConfirmAction({
        type: "delete",
        title: "Delete User",
        message: "Are you sure you want to delete this user? This action cannot be undone.",
        action: /* @__PURE__ */ __name(() => deleteUserMutation.mutate(userId), "action")
      });
    }, "handleDeleteUser");
    const getStatusBadge = /* @__PURE__ */ __name((status) => {
      switch (status) {
        case "ACTIVE":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-green-100 text-green-800 hover:bg-green-100" }, "Active");
        case "SUSPENDED":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-yellow-100 text-yellow-800 hover:bg-yellow-100" }, "Suspended");
        case "DEPROVISIONED":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-red-100 text-red-800 hover:bg-red-100" }, "Deprovisioned");
        default:
          return /* @__PURE__ */ React.createElement(Badge, { variant: "secondary" }, status);
      }
    }, "getStatusBadge");
    const getUserInitials = /* @__PURE__ */ __name((firstName, lastName) => {
      return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
    }, "getUserInitials");
    const formatLastLogin = /* @__PURE__ */ __name((lastLogin) => {
      if (!lastLogin) return "Never";
      try {
        const date2 = lastLogin instanceof Date ? lastLogin : new Date(lastLogin);
        return formatDistanceToNow(date2, { addSuffix: true });
      } catch (e) {
        return "Unknown";
      }
    }, "formatLastLogin");
    const getSortIcon = /* @__PURE__ */ __name((column) => {
      if (sortBy !== column || !onSort) {
        return /* @__PURE__ */ React.createElement(ArrowUpDown, { className: "ml-1 w-3 h-3 opacity-50" });
      }
      return sortOrder === "asc" ? /* @__PURE__ */ React.createElement(ArrowUpDown, { className: "ml-1 w-3 h-3 rotate-180" }) : /* @__PURE__ */ React.createElement(ArrowUpDown, { className: "ml-1 w-3 h-3" });
    }, "getSortIcon");
    const handleSort = /* @__PURE__ */ __name((column) => {
      if (onSort) {
        onSort(column);
      }
    }, "handleSort");
    const orderedColumns = (0, import_react14.useMemo)(() => {
      if (columnConfig) {
        return columnConfig.filter((col) => col.visible).sort((a, b) => a.order - b.order).map((col) => col.id);
      }
      return visibleColumns;
    }, [columnConfig, visibleColumns]);
    const renderEmployeeTypeFilter = /* @__PURE__ */ __name(() => {
      const employeeTypes = ["EMPLOYEE", "CONTRACTOR", "INTERN", "PART_TIME", "CONSULTANT"];
      return /* @__PURE__ */ React.createElement(Popover2, null, /* @__PURE__ */ React.createElement(PopoverTrigger2, { asChild: true }, /* @__PURE__ */ React.createElement(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0" }, /* @__PURE__ */ React.createElement(Filter, { className: "h-4 w-4" }))), /* @__PURE__ */ React.createElement(PopoverContent2, { className: "w-56", align: "start" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-3" }, /* @__PURE__ */ React.createElement(Label2, { className: "text-sm font-medium" }, "Employee Type"), /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, employeeTypes.map((type) => /* @__PURE__ */ React.createElement("div", { key: type, className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
        Checkbox2,
        {
          id: type,
          checked: employeeTypeFilter.includes(type),
          onCheckedChange: (checked) => {
            if (checked) {
              setEmployeeTypeFilter([...employeeTypeFilter, type]);
            } else {
              setEmployeeTypeFilter(employeeTypeFilter.filter((t3) => t3 !== type));
            }
          }
        }
      ), /* @__PURE__ */ React.createElement(Label2, { htmlFor: type, className: "text-sm font-normal" }, type)))), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2" }, /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "outline",
          size: "sm",
          onClick: () => setEmployeeTypeFilter([]),
          className: "text-xs"
        },
        "Clear"
      )))));
    }, "renderEmployeeTypeFilter");
    const renderStatusFilter = /* @__PURE__ */ __name(() => {
      const statusOptions = ["ACTIVE", "SUSPENDED", "DEPROVISIONED", "PROVISIONED", "STAGED", "RECOVERY", "LOCKED_OUT", "PASSWORD_EXPIRED"];
      return /* @__PURE__ */ React.createElement(Popover2, null, /* @__PURE__ */ React.createElement(PopoverTrigger2, { asChild: true }, /* @__PURE__ */ React.createElement(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0" }, /* @__PURE__ */ React.createElement(Filter, { className: "h-4 w-4" }))), /* @__PURE__ */ React.createElement(PopoverContent2, { className: "w-56", align: "start" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-3" }, /* @__PURE__ */ React.createElement(Label2, { className: "text-sm font-medium" }, "Status"), /* @__PURE__ */ React.createElement("div", { className: "space-y-2 max-h-48 overflow-y-auto" }, statusOptions.map((status) => /* @__PURE__ */ React.createElement("div", { key: status, className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
        Checkbox2,
        {
          id: status,
          checked: statusFilter.includes(status),
          onCheckedChange: (checked) => {
            if (checked) {
              setStatusFilter([...statusFilter, status]);
            } else {
              setStatusFilter(statusFilter.filter((s2) => s2 !== status));
            }
          }
        }
      ), /* @__PURE__ */ React.createElement(Label2, { htmlFor: status, className: "text-sm font-normal" }, status)))), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2" }, /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "outline",
          size: "sm",
          onClick: () => setStatusFilter([]),
          className: "text-xs"
        },
        "Clear"
      )))));
    }, "renderStatusFilter");
    const renderLastLoginFilter = /* @__PURE__ */ __name(() => {
      const lastLoginOptions = [
        { value: "1", label: "Last 1 day" },
        { value: "3", label: "Last 3 days" },
        { value: "7", label: "Last 7 days" },
        { value: "14", label: "Last 14 days" },
        { value: "30", label: "Last 30 days" },
        { value: "31", label: "Longer than 30 days" },
        { value: "never", label: "Never logged in" }
      ];
      return /* @__PURE__ */ React.createElement(Popover2, null, /* @__PURE__ */ React.createElement(PopoverTrigger2, { asChild: true }, /* @__PURE__ */ React.createElement(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0" }, /* @__PURE__ */ React.createElement(Filter, { className: "h-4 w-4" }))), /* @__PURE__ */ React.createElement(PopoverContent2, { className: "w-56", align: "start" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-3" }, /* @__PURE__ */ React.createElement(Label2, { className: "text-sm font-medium" }, "Last Login"), /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, lastLoginOptions.map((option) => /* @__PURE__ */ React.createElement("div", { key: option.value, className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
        "input",
        {
          type: "radio",
          id: option.value,
          name: "lastLogin",
          value: option.value,
          checked: lastLoginFilter === option.value,
          onChange: (e) => setLastLoginFilter(e.target.value),
          className: "w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 focus:ring-blue-500"
        }
      ), /* @__PURE__ */ React.createElement(Label2, { htmlFor: option.value, className: "text-sm font-normal" }, option.label)))), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2" }, /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "outline",
          size: "sm",
          onClick: () => setLastLoginFilter(""),
          className: "text-xs"
        },
        "Clear"
      )))));
    }, "renderLastLoginFilter");
    const renderMobilePhoneFilter = /* @__PURE__ */ __name(() => {
      return /* @__PURE__ */ React.createElement(Popover2, null, /* @__PURE__ */ React.createElement(PopoverTrigger2, { asChild: true }, /* @__PURE__ */ React.createElement(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0" }, /* @__PURE__ */ React.createElement(Filter, { className: "h-4 w-4" }))), /* @__PURE__ */ React.createElement(PopoverContent2, { className: "w-56", align: "start" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-3" }, /* @__PURE__ */ React.createElement(Label2, { className: "text-sm font-medium" }, "Mobile Phone"), /* @__PURE__ */ React.createElement(
        Input,
        {
          placeholder: "Search phone number...",
          value: mobilePhoneFilter,
          onChange: (e) => setMobilePhoneFilter(e.target.value),
          className: "text-sm"
        }
      ), /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "outline",
          size: "sm",
          onClick: () => setMobilePhoneFilter(""),
          className: "text-xs"
        },
        "Clear"
      ))));
    }, "renderMobilePhoneFilter");
    const renderManagerFilter = /* @__PURE__ */ __name(() => {
      return /* @__PURE__ */ React.createElement(Popover2, { open: managerOpen, onOpenChange: setManagerOpen }, /* @__PURE__ */ React.createElement(PopoverTrigger2, { asChild: true }, /* @__PURE__ */ React.createElement(Button, { variant: "ghost", size: "sm", className: "h-8 w-8 p-0" }, /* @__PURE__ */ React.createElement(Filter, { className: "h-4 w-4" }))), /* @__PURE__ */ React.createElement(PopoverContent2, { className: "w-56 p-0", align: "start" }, /* @__PURE__ */ React.createElement(Command, { shouldFilter: false }, /* @__PURE__ */ React.createElement(
        CommandInput,
        {
          placeholder: "Search manager...",
          value: managerSearchQuery,
          onValueChange: setManagerSearchQuery,
          autoFocus: true
        }
      ), /* @__PURE__ */ React.createElement(CommandList, null, /* @__PURE__ */ React.createElement(CommandEmpty, null, "No managers found."), /* @__PURE__ */ React.createElement(CommandGroup, null, managerFilter && /* @__PURE__ */ React.createElement(
        CommandItem,
        {
          onSelect: () => {
            setManagerFilter("");
            setManagerSearchQuery("");
            setManagerOpen(false);
          }
        },
        /* @__PURE__ */ React.createElement("span", { className: "text-muted-foreground" }, "Clear filter")
      ), managerSuggestions.map((manager) => /* @__PURE__ */ React.createElement(
        CommandItem,
        {
          key: manager,
          onSelect: () => {
            setManagerFilter(manager);
            setManagerSearchQuery("");
            setManagerOpen(false);
          }
        },
        /* @__PURE__ */ React.createElement(
          Check,
          {
            className: cn(
              "mr-2 h-4 w-4",
              managerFilter === manager ? "opacity-100" : "opacity-0"
            )
          }
        ),
        manager
      )))))));
    }, "renderManagerFilter");
    const renderCellContent = /* @__PURE__ */ __name((user, columnId) => {
      switch (columnId) {
        case "name":
          return /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement("div", { className: "flex-shrink-0 h-10 w-10" }, /* @__PURE__ */ React.createElement("div", { className: "h-10 w-10 rounded-full bg-blue-600 flex items-center justify-center" }, /* @__PURE__ */ React.createElement("span", { className: "text-sm font-medium text-white" }, getUserInitials(user.firstName, user.lastName)))), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("div", { className: "text-sm font-medium text-foreground" }, user.firstName, " ", user.lastName)));
        case "login":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-foreground" }, user.login);
        case "title":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-foreground" }, user.title || "-");
        case "department":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-foreground" }, user.department || "-");
        case "employeeType":
          return /* @__PURE__ */ React.createElement(Badge, { variant: "outline" }, user.employeeType);
        case "manager":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-foreground" }, user.manager || "-");
        case "mobilePhone":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-foreground" }, user.mobilePhone || "-");
        case "status":
          return getStatusBadge(user.status);
        case "disabled":
          const isDisabled = user.status === "SUSPENDED" || user.status === "DEPROVISIONED";
          if (isDisabled && user.lastUpdated) {
            return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-red-600 dark:text-red-400" }, format(new Date(user.lastUpdated), "MMM dd, yyyy"));
          }
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-muted-foreground" }, "-");
        case "activated":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-muted-foreground" }, user.created ? format(new Date(user.created), "MMM dd, yyyy") : "-");
        case "lastLogin":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-muted-foreground" }, formatLastLogin(user.lastLogin));
        case "lastUpdated":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-muted-foreground" }, user.lastUpdated ? format(new Date(user.lastUpdated), "MMM dd, yyyy") : "-");
        case "passwordChanged":
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-muted-foreground" }, user.passwordChanged ? format(new Date(user.passwordChanged), "MMM dd, yyyy") : "-");
        default:
          return /* @__PURE__ */ React.createElement("div", { className: "text-sm text-foreground" }, "-");
      }
    }, "renderCellContent");
    const startIndex = (currentPage - 1) * usersPerPage + 1;
    const endIndex = Math.min(currentPage * usersPerPage, total);
    const memoizedUsers = (0, import_react14.useMemo)(() => users2, [users2]);
    const itemHeight = 57;
    const containerHeight = Math.min(600, Math.max(300, users2.length * itemHeight));
    if (isLoading) {
      return /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-4" }, /* @__PURE__ */ React.createElement(Skeleton, { className: "h-4 w-full" }), /* @__PURE__ */ React.createElement(Skeleton, { className: "h-4 w-full" }), /* @__PURE__ */ React.createElement(Skeleton, { className: "h-4 w-full" }), /* @__PURE__ */ React.createElement(Skeleton, { className: "h-4 w-full" }), /* @__PURE__ */ React.createElement(Skeleton, { className: "h-4 w-full" }))));
    }
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement("div", { className: "overflow-x-auto" }, /* @__PURE__ */ React.createElement(
      DndContext,
      {
        sensors,
        collisionDetection: closestCenter,
        onDragEnd: handleDragEnd
      },
      /* @__PURE__ */ React.createElement(Table, null, /* @__PURE__ */ React.createElement(TableHeader, null, /* @__PURE__ */ React.createElement(TableRow, { className: "group" }, /* @__PURE__ */ React.createElement(
        SortableContext,
        {
          items: orderedColumns,
          strategy: horizontalListSortingStrategy
        },
        orderedColumns.map((columnId) => {
          const column = COLUMN_DEFINITIONS[columnId];
          if (!column) return null;
          return /* @__PURE__ */ React.createElement(
            SortableTableHeader,
            {
              key: columnId,
              columnId,
              onColumnReorder,
              columnConfig
            },
            /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-center space-x-2 w-full" }, /* @__PURE__ */ React.createElement(
              Button,
              {
                variant: "ghost",
                className: "h-auto p-0 font-medium text-xs text-muted-foreground uppercase tracking-wider hover:text-foreground",
                onClick: () => handleSort(column.sortKey)
              },
              column.label,
              getSortIcon(column.sortKey)
            ), column.hasFilter && columnId === "employeeType" && renderEmployeeTypeFilter(), column.hasFilter && columnId === "mobilePhone" && renderMobilePhoneFilter(), column.hasFilter && columnId === "manager" && renderManagerFilter(), column.hasFilter && columnId === "status" && renderStatusFilter(), column.hasFilter && columnId === "lastLogin" && renderLastLoginFilter())
          );
        })
      ))), /* @__PURE__ */ React.createElement(TableBody, null, users2.map((user) => /* @__PURE__ */ React.createElement(
        TableRow,
        {
          key: user.id,
          className: "table-row-light cursor-pointer",
          onClick: () => onUserClick(user.id)
        },
        orderedColumns.map((columnId) => /* @__PURE__ */ React.createElement(TableCell, { key: columnId, className: "px-6 py-4 text-center" }, renderCellContent(user, columnId)))
      ))))
    )), /* @__PURE__ */ React.createElement("div", { className: "bg-background px-6 py-3 border-t border-border flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center text-sm text-muted-foreground" }, "Showing ", /* @__PURE__ */ React.createElement("span", { className: "font-medium mx-1" }, startIndex), " to", " ", /* @__PURE__ */ React.createElement("span", { className: "font-medium mx-1" }, endIndex), " of", " ", /* @__PURE__ */ React.createElement("span", { className: "font-medium mx-1" }, total), " users"), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2 text-sm text-muted-foreground" }, /* @__PURE__ */ React.createElement("span", null, "Show:"), /* @__PURE__ */ React.createElement(Select2, { value: usersPerPage.toString(), onValueChange: (value) => onPerPageChange(parseInt(value)) }, /* @__PURE__ */ React.createElement(SelectTrigger2, { className: "w-20 h-8" }, /* @__PURE__ */ React.createElement(SelectValue2, null)), /* @__PURE__ */ React.createElement(SelectContent2, null, /* @__PURE__ */ React.createElement(SelectItem2, { value: "10" }, "10"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "25" }, "25"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "50" }, "50"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "100" }, "100"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "200" }, "200"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "500" }, "500"))), /* @__PURE__ */ React.createElement("span", null, "per page"))), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => onPageChange(currentPage - 1),
        disabled: currentPage === 1
      },
      /* @__PURE__ */ React.createElement(ChevronLeft, { className: "w-4 h-4" })
    ), (() => {
      const pages = [];
      const maxVisiblePages = 5;
      if (totalPages <= maxVisiblePages) {
        for (let i2 = 1; i2 <= totalPages; i2++) {
          pages.push(i2);
        }
      } else {
        if (currentPage <= 3) {
          pages.push(1, 2, 3, 4);
          if (totalPages > 5) {
            pages.push("...", totalPages);
          } else {
            pages.push(5);
          }
        } else if (currentPage >= totalPages - 2) {
          pages.push(1, "...");
          for (let i2 = totalPages - 3; i2 <= totalPages; i2++) {
            pages.push(i2);
          }
        } else {
          pages.push(1, "...");
          for (let i2 = currentPage - 1; i2 <= currentPage + 1; i2++) {
            pages.push(i2);
          }
          pages.push("...", totalPages);
        }
      }
      return pages.map((page, index3) => {
        if (page === "...") {
          return /* @__PURE__ */ React.createElement("span", { key: `ellipsis-${index3}`, className: "px-2 text-gray-400" }, "...");
        }
        const pageNum = page;
        return /* @__PURE__ */ React.createElement(
          Button,
          {
            key: pageNum,
            variant: currentPage === pageNum ? "default" : "outline",
            size: "sm",
            onClick: () => onPageChange(pageNum),
            className: currentPage === pageNum ? "bg-blue-600 hover:bg-blue-700 text-white" : ""
          },
          pageNum
        );
      });
    })(), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => onPageChange(currentPage + 1),
        disabled: currentPage === totalPages
      },
      /* @__PURE__ */ React.createElement(ChevronRight, { className: "w-4 h-4" })
    )))), /* @__PURE__ */ React.createElement(
      ConfirmationModal,
      {
        open: !!confirmAction,
        onClose: () => setConfirmAction(null),
        title: (confirmAction == null ? void 0 : confirmAction.title) || "",
        message: (confirmAction == null ? void 0 : confirmAction.message) || "",
        onConfirm: () => {
          confirmAction == null ? void 0 : confirmAction.action();
          setConfirmAction(null);
        },
        confirmText: (confirmAction == null ? void 0 : confirmAction.type) === "delete" ? "Delete" : "Confirm",
        variant: (confirmAction == null ? void 0 : confirmAction.type) === "delete" ? "destructive" : "default"
      }
    ));
  }
  __name(UserTable, "UserTable");

  // client/src/components/create-user-modal.tsx
  var import_react16 = __toESM(require_react(), 1);

  // node_modules/react-hook-form/dist/index.esm.mjs
  var import_react15 = __toESM(require_react(), 1);
  var isCheckBoxInput = /* @__PURE__ */ __name((element) => element.type === "checkbox", "isCheckBoxInput");
  var isDateObject = /* @__PURE__ */ __name((value) => value instanceof Date, "isDateObject");
  var isNullOrUndefined = /* @__PURE__ */ __name((value) => value == null, "isNullOrUndefined");
  var isObjectType = /* @__PURE__ */ __name((value) => typeof value === "object", "isObjectType");
  var isObject = /* @__PURE__ */ __name((value) => !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !isDateObject(value), "isObject");
  var getEventValue = /* @__PURE__ */ __name((event) => isObject(event) && event.target ? isCheckBoxInput(event.target) ? event.target.checked : event.target.value : event, "getEventValue");
  var getNodeParentName = /* @__PURE__ */ __name((name) => name.substring(0, name.search(/\.\d+(\.|$)/)) || name, "getNodeParentName");
  var isNameInFieldArray = /* @__PURE__ */ __name((names, name) => names.has(getNodeParentName(name)), "isNameInFieldArray");
  var isPlainObject2 = /* @__PURE__ */ __name((tempObject) => {
    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;
    return isObject(prototypeCopy) && prototypeCopy.hasOwnProperty("isPrototypeOf");
  }, "isPlainObject");
  var isWeb = typeof window !== "undefined" && typeof window.HTMLElement !== "undefined" && typeof document !== "undefined";
  function cloneObject(data) {
    let copy;
    const isArray = Array.isArray(data);
    const isFileListInstance = typeof FileList !== "undefined" ? data instanceof FileList : false;
    if (data instanceof Date) {
      copy = new Date(data);
    } else if (data instanceof Set) {
      copy = new Set(data);
    } else if (!(isWeb && (data instanceof Blob || isFileListInstance)) && (isArray || isObject(data))) {
      copy = isArray ? [] : {};
      if (!isArray && !isPlainObject2(data)) {
        copy = data;
      } else {
        for (const key in data) {
          if (data.hasOwnProperty(key)) {
            copy[key] = cloneObject(data[key]);
          }
        }
      }
    } else {
      return data;
    }
    return copy;
  }
  __name(cloneObject, "cloneObject");
  var compact = /* @__PURE__ */ __name((value) => Array.isArray(value) ? value.filter(Boolean) : [], "compact");
  var isUndefined = /* @__PURE__ */ __name((val) => val === void 0, "isUndefined");
  var get = /* @__PURE__ */ __name((object, path, defaultValue2) => {
    if (!path || !isObject(object)) {
      return defaultValue2;
    }
    const result = compact(path.split(/[,[\].]+?/)).reduce((result2, key) => isNullOrUndefined(result2) ? result2 : result2[key], object);
    return isUndefined(result) || result === object ? isUndefined(object[path]) ? defaultValue2 : object[path] : result;
  }, "get");
  var isBoolean = /* @__PURE__ */ __name((value) => typeof value === "boolean", "isBoolean");
  var isKey = /* @__PURE__ */ __name((value) => /^\w*$/.test(value), "isKey");
  var stringToPath = /* @__PURE__ */ __name((input) => compact(input.replace(/["|']|\]/g, "").split(/\.|\[/)), "stringToPath");
  var set = /* @__PURE__ */ __name((object, path, value) => {
    let index3 = -1;
    const tempPath = isKey(path) ? [path] : stringToPath(path);
    const length = tempPath.length;
    const lastIndex = length - 1;
    while (++index3 < length) {
      const key = tempPath[index3];
      let newValue = value;
      if (index3 !== lastIndex) {
        const objValue = object[key];
        newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index3 + 1]) ? [] : {};
      }
      if (key === "__proto__" || key === "constructor" || key === "prototype") {
        return;
      }
      object[key] = newValue;
      object = object[key];
    }
  }, "set");
  var EVENTS = {
    BLUR: "blur",
    FOCUS_OUT: "focusout",
    CHANGE: "change"
  };
  var VALIDATION_MODE = {
    onBlur: "onBlur",
    onChange: "onChange",
    onSubmit: "onSubmit",
    onTouched: "onTouched",
    all: "all"
  };
  var INPUT_VALIDATION_RULES = {
    max: "max",
    min: "min",
    maxLength: "maxLength",
    minLength: "minLength",
    pattern: "pattern",
    required: "required",
    validate: "validate"
  };
  var HookFormContext = import_react15.default.createContext(null);
  var useFormContext = /* @__PURE__ */ __name(() => import_react15.default.useContext(HookFormContext), "useFormContext");
  var FormProvider = /* @__PURE__ */ __name((props) => {
    const _a121 = props, { children } = _a121, data = __objRest(_a121, ["children"]);
    return import_react15.default.createElement(HookFormContext.Provider, { value: data }, children);
  }, "FormProvider");
  var getProxyFormState = /* @__PURE__ */ __name((formState, control, localProxyFormState, isRoot = true) => {
    const result = {
      defaultValues: control._defaultValues
    };
    for (const key in formState) {
      Object.defineProperty(result, key, {
        get: /* @__PURE__ */ __name(() => {
          const _key = key;
          if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {
            control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;
          }
          localProxyFormState && (localProxyFormState[_key] = true);
          return formState[_key];
        }, "get")
      });
    }
    return result;
  }, "getProxyFormState");
  function useFormState(props) {
    const methods = useFormContext();
    const { control = methods.control, disabled, name, exact } = props || {};
    const [formState, updateFormState] = import_react15.default.useState(control._formState);
    const _localProxyFormState = import_react15.default.useRef({
      isDirty: false,
      isLoading: false,
      dirtyFields: false,
      touchedFields: false,
      validatingFields: false,
      isValidating: false,
      isValid: false,
      errors: false
    });
    const _name = import_react15.default.useRef(name);
    _name.current = name;
    import_react15.default.useEffect(() => control._subscribe({
      name: _name.current,
      formState: _localProxyFormState.current,
      exact,
      callback: /* @__PURE__ */ __name((formState2) => {
        !disabled && updateFormState(__spreadValues(__spreadValues({}, control._formState), formState2));
      }, "callback")
    }), [control, disabled, exact]);
    import_react15.default.useEffect(() => {
      _localProxyFormState.current.isValid && control._setValid(true);
    }, [control]);
    return import_react15.default.useMemo(() => getProxyFormState(formState, control, _localProxyFormState.current, false), [formState, control]);
  }
  __name(useFormState, "useFormState");
  var isString = /* @__PURE__ */ __name((value) => typeof value === "string", "isString");
  var generateWatchOutput = /* @__PURE__ */ __name((names, _names, formValues, isGlobal, defaultValue2) => {
    if (isString(names)) {
      isGlobal && _names.watch.add(names);
      return get(formValues, names, defaultValue2);
    }
    if (Array.isArray(names)) {
      return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));
    }
    isGlobal && (_names.watchAll = true);
    return formValues;
  }, "generateWatchOutput");
  function useWatch(props) {
    const methods = useFormContext();
    const { control = methods.control, name, defaultValue: defaultValue2, disabled, exact } = props || {};
    const _name = import_react15.default.useRef(name);
    const _defaultValue = import_react15.default.useRef(defaultValue2);
    _name.current = name;
    import_react15.default.useEffect(() => control._subscribe({
      name: _name.current,
      formState: {
        values: true
      },
      exact,
      callback: /* @__PURE__ */ __name((formState) => !disabled && updateValue(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, _defaultValue.current)), "callback")
    }), [control, disabled, exact]);
    const [value, updateValue] = import_react15.default.useState(control._getWatch(name, defaultValue2));
    import_react15.default.useEffect(() => control._removeUnmounted());
    return value;
  }
  __name(useWatch, "useWatch");
  function useController(props) {
    const methods = useFormContext();
    const { name, disabled, control = methods.control, shouldUnregister } = props;
    const isArrayField = isNameInFieldArray(control._names.array, name);
    const value = useWatch({
      control,
      name,
      defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),
      exact: true
    });
    const formState = useFormState({
      control,
      name,
      exact: true
    });
    const _props = import_react15.default.useRef(props);
    const _registerProps = import_react15.default.useRef(control.register(name, __spreadValues(__spreadProps(__spreadValues({}, props.rules), {
      value
    }), isBoolean(props.disabled) ? { disabled: props.disabled } : {})));
    const fieldState = import_react15.default.useMemo(() => Object.defineProperties({}, {
      invalid: {
        enumerable: true,
        get: /* @__PURE__ */ __name(() => !!get(formState.errors, name), "get")
      },
      isDirty: {
        enumerable: true,
        get: /* @__PURE__ */ __name(() => !!get(formState.dirtyFields, name), "get")
      },
      isTouched: {
        enumerable: true,
        get: /* @__PURE__ */ __name(() => !!get(formState.touchedFields, name), "get")
      },
      isValidating: {
        enumerable: true,
        get: /* @__PURE__ */ __name(() => !!get(formState.validatingFields, name), "get")
      },
      error: {
        enumerable: true,
        get: /* @__PURE__ */ __name(() => get(formState.errors, name), "get")
      }
    }), [formState, name]);
    const onChange = import_react15.default.useCallback((event) => _registerProps.current.onChange({
      target: {
        value: getEventValue(event),
        name
      },
      type: EVENTS.CHANGE
    }), [name]);
    const onBlur = import_react15.default.useCallback(() => _registerProps.current.onBlur({
      target: {
        value: get(control._formValues, name),
        name
      },
      type: EVENTS.BLUR
    }), [name, control._formValues]);
    const ref = import_react15.default.useCallback((elm) => {
      const field2 = get(control._fields, name);
      if (field2 && elm) {
        field2._f.ref = {
          focus: /* @__PURE__ */ __name(() => elm.focus(), "focus"),
          select: /* @__PURE__ */ __name(() => elm.select(), "select"),
          setCustomValidity: /* @__PURE__ */ __name((message2) => elm.setCustomValidity(message2), "setCustomValidity"),
          reportValidity: /* @__PURE__ */ __name(() => elm.reportValidity(), "reportValidity")
        };
      }
    }, [control._fields, name]);
    const field = import_react15.default.useMemo(() => __spreadProps(__spreadValues({
      name,
      value
    }, isBoolean(disabled) || formState.disabled ? { disabled: formState.disabled || disabled } : {}), {
      onChange,
      onBlur,
      ref
    }), [name, disabled, formState.disabled, onChange, onBlur, ref, value]);
    import_react15.default.useEffect(() => {
      const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;
      control.register(name, __spreadValues(__spreadValues({}, _props.current.rules), isBoolean(_props.current.disabled) ? { disabled: _props.current.disabled } : {}));
      const updateMounted = /* @__PURE__ */ __name((name2, value2) => {
        const field2 = get(control._fields, name2);
        if (field2 && field2._f) {
          field2._f.mount = value2;
        }
      }, "updateMounted");
      updateMounted(name, true);
      if (_shouldUnregisterField) {
        const value2 = cloneObject(get(control._options.defaultValues, name));
        set(control._defaultValues, name, value2);
        if (isUndefined(get(control._formValues, name))) {
          set(control._formValues, name, value2);
        }
      }
      !isArrayField && control.register(name);
      return () => {
        (isArrayField ? _shouldUnregisterField && !control._state.action : _shouldUnregisterField) ? control.unregister(name) : updateMounted(name, false);
      };
    }, [name, control, isArrayField, shouldUnregister]);
    import_react15.default.useEffect(() => {
      control._setDisabledField({
        disabled,
        name
      });
    }, [disabled, name, control]);
    return import_react15.default.useMemo(() => ({
      field,
      formState,
      fieldState
    }), [field, formState, fieldState]);
  }
  __name(useController, "useController");
  var Controller = /* @__PURE__ */ __name((props) => props.render(useController(props)), "Controller");
  var appendErrors = /* @__PURE__ */ __name((name, validateAllFieldCriteria, errors, type, message2) => validateAllFieldCriteria ? __spreadProps(__spreadValues({}, errors[name]), {
    types: __spreadProps(__spreadValues({}, errors[name] && errors[name].types ? errors[name].types : {}), {
      [type]: message2 || true
    })
  }) : {}, "appendErrors");
  var convertToArrayPayload = /* @__PURE__ */ __name((value) => Array.isArray(value) ? value : [value], "convertToArrayPayload");
  var createSubject = /* @__PURE__ */ __name(() => {
    let _observers2 = [];
    const next = /* @__PURE__ */ __name((value) => {
      for (const observer of _observers2) {
        observer.next && observer.next(value);
      }
    }, "next");
    const subscribe = /* @__PURE__ */ __name((observer) => {
      _observers2.push(observer);
      return {
        unsubscribe: /* @__PURE__ */ __name(() => {
          _observers2 = _observers2.filter((o2) => o2 !== observer);
        }, "unsubscribe")
      };
    }, "subscribe");
    const unsubscribe = /* @__PURE__ */ __name(() => {
      _observers2 = [];
    }, "unsubscribe");
    return {
      get observers() {
        return _observers2;
      },
      next,
      subscribe,
      unsubscribe
    };
  }, "createSubject");
  var isPrimitive = /* @__PURE__ */ __name((value) => isNullOrUndefined(value) || !isObjectType(value), "isPrimitive");
  function deepEqual2(object1, object2) {
    if (isPrimitive(object1) || isPrimitive(object2)) {
      return object1 === object2;
    }
    if (isDateObject(object1) && isDateObject(object2)) {
      return object1.getTime() === object2.getTime();
    }
    const keys1 = Object.keys(object1);
    const keys2 = Object.keys(object2);
    if (keys1.length !== keys2.length) {
      return false;
    }
    for (const key of keys1) {
      const val1 = object1[key];
      if (!keys2.includes(key)) {
        return false;
      }
      if (key !== "ref") {
        const val2 = object2[key];
        if (isDateObject(val1) && isDateObject(val2) || isObject(val1) && isObject(val2) || Array.isArray(val1) && Array.isArray(val2) ? !deepEqual2(val1, val2) : val1 !== val2) {
          return false;
        }
      }
    }
    return true;
  }
  __name(deepEqual2, "deepEqual");
  var isEmptyObject = /* @__PURE__ */ __name((value) => isObject(value) && !Object.keys(value).length, "isEmptyObject");
  var isFileInput = /* @__PURE__ */ __name((element) => element.type === "file", "isFileInput");
  var isFunction = /* @__PURE__ */ __name((value) => typeof value === "function", "isFunction");
  var isHTMLElement4 = /* @__PURE__ */ __name((value) => {
    if (!isWeb) {
      return false;
    }
    const owner = value ? value.ownerDocument : 0;
    return value instanceof (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement);
  }, "isHTMLElement");
  var isMultipleSelect = /* @__PURE__ */ __name((element) => element.type === `select-multiple`, "isMultipleSelect");
  var isRadioInput = /* @__PURE__ */ __name((element) => element.type === "radio", "isRadioInput");
  var isRadioOrCheckbox = /* @__PURE__ */ __name((ref) => isRadioInput(ref) || isCheckBoxInput(ref), "isRadioOrCheckbox");
  var live = /* @__PURE__ */ __name((ref) => isHTMLElement4(ref) && ref.isConnected, "live");
  function baseGet(object, updatePath) {
    const length = updatePath.slice(0, -1).length;
    let index3 = 0;
    while (index3 < length) {
      object = isUndefined(object) ? index3++ : object[updatePath[index3++]];
    }
    return object;
  }
  __name(baseGet, "baseGet");
  function isEmptyArray(obj) {
    for (const key in obj) {
      if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {
        return false;
      }
    }
    return true;
  }
  __name(isEmptyArray, "isEmptyArray");
  function unset(object, path) {
    const paths = Array.isArray(path) ? path : isKey(path) ? [path] : stringToPath(path);
    const childObject = paths.length === 1 ? object : baseGet(object, paths);
    const index3 = paths.length - 1;
    const key = paths[index3];
    if (childObject) {
      delete childObject[key];
    }
    if (index3 !== 0 && (isObject(childObject) && isEmptyObject(childObject) || Array.isArray(childObject) && isEmptyArray(childObject))) {
      unset(object, paths.slice(0, -1));
    }
    return object;
  }
  __name(unset, "unset");
  var objectHasFunction = /* @__PURE__ */ __name((data) => {
    for (const key in data) {
      if (isFunction(data[key])) {
        return true;
      }
    }
    return false;
  }, "objectHasFunction");
  function markFieldsDirty(data, fields = {}) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject(data) || isParentNodeArray) {
      for (const key in data) {
        if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {
          fields[key] = Array.isArray(data[key]) ? [] : {};
          markFieldsDirty(data[key], fields[key]);
        } else if (!isNullOrUndefined(data[key])) {
          fields[key] = true;
        }
      }
    }
    return fields;
  }
  __name(markFieldsDirty, "markFieldsDirty");
  function getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {
    const isParentNodeArray = Array.isArray(data);
    if (isObject(data) || isParentNodeArray) {
      for (const key in data) {
        if (Array.isArray(data[key]) || isObject(data[key]) && !objectHasFunction(data[key])) {
          if (isUndefined(formValues) || isPrimitive(dirtyFieldsFromValues[key])) {
            dirtyFieldsFromValues[key] = Array.isArray(data[key]) ? markFieldsDirty(data[key], []) : __spreadValues({}, markFieldsDirty(data[key]));
          } else {
            getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);
          }
        } else {
          dirtyFieldsFromValues[key] = !deepEqual2(data[key], formValues[key]);
        }
      }
    }
    return dirtyFieldsFromValues;
  }
  __name(getDirtyFieldsFromDefaultValues, "getDirtyFieldsFromDefaultValues");
  var getDirtyFields = /* @__PURE__ */ __name((defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues)), "getDirtyFields");
  var defaultResult = {
    value: false,
    isValid: false
  };
  var validResult = { value: true, isValid: true };
  var getCheckboxValue = /* @__PURE__ */ __name((options) => {
    if (Array.isArray(options)) {
      if (options.length > 1) {
        const values = options.filter((option) => option && option.checked && !option.disabled).map((option) => option.value);
        return { value: values, isValid: !!values.length };
      }
      return options[0].checked && !options[0].disabled ? (
        // @ts-expect-error expected to work in the browser
        options[0].attributes && !isUndefined(options[0].attributes.value) ? isUndefined(options[0].value) || options[0].value === "" ? validResult : { value: options[0].value, isValid: true } : validResult
      ) : defaultResult;
    }
    return defaultResult;
  }, "getCheckboxValue");
  var getFieldValueAs = /* @__PURE__ */ __name((value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value) ? value : valueAsNumber ? value === "" ? NaN : value ? +value : value : valueAsDate && isString(value) ? new Date(value) : setValueAs ? setValueAs(value) : value, "getFieldValueAs");
  var defaultReturn = {
    isValid: false,
    value: null
  };
  var getRadioValue = /* @__PURE__ */ __name((options) => Array.isArray(options) ? options.reduce((previous, option) => option && option.checked && !option.disabled ? {
    isValid: true,
    value: option.value
  } : previous, defaultReturn) : defaultReturn, "getRadioValue");
  function getFieldValue(_f2) {
    const ref = _f2.ref;
    if (isFileInput(ref)) {
      return ref.files;
    }
    if (isRadioInput(ref)) {
      return getRadioValue(_f2.refs).value;
    }
    if (isMultipleSelect(ref)) {
      return [...ref.selectedOptions].map(({ value }) => value);
    }
    if (isCheckBoxInput(ref)) {
      return getCheckboxValue(_f2.refs).value;
    }
    return getFieldValueAs(isUndefined(ref.value) ? _f2.ref.value : ref.value, _f2);
  }
  __name(getFieldValue, "getFieldValue");
  var getResolverOptions = /* @__PURE__ */ __name((fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {
    const fields = {};
    for (const name of fieldsNames) {
      const field = get(_fields, name);
      field && set(fields, name, field._f);
    }
    return {
      criteriaMode,
      names: [...fieldsNames],
      fields,
      shouldUseNativeValidation
    };
  }, "getResolverOptions");
  var isRegex = /* @__PURE__ */ __name((value) => value instanceof RegExp, "isRegex");
  var getRuleValue = /* @__PURE__ */ __name((rule) => isUndefined(rule) ? rule : isRegex(rule) ? rule.source : isObject(rule) ? isRegex(rule.value) ? rule.value.source : rule.value : rule, "getRuleValue");
  var getValidationModes = /* @__PURE__ */ __name((mode) => ({
    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,
    isOnBlur: mode === VALIDATION_MODE.onBlur,
    isOnChange: mode === VALIDATION_MODE.onChange,
    isOnAll: mode === VALIDATION_MODE.all,
    isOnTouch: mode === VALIDATION_MODE.onTouched
  }), "getValidationModes");
  var ASYNC_FUNCTION = "AsyncFunction";
  var hasPromiseValidation = /* @__PURE__ */ __name((fieldReference) => !!fieldReference && !!fieldReference.validate && !!(isFunction(fieldReference.validate) && fieldReference.validate.constructor.name === ASYNC_FUNCTION || isObject(fieldReference.validate) && Object.values(fieldReference.validate).find((validateFunction) => validateFunction.constructor.name === ASYNC_FUNCTION)), "hasPromiseValidation");
  var hasValidation = /* @__PURE__ */ __name((options) => options.mount && (options.required || options.min || options.max || options.maxLength || options.minLength || options.pattern || options.validate), "hasValidation");
  var isWatched = /* @__PURE__ */ __name((name, _names, isBlurEvent) => !isBlurEvent && (_names.watchAll || _names.watch.has(name) || [..._names.watch].some((watchName) => name.startsWith(watchName) && /^\.\w+/.test(name.slice(watchName.length)))), "isWatched");
  var iterateFieldsByAction = /* @__PURE__ */ __name((fields, action, fieldsNames, abortEarly) => {
    for (const key of fieldsNames || Object.keys(fields)) {
      const field = get(fields, key);
      if (field) {
        const _a121 = field, { _f: _f2 } = _a121, currentField = __objRest(_a121, ["_f"]);
        if (_f2) {
          if (_f2.refs && _f2.refs[0] && action(_f2.refs[0], key) && !abortEarly) {
            return true;
          } else if (_f2.ref && action(_f2.ref, _f2.name) && !abortEarly) {
            return true;
          } else {
            if (iterateFieldsByAction(currentField, action)) {
              break;
            }
          }
        } else if (isObject(currentField)) {
          if (iterateFieldsByAction(currentField, action)) {
            break;
          }
        }
      }
    }
    return;
  }, "iterateFieldsByAction");
  function schemaErrorLookup(errors, _fields, name) {
    const error = get(errors, name);
    if (error || isKey(name)) {
      return {
        error,
        name
      };
    }
    const names = name.split(".");
    while (names.length) {
      const fieldName = names.join(".");
      const field = get(_fields, fieldName);
      const foundError = get(errors, fieldName);
      if (field && !Array.isArray(field) && name !== fieldName) {
        return { name };
      }
      if (foundError && foundError.type) {
        return {
          name: fieldName,
          error: foundError
        };
      }
      names.pop();
    }
    return {
      name
    };
  }
  __name(schemaErrorLookup, "schemaErrorLookup");
  var shouldRenderFormState = /* @__PURE__ */ __name((formStateData, _proxyFormState, updateFormState, isRoot) => {
    updateFormState(formStateData);
    const _a121 = formStateData, { name } = _a121, formState = __objRest(_a121, ["name"]);
    return isEmptyObject(formState) || Object.keys(formState).length >= Object.keys(_proxyFormState).length || Object.keys(formState).find((key) => _proxyFormState[key] === (!isRoot || VALIDATION_MODE.all));
  }, "shouldRenderFormState");
  var shouldSubscribeByName = /* @__PURE__ */ __name((name, signalName, exact) => !name || !signalName || name === signalName || convertToArrayPayload(name).some((currentName) => currentName && (exact ? currentName === signalName : currentName.startsWith(signalName) || signalName.startsWith(currentName))), "shouldSubscribeByName");
  var skipValidation = /* @__PURE__ */ __name((isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {
    if (mode.isOnAll) {
      return false;
    } else if (!isSubmitted && mode.isOnTouch) {
      return !(isTouched || isBlurEvent);
    } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {
      return !isBlurEvent;
    } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {
      return isBlurEvent;
    }
    return true;
  }, "skipValidation");
  var unsetEmptyArray = /* @__PURE__ */ __name((ref, name) => !compact(get(ref, name)).length && unset(ref, name), "unsetEmptyArray");
  var updateFieldArrayRootError = /* @__PURE__ */ __name((errors, error, name) => {
    const fieldArrayErrors = convertToArrayPayload(get(errors, name));
    set(fieldArrayErrors, "root", error[name]);
    set(errors, name, fieldArrayErrors);
    return errors;
  }, "updateFieldArrayRootError");
  var isMessage = /* @__PURE__ */ __name((value) => isString(value), "isMessage");
  function getValidateError(result, ref, type = "validate") {
    if (isMessage(result) || Array.isArray(result) && result.every(isMessage) || isBoolean(result) && !result) {
      return {
        type,
        message: isMessage(result) ? result : "",
        ref
      };
    }
  }
  __name(getValidateError, "getValidateError");
  var getValueAndMessage = /* @__PURE__ */ __name((validationData) => isObject(validationData) && !isRegex(validationData) ? validationData : {
    value: validationData,
    message: ""
  }, "getValueAndMessage");
  var validateField = /* @__PURE__ */ __name(async (field, disabledFieldNames, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {
    const { ref, refs, required, maxLength, minLength, min: min2, max: max2, pattern, validate, name, valueAsNumber, mount } = field._f;
    const inputValue = get(formValues, name);
    if (!mount || disabledFieldNames.has(name)) {
      return {};
    }
    const inputRef = refs ? refs[0] : ref;
    const setCustomValidity = /* @__PURE__ */ __name((message2) => {
      if (shouldUseNativeValidation && inputRef.reportValidity) {
        inputRef.setCustomValidity(isBoolean(message2) ? "" : message2 || "");
        inputRef.reportValidity();
      }
    }, "setCustomValidity");
    const error = {};
    const isRadio = isRadioInput(ref);
    const isCheckBox = isCheckBoxInput(ref);
    const isRadioOrCheckbox2 = isRadio || isCheckBox;
    const isEmpty = (valueAsNumber || isFileInput(ref)) && isUndefined(ref.value) && isUndefined(inputValue) || isHTMLElement4(ref) && ref.value === "" || inputValue === "" || Array.isArray(inputValue) && !inputValue.length;
    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);
    const getMinMaxMessage = /* @__PURE__ */ __name((exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {
      const message2 = exceedMax ? maxLengthMessage : minLengthMessage;
      error[name] = __spreadValues({
        type: exceedMax ? maxType : minType,
        message: message2,
        ref
      }, appendErrorsCurry(exceedMax ? maxType : minType, message2));
    }, "getMinMaxMessage");
    if (isFieldArray ? !Array.isArray(inputValue) || !inputValue.length : required && (!isRadioOrCheckbox2 && (isEmpty || isNullOrUndefined(inputValue)) || isBoolean(inputValue) && !inputValue || isCheckBox && !getCheckboxValue(refs).isValid || isRadio && !getRadioValue(refs).isValid)) {
      const { value, message: message2 } = isMessage(required) ? { value: !!required, message: required } : getValueAndMessage(required);
      if (value) {
        error[name] = __spreadValues({
          type: INPUT_VALIDATION_RULES.required,
          message: message2,
          ref: inputRef
        }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message2));
        if (!validateAllFieldCriteria) {
          setCustomValidity(message2);
          return error;
        }
      }
    }
    if (!isEmpty && (!isNullOrUndefined(min2) || !isNullOrUndefined(max2))) {
      let exceedMax;
      let exceedMin;
      const maxOutput = getValueAndMessage(max2);
      const minOutput = getValueAndMessage(min2);
      if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {
        const valueNumber = ref.valueAsNumber || (inputValue ? +inputValue : inputValue);
        if (!isNullOrUndefined(maxOutput.value)) {
          exceedMax = valueNumber > maxOutput.value;
        }
        if (!isNullOrUndefined(minOutput.value)) {
          exceedMin = valueNumber < minOutput.value;
        }
      } else {
        const valueDate = ref.valueAsDate || new Date(inputValue);
        const convertTimeToDate = /* @__PURE__ */ __name((time2) => /* @__PURE__ */ new Date((/* @__PURE__ */ new Date()).toDateString() + " " + time2), "convertTimeToDate");
        const isTime = ref.type == "time";
        const isWeek = ref.type == "week";
        if (isString(maxOutput.value) && inputValue) {
          exceedMax = isTime ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value) : isWeek ? inputValue > maxOutput.value : valueDate > new Date(maxOutput.value);
        }
        if (isString(minOutput.value) && inputValue) {
          exceedMin = isTime ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value) : isWeek ? inputValue < minOutput.value : valueDate < new Date(minOutput.value);
        }
      }
      if (exceedMax || exceedMin) {
        getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if ((maxLength || minLength) && !isEmpty && (isString(inputValue) || isFieldArray && Array.isArray(inputValue))) {
      const maxLengthOutput = getValueAndMessage(maxLength);
      const minLengthOutput = getValueAndMessage(minLength);
      const exceedMax = !isNullOrUndefined(maxLengthOutput.value) && inputValue.length > +maxLengthOutput.value;
      const exceedMin = !isNullOrUndefined(minLengthOutput.value) && inputValue.length < +minLengthOutput.value;
      if (exceedMax || exceedMin) {
        getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);
        if (!validateAllFieldCriteria) {
          setCustomValidity(error[name].message);
          return error;
        }
      }
    }
    if (pattern && !isEmpty && isString(inputValue)) {
      const { value: patternValue, message: message2 } = getValueAndMessage(pattern);
      if (isRegex(patternValue) && !inputValue.match(patternValue)) {
        error[name] = __spreadValues({
          type: INPUT_VALIDATION_RULES.pattern,
          message: message2,
          ref
        }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message2));
        if (!validateAllFieldCriteria) {
          setCustomValidity(message2);
          return error;
        }
      }
    }
    if (validate) {
      if (isFunction(validate)) {
        const result = await validate(inputValue, formValues);
        const validateError = getValidateError(result, inputRef);
        if (validateError) {
          error[name] = __spreadValues(__spreadValues({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));
          if (!validateAllFieldCriteria) {
            setCustomValidity(validateError.message);
            return error;
          }
        }
      } else if (isObject(validate)) {
        let validationResult = {};
        for (const key in validate) {
          if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {
            break;
          }
          const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);
          if (validateError) {
            validationResult = __spreadValues(__spreadValues({}, validateError), appendErrorsCurry(key, validateError.message));
            setCustomValidity(validateError.message);
            if (validateAllFieldCriteria) {
              error[name] = validationResult;
            }
          }
        }
        if (!isEmptyObject(validationResult)) {
          error[name] = __spreadValues({
            ref: inputRef
          }, validationResult);
          if (!validateAllFieldCriteria) {
            return error;
          }
        }
      }
    }
    setCustomValidity(true);
    return error;
  }, "validateField");
  var defaultOptions3 = {
    mode: VALIDATION_MODE.onSubmit,
    reValidateMode: VALIDATION_MODE.onChange,
    shouldFocusError: true
  };
  function createFormControl(props = {}) {
    let _options = __spreadValues(__spreadValues({}, defaultOptions3), props);
    let _formState = {
      submitCount: 0,
      isDirty: false,
      isLoading: isFunction(_options.defaultValues),
      isValidating: false,
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      touchedFields: {},
      dirtyFields: {},
      validatingFields: {},
      errors: _options.errors || {},
      disabled: _options.disabled || false
    };
    const _fields = {};
    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values) ? cloneObject(_options.values || _options.defaultValues) || {} : {};
    let _formValues = _options.shouldUnregister ? {} : cloneObject(_defaultValues);
    let _state = {
      action: false,
      mount: false,
      watch: false
    };
    let _names = {
      mount: /* @__PURE__ */ new Set(),
      disabled: /* @__PURE__ */ new Set(),
      unMount: /* @__PURE__ */ new Set(),
      array: /* @__PURE__ */ new Set(),
      watch: /* @__PURE__ */ new Set()
    };
    let delayErrorCallback;
    let timer = 0;
    const _proxyFormState = {
      isDirty: false,
      dirtyFields: false,
      validatingFields: false,
      touchedFields: false,
      isValidating: false,
      isValid: false,
      errors: false
    };
    let _proxySubscribeFormState = __spreadValues({}, _proxyFormState);
    const _subjects = {
      array: createSubject(),
      state: createSubject()
    };
    const validationModeBeforeSubmit = getValidationModes(_options.mode);
    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);
    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;
    const debounce = /* @__PURE__ */ __name((callback) => (wait) => {
      clearTimeout(timer);
      timer = setTimeout(callback, wait);
    }, "debounce");
    const _setValid = /* @__PURE__ */ __name(async (shouldUpdateValid) => {
      if (!_options.disabled && (_proxyFormState.isValid || _proxySubscribeFormState.isValid || shouldUpdateValid)) {
        const isValid3 = _options.resolver ? isEmptyObject((await _runSchema()).errors) : await executeBuiltInValidation(_fields, true);
        if (isValid3 !== _formState.isValid) {
          _subjects.state.next({
            isValid: isValid3
          });
        }
      }
    }, "_setValid");
    const _updateIsValidating = /* @__PURE__ */ __name((names, isValidating) => {
      if (!_options.disabled && (_proxyFormState.isValidating || _proxyFormState.validatingFields || _proxySubscribeFormState.isValidating || _proxySubscribeFormState.validatingFields)) {
        (names || Array.from(_names.mount)).forEach((name) => {
          if (name) {
            isValidating ? set(_formState.validatingFields, name, isValidating) : unset(_formState.validatingFields, name);
          }
        });
        _subjects.state.next({
          validatingFields: _formState.validatingFields,
          isValidating: !isEmptyObject(_formState.validatingFields)
        });
      }
    }, "_updateIsValidating");
    const _setFieldArray = /* @__PURE__ */ __name((name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {
      if (args && method && !_options.disabled) {
        _state.action = true;
        if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {
          const fieldValues = method(get(_fields, name), args.argA, args.argB);
          shouldSetValues && set(_fields, name, fieldValues);
        }
        if (shouldUpdateFieldsAndState && Array.isArray(get(_formState.errors, name))) {
          const errors = method(get(_formState.errors, name), args.argA, args.argB);
          shouldSetValues && set(_formState.errors, name, errors);
          unsetEmptyArray(_formState.errors, name);
        }
        if ((_proxyFormState.touchedFields || _proxySubscribeFormState.touchedFields) && shouldUpdateFieldsAndState && Array.isArray(get(_formState.touchedFields, name))) {
          const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);
          shouldSetValues && set(_formState.touchedFields, name, touchedFields);
        }
        if (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) {
          _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);
        }
        _subjects.state.next({
          name,
          isDirty: _getDirty(name, values),
          dirtyFields: _formState.dirtyFields,
          errors: _formState.errors,
          isValid: _formState.isValid
        });
      } else {
        set(_formValues, name, values);
      }
    }, "_setFieldArray");
    const updateErrors = /* @__PURE__ */ __name((name, error) => {
      set(_formState.errors, name, error);
      _subjects.state.next({
        errors: _formState.errors
      });
    }, "updateErrors");
    const _setErrors = /* @__PURE__ */ __name((errors) => {
      _formState.errors = errors;
      _subjects.state.next({
        errors: _formState.errors,
        isValid: false
      });
    }, "_setErrors");
    const updateValidAndValue = /* @__PURE__ */ __name((name, shouldSkipSetValueAs, value, ref) => {
      const field = get(_fields, name);
      if (field) {
        const defaultValue2 = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);
        isUndefined(defaultValue2) || ref && ref.defaultChecked || shouldSkipSetValueAs ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue2 : getFieldValue(field._f)) : setFieldValue(name, defaultValue2);
        _state.mount && _setValid();
      }
    }, "updateValidAndValue");
    const updateTouchAndDirty = /* @__PURE__ */ __name((name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {
      let shouldUpdateField = false;
      let isPreviousDirty = false;
      const output = {
        name
      };
      if (!_options.disabled) {
        if (!isBlurEvent || shouldDirty) {
          if (_proxyFormState.isDirty || _proxySubscribeFormState.isDirty) {
            isPreviousDirty = _formState.isDirty;
            _formState.isDirty = output.isDirty = _getDirty();
            shouldUpdateField = isPreviousDirty !== output.isDirty;
          }
          const isCurrentFieldPristine = deepEqual2(get(_defaultValues, name), fieldValue);
          isPreviousDirty = !!get(_formState.dirtyFields, name);
          isCurrentFieldPristine ? unset(_formState.dirtyFields, name) : set(_formState.dirtyFields, name, true);
          output.dirtyFields = _formState.dirtyFields;
          shouldUpdateField = shouldUpdateField || (_proxyFormState.dirtyFields || _proxySubscribeFormState.dirtyFields) && isPreviousDirty !== !isCurrentFieldPristine;
        }
        if (isBlurEvent) {
          const isPreviousFieldTouched = get(_formState.touchedFields, name);
          if (!isPreviousFieldTouched) {
            set(_formState.touchedFields, name, isBlurEvent);
            output.touchedFields = _formState.touchedFields;
            shouldUpdateField = shouldUpdateField || (_proxyFormState.touchedFields || _proxySubscribeFormState.touchedFields) && isPreviousFieldTouched !== isBlurEvent;
          }
        }
        shouldUpdateField && shouldRender && _subjects.state.next(output);
      }
      return shouldUpdateField ? output : {};
    }, "updateTouchAndDirty");
    const shouldRenderByError = /* @__PURE__ */ __name((name, isValid3, error, fieldState) => {
      const previousFieldError = get(_formState.errors, name);
      const shouldUpdateValid = (_proxyFormState.isValid || _proxySubscribeFormState.isValid) && isBoolean(isValid3) && _formState.isValid !== isValid3;
      if (_options.delayError && error) {
        delayErrorCallback = debounce(() => updateErrors(name, error));
        delayErrorCallback(_options.delayError);
      } else {
        clearTimeout(timer);
        delayErrorCallback = null;
        error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
      }
      if ((error ? !deepEqual2(previousFieldError, error) : previousFieldError) || !isEmptyObject(fieldState) || shouldUpdateValid) {
        const updatedFormState = __spreadProps(__spreadValues(__spreadValues({}, fieldState), shouldUpdateValid && isBoolean(isValid3) ? { isValid: isValid3 } : {}), {
          errors: _formState.errors,
          name
        });
        _formState = __spreadValues(__spreadValues({}, _formState), updatedFormState);
        _subjects.state.next(updatedFormState);
      }
    }, "shouldRenderByError");
    const _runSchema = /* @__PURE__ */ __name(async (name) => {
      _updateIsValidating(name, true);
      const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));
      _updateIsValidating(name);
      return result;
    }, "_runSchema");
    const executeSchemaAndUpdateState = /* @__PURE__ */ __name(async (names) => {
      const { errors } = await _runSchema(names);
      if (names) {
        for (const name of names) {
          const error = get(errors, name);
          error ? set(_formState.errors, name, error) : unset(_formState.errors, name);
        }
      } else {
        _formState.errors = errors;
      }
      return errors;
    }, "executeSchemaAndUpdateState");
    const executeBuiltInValidation = /* @__PURE__ */ __name(async (fields, shouldOnlyCheckValid, context = {
      valid: true
    }) => {
      for (const name in fields) {
        const field = fields[name];
        if (field) {
          const _a121 = field, { _f: _f2 } = _a121, fieldValue = __objRest(_a121, ["_f"]);
          if (_f2) {
            const isFieldArrayRoot = _names.array.has(_f2.name);
            const isPromiseFunction = field._f && hasPromiseValidation(field._f);
            if (isPromiseFunction && _proxyFormState.validatingFields) {
              _updateIsValidating([name], true);
            }
            const fieldError = await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);
            if (isPromiseFunction && _proxyFormState.validatingFields) {
              _updateIsValidating([name]);
            }
            if (fieldError[_f2.name]) {
              context.valid = false;
              if (shouldOnlyCheckValid) {
                break;
              }
            }
            !shouldOnlyCheckValid && (get(fieldError, _f2.name) ? isFieldArrayRoot ? updateFieldArrayRootError(_formState.errors, fieldError, _f2.name) : set(_formState.errors, _f2.name, fieldError[_f2.name]) : unset(_formState.errors, _f2.name));
          }
          !isEmptyObject(fieldValue) && await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context);
        }
      }
      return context.valid;
    }, "executeBuiltInValidation");
    const _removeUnmounted = /* @__PURE__ */ __name(() => {
      for (const name of _names.unMount) {
        const field = get(_fields, name);
        field && (field._f.refs ? field._f.refs.every((ref) => !live(ref)) : !live(field._f.ref)) && unregister(name);
      }
      _names.unMount = /* @__PURE__ */ new Set();
    }, "_removeUnmounted");
    const _getDirty = /* @__PURE__ */ __name((name, data) => !_options.disabled && (name && data && set(_formValues, name, data), !deepEqual2(getValues(), _defaultValues)), "_getDirty");
    const _getWatch = /* @__PURE__ */ __name((names, defaultValue2, isGlobal) => generateWatchOutput(names, _names, __spreadValues({}, _state.mount ? _formValues : isUndefined(defaultValue2) ? _defaultValues : isString(names) ? { [names]: defaultValue2 } : defaultValue2), isGlobal, defaultValue2), "_getWatch");
    const _getFieldArray = /* @__PURE__ */ __name((name) => compact(get(_state.mount ? _formValues : _defaultValues, name, _options.shouldUnregister ? get(_defaultValues, name, []) : [])), "_getFieldArray");
    const setFieldValue = /* @__PURE__ */ __name((name, value, options = {}) => {
      const field = get(_fields, name);
      let fieldValue = value;
      if (field) {
        const fieldReference = field._f;
        if (fieldReference) {
          !fieldReference.disabled && set(_formValues, name, getFieldValueAs(value, fieldReference));
          fieldValue = isHTMLElement4(fieldReference.ref) && isNullOrUndefined(value) ? "" : value;
          if (isMultipleSelect(fieldReference.ref)) {
            [...fieldReference.ref.options].forEach((optionRef) => optionRef.selected = fieldValue.includes(optionRef.value));
          } else if (fieldReference.refs) {
            if (isCheckBoxInput(fieldReference.ref)) {
              fieldReference.refs.length > 1 ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) && (checkboxRef.checked = Array.isArray(fieldValue) ? !!fieldValue.find((data) => data === checkboxRef.value) : fieldValue === checkboxRef.value)) : fieldReference.refs[0] && (fieldReference.refs[0].checked = !!fieldValue);
            } else {
              fieldReference.refs.forEach((radioRef) => radioRef.checked = radioRef.value === fieldValue);
            }
          } else if (isFileInput(fieldReference.ref)) {
            fieldReference.ref.value = "";
          } else {
            fieldReference.ref.value = fieldValue;
            if (!fieldReference.ref.type) {
              _subjects.state.next({
                name,
                values: cloneObject(_formValues)
              });
            }
          }
        }
      }
      (options.shouldDirty || options.shouldTouch) && updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);
      options.shouldValidate && trigger(name);
    }, "setFieldValue");
    const setValues = /* @__PURE__ */ __name((name, value, options) => {
      for (const fieldKey in value) {
        const fieldValue = value[fieldKey];
        const fieldName = `${name}.${fieldKey}`;
        const field = get(_fields, fieldName);
        (_names.array.has(name) || isObject(fieldValue) || field && !field._f) && !isDateObject(fieldValue) ? setValues(fieldName, fieldValue, options) : setFieldValue(fieldName, fieldValue, options);
      }
    }, "setValues");
    const setValue = /* @__PURE__ */ __name((name, value, options = {}) => {
      const field = get(_fields, name);
      const isFieldArray = _names.array.has(name);
      const cloneValue = cloneObject(value);
      set(_formValues, name, cloneValue);
      if (isFieldArray) {
        _subjects.array.next({
          name,
          values: cloneObject(_formValues)
        });
        if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields || _proxySubscribeFormState.isDirty || _proxySubscribeFormState.dirtyFields) && options.shouldDirty) {
          _subjects.state.next({
            name,
            dirtyFields: getDirtyFields(_defaultValues, _formValues),
            isDirty: _getDirty(name, cloneValue)
          });
        }
      } else {
        field && !field._f && !isNullOrUndefined(cloneValue) ? setValues(name, cloneValue, options) : setFieldValue(name, cloneValue, options);
      }
      isWatched(name, _names) && _subjects.state.next(__spreadValues({}, _formState));
      _subjects.state.next({
        name: _state.mount ? name : void 0,
        values: cloneObject(_formValues)
      });
    }, "setValue");
    const onChange = /* @__PURE__ */ __name(async (event) => {
      _state.mount = true;
      const target = event.target;
      let name = target.name;
      let isFieldValueUpdated = true;
      const field = get(_fields, name);
      const _updateIsFieldValueUpdated = /* @__PURE__ */ __name((fieldValue) => {
        isFieldValueUpdated = Number.isNaN(fieldValue) || isDateObject(fieldValue) && isNaN(fieldValue.getTime()) || deepEqual2(fieldValue, get(_formValues, name, fieldValue));
      }, "_updateIsFieldValueUpdated");
      if (field) {
        let error;
        let isValid3;
        const fieldValue = target.type ? getFieldValue(field._f) : getEventValue(event);
        const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;
        const shouldSkipValidation = !hasValidation(field._f) && !_options.resolver && !get(_formState.errors, name) && !field._f.deps || skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);
        const watched = isWatched(name, _names, isBlurEvent);
        set(_formValues, name, fieldValue);
        if (isBlurEvent) {
          field._f.onBlur && field._f.onBlur(event);
          delayErrorCallback && delayErrorCallback(0);
        } else if (field._f.onChange) {
          field._f.onChange(event);
        }
        const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent);
        const shouldRender = !isEmptyObject(fieldState) || watched;
        !isBlurEvent && _subjects.state.next({
          name,
          type: event.type,
          values: cloneObject(_formValues)
        });
        if (shouldSkipValidation) {
          if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {
            if (_options.mode === "onBlur") {
              if (isBlurEvent) {
                _setValid();
              }
            } else if (!isBlurEvent) {
              _setValid();
            }
          }
          return shouldRender && _subjects.state.next(__spreadValues({ name }, watched ? {} : fieldState));
        }
        !isBlurEvent && watched && _subjects.state.next(__spreadValues({}, _formState));
        if (_options.resolver) {
          const { errors } = await _runSchema([name]);
          _updateIsFieldValueUpdated(fieldValue);
          if (isFieldValueUpdated) {
            const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);
            const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);
            error = errorLookupResult.error;
            name = errorLookupResult.name;
            isValid3 = isEmptyObject(errors);
          }
        } else {
          _updateIsValidating([name], true);
          error = (await validateField(field, _names.disabled, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];
          _updateIsValidating([name]);
          _updateIsFieldValueUpdated(fieldValue);
          if (isFieldValueUpdated) {
            if (error) {
              isValid3 = false;
            } else if (_proxyFormState.isValid || _proxySubscribeFormState.isValid) {
              isValid3 = await executeBuiltInValidation(_fields, true);
            }
          }
        }
        if (isFieldValueUpdated) {
          field._f.deps && trigger(field._f.deps);
          shouldRenderByError(name, isValid3, error, fieldState);
        }
      }
    }, "onChange");
    const _focusInput = /* @__PURE__ */ __name((ref, key) => {
      if (get(_formState.errors, key) && ref.focus) {
        ref.focus();
        return 1;
      }
      return;
    }, "_focusInput");
    const trigger = /* @__PURE__ */ __name(async (name, options = {}) => {
      let isValid3;
      let validationResult;
      const fieldNames = convertToArrayPayload(name);
      if (_options.resolver) {
        const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);
        isValid3 = isEmptyObject(errors);
        validationResult = name ? !fieldNames.some((name2) => get(errors, name2)) : isValid3;
      } else if (name) {
        validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {
          const field = get(_fields, fieldName);
          return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);
        }))).every(Boolean);
        !(!validationResult && !_formState.isValid) && _setValid();
      } else {
        validationResult = isValid3 = await executeBuiltInValidation(_fields);
      }
      _subjects.state.next(__spreadProps(__spreadValues(__spreadValues({}, !isString(name) || (_proxyFormState.isValid || _proxySubscribeFormState.isValid) && isValid3 !== _formState.isValid ? {} : { name }), _options.resolver || !name ? { isValid: isValid3 } : {}), {
        errors: _formState.errors
      }));
      options.shouldFocus && !validationResult && iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);
      return validationResult;
    }, "trigger");
    const getValues = /* @__PURE__ */ __name((fieldNames) => {
      const values = __spreadValues({}, _state.mount ? _formValues : _defaultValues);
      return isUndefined(fieldNames) ? values : isString(fieldNames) ? get(values, fieldNames) : fieldNames.map((name) => get(values, name));
    }, "getValues");
    const getFieldState = /* @__PURE__ */ __name((name, formState) => ({
      invalid: !!get((formState || _formState).errors, name),
      isDirty: !!get((formState || _formState).dirtyFields, name),
      error: get((formState || _formState).errors, name),
      isValidating: !!get(_formState.validatingFields, name),
      isTouched: !!get((formState || _formState).touchedFields, name)
    }), "getFieldState");
    const clearErrors = /* @__PURE__ */ __name((name) => {
      name && convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));
      _subjects.state.next({
        errors: name ? _formState.errors : {}
      });
    }, "clearErrors");
    const setError = /* @__PURE__ */ __name((name, error, options) => {
      const ref = (get(_fields, name, { _f: {} })._f || {}).ref;
      const currentError = get(_formState.errors, name) || {};
      const _a121 = currentError, { ref: currentRef, message: message2, type } = _a121, restOfErrorTree = __objRest(_a121, ["ref", "message", "type"]);
      set(_formState.errors, name, __spreadProps(__spreadValues(__spreadValues({}, restOfErrorTree), error), {
        ref
      }));
      _subjects.state.next({
        name,
        errors: _formState.errors,
        isValid: false
      });
      options && options.shouldFocus && ref && ref.focus && ref.focus();
    }, "setError");
    const watch = /* @__PURE__ */ __name((name, defaultValue2) => isFunction(name) ? _subjects.state.subscribe({
      next: /* @__PURE__ */ __name((payload) => name(_getWatch(void 0, defaultValue2), payload), "next")
    }) : _getWatch(name, defaultValue2, true), "watch");
    const _subscribe = /* @__PURE__ */ __name((props2) => _subjects.state.subscribe({
      next: /* @__PURE__ */ __name((formState) => {
        if (shouldSubscribeByName(props2.name, formState.name, props2.exact) && shouldRenderFormState(formState, props2.formState || _proxyFormState, _setFormState, props2.reRenderRoot)) {
          props2.callback(__spreadValues(__spreadValues({
            values: __spreadValues({}, _formValues)
          }, _formState), formState));
        }
      }, "next")
    }).unsubscribe, "_subscribe");
    const subscribe = /* @__PURE__ */ __name((props2) => {
      _state.mount = true;
      _proxySubscribeFormState = __spreadValues(__spreadValues({}, _proxySubscribeFormState), props2.formState);
      return _subscribe(__spreadProps(__spreadValues({}, props2), {
        formState: _proxySubscribeFormState
      }));
    }, "subscribe");
    const unregister = /* @__PURE__ */ __name((name, options = {}) => {
      for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {
        _names.mount.delete(fieldName);
        _names.array.delete(fieldName);
        if (!options.keepValue) {
          unset(_fields, fieldName);
          unset(_formValues, fieldName);
        }
        !options.keepError && unset(_formState.errors, fieldName);
        !options.keepDirty && unset(_formState.dirtyFields, fieldName);
        !options.keepTouched && unset(_formState.touchedFields, fieldName);
        !options.keepIsValidating && unset(_formState.validatingFields, fieldName);
        !_options.shouldUnregister && !options.keepDefaultValue && unset(_defaultValues, fieldName);
      }
      _subjects.state.next({
        values: cloneObject(_formValues)
      });
      _subjects.state.next(__spreadValues(__spreadValues({}, _formState), !options.keepDirty ? {} : { isDirty: _getDirty() }));
      !options.keepIsValid && _setValid();
    }, "unregister");
    const _setDisabledField = /* @__PURE__ */ __name(({ disabled, name }) => {
      if (isBoolean(disabled) && _state.mount || !!disabled || _names.disabled.has(name)) {
        disabled ? _names.disabled.add(name) : _names.disabled.delete(name);
      }
    }, "_setDisabledField");
    const register = /* @__PURE__ */ __name((name, options = {}) => {
      let field = get(_fields, name);
      const disabledIsDefined = isBoolean(options.disabled) || isBoolean(_options.disabled);
      set(_fields, name, __spreadProps(__spreadValues({}, field || {}), {
        _f: __spreadValues(__spreadProps(__spreadValues({}, field && field._f ? field._f : { ref: { name } }), {
          name,
          mount: true
        }), options)
      }));
      _names.mount.add(name);
      if (field) {
        _setDisabledField({
          disabled: isBoolean(options.disabled) ? options.disabled : _options.disabled,
          name
        });
      } else {
        updateValidAndValue(name, true, options.value);
      }
      return __spreadProps(__spreadValues(__spreadValues({}, disabledIsDefined ? { disabled: options.disabled || _options.disabled } : {}), _options.progressive ? {
        required: !!options.required,
        min: getRuleValue(options.min),
        max: getRuleValue(options.max),
        minLength: getRuleValue(options.minLength),
        maxLength: getRuleValue(options.maxLength),
        pattern: getRuleValue(options.pattern)
      } : {}), {
        name,
        onChange,
        onBlur: onChange,
        ref: /* @__PURE__ */ __name((ref) => {
          if (ref) {
            register(name, options);
            field = get(_fields, name);
            const fieldRef = isUndefined(ref.value) ? ref.querySelectorAll ? ref.querySelectorAll("input,select,textarea")[0] || ref : ref : ref;
            const radioOrCheckbox = isRadioOrCheckbox(fieldRef);
            const refs = field._f.refs || [];
            if (radioOrCheckbox ? refs.find((option) => option === fieldRef) : fieldRef === field._f.ref) {
              return;
            }
            set(_fields, name, {
              _f: __spreadValues(__spreadValues({}, field._f), radioOrCheckbox ? {
                refs: [
                  ...refs.filter(live),
                  fieldRef,
                  ...Array.isArray(get(_defaultValues, name)) ? [{}] : []
                ],
                ref: { type: fieldRef.type, name }
              } : { ref: fieldRef })
            });
            updateValidAndValue(name, false, void 0, fieldRef);
          } else {
            field = get(_fields, name, {});
            if (field._f) {
              field._f.mount = false;
            }
            (_options.shouldUnregister || options.shouldUnregister) && !(isNameInFieldArray(_names.array, name) && _state.action) && _names.unMount.add(name);
          }
        }, "ref")
      });
    }, "register");
    const _focusError = /* @__PURE__ */ __name(() => _options.shouldFocusError && iterateFieldsByAction(_fields, _focusInput, _names.mount), "_focusError");
    const _disableForm = /* @__PURE__ */ __name((disabled) => {
      if (isBoolean(disabled)) {
        _subjects.state.next({ disabled });
        iterateFieldsByAction(_fields, (ref, name) => {
          const currentField = get(_fields, name);
          if (currentField) {
            ref.disabled = currentField._f.disabled || disabled;
            if (Array.isArray(currentField._f.refs)) {
              currentField._f.refs.forEach((inputRef) => {
                inputRef.disabled = currentField._f.disabled || disabled;
              });
            }
          }
        }, 0, false);
      }
    }, "_disableForm");
    const handleSubmit = /* @__PURE__ */ __name((onValid, onInvalid) => async (e) => {
      let onValidError = void 0;
      if (e) {
        e.preventDefault && e.preventDefault();
        e.persist && e.persist();
      }
      let fieldValues = cloneObject(_formValues);
      _subjects.state.next({
        isSubmitting: true
      });
      if (_options.resolver) {
        const { errors, values } = await _runSchema();
        _formState.errors = errors;
        fieldValues = values;
      } else {
        await executeBuiltInValidation(_fields);
      }
      if (_names.disabled.size) {
        for (const name of _names.disabled) {
          set(fieldValues, name, void 0);
        }
      }
      unset(_formState.errors, "root");
      if (isEmptyObject(_formState.errors)) {
        _subjects.state.next({
          errors: {}
        });
        try {
          await onValid(fieldValues, e);
        } catch (error) {
          onValidError = error;
        }
      } else {
        if (onInvalid) {
          await onInvalid(__spreadValues({}, _formState.errors), e);
        }
        _focusError();
        setTimeout(_focusError);
      }
      _subjects.state.next({
        isSubmitted: true,
        isSubmitting: false,
        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,
        submitCount: _formState.submitCount + 1,
        errors: _formState.errors
      });
      if (onValidError) {
        throw onValidError;
      }
    }, "handleSubmit");
    const resetField = /* @__PURE__ */ __name((name, options = {}) => {
      if (get(_fields, name)) {
        if (isUndefined(options.defaultValue)) {
          setValue(name, cloneObject(get(_defaultValues, name)));
        } else {
          setValue(name, options.defaultValue);
          set(_defaultValues, name, cloneObject(options.defaultValue));
        }
        if (!options.keepTouched) {
          unset(_formState.touchedFields, name);
        }
        if (!options.keepDirty) {
          unset(_formState.dirtyFields, name);
          _formState.isDirty = options.defaultValue ? _getDirty(name, cloneObject(get(_defaultValues, name))) : _getDirty();
        }
        if (!options.keepError) {
          unset(_formState.errors, name);
          _proxyFormState.isValid && _setValid();
        }
        _subjects.state.next(__spreadValues({}, _formState));
      }
    }, "resetField");
    const _reset = /* @__PURE__ */ __name((formValues, keepStateOptions = {}) => {
      const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;
      const cloneUpdatedValues = cloneObject(updatedValues);
      const isEmptyResetValues = isEmptyObject(formValues);
      const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;
      if (!keepStateOptions.keepDefaultValues) {
        _defaultValues = updatedValues;
      }
      if (!keepStateOptions.keepValues) {
        if (keepStateOptions.keepDirtyValues) {
          const fieldsToCheck = /* @__PURE__ */ new Set([
            ..._names.mount,
            ...Object.keys(getDirtyFields(_defaultValues, _formValues))
          ]);
          for (const fieldName of Array.from(fieldsToCheck)) {
            get(_formState.dirtyFields, fieldName) ? set(values, fieldName, get(_formValues, fieldName)) : setValue(fieldName, get(values, fieldName));
          }
        } else {
          if (isWeb && isUndefined(formValues)) {
            for (const name of _names.mount) {
              const field = get(_fields, name);
              if (field && field._f) {
                const fieldReference = Array.isArray(field._f.refs) ? field._f.refs[0] : field._f.ref;
                if (isHTMLElement4(fieldReference)) {
                  const form = fieldReference.closest("form");
                  if (form) {
                    form.reset();
                    break;
                  }
                }
              }
            }
          }
          for (const fieldName of _names.mount) {
            setValue(fieldName, get(values, fieldName));
          }
        }
        _formValues = cloneObject(values);
        _subjects.array.next({
          values: __spreadValues({}, values)
        });
        _subjects.state.next({
          values: __spreadValues({}, values)
        });
      }
      _names = {
        mount: keepStateOptions.keepDirtyValues ? _names.mount : /* @__PURE__ */ new Set(),
        unMount: /* @__PURE__ */ new Set(),
        array: /* @__PURE__ */ new Set(),
        disabled: /* @__PURE__ */ new Set(),
        watch: /* @__PURE__ */ new Set(),
        watchAll: false,
        focus: ""
      };
      _state.mount = !_proxyFormState.isValid || !!keepStateOptions.keepIsValid || !!keepStateOptions.keepDirtyValues;
      _state.watch = !!_options.shouldUnregister;
      _subjects.state.next({
        submitCount: keepStateOptions.keepSubmitCount ? _formState.submitCount : 0,
        isDirty: isEmptyResetValues ? false : keepStateOptions.keepDirty ? _formState.isDirty : !!(keepStateOptions.keepDefaultValues && !deepEqual2(formValues, _defaultValues)),
        isSubmitted: keepStateOptions.keepIsSubmitted ? _formState.isSubmitted : false,
        dirtyFields: isEmptyResetValues ? {} : keepStateOptions.keepDirtyValues ? keepStateOptions.keepDefaultValues && _formValues ? getDirtyFields(_defaultValues, _formValues) : _formState.dirtyFields : keepStateOptions.keepDefaultValues && formValues ? getDirtyFields(_defaultValues, formValues) : keepStateOptions.keepDirty ? _formState.dirtyFields : {},
        touchedFields: keepStateOptions.keepTouched ? _formState.touchedFields : {},
        errors: keepStateOptions.keepErrors ? _formState.errors : {},
        isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful ? _formState.isSubmitSuccessful : false,
        isSubmitting: false
      });
    }, "_reset");
    const reset = /* @__PURE__ */ __name((formValues, keepStateOptions) => _reset(isFunction(formValues) ? formValues(_formValues) : formValues, keepStateOptions), "reset");
    const setFocus = /* @__PURE__ */ __name((name, options = {}) => {
      const field = get(_fields, name);
      const fieldReference = field && field._f;
      if (fieldReference) {
        const fieldRef = fieldReference.refs ? fieldReference.refs[0] : fieldReference.ref;
        if (fieldRef.focus) {
          fieldRef.focus();
          options.shouldSelect && isFunction(fieldRef.select) && fieldRef.select();
        }
      }
    }, "setFocus");
    const _setFormState = /* @__PURE__ */ __name((updatedFormState) => {
      _formState = __spreadValues(__spreadValues({}, _formState), updatedFormState);
    }, "_setFormState");
    const _resetDefaultValues = /* @__PURE__ */ __name(() => isFunction(_options.defaultValues) && _options.defaultValues().then((values) => {
      reset(values, _options.resetOptions);
      _subjects.state.next({
        isLoading: false
      });
    }), "_resetDefaultValues");
    const methods = {
      control: {
        register,
        unregister,
        getFieldState,
        handleSubmit,
        setError,
        _subscribe,
        _runSchema,
        _getWatch,
        _getDirty,
        _setValid,
        _setFieldArray,
        _setDisabledField,
        _setErrors,
        _getFieldArray,
        _reset,
        _resetDefaultValues,
        _removeUnmounted,
        _disableForm,
        _subjects,
        _proxyFormState,
        get _fields() {
          return _fields;
        },
        get _formValues() {
          return _formValues;
        },
        get _state() {
          return _state;
        },
        set _state(value) {
          _state = value;
        },
        get _defaultValues() {
          return _defaultValues;
        },
        get _names() {
          return _names;
        },
        set _names(value) {
          _names = value;
        },
        get _formState() {
          return _formState;
        },
        get _options() {
          return _options;
        },
        set _options(value) {
          _options = __spreadValues(__spreadValues({}, _options), value);
        }
      },
      subscribe,
      trigger,
      register,
      handleSubmit,
      watch,
      setValue,
      getValues,
      reset,
      resetField,
      clearErrors,
      unregister,
      setError,
      setFocus,
      getFieldState
    };
    return __spreadProps(__spreadValues({}, methods), {
      formControl: methods
    });
  }
  __name(createFormControl, "createFormControl");
  function useForm(props = {}) {
    const _formControl = import_react15.default.useRef(void 0);
    const _values = import_react15.default.useRef(void 0);
    const [formState, updateFormState] = import_react15.default.useState({
      isDirty: false,
      isValidating: false,
      isLoading: isFunction(props.defaultValues),
      isSubmitted: false,
      isSubmitting: false,
      isSubmitSuccessful: false,
      isValid: false,
      submitCount: 0,
      dirtyFields: {},
      touchedFields: {},
      validatingFields: {},
      errors: props.errors || {},
      disabled: props.disabled || false,
      defaultValues: isFunction(props.defaultValues) ? void 0 : props.defaultValues
    });
    if (!_formControl.current) {
      _formControl.current = __spreadProps(__spreadValues({}, props.formControl ? props.formControl : createFormControl(props)), {
        formState
      });
      if (props.formControl && props.defaultValues && !isFunction(props.defaultValues)) {
        props.formControl.reset(props.defaultValues, props.resetOptions);
      }
    }
    const control = _formControl.current.control;
    control._options = props;
    import_react15.default.useLayoutEffect(() => control._subscribe({
      formState: control._proxyFormState,
      callback: /* @__PURE__ */ __name(() => updateFormState(__spreadValues({}, control._formState)), "callback"),
      reRenderRoot: true
    }), [control]);
    import_react15.default.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);
    import_react15.default.useEffect(() => {
      if (control._proxyFormState.isDirty) {
        const isDirty2 = control._getDirty();
        if (isDirty2 !== formState.isDirty) {
          control._subjects.state.next({
            isDirty: isDirty2
          });
        }
      }
    }, [control, formState.isDirty]);
    import_react15.default.useEffect(() => {
      if (props.values && !deepEqual2(props.values, _values.current)) {
        control._reset(props.values, control._options.resetOptions);
        _values.current = props.values;
        updateFormState((state) => __spreadValues({}, state));
      } else {
        control._resetDefaultValues();
      }
    }, [props.values, control]);
    import_react15.default.useEffect(() => {
      if (props.errors && !isEmptyObject(props.errors)) {
        control._setErrors(props.errors);
      }
    }, [props.errors, control]);
    import_react15.default.useEffect(() => {
      if (!control._state.mount) {
        control._setValid();
        control._state.mount = true;
      }
      if (control._state.watch) {
        control._state.watch = false;
        control._subjects.state.next(__spreadValues({}, control._formState));
      }
      control._removeUnmounted();
    });
    import_react15.default.useEffect(() => {
      props.shouldUnregister && control._subjects.state.next({
        values: control._getWatch()
      });
    }, [props.shouldUnregister, control]);
    _formControl.current.formState = getProxyFormState(formState, control);
    return _formControl.current;
  }
  __name(useForm, "useForm");

  // node_modules/@hookform/resolvers/dist/resolvers.mjs
  var s = /* @__PURE__ */ __name((e, s2, o2) => {
    if (e && "reportValidity" in e) {
      const r3 = get(o2, s2);
      e.setCustomValidity(r3 && r3.message || ""), e.reportValidity();
    }
  }, "s");
  var o = /* @__PURE__ */ __name((t3, e) => {
    for (const o2 in e.fields) {
      const r3 = e.fields[o2];
      r3 && r3.ref && "reportValidity" in r3.ref ? s(r3.ref, o2, t3) : r3.refs && r3.refs.forEach((e2) => s(e2, o2, t3));
    }
  }, "o");
  var r2 = /* @__PURE__ */ __name((s2, r3) => {
    r3.shouldUseNativeValidation && o(s2, r3);
    const f = {};
    for (const o2 in s2) {
      const n2 = get(r3.fields, o2), a = Object.assign(s2[o2] || {}, { ref: n2 && n2.ref });
      if (i(r3.names || Object.keys(s2), o2)) {
        const s3 = Object.assign({}, get(f, o2));
        set(s3, "root", a), set(f, o2, s3);
      } else set(f, o2, a);
    }
    return f;
  }, "r");
  var i = /* @__PURE__ */ __name((t3, e) => t3.some((t4) => t4.startsWith(e + ".")), "i");

  // node_modules/@hookform/resolvers/zod/dist/zod.mjs
  var n = /* @__PURE__ */ __name(function(r3, e) {
    for (var n2 = {}; r3.length; ) {
      var t3 = r3[0], s2 = t3.code, i2 = t3.message, a = t3.path.join(".");
      if (!n2[a]) if ("unionErrors" in t3) {
        var u2 = t3.unionErrors[0].errors[0];
        n2[a] = { message: u2.message, type: u2.code };
      } else n2[a] = { message: i2, type: s2 };
      if ("unionErrors" in t3 && t3.unionErrors.forEach(function(e2) {
        return e2.errors.forEach(function(e3) {
          return r3.push(e3);
        });
      }), e) {
        var c = n2[a].types, f = c && c[t3.code];
        n2[a] = appendErrors(a, e, n2, s2, f ? [].concat(f, t3.message) : t3.message);
      }
      r3.shift();
    }
    return n2;
  }, "n");
  var t2 = /* @__PURE__ */ __name(function(o2, t3, s2) {
    return void 0 === s2 && (s2 = {}), function(i2, a, u2) {
      try {
        return Promise.resolve(function(e, n2) {
          try {
            var a2 = Promise.resolve(o2["sync" === s2.mode ? "parse" : "parseAsync"](i2, t3)).then(function(e2) {
              return u2.shouldUseNativeValidation && o({}, u2), { errors: {}, values: s2.raw ? i2 : e2 };
            });
          } catch (r3) {
            return n2(r3);
          }
          return a2 && a2.then ? a2.then(void 0, n2) : a2;
        }(0, function(r3) {
          if (function(r4) {
            return Array.isArray(null == r4 ? void 0 : r4.errors);
          }(r3)) return { values: {}, errors: r2(n(r3.errors, !u2.shouldUseNativeValidation && "all" === u2.criteriaMode), u2) };
          throw r3;
        }));
      } catch (r3) {
        return Promise.reject(r3);
      }
    };
  }, "t");

  // client/src/components/ui/form.tsx
  var React64 = __toESM(require_react(), 1);
  var Form = FormProvider;
  var FormFieldContext = React64.createContext(
    {}
  );
  var FormField = /* @__PURE__ */ __name((_a121) => {
    var props = __objRest(_a121, []);
    return /* @__PURE__ */ React64.createElement(FormFieldContext.Provider, { value: { name: props.name } }, /* @__PURE__ */ React64.createElement(Controller, __spreadValues({}, props)));
  }, "FormField");
  var useFormField = /* @__PURE__ */ __name(() => {
    const fieldContext = React64.useContext(FormFieldContext);
    const itemContext = React64.useContext(FormItemContext);
    const { getFieldState, formState } = useFormContext();
    const fieldState = getFieldState(fieldContext.name, formState);
    if (!fieldContext) {
      throw new Error("useFormField should be used within <FormField>");
    }
    const { id } = itemContext;
    return __spreadValues({
      id,
      name: fieldContext.name,
      formItemId: `${id}-form-item`,
      formDescriptionId: `${id}-form-item-description`,
      formMessageId: `${id}-form-item-message`
    }, fieldState);
  }, "useFormField");
  var FormItemContext = React64.createContext(
    {}
  );
  var FormItem = React64.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    const id = React64.useId();
    return /* @__PURE__ */ React64.createElement(FormItemContext.Provider, { value: { id } }, /* @__PURE__ */ React64.createElement("div", __spreadValues({ ref, className: cn("space-y-2", className) }, props)));
  });
  FormItem.displayName = "FormItem";
  var FormLabel = React64.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    const { error, formItemId } = useFormField();
    return /* @__PURE__ */ React64.createElement(
      Label2,
      __spreadValues({
        ref,
        className: cn(error && "text-destructive", className),
        htmlFor: formItemId
      }, props)
    );
  });
  FormLabel.displayName = "FormLabel";
  var FormControl = React64.forwardRef((_a121, ref) => {
    var props = __objRest(_a121, []);
    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();
    return /* @__PURE__ */ React64.createElement(
      Slot,
      __spreadValues({
        ref,
        id: formItemId,
        "aria-describedby": !error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`,
        "aria-invalid": !!error
      }, props)
    );
  });
  FormControl.displayName = "FormControl";
  var FormDescription = React64.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    const { formDescriptionId } = useFormField();
    return /* @__PURE__ */ React64.createElement(
      "p",
      __spreadValues({
        ref,
        id: formDescriptionId,
        className: cn("text-sm text-muted-foreground", className)
      }, props)
    );
  });
  FormDescription.displayName = "FormDescription";
  var FormMessage = React64.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, children } = _b93, props = __objRest(_b93, ["className", "children"]);
    var _a122;
    const { error, formMessageId } = useFormField();
    const body = error ? String((_a122 = error == null ? void 0 : error.message) != null ? _a122 : "") : children;
    if (!body) {
      return null;
    }
    return /* @__PURE__ */ React64.createElement(
      "p",
      __spreadValues({
        ref,
        id: formMessageId,
        className: cn("text-sm font-medium text-destructive", className)
      }, props),
      body
    );
  });
  FormMessage.displayName = "FormMessage";

  // node_modules/drizzle-orm/entity.js
  var entityKind = Symbol.for("drizzle:entityKind");
  var hasOwnEntityKind = Symbol.for("drizzle:hasOwnEntityKind");
  function is(value, type) {
    var _a121;
    if (!value || typeof value !== "object") {
      return false;
    }
    if (value instanceof type) {
      return true;
    }
    if (!Object.prototype.hasOwnProperty.call(type, entityKind)) {
      throw new Error(
        `Class "${(_a121 = type.name) != null ? _a121 : "<unknown>"}" doesn't look like a Drizzle entity. If this is incorrect and the class is provided by Drizzle, please report this as a bug.`
      );
    }
    let cls = Object.getPrototypeOf(value).constructor;
    if (cls) {
      while (cls) {
        if (entityKind in cls && cls[entityKind] === type[entityKind]) {
          return true;
        }
        cls = Object.getPrototypeOf(cls);
      }
    }
    return false;
  }
  __name(is, "is");

  // node_modules/drizzle-orm/column.js
  var _a12;
  _a12 = entityKind;
  var _Column = class _Column {
    constructor(table, config) {
      __publicField(this, "name");
      __publicField(this, "keyAsName");
      __publicField(this, "primary");
      __publicField(this, "notNull");
      __publicField(this, "default");
      __publicField(this, "defaultFn");
      __publicField(this, "onUpdateFn");
      __publicField(this, "hasDefault");
      __publicField(this, "isUnique");
      __publicField(this, "uniqueName");
      __publicField(this, "uniqueType");
      __publicField(this, "dataType");
      __publicField(this, "columnType");
      __publicField(this, "enumValues");
      __publicField(this, "generated");
      __publicField(this, "generatedIdentity");
      __publicField(this, "config");
      this.table = table;
      this.config = config;
      this.name = config.name;
      this.keyAsName = config.keyAsName;
      this.notNull = config.notNull;
      this.default = config.default;
      this.defaultFn = config.defaultFn;
      this.onUpdateFn = config.onUpdateFn;
      this.hasDefault = config.hasDefault;
      this.primary = config.primaryKey;
      this.isUnique = config.isUnique;
      this.uniqueName = config.uniqueName;
      this.uniqueType = config.uniqueType;
      this.dataType = config.dataType;
      this.columnType = config.columnType;
      this.generated = config.generated;
      this.generatedIdentity = config.generatedIdentity;
    }
    mapFromDriverValue(value) {
      return value;
    }
    mapToDriverValue(value) {
      return value;
    }
    // ** @internal */
    shouldDisableInsert() {
      return this.config.generated !== void 0 && this.config.generated.type !== "byDefault";
    }
  };
  __name(_Column, "Column");
  __publicField(_Column, _a12, "Column");
  var Column = _Column;

  // node_modules/drizzle-orm/column-builder.js
  var _a13;
  _a13 = entityKind;
  var _ColumnBuilder = class _ColumnBuilder {
    constructor(name, dataType, columnType) {
      __publicField(this, "config");
      /**
       * Alias for {@link $defaultFn}.
       */
      __publicField(this, "$default", this.$defaultFn);
      /**
       * Alias for {@link $onUpdateFn}.
       */
      __publicField(this, "$onUpdate", this.$onUpdateFn);
      this.config = {
        name,
        keyAsName: name === "",
        notNull: false,
        default: void 0,
        hasDefault: false,
        primaryKey: false,
        isUnique: false,
        uniqueName: void 0,
        uniqueType: void 0,
        dataType,
        columnType,
        generated: void 0
      };
    }
    /**
     * Changes the data type of the column. Commonly used with `json` columns. Also, useful for branded types.
     *
     * @example
     * ```ts
     * const users = pgTable('users', {
     * 	id: integer('id').$type<UserId>().primaryKey(),
     * 	details: json('details').$type<UserDetails>().notNull(),
     * });
     * ```
     */
    $type() {
      return this;
    }
    /**
     * Adds a `not null` clause to the column definition.
     *
     * Affects the `select` model of the table - columns *without* `not null` will be nullable on select.
     */
    notNull() {
      this.config.notNull = true;
      return this;
    }
    /**
     * Adds a `default <value>` clause to the column definition.
     *
     * Affects the `insert` model of the table - columns *with* `default` are optional on insert.
     *
     * If you need to set a dynamic default value, use {@link $defaultFn} instead.
     */
    default(value) {
      this.config.default = value;
      this.config.hasDefault = true;
      return this;
    }
    /**
     * Adds a dynamic default value to the column.
     * The function will be called when the row is inserted, and the returned value will be used as the column value.
     *
     * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.
     */
    $defaultFn(fn) {
      this.config.defaultFn = fn;
      this.config.hasDefault = true;
      return this;
    }
    /**
     * Adds a dynamic update value to the column.
     * The function will be called when the row is updated, and the returned value will be used as the column value if none is provided.
     * If no `default` (or `$defaultFn`) value is provided, the function will be called when the row is inserted as well, and the returned value will be used as the column value.
     *
     * **Note:** This value does not affect the `drizzle-kit` behavior, it is only used at runtime in `drizzle-orm`.
     */
    $onUpdateFn(fn) {
      this.config.onUpdateFn = fn;
      this.config.hasDefault = true;
      return this;
    }
    /**
     * Adds a `primary key` clause to the column definition. This implicitly makes the column `not null`.
     *
     * In SQLite, `integer primary key` implicitly makes the column auto-incrementing.
     */
    primaryKey() {
      this.config.primaryKey = true;
      this.config.notNull = true;
      return this;
    }
    /** @internal Sets the name of the column to the key within the table definition if a name was not given. */
    setName(name) {
      if (this.config.name !== "")
        return;
      this.config.name = name;
    }
  };
  __name(_ColumnBuilder, "ColumnBuilder");
  __publicField(_ColumnBuilder, _a13, "ColumnBuilder");
  var ColumnBuilder = _ColumnBuilder;

  // node_modules/drizzle-orm/table.utils.js
  var TableName = Symbol.for("drizzle:Name");

  // node_modules/drizzle-orm/pg-core/foreign-keys.js
  var _a14;
  _a14 = entityKind;
  var _ForeignKeyBuilder = class _ForeignKeyBuilder {
    constructor(config, actions) {
      /** @internal */
      __publicField(this, "reference");
      /** @internal */
      __publicField(this, "_onUpdate", "no action");
      /** @internal */
      __publicField(this, "_onDelete", "no action");
      this.reference = () => {
        const { name, columns, foreignColumns } = config();
        return { name, columns, foreignTable: foreignColumns[0].table, foreignColumns };
      };
      if (actions) {
        this._onUpdate = actions.onUpdate;
        this._onDelete = actions.onDelete;
      }
    }
    onUpdate(action) {
      this._onUpdate = action === void 0 ? "no action" : action;
      return this;
    }
    onDelete(action) {
      this._onDelete = action === void 0 ? "no action" : action;
      return this;
    }
    /** @internal */
    build(table) {
      return new ForeignKey(table, this);
    }
  };
  __name(_ForeignKeyBuilder, "ForeignKeyBuilder");
  __publicField(_ForeignKeyBuilder, _a14, "PgForeignKeyBuilder");
  var ForeignKeyBuilder = _ForeignKeyBuilder;
  var _a15;
  _a15 = entityKind;
  var _ForeignKey = class _ForeignKey {
    constructor(table, builder) {
      __publicField(this, "reference");
      __publicField(this, "onUpdate");
      __publicField(this, "onDelete");
      this.table = table;
      this.reference = builder.reference;
      this.onUpdate = builder._onUpdate;
      this.onDelete = builder._onDelete;
    }
    getName() {
      const { name, columns, foreignColumns } = this.reference();
      const columnNames = columns.map((column) => column.name);
      const foreignColumnNames = foreignColumns.map((column) => column.name);
      const chunks = [
        this.table[TableName],
        ...columnNames,
        foreignColumns[0].table[TableName],
        ...foreignColumnNames
      ];
      return name != null ? name : `${chunks.join("_")}_fk`;
    }
  };
  __name(_ForeignKey, "ForeignKey");
  __publicField(_ForeignKey, _a15, "PgForeignKey");
  var ForeignKey = _ForeignKey;

  // node_modules/drizzle-orm/tracing-utils.js
  function iife(fn, ...args) {
    return fn(...args);
  }
  __name(iife, "iife");

  // node_modules/drizzle-orm/pg-core/unique-constraint.js
  function uniqueKeyName(table, columns) {
    return `${table[TableName]}_${columns.join("_")}_unique`;
  }
  __name(uniqueKeyName, "uniqueKeyName");
  var _a16;
  _a16 = entityKind;
  var _UniqueConstraintBuilder = class _UniqueConstraintBuilder {
    constructor(columns, name) {
      /** @internal */
      __publicField(this, "columns");
      /** @internal */
      __publicField(this, "nullsNotDistinctConfig", false);
      this.name = name;
      this.columns = columns;
    }
    nullsNotDistinct() {
      this.nullsNotDistinctConfig = true;
      return this;
    }
    /** @internal */
    build(table) {
      return new UniqueConstraint(table, this.columns, this.nullsNotDistinctConfig, this.name);
    }
  };
  __name(_UniqueConstraintBuilder, "UniqueConstraintBuilder");
  __publicField(_UniqueConstraintBuilder, _a16, "PgUniqueConstraintBuilder");
  var UniqueConstraintBuilder = _UniqueConstraintBuilder;
  var _a17;
  _a17 = entityKind;
  var _UniqueOnConstraintBuilder = class _UniqueOnConstraintBuilder {
    constructor(name) {
      /** @internal */
      __publicField(this, "name");
      this.name = name;
    }
    on(...columns) {
      return new UniqueConstraintBuilder(columns, this.name);
    }
  };
  __name(_UniqueOnConstraintBuilder, "UniqueOnConstraintBuilder");
  __publicField(_UniqueOnConstraintBuilder, _a17, "PgUniqueOnConstraintBuilder");
  var UniqueOnConstraintBuilder = _UniqueOnConstraintBuilder;
  var _a18;
  _a18 = entityKind;
  var _UniqueConstraint = class _UniqueConstraint {
    constructor(table, columns, nullsNotDistinct, name) {
      __publicField(this, "columns");
      __publicField(this, "name");
      __publicField(this, "nullsNotDistinct", false);
      this.table = table;
      this.columns = columns;
      this.name = name != null ? name : uniqueKeyName(this.table, this.columns.map((column) => column.name));
      this.nullsNotDistinct = nullsNotDistinct;
    }
    getName() {
      return this.name;
    }
  };
  __name(_UniqueConstraint, "UniqueConstraint");
  __publicField(_UniqueConstraint, _a18, "PgUniqueConstraint");
  var UniqueConstraint = _UniqueConstraint;

  // node_modules/drizzle-orm/pg-core/utils/array.js
  function parsePgArrayValue(arrayString, startFrom, inQuotes) {
    for (let i2 = startFrom; i2 < arrayString.length; i2++) {
      const char2 = arrayString[i2];
      if (char2 === "\\") {
        i2++;
        continue;
      }
      if (char2 === '"') {
        return [arrayString.slice(startFrom, i2).replace(/\\/g, ""), i2 + 1];
      }
      if (inQuotes) {
        continue;
      }
      if (char2 === "," || char2 === "}") {
        return [arrayString.slice(startFrom, i2).replace(/\\/g, ""), i2];
      }
    }
    return [arrayString.slice(startFrom).replace(/\\/g, ""), arrayString.length];
  }
  __name(parsePgArrayValue, "parsePgArrayValue");
  function parsePgNestedArray(arrayString, startFrom = 0) {
    const result = [];
    let i2 = startFrom;
    let lastCharIsComma = false;
    while (i2 < arrayString.length) {
      const char2 = arrayString[i2];
      if (char2 === ",") {
        if (lastCharIsComma || i2 === startFrom) {
          result.push("");
        }
        lastCharIsComma = true;
        i2++;
        continue;
      }
      lastCharIsComma = false;
      if (char2 === "\\") {
        i2 += 2;
        continue;
      }
      if (char2 === '"') {
        const [value2, startFrom2] = parsePgArrayValue(arrayString, i2 + 1, true);
        result.push(value2);
        i2 = startFrom2;
        continue;
      }
      if (char2 === "}") {
        return [result, i2 + 1];
      }
      if (char2 === "{") {
        const [value2, startFrom2] = parsePgNestedArray(arrayString, i2 + 1);
        result.push(value2);
        i2 = startFrom2;
        continue;
      }
      const [value, newStartFrom] = parsePgArrayValue(arrayString, i2, false);
      result.push(value);
      i2 = newStartFrom;
    }
    return [result, i2];
  }
  __name(parsePgNestedArray, "parsePgNestedArray");
  function parsePgArray(arrayString) {
    const [result] = parsePgNestedArray(arrayString, 1);
    return result;
  }
  __name(parsePgArray, "parsePgArray");
  function makePgArray(array) {
    return `{${array.map((item) => {
      if (Array.isArray(item)) {
        return makePgArray(item);
      }
      if (typeof item === "string") {
        return `"${item.replace(/\\/g, "\\\\").replace(/"/g, '\\"')}"`;
      }
      return `${item}`;
    }).join(",")}}`;
  }
  __name(makePgArray, "makePgArray");

  // node_modules/drizzle-orm/pg-core/columns/common.js
  var _a19, _b2;
  var _PgColumnBuilder = class _PgColumnBuilder extends (_b2 = ColumnBuilder, _a19 = entityKind, _b2) {
    constructor() {
      super(...arguments);
      __publicField(this, "foreignKeyConfigs", []);
    }
    array(size4) {
      return new PgArrayBuilder(this.config.name, this, size4);
    }
    references(ref, actions = {}) {
      this.foreignKeyConfigs.push({ ref, actions });
      return this;
    }
    unique(name, config) {
      this.config.isUnique = true;
      this.config.uniqueName = name;
      this.config.uniqueType = config == null ? void 0 : config.nulls;
      return this;
    }
    generatedAlwaysAs(as) {
      this.config.generated = {
        as,
        type: "always",
        mode: "stored"
      };
      return this;
    }
    /** @internal */
    buildForeignKeys(column, table) {
      return this.foreignKeyConfigs.map(({ ref, actions }) => {
        return iife(
          (ref2, actions2) => {
            const builder = new ForeignKeyBuilder(() => {
              const foreignColumn = ref2();
              return { columns: [column], foreignColumns: [foreignColumn] };
            });
            if (actions2.onUpdate) {
              builder.onUpdate(actions2.onUpdate);
            }
            if (actions2.onDelete) {
              builder.onDelete(actions2.onDelete);
            }
            return builder.build(table);
          },
          ref,
          actions
        );
      });
    }
    /** @internal */
    buildExtraConfigColumn(table) {
      return new ExtraConfigColumn(table, this.config);
    }
  };
  __name(_PgColumnBuilder, "PgColumnBuilder");
  __publicField(_PgColumnBuilder, _a19, "PgColumnBuilder");
  var PgColumnBuilder = _PgColumnBuilder;
  var _a20, _b3;
  var _PgColumn = class _PgColumn extends (_b3 = Column, _a20 = entityKind, _b3) {
    constructor(table, config) {
      if (!config.uniqueName) {
        config.uniqueName = uniqueKeyName(table, [config.name]);
      }
      super(table, config);
      this.table = table;
    }
  };
  __name(_PgColumn, "PgColumn");
  __publicField(_PgColumn, _a20, "PgColumn");
  var PgColumn = _PgColumn;
  var _a21, _b4, _c, _d;
  var _ExtraConfigColumn = class _ExtraConfigColumn extends (_d = PgColumn, _c = entityKind, _d) {
    constructor() {
      super(...arguments);
      __publicField(this, "indexConfig", {
        order: (_a21 = this.config.order) != null ? _a21 : "asc",
        nulls: (_b4 = this.config.nulls) != null ? _b4 : "last",
        opClass: this.config.opClass
      });
      __publicField(this, "defaultConfig", {
        order: "asc",
        nulls: "last",
        opClass: void 0
      });
    }
    getSQLType() {
      return this.getSQLType();
    }
    asc() {
      this.indexConfig.order = "asc";
      return this;
    }
    desc() {
      this.indexConfig.order = "desc";
      return this;
    }
    nullsFirst() {
      this.indexConfig.nulls = "first";
      return this;
    }
    nullsLast() {
      this.indexConfig.nulls = "last";
      return this;
    }
    /**
     * ### PostgreSQL documentation quote
     *
     * > An operator class with optional parameters can be specified for each column of an index.
     * The operator class identifies the operators to be used by the index for that column.
     * For example, a B-tree index on four-byte integers would use the int4_ops class;
     * this operator class includes comparison functions for four-byte integers.
     * In practice the default operator class for the column's data type is usually sufficient.
     * The main point of having operator classes is that for some data types, there could be more than one meaningful ordering.
     * For example, we might want to sort a complex-number data type either by absolute value or by real part.
     * We could do this by defining two operator classes for the data type and then selecting the proper class when creating an index.
     * More information about operator classes check:
     *
     * ### Useful links
     * https://www.postgresql.org/docs/current/sql-createindex.html
     *
     * https://www.postgresql.org/docs/current/indexes-opclass.html
     *
     * https://www.postgresql.org/docs/current/xindex.html
     *
     * ### Additional types
     * If you have the `pg_vector` extension installed in your database, you can use the
     * `vector_l2_ops`, `vector_ip_ops`, `vector_cosine_ops`, `vector_l1_ops`, `bit_hamming_ops`, `bit_jaccard_ops`, `halfvec_l2_ops`, `sparsevec_l2_ops` options, which are predefined types.
     *
     * **You can always specify any string you want in the operator class, in case Drizzle doesn't have it natively in its types**
     *
     * @param opClass
     * @returns
     */
    op(opClass) {
      this.indexConfig.opClass = opClass;
      return this;
    }
  };
  __name(_ExtraConfigColumn, "ExtraConfigColumn");
  __publicField(_ExtraConfigColumn, _c, "ExtraConfigColumn");
  var ExtraConfigColumn = _ExtraConfigColumn;
  var _a22;
  _a22 = entityKind;
  var _IndexedColumn = class _IndexedColumn {
    constructor(name, keyAsName, type, indexConfig) {
      __publicField(this, "name");
      __publicField(this, "keyAsName");
      __publicField(this, "type");
      __publicField(this, "indexConfig");
      this.name = name;
      this.keyAsName = keyAsName;
      this.type = type;
      this.indexConfig = indexConfig;
    }
  };
  __name(_IndexedColumn, "IndexedColumn");
  __publicField(_IndexedColumn, _a22, "IndexedColumn");
  var IndexedColumn = _IndexedColumn;
  var _a23, _b5;
  var _PgArrayBuilder = class _PgArrayBuilder extends (_b5 = PgColumnBuilder, _a23 = entityKind, _b5) {
    constructor(name, baseBuilder, size4) {
      super(name, "array", "PgArray");
      this.config.baseBuilder = baseBuilder;
      this.config.size = size4;
    }
    /** @internal */
    build(table) {
      const baseColumn = this.config.baseBuilder.build(table);
      return new PgArray(
        table,
        this.config,
        baseColumn
      );
    }
  };
  __name(_PgArrayBuilder, "PgArrayBuilder");
  __publicField(_PgArrayBuilder, _a23, "PgArrayBuilder");
  var PgArrayBuilder = _PgArrayBuilder;
  var _a24, _b6;
  var _PgArray = class _PgArray extends (_b6 = PgColumn, _a24 = entityKind, _b6) {
    constructor(table, config, baseColumn, range) {
      super(table, config);
      __publicField(this, "size");
      this.baseColumn = baseColumn;
      this.range = range;
      this.size = config.size;
    }
    getSQLType() {
      return `${this.baseColumn.getSQLType()}[${typeof this.size === "number" ? this.size : ""}]`;
    }
    mapFromDriverValue(value) {
      if (typeof value === "string") {
        value = parsePgArray(value);
      }
      return value.map((v) => this.baseColumn.mapFromDriverValue(v));
    }
    mapToDriverValue(value, isNestedArray = false) {
      const a = value.map(
        (v) => v === null ? null : is(this.baseColumn, _PgArray) ? this.baseColumn.mapToDriverValue(v, true) : this.baseColumn.mapToDriverValue(v)
      );
      if (isNestedArray)
        return a;
      return makePgArray(a);
    }
  };
  __name(_PgArray, "PgArray");
  __publicField(_PgArray, _a24, "PgArray");
  var PgArray = _PgArray;

  // node_modules/drizzle-orm/pg-core/columns/enum.js
  var isPgEnumSym = Symbol.for("drizzle:isPgEnum");
  function isPgEnum(obj) {
    return !!obj && typeof obj === "function" && isPgEnumSym in obj && obj[isPgEnumSym] === true;
  }
  __name(isPgEnum, "isPgEnum");
  var _a25, _b7;
  var _PgEnumColumnBuilder = class _PgEnumColumnBuilder extends (_b7 = PgColumnBuilder, _a25 = entityKind, _b7) {
    constructor(name, enumInstance) {
      super(name, "string", "PgEnumColumn");
      this.config.enum = enumInstance;
    }
    /** @internal */
    build(table) {
      return new PgEnumColumn(
        table,
        this.config
      );
    }
  };
  __name(_PgEnumColumnBuilder, "PgEnumColumnBuilder");
  __publicField(_PgEnumColumnBuilder, _a25, "PgEnumColumnBuilder");
  var PgEnumColumnBuilder = _PgEnumColumnBuilder;
  var _a26, _b8;
  var _PgEnumColumn = class _PgEnumColumn extends (_b8 = PgColumn, _a26 = entityKind, _b8) {
    constructor(table, config) {
      super(table, config);
      __publicField(this, "enum", this.config.enum);
      __publicField(this, "enumValues", this.config.enum.enumValues);
      this.enum = config.enum;
    }
    getSQLType() {
      return this.enum.enumName;
    }
  };
  __name(_PgEnumColumn, "PgEnumColumn");
  __publicField(_PgEnumColumn, _a26, "PgEnumColumn");
  var PgEnumColumn = _PgEnumColumn;

  // node_modules/drizzle-orm/subquery.js
  var _a27;
  _a27 = entityKind;
  var _Subquery = class _Subquery {
    constructor(sql2, selection, alias, isWith = false) {
      this._ = {
        brand: "Subquery",
        sql: sql2,
        selectedFields: selection,
        alias,
        isWith
      };
    }
    // getSQL(): SQL<unknown> {
    // 	return new SQL([this]);
    // }
  };
  __name(_Subquery, "Subquery");
  __publicField(_Subquery, _a27, "Subquery");
  var Subquery = _Subquery;
  var _a28, _b9;
  var _WithSubquery = class _WithSubquery extends (_b9 = Subquery, _a28 = entityKind, _b9) {
  };
  __name(_WithSubquery, "WithSubquery");
  __publicField(_WithSubquery, _a28, "WithSubquery");
  var WithSubquery = _WithSubquery;

  // node_modules/drizzle-orm/version.js
  var version = "0.39.1";

  // node_modules/drizzle-orm/tracing.js
  var otel;
  var rawTracer;
  var tracer = {
    startActiveSpan(name, fn) {
      if (!otel) {
        return fn();
      }
      if (!rawTracer) {
        rawTracer = otel.trace.getTracer("drizzle-orm", version);
      }
      return iife(
        (otel2, rawTracer2) => rawTracer2.startActiveSpan(
          name,
          (span) => {
            try {
              return fn(span);
            } catch (e) {
              span.setStatus({
                code: otel2.SpanStatusCode.ERROR,
                message: e instanceof Error ? e.message : "Unknown error"
                // eslint-disable-line no-instanceof/no-instanceof
              });
              throw e;
            } finally {
              span.end();
            }
          }
        ),
        otel,
        rawTracer
      );
    }
  };

  // node_modules/drizzle-orm/view-common.js
  var ViewBaseConfig = Symbol.for("drizzle:ViewBaseConfig");

  // node_modules/drizzle-orm/table.js
  var Schema = Symbol.for("drizzle:Schema");
  var Columns = Symbol.for("drizzle:Columns");
  var ExtraConfigColumns = Symbol.for("drizzle:ExtraConfigColumns");
  var OriginalName = Symbol.for("drizzle:OriginalName");
  var BaseName = Symbol.for("drizzle:BaseName");
  var IsAlias = Symbol.for("drizzle:IsAlias");
  var ExtraConfigBuilder = Symbol.for("drizzle:ExtraConfigBuilder");
  var IsDrizzleTable = Symbol.for("drizzle:IsDrizzleTable");
  var _a29, _b10, _c2, _d2, _e2, _f, _g, _h, _i, _j;
  _j = entityKind, _i = TableName, _h = OriginalName, _g = Schema, _f = Columns, _e2 = ExtraConfigColumns, _d2 = BaseName, _c2 = IsAlias, _b10 = IsDrizzleTable, _a29 = ExtraConfigBuilder;
  var _Table = class _Table {
    constructor(name, schema, baseName) {
      /**
       * @internal
       * Can be changed if the table is aliased.
       */
      __publicField(this, _i);
      /**
       * @internal
       * Used to store the original name of the table, before any aliasing.
       */
      __publicField(this, _h);
      /** @internal */
      __publicField(this, _g);
      /** @internal */
      __publicField(this, _f);
      /** @internal */
      __publicField(this, _e2);
      /**
       *  @internal
       * Used to store the table name before the transformation via the `tableCreator` functions.
       */
      __publicField(this, _d2);
      /** @internal */
      __publicField(this, _c2, false);
      /** @internal */
      __publicField(this, _b10, true);
      /** @internal */
      __publicField(this, _a29);
      this[TableName] = this[OriginalName] = name;
      this[Schema] = schema;
      this[BaseName] = baseName;
    }
  };
  __name(_Table, "Table");
  __publicField(_Table, _j, "Table");
  /** @internal */
  __publicField(_Table, "Symbol", {
    Name: TableName,
    Schema,
    OriginalName,
    Columns,
    ExtraConfigColumns,
    BaseName,
    IsAlias,
    ExtraConfigBuilder
  });
  var Table2 = _Table;
  function isTable(table) {
    return typeof table === "object" && table !== null && IsDrizzleTable in table;
  }
  __name(isTable, "isTable");

  // node_modules/drizzle-orm/sql/sql.js
  var _a30;
  _a30 = entityKind;
  var _FakePrimitiveParam = class _FakePrimitiveParam {
  };
  __name(_FakePrimitiveParam, "FakePrimitiveParam");
  __publicField(_FakePrimitiveParam, _a30, "FakePrimitiveParam");
  var FakePrimitiveParam = _FakePrimitiveParam;
  function isSQLWrapper(value) {
    return value !== null && value !== void 0 && typeof value.getSQL === "function";
  }
  __name(isSQLWrapper, "isSQLWrapper");
  function mergeQueries(queries) {
    var _a121;
    const result = { sql: "", params: [] };
    for (const query of queries) {
      result.sql += query.sql;
      result.params.push(...query.params);
      if ((_a121 = query.typings) == null ? void 0 : _a121.length) {
        if (!result.typings) {
          result.typings = [];
        }
        result.typings.push(...query.typings);
      }
    }
    return result;
  }
  __name(mergeQueries, "mergeQueries");
  var _a31;
  _a31 = entityKind;
  var _StringChunk = class _StringChunk {
    constructor(value) {
      __publicField(this, "value");
      this.value = Array.isArray(value) ? value : [value];
    }
    getSQL() {
      return new SQL([this]);
    }
  };
  __name(_StringChunk, "StringChunk");
  __publicField(_StringChunk, _a31, "StringChunk");
  var StringChunk = _StringChunk;
  var _a32;
  _a32 = entityKind;
  var _SQL = class _SQL {
    constructor(queryChunks) {
      /** @internal */
      __publicField(this, "decoder", noopDecoder);
      __publicField(this, "shouldInlineParams", false);
      this.queryChunks = queryChunks;
    }
    append(query) {
      this.queryChunks.push(...query.queryChunks);
      return this;
    }
    toQuery(config) {
      return tracer.startActiveSpan("drizzle.buildSQL", (span) => {
        const query = this.buildQueryFromSourceParams(this.queryChunks, config);
        span == null ? void 0 : span.setAttributes({
          "drizzle.query.text": query.sql,
          "drizzle.query.params": JSON.stringify(query.params)
        });
        return query;
      });
    }
    buildQueryFromSourceParams(chunks, _config) {
      const config = Object.assign({}, _config, {
        inlineParams: _config.inlineParams || this.shouldInlineParams,
        paramStartIndex: _config.paramStartIndex || { value: 0 }
      });
      const {
        casing,
        escapeName,
        escapeParam,
        prepareTyping,
        inlineParams,
        paramStartIndex
      } = config;
      return mergeQueries(chunks.map((chunk) => {
        var _a121;
        if (is(chunk, StringChunk)) {
          return { sql: chunk.value.join(""), params: [] };
        }
        if (is(chunk, Name)) {
          return { sql: escapeName(chunk.value), params: [] };
        }
        if (chunk === void 0) {
          return { sql: "", params: [] };
        }
        if (Array.isArray(chunk)) {
          const result = [new StringChunk("(")];
          for (const [i2, p2] of chunk.entries()) {
            result.push(p2);
            if (i2 < chunk.length - 1) {
              result.push(new StringChunk(", "));
            }
          }
          result.push(new StringChunk(")"));
          return this.buildQueryFromSourceParams(result, config);
        }
        if (is(chunk, _SQL)) {
          return this.buildQueryFromSourceParams(chunk.queryChunks, __spreadProps(__spreadValues({}, config), {
            inlineParams: inlineParams || chunk.shouldInlineParams
          }));
        }
        if (is(chunk, Table2)) {
          const schemaName = chunk[Table2.Symbol.Schema];
          const tableName = chunk[Table2.Symbol.Name];
          return {
            sql: schemaName === void 0 || chunk[IsAlias] ? escapeName(tableName) : escapeName(schemaName) + "." + escapeName(tableName),
            params: []
          };
        }
        if (is(chunk, Column)) {
          const columnName = casing.getColumnCasing(chunk);
          if (_config.invokeSource === "indexes") {
            return { sql: escapeName(columnName), params: [] };
          }
          const schemaName = chunk.table[Table2.Symbol.Schema];
          return {
            sql: chunk.table[IsAlias] || schemaName === void 0 ? escapeName(chunk.table[Table2.Symbol.Name]) + "." + escapeName(columnName) : escapeName(schemaName) + "." + escapeName(chunk.table[Table2.Symbol.Name]) + "." + escapeName(columnName),
            params: []
          };
        }
        if (is(chunk, View)) {
          const schemaName = chunk[ViewBaseConfig].schema;
          const viewName = chunk[ViewBaseConfig].name;
          return {
            sql: schemaName === void 0 || chunk[ViewBaseConfig].isAlias ? escapeName(viewName) : escapeName(schemaName) + "." + escapeName(viewName),
            params: []
          };
        }
        if (is(chunk, Param)) {
          if (is(chunk.value, Placeholder)) {
            return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
          }
          const mappedValue = chunk.value === null ? null : chunk.encoder.mapToDriverValue(chunk.value);
          if (is(mappedValue, _SQL)) {
            return this.buildQueryFromSourceParams([mappedValue], config);
          }
          if (inlineParams) {
            return { sql: this.mapInlineParam(mappedValue, config), params: [] };
          }
          let typings = ["none"];
          if (prepareTyping) {
            typings = [prepareTyping(chunk.encoder)];
          }
          return { sql: escapeParam(paramStartIndex.value++, mappedValue), params: [mappedValue], typings };
        }
        if (is(chunk, Placeholder)) {
          return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
        }
        if (is(chunk, _SQL.Aliased) && chunk.fieldAlias !== void 0) {
          return { sql: escapeName(chunk.fieldAlias), params: [] };
        }
        if (is(chunk, Subquery)) {
          if (chunk._.isWith) {
            return { sql: escapeName(chunk._.alias), params: [] };
          }
          return this.buildQueryFromSourceParams([
            new StringChunk("("),
            chunk._.sql,
            new StringChunk(") "),
            new Name(chunk._.alias)
          ], config);
        }
        if (isPgEnum(chunk)) {
          if (chunk.schema) {
            return { sql: escapeName(chunk.schema) + "." + escapeName(chunk.enumName), params: [] };
          }
          return { sql: escapeName(chunk.enumName), params: [] };
        }
        if (isSQLWrapper(chunk)) {
          if ((_a121 = chunk.shouldOmitSQLParens) == null ? void 0 : _a121.call(chunk)) {
            return this.buildQueryFromSourceParams([chunk.getSQL()], config);
          }
          return this.buildQueryFromSourceParams([
            new StringChunk("("),
            chunk.getSQL(),
            new StringChunk(")")
          ], config);
        }
        if (inlineParams) {
          return { sql: this.mapInlineParam(chunk, config), params: [] };
        }
        return { sql: escapeParam(paramStartIndex.value++, chunk), params: [chunk], typings: ["none"] };
      }));
    }
    mapInlineParam(chunk, { escapeString }) {
      if (chunk === null) {
        return "null";
      }
      if (typeof chunk === "number" || typeof chunk === "boolean") {
        return chunk.toString();
      }
      if (typeof chunk === "string") {
        return escapeString(chunk);
      }
      if (typeof chunk === "object") {
        const mappedValueAsString = chunk.toString();
        if (mappedValueAsString === "[object Object]") {
          return escapeString(JSON.stringify(chunk));
        }
        return escapeString(mappedValueAsString);
      }
      throw new Error("Unexpected param value: " + chunk);
    }
    getSQL() {
      return this;
    }
    as(alias) {
      if (alias === void 0) {
        return this;
      }
      return new _SQL.Aliased(this, alias);
    }
    mapWith(decoder) {
      this.decoder = typeof decoder === "function" ? { mapFromDriverValue: decoder } : decoder;
      return this;
    }
    inlineParams() {
      this.shouldInlineParams = true;
      return this;
    }
    /**
     * This method is used to conditionally include a part of the query.
     *
     * @param condition - Condition to check
     * @returns itself if the condition is `true`, otherwise `undefined`
     */
    if(condition) {
      return condition ? this : void 0;
    }
  };
  __name(_SQL, "SQL");
  __publicField(_SQL, _a32, "SQL");
  var SQL = _SQL;
  var _a33;
  _a33 = entityKind;
  var _Name = class _Name {
    constructor(value) {
      __publicField(this, "brand");
      this.value = value;
    }
    getSQL() {
      return new SQL([this]);
    }
  };
  __name(_Name, "Name");
  __publicField(_Name, _a33, "Name");
  var Name = _Name;
  var noopDecoder = {
    mapFromDriverValue: /* @__PURE__ */ __name((value) => value, "mapFromDriverValue")
  };
  var noopEncoder = {
    mapToDriverValue: /* @__PURE__ */ __name((value) => value, "mapToDriverValue")
  };
  var noopMapper = __spreadValues(__spreadValues({}, noopDecoder), noopEncoder);
  var _a34;
  _a34 = entityKind;
  var _Param = class _Param {
    /**
     * @param value - Parameter value
     * @param encoder - Encoder to convert the value to a driver parameter
     */
    constructor(value, encoder = noopEncoder) {
      __publicField(this, "brand");
      this.value = value;
      this.encoder = encoder;
    }
    getSQL() {
      return new SQL([this]);
    }
  };
  __name(_Param, "Param");
  __publicField(_Param, _a34, "Param");
  var Param = _Param;
  function sql(strings, ...params) {
    const queryChunks = [];
    if (params.length > 0 || strings.length > 0 && strings[0] !== "") {
      queryChunks.push(new StringChunk(strings[0]));
    }
    for (const [paramIndex, param2] of params.entries()) {
      queryChunks.push(param2, new StringChunk(strings[paramIndex + 1]));
    }
    return new SQL(queryChunks);
  }
  __name(sql, "sql");
  ((sql2) => {
    function empty() {
      return new SQL([]);
    }
    __name(empty, "empty");
    sql2.empty = empty;
    function fromList(list) {
      return new SQL(list);
    }
    __name(fromList, "fromList");
    sql2.fromList = fromList;
    function raw(str) {
      return new SQL([new StringChunk(str)]);
    }
    __name(raw, "raw");
    sql2.raw = raw;
    function join(chunks, separator) {
      const result = [];
      for (const [i2, chunk] of chunks.entries()) {
        if (i2 > 0 && separator !== void 0) {
          result.push(separator);
        }
        result.push(chunk);
      }
      return new SQL(result);
    }
    __name(join, "join");
    sql2.join = join;
    function identifier(value) {
      return new Name(value);
    }
    __name(identifier, "identifier");
    sql2.identifier = identifier;
    function placeholder2(name2) {
      return new Placeholder(name2);
    }
    __name(placeholder2, "placeholder2");
    sql2.placeholder = placeholder2;
    function param2(value, encoder) {
      return new Param(value, encoder);
    }
    __name(param2, "param2");
    sql2.param = param2;
  })(sql || (sql = {}));
  ((SQL2) => {
    var _a121;
    _a121 = entityKind;
    const _Aliased = class _Aliased {
      constructor(sql2, fieldAlias) {
        /** @internal */
        __publicField(this, "isSelectionField", false);
        this.sql = sql2;
        this.fieldAlias = fieldAlias;
      }
      getSQL() {
        return this.sql;
      }
      /** @internal */
      clone() {
        return new _Aliased(this.sql, this.fieldAlias);
      }
    };
    __name(_Aliased, "Aliased");
    __publicField(_Aliased, _a121, "SQL.Aliased");
    let Aliased = _Aliased;
    SQL2.Aliased = Aliased;
  })(SQL || (SQL = {}));
  var _a35;
  _a35 = entityKind;
  var _Placeholder = class _Placeholder {
    constructor(name2) {
      this.name = name2;
    }
    getSQL() {
      return new SQL([this]);
    }
  };
  __name(_Placeholder, "Placeholder");
  __publicField(_Placeholder, _a35, "Placeholder");
  var Placeholder = _Placeholder;
  var IsDrizzleView = Symbol.for("drizzle:IsDrizzleView");
  var _a36, _b11, _c3;
  _c3 = entityKind, _b11 = ViewBaseConfig, _a36 = IsDrizzleView;
  var _View = class _View {
    constructor({ name: name2, schema, selectedFields, query }) {
      /** @internal */
      __publicField(this, _b11);
      /** @internal */
      __publicField(this, _a36, true);
      this[ViewBaseConfig] = {
        name: name2,
        originalName: name2,
        schema,
        selectedFields,
        query,
        isExisting: !query,
        isAlias: false
      };
    }
    getSQL() {
      return new SQL([this]);
    }
  };
  __name(_View, "View");
  __publicField(_View, _c3, "View");
  var View = _View;
  function isView(view) {
    return typeof view === "object" && view !== null && IsDrizzleView in view;
  }
  __name(isView, "isView");
  Column.prototype.getSQL = function() {
    return new SQL([this]);
  };
  Table2.prototype.getSQL = function() {
    return new SQL([this]);
  };
  Subquery.prototype.getSQL = function() {
    return new SQL([this]);
  };

  // node_modules/drizzle-orm/utils.js
  function getTableColumns(table) {
    return table[Table2.Symbol.Columns];
  }
  __name(getTableColumns, "getTableColumns");
  function getViewSelectedFields(view) {
    return view[ViewBaseConfig].selectedFields;
  }
  __name(getViewSelectedFields, "getViewSelectedFields");
  function getColumnNameAndConfig(a, b) {
    return {
      name: typeof a === "string" && a.length > 0 ? a : "",
      config: typeof a === "object" ? a : b
    };
  }
  __name(getColumnNameAndConfig, "getColumnNameAndConfig");

  // node_modules/drizzle-orm/pg-core/columns/int.common.js
  var _a37, _b12;
  var _PgIntColumnBaseBuilder = class _PgIntColumnBaseBuilder extends (_b12 = PgColumnBuilder, _a37 = entityKind, _b12) {
    generatedAlwaysAsIdentity(sequence) {
      if (sequence) {
        const _a121 = sequence, { name } = _a121, options = __objRest(_a121, ["name"]);
        this.config.generatedIdentity = {
          type: "always",
          sequenceName: name,
          sequenceOptions: options
        };
      } else {
        this.config.generatedIdentity = {
          type: "always"
        };
      }
      this.config.hasDefault = true;
      this.config.notNull = true;
      return this;
    }
    generatedByDefaultAsIdentity(sequence) {
      if (sequence) {
        const _a121 = sequence, { name } = _a121, options = __objRest(_a121, ["name"]);
        this.config.generatedIdentity = {
          type: "byDefault",
          sequenceName: name,
          sequenceOptions: options
        };
      } else {
        this.config.generatedIdentity = {
          type: "byDefault"
        };
      }
      this.config.hasDefault = true;
      this.config.notNull = true;
      return this;
    }
  };
  __name(_PgIntColumnBaseBuilder, "PgIntColumnBaseBuilder");
  __publicField(_PgIntColumnBaseBuilder, _a37, "PgIntColumnBaseBuilder");
  var PgIntColumnBaseBuilder = _PgIntColumnBaseBuilder;

  // node_modules/drizzle-orm/pg-core/columns/bigint.js
  var _a38, _b13;
  var _PgBigInt53Builder = class _PgBigInt53Builder extends (_b13 = PgIntColumnBaseBuilder, _a38 = entityKind, _b13) {
    constructor(name) {
      super(name, "number", "PgBigInt53");
    }
    /** @internal */
    build(table) {
      return new PgBigInt53(table, this.config);
    }
  };
  __name(_PgBigInt53Builder, "PgBigInt53Builder");
  __publicField(_PgBigInt53Builder, _a38, "PgBigInt53Builder");
  var PgBigInt53Builder = _PgBigInt53Builder;
  var _a39, _b14;
  var _PgBigInt53 = class _PgBigInt53 extends (_b14 = PgColumn, _a39 = entityKind, _b14) {
    getSQLType() {
      return "bigint";
    }
    mapFromDriverValue(value) {
      if (typeof value === "number") {
        return value;
      }
      return Number(value);
    }
  };
  __name(_PgBigInt53, "PgBigInt53");
  __publicField(_PgBigInt53, _a39, "PgBigInt53");
  var PgBigInt53 = _PgBigInt53;
  var _a40, _b15;
  var _PgBigInt64Builder = class _PgBigInt64Builder extends (_b15 = PgIntColumnBaseBuilder, _a40 = entityKind, _b15) {
    constructor(name) {
      super(name, "bigint", "PgBigInt64");
    }
    /** @internal */
    build(table) {
      return new PgBigInt64(
        table,
        this.config
      );
    }
  };
  __name(_PgBigInt64Builder, "PgBigInt64Builder");
  __publicField(_PgBigInt64Builder, _a40, "PgBigInt64Builder");
  var PgBigInt64Builder = _PgBigInt64Builder;
  var _a41, _b16;
  var _PgBigInt64 = class _PgBigInt64 extends (_b16 = PgColumn, _a41 = entityKind, _b16) {
    getSQLType() {
      return "bigint";
    }
    // eslint-disable-next-line unicorn/prefer-native-coercion-functions
    mapFromDriverValue(value) {
      return BigInt(value);
    }
  };
  __name(_PgBigInt64, "PgBigInt64");
  __publicField(_PgBigInt64, _a41, "PgBigInt64");
  var PgBigInt64 = _PgBigInt64;
  function bigint(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    if (config.mode === "number") {
      return new PgBigInt53Builder(name);
    }
    return new PgBigInt64Builder(name);
  }
  __name(bigint, "bigint");

  // node_modules/drizzle-orm/pg-core/columns/bigserial.js
  var _a42, _b17;
  var _PgBigSerial53Builder = class _PgBigSerial53Builder extends (_b17 = PgColumnBuilder, _a42 = entityKind, _b17) {
    constructor(name) {
      super(name, "number", "PgBigSerial53");
      this.config.hasDefault = true;
      this.config.notNull = true;
    }
    /** @internal */
    build(table) {
      return new PgBigSerial53(
        table,
        this.config
      );
    }
  };
  __name(_PgBigSerial53Builder, "PgBigSerial53Builder");
  __publicField(_PgBigSerial53Builder, _a42, "PgBigSerial53Builder");
  var PgBigSerial53Builder = _PgBigSerial53Builder;
  var _a43, _b18;
  var _PgBigSerial53 = class _PgBigSerial53 extends (_b18 = PgColumn, _a43 = entityKind, _b18) {
    getSQLType() {
      return "bigserial";
    }
    mapFromDriverValue(value) {
      if (typeof value === "number") {
        return value;
      }
      return Number(value);
    }
  };
  __name(_PgBigSerial53, "PgBigSerial53");
  __publicField(_PgBigSerial53, _a43, "PgBigSerial53");
  var PgBigSerial53 = _PgBigSerial53;
  var _a44, _b19;
  var _PgBigSerial64Builder = class _PgBigSerial64Builder extends (_b19 = PgColumnBuilder, _a44 = entityKind, _b19) {
    constructor(name) {
      super(name, "bigint", "PgBigSerial64");
      this.config.hasDefault = true;
    }
    /** @internal */
    build(table) {
      return new PgBigSerial64(
        table,
        this.config
      );
    }
  };
  __name(_PgBigSerial64Builder, "PgBigSerial64Builder");
  __publicField(_PgBigSerial64Builder, _a44, "PgBigSerial64Builder");
  var PgBigSerial64Builder = _PgBigSerial64Builder;
  var _a45, _b20;
  var _PgBigSerial64 = class _PgBigSerial64 extends (_b20 = PgColumn, _a45 = entityKind, _b20) {
    getSQLType() {
      return "bigserial";
    }
    // eslint-disable-next-line unicorn/prefer-native-coercion-functions
    mapFromDriverValue(value) {
      return BigInt(value);
    }
  };
  __name(_PgBigSerial64, "PgBigSerial64");
  __publicField(_PgBigSerial64, _a45, "PgBigSerial64");
  var PgBigSerial64 = _PgBigSerial64;
  function bigserial(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    if (config.mode === "number") {
      return new PgBigSerial53Builder(name);
    }
    return new PgBigSerial64Builder(name);
  }
  __name(bigserial, "bigserial");

  // node_modules/drizzle-orm/pg-core/columns/boolean.js
  var _a46, _b21;
  var _PgBooleanBuilder = class _PgBooleanBuilder extends (_b21 = PgColumnBuilder, _a46 = entityKind, _b21) {
    constructor(name) {
      super(name, "boolean", "PgBoolean");
    }
    /** @internal */
    build(table) {
      return new PgBoolean(table, this.config);
    }
  };
  __name(_PgBooleanBuilder, "PgBooleanBuilder");
  __publicField(_PgBooleanBuilder, _a46, "PgBooleanBuilder");
  var PgBooleanBuilder = _PgBooleanBuilder;
  var _a47, _b22;
  var _PgBoolean = class _PgBoolean extends (_b22 = PgColumn, _a47 = entityKind, _b22) {
    getSQLType() {
      return "boolean";
    }
  };
  __name(_PgBoolean, "PgBoolean");
  __publicField(_PgBoolean, _a47, "PgBoolean");
  var PgBoolean = _PgBoolean;
  function boolean(name) {
    return new PgBooleanBuilder(name != null ? name : "");
  }
  __name(boolean, "boolean");

  // node_modules/drizzle-orm/pg-core/columns/char.js
  var _a48, _b23;
  var _PgCharBuilder = class _PgCharBuilder extends (_b23 = PgColumnBuilder, _a48 = entityKind, _b23) {
    constructor(name, config) {
      super(name, "string", "PgChar");
      this.config.length = config.length;
      this.config.enumValues = config.enum;
    }
    /** @internal */
    build(table) {
      return new PgChar(
        table,
        this.config
      );
    }
  };
  __name(_PgCharBuilder, "PgCharBuilder");
  __publicField(_PgCharBuilder, _a48, "PgCharBuilder");
  var PgCharBuilder = _PgCharBuilder;
  var _a49, _b24;
  var _PgChar = class _PgChar extends (_b24 = PgColumn, _a49 = entityKind, _b24) {
    constructor() {
      super(...arguments);
      __publicField(this, "length", this.config.length);
      __publicField(this, "enumValues", this.config.enumValues);
    }
    getSQLType() {
      return this.length === void 0 ? `char` : `char(${this.length})`;
    }
  };
  __name(_PgChar, "PgChar");
  __publicField(_PgChar, _a49, "PgChar");
  var PgChar = _PgChar;
  function char(a, b = {}) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgCharBuilder(name, config);
  }
  __name(char, "char");

  // node_modules/drizzle-orm/pg-core/columns/cidr.js
  var _a50, _b25;
  var _PgCidrBuilder = class _PgCidrBuilder extends (_b25 = PgColumnBuilder, _a50 = entityKind, _b25) {
    constructor(name) {
      super(name, "string", "PgCidr");
    }
    /** @internal */
    build(table) {
      return new PgCidr(table, this.config);
    }
  };
  __name(_PgCidrBuilder, "PgCidrBuilder");
  __publicField(_PgCidrBuilder, _a50, "PgCidrBuilder");
  var PgCidrBuilder = _PgCidrBuilder;
  var _a51, _b26;
  var _PgCidr = class _PgCidr extends (_b26 = PgColumn, _a51 = entityKind, _b26) {
    getSQLType() {
      return "cidr";
    }
  };
  __name(_PgCidr, "PgCidr");
  __publicField(_PgCidr, _a51, "PgCidr");
  var PgCidr = _PgCidr;
  function cidr(name) {
    return new PgCidrBuilder(name != null ? name : "");
  }
  __name(cidr, "cidr");

  // node_modules/drizzle-orm/pg-core/columns/custom.js
  var _a52, _b27;
  var _PgCustomColumnBuilder = class _PgCustomColumnBuilder extends (_b27 = PgColumnBuilder, _a52 = entityKind, _b27) {
    constructor(name, fieldConfig, customTypeParams) {
      super(name, "custom", "PgCustomColumn");
      this.config.fieldConfig = fieldConfig;
      this.config.customTypeParams = customTypeParams;
    }
    /** @internal */
    build(table) {
      return new PgCustomColumn(
        table,
        this.config
      );
    }
  };
  __name(_PgCustomColumnBuilder, "PgCustomColumnBuilder");
  __publicField(_PgCustomColumnBuilder, _a52, "PgCustomColumnBuilder");
  var PgCustomColumnBuilder = _PgCustomColumnBuilder;
  var _a53, _b28;
  var _PgCustomColumn = class _PgCustomColumn extends (_b28 = PgColumn, _a53 = entityKind, _b28) {
    constructor(table, config) {
      super(table, config);
      __publicField(this, "sqlName");
      __publicField(this, "mapTo");
      __publicField(this, "mapFrom");
      this.sqlName = config.customTypeParams.dataType(config.fieldConfig);
      this.mapTo = config.customTypeParams.toDriver;
      this.mapFrom = config.customTypeParams.fromDriver;
    }
    getSQLType() {
      return this.sqlName;
    }
    mapFromDriverValue(value) {
      return typeof this.mapFrom === "function" ? this.mapFrom(value) : value;
    }
    mapToDriverValue(value) {
      return typeof this.mapTo === "function" ? this.mapTo(value) : value;
    }
  };
  __name(_PgCustomColumn, "PgCustomColumn");
  __publicField(_PgCustomColumn, _a53, "PgCustomColumn");
  var PgCustomColumn = _PgCustomColumn;
  function customType(customTypeParams) {
    return (a, b) => {
      const { name, config } = getColumnNameAndConfig(a, b);
      return new PgCustomColumnBuilder(name, config, customTypeParams);
    };
  }
  __name(customType, "customType");

  // node_modules/drizzle-orm/pg-core/columns/date.common.js
  var _a54, _b29;
  var _PgDateColumnBaseBuilder = class _PgDateColumnBaseBuilder extends (_b29 = PgColumnBuilder, _a54 = entityKind, _b29) {
    defaultNow() {
      return this.default(sql`now()`);
    }
  };
  __name(_PgDateColumnBaseBuilder, "PgDateColumnBaseBuilder");
  __publicField(_PgDateColumnBaseBuilder, _a54, "PgDateColumnBaseBuilder");
  var PgDateColumnBaseBuilder = _PgDateColumnBaseBuilder;

  // node_modules/drizzle-orm/pg-core/columns/date.js
  var _a55, _b30;
  var _PgDateBuilder = class _PgDateBuilder extends (_b30 = PgDateColumnBaseBuilder, _a55 = entityKind, _b30) {
    constructor(name) {
      super(name, "date", "PgDate");
    }
    /** @internal */
    build(table) {
      return new PgDate(table, this.config);
    }
  };
  __name(_PgDateBuilder, "PgDateBuilder");
  __publicField(_PgDateBuilder, _a55, "PgDateBuilder");
  var PgDateBuilder = _PgDateBuilder;
  var _a56, _b31;
  var _PgDate = class _PgDate extends (_b31 = PgColumn, _a56 = entityKind, _b31) {
    getSQLType() {
      return "date";
    }
    mapFromDriverValue(value) {
      return new Date(value);
    }
    mapToDriverValue(value) {
      return value.toISOString();
    }
  };
  __name(_PgDate, "PgDate");
  __publicField(_PgDate, _a56, "PgDate");
  var PgDate = _PgDate;
  var _a57, _b32;
  var _PgDateStringBuilder = class _PgDateStringBuilder extends (_b32 = PgDateColumnBaseBuilder, _a57 = entityKind, _b32) {
    constructor(name) {
      super(name, "string", "PgDateString");
    }
    /** @internal */
    build(table) {
      return new PgDateString(
        table,
        this.config
      );
    }
  };
  __name(_PgDateStringBuilder, "PgDateStringBuilder");
  __publicField(_PgDateStringBuilder, _a57, "PgDateStringBuilder");
  var PgDateStringBuilder = _PgDateStringBuilder;
  var _a58, _b33;
  var _PgDateString = class _PgDateString extends (_b33 = PgColumn, _a58 = entityKind, _b33) {
    getSQLType() {
      return "date";
    }
  };
  __name(_PgDateString, "PgDateString");
  __publicField(_PgDateString, _a58, "PgDateString");
  var PgDateString = _PgDateString;
  function date(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    if ((config == null ? void 0 : config.mode) === "date") {
      return new PgDateBuilder(name);
    }
    return new PgDateStringBuilder(name);
  }
  __name(date, "date");

  // node_modules/drizzle-orm/pg-core/columns/double-precision.js
  var _a59, _b34;
  var _PgDoublePrecisionBuilder = class _PgDoublePrecisionBuilder extends (_b34 = PgColumnBuilder, _a59 = entityKind, _b34) {
    constructor(name) {
      super(name, "number", "PgDoublePrecision");
    }
    /** @internal */
    build(table) {
      return new PgDoublePrecision(
        table,
        this.config
      );
    }
  };
  __name(_PgDoublePrecisionBuilder, "PgDoublePrecisionBuilder");
  __publicField(_PgDoublePrecisionBuilder, _a59, "PgDoublePrecisionBuilder");
  var PgDoublePrecisionBuilder = _PgDoublePrecisionBuilder;
  var _a60, _b35;
  var _PgDoublePrecision = class _PgDoublePrecision extends (_b35 = PgColumn, _a60 = entityKind, _b35) {
    getSQLType() {
      return "double precision";
    }
    mapFromDriverValue(value) {
      if (typeof value === "string") {
        return Number.parseFloat(value);
      }
      return value;
    }
  };
  __name(_PgDoublePrecision, "PgDoublePrecision");
  __publicField(_PgDoublePrecision, _a60, "PgDoublePrecision");
  var PgDoublePrecision = _PgDoublePrecision;
  function doublePrecision(name) {
    return new PgDoublePrecisionBuilder(name != null ? name : "");
  }
  __name(doublePrecision, "doublePrecision");

  // node_modules/drizzle-orm/pg-core/columns/inet.js
  var _a61, _b36;
  var _PgInetBuilder = class _PgInetBuilder extends (_b36 = PgColumnBuilder, _a61 = entityKind, _b36) {
    constructor(name) {
      super(name, "string", "PgInet");
    }
    /** @internal */
    build(table) {
      return new PgInet(table, this.config);
    }
  };
  __name(_PgInetBuilder, "PgInetBuilder");
  __publicField(_PgInetBuilder, _a61, "PgInetBuilder");
  var PgInetBuilder = _PgInetBuilder;
  var _a62, _b37;
  var _PgInet = class _PgInet extends (_b37 = PgColumn, _a62 = entityKind, _b37) {
    getSQLType() {
      return "inet";
    }
  };
  __name(_PgInet, "PgInet");
  __publicField(_PgInet, _a62, "PgInet");
  var PgInet = _PgInet;
  function inet(name) {
    return new PgInetBuilder(name != null ? name : "");
  }
  __name(inet, "inet");

  // node_modules/drizzle-orm/pg-core/columns/integer.js
  var _a63, _b38;
  var _PgIntegerBuilder = class _PgIntegerBuilder extends (_b38 = PgIntColumnBaseBuilder, _a63 = entityKind, _b38) {
    constructor(name) {
      super(name, "number", "PgInteger");
    }
    /** @internal */
    build(table) {
      return new PgInteger(table, this.config);
    }
  };
  __name(_PgIntegerBuilder, "PgIntegerBuilder");
  __publicField(_PgIntegerBuilder, _a63, "PgIntegerBuilder");
  var PgIntegerBuilder = _PgIntegerBuilder;
  var _a64, _b39;
  var _PgInteger = class _PgInteger extends (_b39 = PgColumn, _a64 = entityKind, _b39) {
    getSQLType() {
      return "integer";
    }
    mapFromDriverValue(value) {
      if (typeof value === "string") {
        return Number.parseInt(value);
      }
      return value;
    }
  };
  __name(_PgInteger, "PgInteger");
  __publicField(_PgInteger, _a64, "PgInteger");
  var PgInteger = _PgInteger;
  function integer(name) {
    return new PgIntegerBuilder(name != null ? name : "");
  }
  __name(integer, "integer");

  // node_modules/drizzle-orm/pg-core/columns/interval.js
  var _a65, _b40;
  var _PgIntervalBuilder = class _PgIntervalBuilder extends (_b40 = PgColumnBuilder, _a65 = entityKind, _b40) {
    constructor(name, intervalConfig) {
      super(name, "string", "PgInterval");
      this.config.intervalConfig = intervalConfig;
    }
    /** @internal */
    build(table) {
      return new PgInterval(table, this.config);
    }
  };
  __name(_PgIntervalBuilder, "PgIntervalBuilder");
  __publicField(_PgIntervalBuilder, _a65, "PgIntervalBuilder");
  var PgIntervalBuilder = _PgIntervalBuilder;
  var _a66, _b41;
  var _PgInterval = class _PgInterval extends (_b41 = PgColumn, _a66 = entityKind, _b41) {
    constructor() {
      super(...arguments);
      __publicField(this, "fields", this.config.intervalConfig.fields);
      __publicField(this, "precision", this.config.intervalConfig.precision);
    }
    getSQLType() {
      const fields = this.fields ? ` ${this.fields}` : "";
      const precision = this.precision ? `(${this.precision})` : "";
      return `interval${fields}${precision}`;
    }
  };
  __name(_PgInterval, "PgInterval");
  __publicField(_PgInterval, _a66, "PgInterval");
  var PgInterval = _PgInterval;
  function interval(a, b = {}) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgIntervalBuilder(name, config);
  }
  __name(interval, "interval");

  // node_modules/drizzle-orm/pg-core/columns/json.js
  var _a67, _b42;
  var _PgJsonBuilder = class _PgJsonBuilder extends (_b42 = PgColumnBuilder, _a67 = entityKind, _b42) {
    constructor(name) {
      super(name, "json", "PgJson");
    }
    /** @internal */
    build(table) {
      return new PgJson(table, this.config);
    }
  };
  __name(_PgJsonBuilder, "PgJsonBuilder");
  __publicField(_PgJsonBuilder, _a67, "PgJsonBuilder");
  var PgJsonBuilder = _PgJsonBuilder;
  var _a68, _b43;
  var _PgJson = class _PgJson extends (_b43 = PgColumn, _a68 = entityKind, _b43) {
    constructor(table, config) {
      super(table, config);
    }
    getSQLType() {
      return "json";
    }
    mapToDriverValue(value) {
      return JSON.stringify(value);
    }
    mapFromDriverValue(value) {
      if (typeof value === "string") {
        try {
          return JSON.parse(value);
        } catch (e) {
          return value;
        }
      }
      return value;
    }
  };
  __name(_PgJson, "PgJson");
  __publicField(_PgJson, _a68, "PgJson");
  var PgJson = _PgJson;
  function json(name) {
    return new PgJsonBuilder(name != null ? name : "");
  }
  __name(json, "json");

  // node_modules/drizzle-orm/pg-core/columns/jsonb.js
  var _a69, _b44;
  var _PgJsonbBuilder = class _PgJsonbBuilder extends (_b44 = PgColumnBuilder, _a69 = entityKind, _b44) {
    constructor(name) {
      super(name, "json", "PgJsonb");
    }
    /** @internal */
    build(table) {
      return new PgJsonb(table, this.config);
    }
  };
  __name(_PgJsonbBuilder, "PgJsonbBuilder");
  __publicField(_PgJsonbBuilder, _a69, "PgJsonbBuilder");
  var PgJsonbBuilder = _PgJsonbBuilder;
  var _a70, _b45;
  var _PgJsonb = class _PgJsonb extends (_b45 = PgColumn, _a70 = entityKind, _b45) {
    constructor(table, config) {
      super(table, config);
    }
    getSQLType() {
      return "jsonb";
    }
    mapToDriverValue(value) {
      return JSON.stringify(value);
    }
    mapFromDriverValue(value) {
      if (typeof value === "string") {
        try {
          return JSON.parse(value);
        } catch (e) {
          return value;
        }
      }
      return value;
    }
  };
  __name(_PgJsonb, "PgJsonb");
  __publicField(_PgJsonb, _a70, "PgJsonb");
  var PgJsonb = _PgJsonb;
  function jsonb(name) {
    return new PgJsonbBuilder(name != null ? name : "");
  }
  __name(jsonb, "jsonb");

  // node_modules/drizzle-orm/pg-core/columns/line.js
  var _a71, _b46;
  var _PgLineBuilder = class _PgLineBuilder extends (_b46 = PgColumnBuilder, _a71 = entityKind, _b46) {
    constructor(name) {
      super(name, "array", "PgLine");
    }
    /** @internal */
    build(table) {
      return new PgLineTuple(
        table,
        this.config
      );
    }
  };
  __name(_PgLineBuilder, "PgLineBuilder");
  __publicField(_PgLineBuilder, _a71, "PgLineBuilder");
  var PgLineBuilder = _PgLineBuilder;
  var _a72, _b47;
  var _PgLineTuple = class _PgLineTuple extends (_b47 = PgColumn, _a72 = entityKind, _b47) {
    getSQLType() {
      return "line";
    }
    mapFromDriverValue(value) {
      const [a, b, c] = value.slice(1, -1).split(",");
      return [Number.parseFloat(a), Number.parseFloat(b), Number.parseFloat(c)];
    }
    mapToDriverValue(value) {
      return `{${value[0]},${value[1]},${value[2]}}`;
    }
  };
  __name(_PgLineTuple, "PgLineTuple");
  __publicField(_PgLineTuple, _a72, "PgLine");
  var PgLineTuple = _PgLineTuple;
  var _a73, _b48;
  var _PgLineABCBuilder = class _PgLineABCBuilder extends (_b48 = PgColumnBuilder, _a73 = entityKind, _b48) {
    constructor(name) {
      super(name, "json", "PgLineABC");
    }
    /** @internal */
    build(table) {
      return new PgLineABC(
        table,
        this.config
      );
    }
  };
  __name(_PgLineABCBuilder, "PgLineABCBuilder");
  __publicField(_PgLineABCBuilder, _a73, "PgLineABCBuilder");
  var PgLineABCBuilder = _PgLineABCBuilder;
  var _a74, _b49;
  var _PgLineABC = class _PgLineABC extends (_b49 = PgColumn, _a74 = entityKind, _b49) {
    getSQLType() {
      return "line";
    }
    mapFromDriverValue(value) {
      const [a, b, c] = value.slice(1, -1).split(",");
      return { a: Number.parseFloat(a), b: Number.parseFloat(b), c: Number.parseFloat(c) };
    }
    mapToDriverValue(value) {
      return `{${value.a},${value.b},${value.c}}`;
    }
  };
  __name(_PgLineABC, "PgLineABC");
  __publicField(_PgLineABC, _a74, "PgLineABC");
  var PgLineABC = _PgLineABC;
  function line(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    if (!(config == null ? void 0 : config.mode) || config.mode === "tuple") {
      return new PgLineBuilder(name);
    }
    return new PgLineABCBuilder(name);
  }
  __name(line, "line");

  // node_modules/drizzle-orm/pg-core/columns/macaddr.js
  var _a75, _b50;
  var _PgMacaddrBuilder = class _PgMacaddrBuilder extends (_b50 = PgColumnBuilder, _a75 = entityKind, _b50) {
    constructor(name) {
      super(name, "string", "PgMacaddr");
    }
    /** @internal */
    build(table) {
      return new PgMacaddr(table, this.config);
    }
  };
  __name(_PgMacaddrBuilder, "PgMacaddrBuilder");
  __publicField(_PgMacaddrBuilder, _a75, "PgMacaddrBuilder");
  var PgMacaddrBuilder = _PgMacaddrBuilder;
  var _a76, _b51;
  var _PgMacaddr = class _PgMacaddr extends (_b51 = PgColumn, _a76 = entityKind, _b51) {
    getSQLType() {
      return "macaddr";
    }
  };
  __name(_PgMacaddr, "PgMacaddr");
  __publicField(_PgMacaddr, _a76, "PgMacaddr");
  var PgMacaddr = _PgMacaddr;
  function macaddr(name) {
    return new PgMacaddrBuilder(name != null ? name : "");
  }
  __name(macaddr, "macaddr");

  // node_modules/drizzle-orm/pg-core/columns/macaddr8.js
  var _a77, _b52;
  var _PgMacaddr8Builder = class _PgMacaddr8Builder extends (_b52 = PgColumnBuilder, _a77 = entityKind, _b52) {
    constructor(name) {
      super(name, "string", "PgMacaddr8");
    }
    /** @internal */
    build(table) {
      return new PgMacaddr8(table, this.config);
    }
  };
  __name(_PgMacaddr8Builder, "PgMacaddr8Builder");
  __publicField(_PgMacaddr8Builder, _a77, "PgMacaddr8Builder");
  var PgMacaddr8Builder = _PgMacaddr8Builder;
  var _a78, _b53;
  var _PgMacaddr8 = class _PgMacaddr8 extends (_b53 = PgColumn, _a78 = entityKind, _b53) {
    getSQLType() {
      return "macaddr8";
    }
  };
  __name(_PgMacaddr8, "PgMacaddr8");
  __publicField(_PgMacaddr8, _a78, "PgMacaddr8");
  var PgMacaddr8 = _PgMacaddr8;
  function macaddr8(name) {
    return new PgMacaddr8Builder(name != null ? name : "");
  }
  __name(macaddr8, "macaddr8");

  // node_modules/drizzle-orm/pg-core/columns/numeric.js
  var _a79, _b54;
  var _PgNumericBuilder = class _PgNumericBuilder extends (_b54 = PgColumnBuilder, _a79 = entityKind, _b54) {
    constructor(name, precision, scale) {
      super(name, "string", "PgNumeric");
      this.config.precision = precision;
      this.config.scale = scale;
    }
    /** @internal */
    build(table) {
      return new PgNumeric(table, this.config);
    }
  };
  __name(_PgNumericBuilder, "PgNumericBuilder");
  __publicField(_PgNumericBuilder, _a79, "PgNumericBuilder");
  var PgNumericBuilder = _PgNumericBuilder;
  var _a80, _b55;
  var _PgNumeric = class _PgNumeric extends (_b55 = PgColumn, _a80 = entityKind, _b55) {
    constructor(table, config) {
      super(table, config);
      __publicField(this, "precision");
      __publicField(this, "scale");
      this.precision = config.precision;
      this.scale = config.scale;
    }
    getSQLType() {
      if (this.precision !== void 0 && this.scale !== void 0) {
        return `numeric(${this.precision}, ${this.scale})`;
      } else if (this.precision === void 0) {
        return "numeric";
      } else {
        return `numeric(${this.precision})`;
      }
    }
  };
  __name(_PgNumeric, "PgNumeric");
  __publicField(_PgNumeric, _a80, "PgNumeric");
  var PgNumeric = _PgNumeric;
  function numeric(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgNumericBuilder(name, config == null ? void 0 : config.precision, config == null ? void 0 : config.scale);
  }
  __name(numeric, "numeric");

  // node_modules/drizzle-orm/pg-core/columns/point.js
  var _a81, _b56;
  var _PgPointTupleBuilder = class _PgPointTupleBuilder extends (_b56 = PgColumnBuilder, _a81 = entityKind, _b56) {
    constructor(name) {
      super(name, "array", "PgPointTuple");
    }
    /** @internal */
    build(table) {
      return new PgPointTuple(
        table,
        this.config
      );
    }
  };
  __name(_PgPointTupleBuilder, "PgPointTupleBuilder");
  __publicField(_PgPointTupleBuilder, _a81, "PgPointTupleBuilder");
  var PgPointTupleBuilder = _PgPointTupleBuilder;
  var _a82, _b57;
  var _PgPointTuple = class _PgPointTuple extends (_b57 = PgColumn, _a82 = entityKind, _b57) {
    getSQLType() {
      return "point";
    }
    mapFromDriverValue(value) {
      if (typeof value === "string") {
        const [x, y] = value.slice(1, -1).split(",");
        return [Number.parseFloat(x), Number.parseFloat(y)];
      }
      return [value.x, value.y];
    }
    mapToDriverValue(value) {
      return `(${value[0]},${value[1]})`;
    }
  };
  __name(_PgPointTuple, "PgPointTuple");
  __publicField(_PgPointTuple, _a82, "PgPointTuple");
  var PgPointTuple = _PgPointTuple;
  var _a83, _b58;
  var _PgPointObjectBuilder = class _PgPointObjectBuilder extends (_b58 = PgColumnBuilder, _a83 = entityKind, _b58) {
    constructor(name) {
      super(name, "json", "PgPointObject");
    }
    /** @internal */
    build(table) {
      return new PgPointObject(
        table,
        this.config
      );
    }
  };
  __name(_PgPointObjectBuilder, "PgPointObjectBuilder");
  __publicField(_PgPointObjectBuilder, _a83, "PgPointObjectBuilder");
  var PgPointObjectBuilder = _PgPointObjectBuilder;
  var _a84, _b59;
  var _PgPointObject = class _PgPointObject extends (_b59 = PgColumn, _a84 = entityKind, _b59) {
    getSQLType() {
      return "point";
    }
    mapFromDriverValue(value) {
      if (typeof value === "string") {
        const [x, y] = value.slice(1, -1).split(",");
        return { x: Number.parseFloat(x), y: Number.parseFloat(y) };
      }
      return value;
    }
    mapToDriverValue(value) {
      return `(${value.x},${value.y})`;
    }
  };
  __name(_PgPointObject, "PgPointObject");
  __publicField(_PgPointObject, _a84, "PgPointObject");
  var PgPointObject = _PgPointObject;
  function point(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    if (!(config == null ? void 0 : config.mode) || config.mode === "tuple") {
      return new PgPointTupleBuilder(name);
    }
    return new PgPointObjectBuilder(name);
  }
  __name(point, "point");

  // node_modules/drizzle-orm/pg-core/columns/postgis_extension/utils.js
  function hexToBytes(hex) {
    const bytes = [];
    for (let c = 0; c < hex.length; c += 2) {
      bytes.push(Number.parseInt(hex.slice(c, c + 2), 16));
    }
    return new Uint8Array(bytes);
  }
  __name(hexToBytes, "hexToBytes");
  function bytesToFloat64(bytes, offset4) {
    const buffer = new ArrayBuffer(8);
    const view = new DataView(buffer);
    for (let i2 = 0; i2 < 8; i2++) {
      view.setUint8(i2, bytes[offset4 + i2]);
    }
    return view.getFloat64(0, true);
  }
  __name(bytesToFloat64, "bytesToFloat64");
  function parseEWKB(hex) {
    const bytes = hexToBytes(hex);
    let offset4 = 0;
    const byteOrder = bytes[offset4];
    offset4 += 1;
    const view = new DataView(bytes.buffer);
    const geomType = view.getUint32(offset4, byteOrder === 1);
    offset4 += 4;
    let _srid;
    if (geomType & 536870912) {
      _srid = view.getUint32(offset4, byteOrder === 1);
      offset4 += 4;
    }
    if ((geomType & 65535) === 1) {
      const x = bytesToFloat64(bytes, offset4);
      offset4 += 8;
      const y = bytesToFloat64(bytes, offset4);
      offset4 += 8;
      return [x, y];
    }
    throw new Error("Unsupported geometry type");
  }
  __name(parseEWKB, "parseEWKB");

  // node_modules/drizzle-orm/pg-core/columns/postgis_extension/geometry.js
  var _a85, _b60;
  var _PgGeometryBuilder = class _PgGeometryBuilder extends (_b60 = PgColumnBuilder, _a85 = entityKind, _b60) {
    constructor(name) {
      super(name, "array", "PgGeometry");
    }
    /** @internal */
    build(table) {
      return new PgGeometry(
        table,
        this.config
      );
    }
  };
  __name(_PgGeometryBuilder, "PgGeometryBuilder");
  __publicField(_PgGeometryBuilder, _a85, "PgGeometryBuilder");
  var PgGeometryBuilder = _PgGeometryBuilder;
  var _a86, _b61;
  var _PgGeometry = class _PgGeometry extends (_b61 = PgColumn, _a86 = entityKind, _b61) {
    getSQLType() {
      return "geometry(point)";
    }
    mapFromDriverValue(value) {
      return parseEWKB(value);
    }
    mapToDriverValue(value) {
      return `point(${value[0]} ${value[1]})`;
    }
  };
  __name(_PgGeometry, "PgGeometry");
  __publicField(_PgGeometry, _a86, "PgGeometry");
  var PgGeometry = _PgGeometry;
  var _a87, _b62;
  var _PgGeometryObjectBuilder = class _PgGeometryObjectBuilder extends (_b62 = PgColumnBuilder, _a87 = entityKind, _b62) {
    constructor(name) {
      super(name, "json", "PgGeometryObject");
    }
    /** @internal */
    build(table) {
      return new PgGeometryObject(
        table,
        this.config
      );
    }
  };
  __name(_PgGeometryObjectBuilder, "PgGeometryObjectBuilder");
  __publicField(_PgGeometryObjectBuilder, _a87, "PgGeometryObjectBuilder");
  var PgGeometryObjectBuilder = _PgGeometryObjectBuilder;
  var _a88, _b63;
  var _PgGeometryObject = class _PgGeometryObject extends (_b63 = PgColumn, _a88 = entityKind, _b63) {
    getSQLType() {
      return "geometry(point)";
    }
    mapFromDriverValue(value) {
      const parsed = parseEWKB(value);
      return { x: parsed[0], y: parsed[1] };
    }
    mapToDriverValue(value) {
      return `point(${value.x} ${value.y})`;
    }
  };
  __name(_PgGeometryObject, "PgGeometryObject");
  __publicField(_PgGeometryObject, _a88, "PgGeometryObject");
  var PgGeometryObject = _PgGeometryObject;
  function geometry(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    if (!(config == null ? void 0 : config.mode) || config.mode === "tuple") {
      return new PgGeometryBuilder(name);
    }
    return new PgGeometryObjectBuilder(name);
  }
  __name(geometry, "geometry");

  // node_modules/drizzle-orm/pg-core/columns/real.js
  var _a89, _b64;
  var _PgRealBuilder = class _PgRealBuilder extends (_b64 = PgColumnBuilder, _a89 = entityKind, _b64) {
    constructor(name, length) {
      super(name, "number", "PgReal");
      this.config.length = length;
    }
    /** @internal */
    build(table) {
      return new PgReal(table, this.config);
    }
  };
  __name(_PgRealBuilder, "PgRealBuilder");
  __publicField(_PgRealBuilder, _a89, "PgRealBuilder");
  var PgRealBuilder = _PgRealBuilder;
  var _a90, _b65;
  var _PgReal = class _PgReal extends (_b65 = PgColumn, _a90 = entityKind, _b65) {
    constructor(table, config) {
      super(table, config);
      __publicField(this, "mapFromDriverValue", /* @__PURE__ */ __name((value) => {
        if (typeof value === "string") {
          return Number.parseFloat(value);
        }
        return value;
      }, "mapFromDriverValue"));
    }
    getSQLType() {
      return "real";
    }
  };
  __name(_PgReal, "PgReal");
  __publicField(_PgReal, _a90, "PgReal");
  var PgReal = _PgReal;
  function real(name) {
    return new PgRealBuilder(name != null ? name : "");
  }
  __name(real, "real");

  // node_modules/drizzle-orm/pg-core/columns/serial.js
  var _a91, _b66;
  var _PgSerialBuilder = class _PgSerialBuilder extends (_b66 = PgColumnBuilder, _a91 = entityKind, _b66) {
    constructor(name) {
      super(name, "number", "PgSerial");
      this.config.hasDefault = true;
      this.config.notNull = true;
    }
    /** @internal */
    build(table) {
      return new PgSerial(table, this.config);
    }
  };
  __name(_PgSerialBuilder, "PgSerialBuilder");
  __publicField(_PgSerialBuilder, _a91, "PgSerialBuilder");
  var PgSerialBuilder = _PgSerialBuilder;
  var _a92, _b67;
  var _PgSerial = class _PgSerial extends (_b67 = PgColumn, _a92 = entityKind, _b67) {
    getSQLType() {
      return "serial";
    }
  };
  __name(_PgSerial, "PgSerial");
  __publicField(_PgSerial, _a92, "PgSerial");
  var PgSerial = _PgSerial;
  function serial(name) {
    return new PgSerialBuilder(name != null ? name : "");
  }
  __name(serial, "serial");

  // node_modules/drizzle-orm/pg-core/columns/smallint.js
  var _a93, _b68;
  var _PgSmallIntBuilder = class _PgSmallIntBuilder extends (_b68 = PgIntColumnBaseBuilder, _a93 = entityKind, _b68) {
    constructor(name) {
      super(name, "number", "PgSmallInt");
    }
    /** @internal */
    build(table) {
      return new PgSmallInt(table, this.config);
    }
  };
  __name(_PgSmallIntBuilder, "PgSmallIntBuilder");
  __publicField(_PgSmallIntBuilder, _a93, "PgSmallIntBuilder");
  var PgSmallIntBuilder = _PgSmallIntBuilder;
  var _a94, _b69;
  var _PgSmallInt = class _PgSmallInt extends (_b69 = PgColumn, _a94 = entityKind, _b69) {
    constructor() {
      super(...arguments);
      __publicField(this, "mapFromDriverValue", /* @__PURE__ */ __name((value) => {
        if (typeof value === "string") {
          return Number(value);
        }
        return value;
      }, "mapFromDriverValue"));
    }
    getSQLType() {
      return "smallint";
    }
  };
  __name(_PgSmallInt, "PgSmallInt");
  __publicField(_PgSmallInt, _a94, "PgSmallInt");
  var PgSmallInt = _PgSmallInt;
  function smallint(name) {
    return new PgSmallIntBuilder(name != null ? name : "");
  }
  __name(smallint, "smallint");

  // node_modules/drizzle-orm/pg-core/columns/smallserial.js
  var _a95, _b70;
  var _PgSmallSerialBuilder = class _PgSmallSerialBuilder extends (_b70 = PgColumnBuilder, _a95 = entityKind, _b70) {
    constructor(name) {
      super(name, "number", "PgSmallSerial");
      this.config.hasDefault = true;
      this.config.notNull = true;
    }
    /** @internal */
    build(table) {
      return new PgSmallSerial(
        table,
        this.config
      );
    }
  };
  __name(_PgSmallSerialBuilder, "PgSmallSerialBuilder");
  __publicField(_PgSmallSerialBuilder, _a95, "PgSmallSerialBuilder");
  var PgSmallSerialBuilder = _PgSmallSerialBuilder;
  var _a96, _b71;
  var _PgSmallSerial = class _PgSmallSerial extends (_b71 = PgColumn, _a96 = entityKind, _b71) {
    getSQLType() {
      return "smallserial";
    }
  };
  __name(_PgSmallSerial, "PgSmallSerial");
  __publicField(_PgSmallSerial, _a96, "PgSmallSerial");
  var PgSmallSerial = _PgSmallSerial;
  function smallserial(name) {
    return new PgSmallSerialBuilder(name != null ? name : "");
  }
  __name(smallserial, "smallserial");

  // node_modules/drizzle-orm/pg-core/columns/text.js
  var _a97, _b72;
  var _PgTextBuilder = class _PgTextBuilder extends (_b72 = PgColumnBuilder, _a97 = entityKind, _b72) {
    constructor(name, config) {
      super(name, "string", "PgText");
      this.config.enumValues = config.enum;
    }
    /** @internal */
    build(table) {
      return new PgText(table, this.config);
    }
  };
  __name(_PgTextBuilder, "PgTextBuilder");
  __publicField(_PgTextBuilder, _a97, "PgTextBuilder");
  var PgTextBuilder = _PgTextBuilder;
  var _a98, _b73;
  var _PgText = class _PgText extends (_b73 = PgColumn, _a98 = entityKind, _b73) {
    constructor() {
      super(...arguments);
      __publicField(this, "enumValues", this.config.enumValues);
    }
    getSQLType() {
      return "text";
    }
  };
  __name(_PgText, "PgText");
  __publicField(_PgText, _a98, "PgText");
  var PgText = _PgText;
  function text(a, b = {}) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgTextBuilder(name, config);
  }
  __name(text, "text");

  // node_modules/drizzle-orm/pg-core/columns/time.js
  var _a99, _b74;
  var _PgTimeBuilder = class _PgTimeBuilder extends (_b74 = PgDateColumnBaseBuilder, _a99 = entityKind, _b74) {
    constructor(name, withTimezone, precision) {
      super(name, "string", "PgTime");
      this.withTimezone = withTimezone;
      this.precision = precision;
      this.config.withTimezone = withTimezone;
      this.config.precision = precision;
    }
    /** @internal */
    build(table) {
      return new PgTime(table, this.config);
    }
  };
  __name(_PgTimeBuilder, "PgTimeBuilder");
  __publicField(_PgTimeBuilder, _a99, "PgTimeBuilder");
  var PgTimeBuilder = _PgTimeBuilder;
  var _a100, _b75;
  var _PgTime = class _PgTime extends (_b75 = PgColumn, _a100 = entityKind, _b75) {
    constructor(table, config) {
      super(table, config);
      __publicField(this, "withTimezone");
      __publicField(this, "precision");
      this.withTimezone = config.withTimezone;
      this.precision = config.precision;
    }
    getSQLType() {
      const precision = this.precision === void 0 ? "" : `(${this.precision})`;
      return `time${precision}${this.withTimezone ? " with time zone" : ""}`;
    }
  };
  __name(_PgTime, "PgTime");
  __publicField(_PgTime, _a100, "PgTime");
  var PgTime = _PgTime;
  function time(a, b = {}) {
    var _a121;
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgTimeBuilder(name, (_a121 = config.withTimezone) != null ? _a121 : false, config.precision);
  }
  __name(time, "time");

  // node_modules/drizzle-orm/pg-core/columns/timestamp.js
  var _a101, _b76;
  var _PgTimestampBuilder = class _PgTimestampBuilder extends (_b76 = PgDateColumnBaseBuilder, _a101 = entityKind, _b76) {
    constructor(name, withTimezone, precision) {
      super(name, "date", "PgTimestamp");
      this.config.withTimezone = withTimezone;
      this.config.precision = precision;
    }
    /** @internal */
    build(table) {
      return new PgTimestamp(table, this.config);
    }
  };
  __name(_PgTimestampBuilder, "PgTimestampBuilder");
  __publicField(_PgTimestampBuilder, _a101, "PgTimestampBuilder");
  var PgTimestampBuilder = _PgTimestampBuilder;
  var _a102, _b77;
  var _PgTimestamp = class _PgTimestamp extends (_b77 = PgColumn, _a102 = entityKind, _b77) {
    constructor(table, config) {
      super(table, config);
      __publicField(this, "withTimezone");
      __publicField(this, "precision");
      __publicField(this, "mapFromDriverValue", /* @__PURE__ */ __name((value) => {
        return new Date(this.withTimezone ? value : value + "+0000");
      }, "mapFromDriverValue"));
      __publicField(this, "mapToDriverValue", /* @__PURE__ */ __name((value) => {
        return value.toISOString();
      }, "mapToDriverValue"));
      this.withTimezone = config.withTimezone;
      this.precision = config.precision;
    }
    getSQLType() {
      const precision = this.precision === void 0 ? "" : ` (${this.precision})`;
      return `timestamp${precision}${this.withTimezone ? " with time zone" : ""}`;
    }
  };
  __name(_PgTimestamp, "PgTimestamp");
  __publicField(_PgTimestamp, _a102, "PgTimestamp");
  var PgTimestamp = _PgTimestamp;
  var _a103, _b78;
  var _PgTimestampStringBuilder = class _PgTimestampStringBuilder extends (_b78 = PgDateColumnBaseBuilder, _a103 = entityKind, _b78) {
    constructor(name, withTimezone, precision) {
      super(name, "string", "PgTimestampString");
      this.config.withTimezone = withTimezone;
      this.config.precision = precision;
    }
    /** @internal */
    build(table) {
      return new PgTimestampString(
        table,
        this.config
      );
    }
  };
  __name(_PgTimestampStringBuilder, "PgTimestampStringBuilder");
  __publicField(_PgTimestampStringBuilder, _a103, "PgTimestampStringBuilder");
  var PgTimestampStringBuilder = _PgTimestampStringBuilder;
  var _a104, _b79;
  var _PgTimestampString = class _PgTimestampString extends (_b79 = PgColumn, _a104 = entityKind, _b79) {
    constructor(table, config) {
      super(table, config);
      __publicField(this, "withTimezone");
      __publicField(this, "precision");
      this.withTimezone = config.withTimezone;
      this.precision = config.precision;
    }
    getSQLType() {
      const precision = this.precision === void 0 ? "" : `(${this.precision})`;
      return `timestamp${precision}${this.withTimezone ? " with time zone" : ""}`;
    }
  };
  __name(_PgTimestampString, "PgTimestampString");
  __publicField(_PgTimestampString, _a104, "PgTimestampString");
  var PgTimestampString = _PgTimestampString;
  function timestamp(a, b = {}) {
    var _a121, _b93;
    const { name, config } = getColumnNameAndConfig(a, b);
    if ((config == null ? void 0 : config.mode) === "string") {
      return new PgTimestampStringBuilder(name, (_a121 = config.withTimezone) != null ? _a121 : false, config.precision);
    }
    return new PgTimestampBuilder(name, (_b93 = config == null ? void 0 : config.withTimezone) != null ? _b93 : false, config == null ? void 0 : config.precision);
  }
  __name(timestamp, "timestamp");

  // node_modules/drizzle-orm/pg-core/columns/uuid.js
  var _a105, _b80;
  var _PgUUIDBuilder = class _PgUUIDBuilder extends (_b80 = PgColumnBuilder, _a105 = entityKind, _b80) {
    constructor(name) {
      super(name, "string", "PgUUID");
    }
    /**
     * Adds `default gen_random_uuid()` to the column definition.
     */
    defaultRandom() {
      return this.default(sql`gen_random_uuid()`);
    }
    /** @internal */
    build(table) {
      return new PgUUID(table, this.config);
    }
  };
  __name(_PgUUIDBuilder, "PgUUIDBuilder");
  __publicField(_PgUUIDBuilder, _a105, "PgUUIDBuilder");
  var PgUUIDBuilder = _PgUUIDBuilder;
  var _a106, _b81;
  var _PgUUID = class _PgUUID extends (_b81 = PgColumn, _a106 = entityKind, _b81) {
    getSQLType() {
      return "uuid";
    }
  };
  __name(_PgUUID, "PgUUID");
  __publicField(_PgUUID, _a106, "PgUUID");
  var PgUUID = _PgUUID;
  function uuid(name) {
    return new PgUUIDBuilder(name != null ? name : "");
  }
  __name(uuid, "uuid");

  // node_modules/drizzle-orm/pg-core/columns/varchar.js
  var _a107, _b82;
  var _PgVarcharBuilder = class _PgVarcharBuilder extends (_b82 = PgColumnBuilder, _a107 = entityKind, _b82) {
    constructor(name, config) {
      super(name, "string", "PgVarchar");
      this.config.length = config.length;
      this.config.enumValues = config.enum;
    }
    /** @internal */
    build(table) {
      return new PgVarchar(
        table,
        this.config
      );
    }
  };
  __name(_PgVarcharBuilder, "PgVarcharBuilder");
  __publicField(_PgVarcharBuilder, _a107, "PgVarcharBuilder");
  var PgVarcharBuilder = _PgVarcharBuilder;
  var _a108, _b83;
  var _PgVarchar = class _PgVarchar extends (_b83 = PgColumn, _a108 = entityKind, _b83) {
    constructor() {
      super(...arguments);
      __publicField(this, "length", this.config.length);
      __publicField(this, "enumValues", this.config.enumValues);
    }
    getSQLType() {
      return this.length === void 0 ? `varchar` : `varchar(${this.length})`;
    }
  };
  __name(_PgVarchar, "PgVarchar");
  __publicField(_PgVarchar, _a108, "PgVarchar");
  var PgVarchar = _PgVarchar;
  function varchar(a, b = {}) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgVarcharBuilder(name, config);
  }
  __name(varchar, "varchar");

  // node_modules/drizzle-orm/pg-core/columns/vector_extension/bit.js
  var _a109, _b84;
  var _PgBinaryVectorBuilder = class _PgBinaryVectorBuilder extends (_b84 = PgColumnBuilder, _a109 = entityKind, _b84) {
    constructor(name, config) {
      super(name, "string", "PgBinaryVector");
      this.config.dimensions = config.dimensions;
    }
    /** @internal */
    build(table) {
      return new PgBinaryVector(
        table,
        this.config
      );
    }
  };
  __name(_PgBinaryVectorBuilder, "PgBinaryVectorBuilder");
  __publicField(_PgBinaryVectorBuilder, _a109, "PgBinaryVectorBuilder");
  var PgBinaryVectorBuilder = _PgBinaryVectorBuilder;
  var _a110, _b85;
  var _PgBinaryVector = class _PgBinaryVector extends (_b85 = PgColumn, _a110 = entityKind, _b85) {
    constructor() {
      super(...arguments);
      __publicField(this, "dimensions", this.config.dimensions);
    }
    getSQLType() {
      return `bit(${this.dimensions})`;
    }
  };
  __name(_PgBinaryVector, "PgBinaryVector");
  __publicField(_PgBinaryVector, _a110, "PgBinaryVector");
  var PgBinaryVector = _PgBinaryVector;
  function bit(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgBinaryVectorBuilder(name, config);
  }
  __name(bit, "bit");

  // node_modules/drizzle-orm/pg-core/columns/vector_extension/halfvec.js
  var _a111, _b86;
  var _PgHalfVectorBuilder = class _PgHalfVectorBuilder extends (_b86 = PgColumnBuilder, _a111 = entityKind, _b86) {
    constructor(name, config) {
      super(name, "array", "PgHalfVector");
      this.config.dimensions = config.dimensions;
    }
    /** @internal */
    build(table) {
      return new PgHalfVector(
        table,
        this.config
      );
    }
  };
  __name(_PgHalfVectorBuilder, "PgHalfVectorBuilder");
  __publicField(_PgHalfVectorBuilder, _a111, "PgHalfVectorBuilder");
  var PgHalfVectorBuilder = _PgHalfVectorBuilder;
  var _a112, _b87;
  var _PgHalfVector = class _PgHalfVector extends (_b87 = PgColumn, _a112 = entityKind, _b87) {
    constructor() {
      super(...arguments);
      __publicField(this, "dimensions", this.config.dimensions);
    }
    getSQLType() {
      return `halfvec(${this.dimensions})`;
    }
    mapToDriverValue(value) {
      return JSON.stringify(value);
    }
    mapFromDriverValue(value) {
      return value.slice(1, -1).split(",").map((v) => Number.parseFloat(v));
    }
  };
  __name(_PgHalfVector, "PgHalfVector");
  __publicField(_PgHalfVector, _a112, "PgHalfVector");
  var PgHalfVector = _PgHalfVector;
  function halfvec(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgHalfVectorBuilder(name, config);
  }
  __name(halfvec, "halfvec");

  // node_modules/drizzle-orm/pg-core/columns/vector_extension/sparsevec.js
  var _a113, _b88;
  var _PgSparseVectorBuilder = class _PgSparseVectorBuilder extends (_b88 = PgColumnBuilder, _a113 = entityKind, _b88) {
    constructor(name, config) {
      super(name, "string", "PgSparseVector");
      this.config.dimensions = config.dimensions;
    }
    /** @internal */
    build(table) {
      return new PgSparseVector(
        table,
        this.config
      );
    }
  };
  __name(_PgSparseVectorBuilder, "PgSparseVectorBuilder");
  __publicField(_PgSparseVectorBuilder, _a113, "PgSparseVectorBuilder");
  var PgSparseVectorBuilder = _PgSparseVectorBuilder;
  var _a114, _b89;
  var _PgSparseVector = class _PgSparseVector extends (_b89 = PgColumn, _a114 = entityKind, _b89) {
    constructor() {
      super(...arguments);
      __publicField(this, "dimensions", this.config.dimensions);
    }
    getSQLType() {
      return `sparsevec(${this.dimensions})`;
    }
  };
  __name(_PgSparseVector, "PgSparseVector");
  __publicField(_PgSparseVector, _a114, "PgSparseVector");
  var PgSparseVector = _PgSparseVector;
  function sparsevec(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgSparseVectorBuilder(name, config);
  }
  __name(sparsevec, "sparsevec");

  // node_modules/drizzle-orm/pg-core/columns/vector_extension/vector.js
  var _a115, _b90;
  var _PgVectorBuilder = class _PgVectorBuilder extends (_b90 = PgColumnBuilder, _a115 = entityKind, _b90) {
    constructor(name, config) {
      super(name, "array", "PgVector");
      this.config.dimensions = config.dimensions;
    }
    /** @internal */
    build(table) {
      return new PgVector(
        table,
        this.config
      );
    }
  };
  __name(_PgVectorBuilder, "PgVectorBuilder");
  __publicField(_PgVectorBuilder, _a115, "PgVectorBuilder");
  var PgVectorBuilder = _PgVectorBuilder;
  var _a116, _b91;
  var _PgVector = class _PgVector extends (_b91 = PgColumn, _a116 = entityKind, _b91) {
    constructor() {
      super(...arguments);
      __publicField(this, "dimensions", this.config.dimensions);
    }
    getSQLType() {
      return `vector(${this.dimensions})`;
    }
    mapToDriverValue(value) {
      return JSON.stringify(value);
    }
    mapFromDriverValue(value) {
      return value.slice(1, -1).split(",").map((v) => Number.parseFloat(v));
    }
  };
  __name(_PgVector, "PgVector");
  __publicField(_PgVector, _a116, "PgVector");
  var PgVector = _PgVector;
  function vector(a, b) {
    const { name, config } = getColumnNameAndConfig(a, b);
    return new PgVectorBuilder(name, config);
  }
  __name(vector, "vector");

  // node_modules/drizzle-orm/pg-core/columns/all.js
  function getPgColumnBuilders() {
    return {
      bigint,
      bigserial,
      boolean,
      char,
      cidr,
      customType,
      date,
      doublePrecision,
      inet,
      integer,
      interval,
      json,
      jsonb,
      line,
      macaddr,
      macaddr8,
      numeric,
      point,
      geometry,
      real,
      serial,
      smallint,
      smallserial,
      text,
      time,
      timestamp,
      uuid,
      varchar,
      bit,
      halfvec,
      sparsevec,
      vector
    };
  }
  __name(getPgColumnBuilders, "getPgColumnBuilders");

  // node_modules/drizzle-orm/pg-core/table.js
  var InlineForeignKeys = Symbol.for("drizzle:PgInlineForeignKeys");
  var EnableRLS = Symbol.for("drizzle:EnableRLS");
  var _a117, _b92, _c4, _d3, _e3;
  var _PgTable = class _PgTable extends (_e3 = Table2, _d3 = entityKind, _c4 = InlineForeignKeys, _b92 = EnableRLS, _a117 = Table2.Symbol.ExtraConfigBuilder, _e3) {
    constructor() {
      super(...arguments);
      /**@internal */
      __publicField(this, _c4, []);
      /** @internal */
      __publicField(this, _b92, false);
      /** @internal */
      __publicField(this, _a117);
    }
  };
  __name(_PgTable, "PgTable");
  __publicField(_PgTable, _d3, "PgTable");
  /** @internal */
  __publicField(_PgTable, "Symbol", Object.assign({}, Table2.Symbol, {
    InlineForeignKeys,
    EnableRLS
  }));
  var PgTable = _PgTable;
  function pgTableWithSchema(name, columns, extraConfig, schema, baseName = name) {
    const rawTable = new PgTable(name, schema, baseName);
    const parsedColumns = typeof columns === "function" ? columns(getPgColumnBuilders()) : columns;
    const builtColumns = Object.fromEntries(
      Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {
        const colBuilder = colBuilderBase;
        colBuilder.setName(name2);
        const column = colBuilder.build(rawTable);
        rawTable[InlineForeignKeys].push(...colBuilder.buildForeignKeys(column, rawTable));
        return [name2, column];
      })
    );
    const builtColumnsForExtraConfig = Object.fromEntries(
      Object.entries(parsedColumns).map(([name2, colBuilderBase]) => {
        const colBuilder = colBuilderBase;
        colBuilder.setName(name2);
        const column = colBuilder.buildExtraConfigColumn(rawTable);
        return [name2, column];
      })
    );
    const table = Object.assign(rawTable, builtColumns);
    table[Table2.Symbol.Columns] = builtColumns;
    table[Table2.Symbol.ExtraConfigColumns] = builtColumnsForExtraConfig;
    if (extraConfig) {
      table[PgTable.Symbol.ExtraConfigBuilder] = extraConfig;
    }
    return Object.assign(table, {
      enableRLS: /* @__PURE__ */ __name(() => {
        table[PgTable.Symbol.EnableRLS] = true;
        return table;
      }, "enableRLS")
    });
  }
  __name(pgTableWithSchema, "pgTableWithSchema");
  var pgTable = /* @__PURE__ */ __name((name, columns, extraConfig) => {
    return pgTableWithSchema(name, columns, extraConfig, void 0);
  }, "pgTable");

  // node_modules/drizzle-orm/pg-core/indexes.js
  var _a118;
  _a118 = entityKind;
  var _IndexBuilderOn = class _IndexBuilderOn {
    constructor(unique, name) {
      this.unique = unique;
      this.name = name;
    }
    on(...columns) {
      return new IndexBuilder(
        columns.map((it) => {
          if (is(it, SQL)) {
            return it;
          }
          it = it;
          const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);
          it.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));
          return clonedIndexedColumn;
        }),
        this.unique,
        false,
        this.name
      );
    }
    onOnly(...columns) {
      return new IndexBuilder(
        columns.map((it) => {
          if (is(it, SQL)) {
            return it;
          }
          it = it;
          const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);
          it.indexConfig = it.defaultConfig;
          return clonedIndexedColumn;
        }),
        this.unique,
        true,
        this.name
      );
    }
    /**
     * Specify what index method to use. Choices are `btree`, `hash`, `gist`, `spgist`, `gin`, `brin`, or user-installed access methods like `bloom`. The default method is `btree.
     *
     * If you have the `pg_vector` extension installed in your database, you can use the `hnsw` and `ivfflat` options, which are predefined types.
     *
     * **You can always specify any string you want in the method, in case Drizzle doesn't have it natively in its types**
     *
     * @param method The name of the index method to be used
     * @param columns
     * @returns
     */
    using(method, ...columns) {
      return new IndexBuilder(
        columns.map((it) => {
          if (is(it, SQL)) {
            return it;
          }
          it = it;
          const clonedIndexedColumn = new IndexedColumn(it.name, !!it.keyAsName, it.columnType, it.indexConfig);
          it.indexConfig = JSON.parse(JSON.stringify(it.defaultConfig));
          return clonedIndexedColumn;
        }),
        this.unique,
        true,
        this.name,
        method
      );
    }
  };
  __name(_IndexBuilderOn, "IndexBuilderOn");
  __publicField(_IndexBuilderOn, _a118, "PgIndexBuilderOn");
  var IndexBuilderOn = _IndexBuilderOn;
  var _a119;
  _a119 = entityKind;
  var _IndexBuilder = class _IndexBuilder {
    constructor(columns, unique, only, name, method = "btree") {
      /** @internal */
      __publicField(this, "config");
      this.config = {
        name,
        columns,
        unique,
        only,
        method
      };
    }
    concurrently() {
      this.config.concurrently = true;
      return this;
    }
    with(obj) {
      this.config.with = obj;
      return this;
    }
    where(condition) {
      this.config.where = condition;
      return this;
    }
    /** @internal */
    build(table) {
      return new Index(this.config, table);
    }
  };
  __name(_IndexBuilder, "IndexBuilder");
  __publicField(_IndexBuilder, _a119, "PgIndexBuilder");
  var IndexBuilder = _IndexBuilder;
  var _a120;
  _a120 = entityKind;
  var _Index = class _Index {
    constructor(config, table) {
      __publicField(this, "config");
      this.config = __spreadProps(__spreadValues({}, config), { table });
    }
  };
  __name(_Index, "Index");
  __publicField(_Index, _a120, "PgIndex");
  var Index = _Index;
  function index2(name) {
    return new IndexBuilderOn(false, name);
  }
  __name(index2, "index");

  // node_modules/zod/lib/index.mjs
  var util;
  (function(util2) {
    util2.assertEqual = (val) => val;
    function assertIs(_arg) {
    }
    __name(assertIs, "assertIs");
    util2.assertIs = assertIs;
    function assertNever(_x) {
      throw new Error();
    }
    __name(assertNever, "assertNever");
    util2.assertNever = assertNever;
    util2.arrayToEnum = (items) => {
      const obj = {};
      for (const item of items) {
        obj[item] = item;
      }
      return obj;
    };
    util2.getValidEnumValues = (obj) => {
      const validKeys = util2.objectKeys(obj).filter((k3) => typeof obj[obj[k3]] !== "number");
      const filtered = {};
      for (const k3 of validKeys) {
        filtered[k3] = obj[k3];
      }
      return util2.objectValues(filtered);
    };
    util2.objectValues = (obj) => {
      return util2.objectKeys(obj).map(function(e) {
        return obj[e];
      });
    };
    util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
      const keys = [];
      for (const key in object) {
        if (Object.prototype.hasOwnProperty.call(object, key)) {
          keys.push(key);
        }
      }
      return keys;
    };
    util2.find = (arr, checker) => {
      for (const item of arr) {
        if (checker(item))
          return item;
      }
      return void 0;
    };
    util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
    function joinValues(array, separator = " | ") {
      return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
    }
    __name(joinValues, "joinValues");
    util2.joinValues = joinValues;
    util2.jsonStringifyReplacer = (_, value) => {
      if (typeof value === "bigint") {
        return value.toString();
      }
      return value;
    };
  })(util || (util = {}));
  var objectUtil;
  (function(objectUtil2) {
    objectUtil2.mergeShapes = (first, second) => {
      return __spreadValues(__spreadValues({}, first), second);
    };
  })(objectUtil || (objectUtil = {}));
  var ZodParsedType = util.arrayToEnum([
    "string",
    "nan",
    "number",
    "integer",
    "float",
    "boolean",
    "date",
    "bigint",
    "symbol",
    "function",
    "undefined",
    "null",
    "array",
    "object",
    "unknown",
    "promise",
    "void",
    "never",
    "map",
    "set"
  ]);
  var getParsedType = /* @__PURE__ */ __name((data) => {
    const t3 = typeof data;
    switch (t3) {
      case "undefined":
        return ZodParsedType.undefined;
      case "string":
        return ZodParsedType.string;
      case "number":
        return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
      case "boolean":
        return ZodParsedType.boolean;
      case "function":
        return ZodParsedType.function;
      case "bigint":
        return ZodParsedType.bigint;
      case "symbol":
        return ZodParsedType.symbol;
      case "object":
        if (Array.isArray(data)) {
          return ZodParsedType.array;
        }
        if (data === null) {
          return ZodParsedType.null;
        }
        if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
          return ZodParsedType.promise;
        }
        if (typeof Map !== "undefined" && data instanceof Map) {
          return ZodParsedType.map;
        }
        if (typeof Set !== "undefined" && data instanceof Set) {
          return ZodParsedType.set;
        }
        if (typeof Date !== "undefined" && data instanceof Date) {
          return ZodParsedType.date;
        }
        return ZodParsedType.object;
      default:
        return ZodParsedType.unknown;
    }
  }, "getParsedType");
  var ZodIssueCode = util.arrayToEnum([
    "invalid_type",
    "invalid_literal",
    "custom",
    "invalid_union",
    "invalid_union_discriminator",
    "invalid_enum_value",
    "unrecognized_keys",
    "invalid_arguments",
    "invalid_return_type",
    "invalid_date",
    "invalid_string",
    "too_small",
    "too_big",
    "invalid_intersection_types",
    "not_multiple_of",
    "not_finite"
  ]);
  var quotelessJson = /* @__PURE__ */ __name((obj) => {
    const json2 = JSON.stringify(obj, null, 2);
    return json2.replace(/"([^"]+)":/g, "$1:");
  }, "quotelessJson");
  var _ZodError = class _ZodError extends Error {
    get errors() {
      return this.issues;
    }
    constructor(issues) {
      super();
      this.issues = [];
      this.addIssue = (sub) => {
        this.issues = [...this.issues, sub];
      };
      this.addIssues = (subs = []) => {
        this.issues = [...this.issues, ...subs];
      };
      const actualProto = new.target.prototype;
      if (Object.setPrototypeOf) {
        Object.setPrototypeOf(this, actualProto);
      } else {
        this.__proto__ = actualProto;
      }
      this.name = "ZodError";
      this.issues = issues;
    }
    format(_mapper) {
      const mapper = _mapper || function(issue) {
        return issue.message;
      };
      const fieldErrors = { _errors: [] };
      const processError = /* @__PURE__ */ __name((error) => {
        for (const issue of error.issues) {
          if (issue.code === "invalid_union") {
            issue.unionErrors.map(processError);
          } else if (issue.code === "invalid_return_type") {
            processError(issue.returnTypeError);
          } else if (issue.code === "invalid_arguments") {
            processError(issue.argumentsError);
          } else if (issue.path.length === 0) {
            fieldErrors._errors.push(mapper(issue));
          } else {
            let curr = fieldErrors;
            let i2 = 0;
            while (i2 < issue.path.length) {
              const el = issue.path[i2];
              const terminal = i2 === issue.path.length - 1;
              if (!terminal) {
                curr[el] = curr[el] || { _errors: [] };
              } else {
                curr[el] = curr[el] || { _errors: [] };
                curr[el]._errors.push(mapper(issue));
              }
              curr = curr[el];
              i2++;
            }
          }
        }
      }, "processError");
      processError(this);
      return fieldErrors;
    }
    static assert(value) {
      if (!(value instanceof _ZodError)) {
        throw new Error(`Not a ZodError: ${value}`);
      }
    }
    toString() {
      return this.message;
    }
    get message() {
      return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
    }
    get isEmpty() {
      return this.issues.length === 0;
    }
    flatten(mapper = (issue) => issue.message) {
      const fieldErrors = {};
      const formErrors = [];
      for (const sub of this.issues) {
        if (sub.path.length > 0) {
          fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
          fieldErrors[sub.path[0]].push(mapper(sub));
        } else {
          formErrors.push(mapper(sub));
        }
      }
      return { formErrors, fieldErrors };
    }
    get formErrors() {
      return this.flatten();
    }
  };
  __name(_ZodError, "ZodError");
  var ZodError = _ZodError;
  ZodError.create = (issues) => {
    const error = new ZodError(issues);
    return error;
  };
  var errorMap = /* @__PURE__ */ __name((issue, _ctx) => {
    let message2;
    switch (issue.code) {
      case ZodIssueCode.invalid_type:
        if (issue.received === ZodParsedType.undefined) {
          message2 = "Required";
        } else {
          message2 = `Expected ${issue.expected}, received ${issue.received}`;
        }
        break;
      case ZodIssueCode.invalid_literal:
        message2 = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
        break;
      case ZodIssueCode.unrecognized_keys:
        message2 = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
        break;
      case ZodIssueCode.invalid_union:
        message2 = `Invalid input`;
        break;
      case ZodIssueCode.invalid_union_discriminator:
        message2 = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
        break;
      case ZodIssueCode.invalid_enum_value:
        message2 = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
        break;
      case ZodIssueCode.invalid_arguments:
        message2 = `Invalid function arguments`;
        break;
      case ZodIssueCode.invalid_return_type:
        message2 = `Invalid function return type`;
        break;
      case ZodIssueCode.invalid_date:
        message2 = `Invalid date`;
        break;
      case ZodIssueCode.invalid_string:
        if (typeof issue.validation === "object") {
          if ("includes" in issue.validation) {
            message2 = `Invalid input: must include "${issue.validation.includes}"`;
            if (typeof issue.validation.position === "number") {
              message2 = `${message2} at one or more positions greater than or equal to ${issue.validation.position}`;
            }
          } else if ("startsWith" in issue.validation) {
            message2 = `Invalid input: must start with "${issue.validation.startsWith}"`;
          } else if ("endsWith" in issue.validation) {
            message2 = `Invalid input: must end with "${issue.validation.endsWith}"`;
          } else {
            util.assertNever(issue.validation);
          }
        } else if (issue.validation !== "regex") {
          message2 = `Invalid ${issue.validation}`;
        } else {
          message2 = "Invalid";
        }
        break;
      case ZodIssueCode.too_small:
        if (issue.type === "array")
          message2 = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
        else if (issue.type === "string")
          message2 = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
        else if (issue.type === "number")
          message2 = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
        else if (issue.type === "date")
          message2 = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
        else
          message2 = "Invalid input";
        break;
      case ZodIssueCode.too_big:
        if (issue.type === "array")
          message2 = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
        else if (issue.type === "string")
          message2 = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
        else if (issue.type === "number")
          message2 = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "bigint")
          message2 = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
        else if (issue.type === "date")
          message2 = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
        else
          message2 = "Invalid input";
        break;
      case ZodIssueCode.custom:
        message2 = `Invalid input`;
        break;
      case ZodIssueCode.invalid_intersection_types:
        message2 = `Intersection results could not be merged`;
        break;
      case ZodIssueCode.not_multiple_of:
        message2 = `Number must be a multiple of ${issue.multipleOf}`;
        break;
      case ZodIssueCode.not_finite:
        message2 = "Number must be finite";
        break;
      default:
        message2 = _ctx.defaultError;
        util.assertNever(issue);
    }
    return { message: message2 };
  }, "errorMap");
  var overrideErrorMap = errorMap;
  function setErrorMap(map) {
    overrideErrorMap = map;
  }
  __name(setErrorMap, "setErrorMap");
  function getErrorMap() {
    return overrideErrorMap;
  }
  __name(getErrorMap, "getErrorMap");
  var makeIssue = /* @__PURE__ */ __name((params) => {
    const { data, path, errorMaps, issueData } = params;
    const fullPath = [...path, ...issueData.path || []];
    const fullIssue = __spreadProps(__spreadValues({}, issueData), {
      path: fullPath
    });
    if (issueData.message !== void 0) {
      return __spreadProps(__spreadValues({}, issueData), {
        path: fullPath,
        message: issueData.message
      });
    }
    let errorMessage = "";
    const maps = errorMaps.filter((m2) => !!m2).slice().reverse();
    for (const map of maps) {
      errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
    }
    return __spreadProps(__spreadValues({}, issueData), {
      path: fullPath,
      message: errorMessage
    });
  }, "makeIssue");
  var EMPTY_PATH = [];
  function addIssueToContext(ctx, issueData) {
    const overrideMap = getErrorMap();
    const issue = makeIssue({
      issueData,
      data: ctx.data,
      path: ctx.path,
      errorMaps: [
        ctx.common.contextualErrorMap,
        // contextual error map is first priority
        ctx.schemaErrorMap,
        // then schema-bound map if available
        overrideMap,
        // then global override map
        overrideMap === errorMap ? void 0 : errorMap
        // then global default map
      ].filter((x) => !!x)
    });
    ctx.common.issues.push(issue);
  }
  __name(addIssueToContext, "addIssueToContext");
  var _ParseStatus = class _ParseStatus {
    constructor() {
      this.value = "valid";
    }
    dirty() {
      if (this.value === "valid")
        this.value = "dirty";
    }
    abort() {
      if (this.value !== "aborted")
        this.value = "aborted";
    }
    static mergeArray(status, results) {
      const arrayValue = [];
      for (const s2 of results) {
        if (s2.status === "aborted")
          return INVALID;
        if (s2.status === "dirty")
          status.dirty();
        arrayValue.push(s2.value);
      }
      return { status: status.value, value: arrayValue };
    }
    static async mergeObjectAsync(status, pairs) {
      const syncPairs = [];
      for (const pair of pairs) {
        const key = await pair.key;
        const value = await pair.value;
        syncPairs.push({
          key,
          value
        });
      }
      return _ParseStatus.mergeObjectSync(status, syncPairs);
    }
    static mergeObjectSync(status, pairs) {
      const finalObject = {};
      for (const pair of pairs) {
        const { key, value } = pair;
        if (key.status === "aborted")
          return INVALID;
        if (value.status === "aborted")
          return INVALID;
        if (key.status === "dirty")
          status.dirty();
        if (value.status === "dirty")
          status.dirty();
        if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
          finalObject[key.value] = value.value;
        }
      }
      return { status: status.value, value: finalObject };
    }
  };
  __name(_ParseStatus, "ParseStatus");
  var ParseStatus = _ParseStatus;
  var INVALID = Object.freeze({
    status: "aborted"
  });
  var DIRTY = /* @__PURE__ */ __name((value) => ({ status: "dirty", value }), "DIRTY");
  var OK = /* @__PURE__ */ __name((value) => ({ status: "valid", value }), "OK");
  var isAborted = /* @__PURE__ */ __name((x) => x.status === "aborted", "isAborted");
  var isDirty = /* @__PURE__ */ __name((x) => x.status === "dirty", "isDirty");
  var isValid2 = /* @__PURE__ */ __name((x) => x.status === "valid", "isValid");
  var isAsync = /* @__PURE__ */ __name((x) => typeof Promise !== "undefined" && x instanceof Promise, "isAsync");
  function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
  }
  __name(__classPrivateFieldGet, "__classPrivateFieldGet");
  function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
  }
  __name(__classPrivateFieldSet, "__classPrivateFieldSet");
  var errorUtil;
  (function(errorUtil2) {
    errorUtil2.errToObj = (message2) => typeof message2 === "string" ? { message: message2 } : message2 || {};
    errorUtil2.toString = (message2) => typeof message2 === "string" ? message2 : message2 === null || message2 === void 0 ? void 0 : message2.message;
  })(errorUtil || (errorUtil = {}));
  var _ZodEnum_cache;
  var _ZodNativeEnum_cache;
  var _ParseInputLazyPath = class _ParseInputLazyPath {
    constructor(parent, value, path, key) {
      this._cachedPath = [];
      this.parent = parent;
      this.data = value;
      this._path = path;
      this._key = key;
    }
    get path() {
      if (!this._cachedPath.length) {
        if (this._key instanceof Array) {
          this._cachedPath.push(...this._path, ...this._key);
        } else {
          this._cachedPath.push(...this._path, this._key);
        }
      }
      return this._cachedPath;
    }
  };
  __name(_ParseInputLazyPath, "ParseInputLazyPath");
  var ParseInputLazyPath = _ParseInputLazyPath;
  var handleResult = /* @__PURE__ */ __name((ctx, result) => {
    if (isValid2(result)) {
      return { success: true, data: result.value };
    } else {
      if (!ctx.common.issues.length) {
        throw new Error("Validation failed but no issues detected.");
      }
      return {
        success: false,
        get error() {
          if (this._error)
            return this._error;
          const error = new ZodError(ctx.common.issues);
          this._error = error;
          return this._error;
        }
      };
    }
  }, "handleResult");
  function processCreateParams(params) {
    if (!params)
      return {};
    const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
    if (errorMap2 && (invalid_type_error || required_error)) {
      throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
    }
    if (errorMap2)
      return { errorMap: errorMap2, description };
    const customMap = /* @__PURE__ */ __name((iss, ctx) => {
      var _a121, _b93;
      const { message: message2 } = params;
      if (iss.code === "invalid_enum_value") {
        return { message: message2 !== null && message2 !== void 0 ? message2 : ctx.defaultError };
      }
      if (typeof ctx.data === "undefined") {
        return { message: (_a121 = message2 !== null && message2 !== void 0 ? message2 : required_error) !== null && _a121 !== void 0 ? _a121 : ctx.defaultError };
      }
      if (iss.code !== "invalid_type")
        return { message: ctx.defaultError };
      return { message: (_b93 = message2 !== null && message2 !== void 0 ? message2 : invalid_type_error) !== null && _b93 !== void 0 ? _b93 : ctx.defaultError };
    }, "customMap");
    return { errorMap: customMap, description };
  }
  __name(processCreateParams, "processCreateParams");
  var _ZodType = class _ZodType {
    get description() {
      return this._def.description;
    }
    _getType(input) {
      return getParsedType(input.data);
    }
    _getOrReturnCtx(input, ctx) {
      return ctx || {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      };
    }
    _processInputParams(input) {
      return {
        status: new ParseStatus(),
        ctx: {
          common: input.parent.common,
          data: input.data,
          parsedType: getParsedType(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        }
      };
    }
    _parseSync(input) {
      const result = this._parse(input);
      if (isAsync(result)) {
        throw new Error("Synchronous parse encountered promise.");
      }
      return result;
    }
    _parseAsync(input) {
      const result = this._parse(input);
      return Promise.resolve(result);
    }
    parse(data, params) {
      const result = this.safeParse(data, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    safeParse(data, params) {
      var _a121;
      const ctx = {
        common: {
          issues: [],
          async: (_a121 = params === null || params === void 0 ? void 0 : params.async) !== null && _a121 !== void 0 ? _a121 : false,
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      const result = this._parseSync({ data, path: ctx.path, parent: ctx });
      return handleResult(ctx, result);
    }
    "~validate"(data) {
      var _a121, _b93;
      const ctx = {
        common: {
          issues: [],
          async: !!this["~standard"].async
        },
        path: [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      if (!this["~standard"].async) {
        try {
          const result = this._parseSync({ data, path: [], parent: ctx });
          return isValid2(result) ? {
            value: result.value
          } : {
            issues: ctx.common.issues
          };
        } catch (err) {
          if ((_b93 = (_a121 = err === null || err === void 0 ? void 0 : err.message) === null || _a121 === void 0 ? void 0 : _a121.toLowerCase()) === null || _b93 === void 0 ? void 0 : _b93.includes("encountered")) {
            this["~standard"].async = true;
          }
          ctx.common = {
            issues: [],
            async: true
          };
        }
      }
      return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid2(result) ? {
        value: result.value
      } : {
        issues: ctx.common.issues
      });
    }
    async parseAsync(data, params) {
      const result = await this.safeParseAsync(data, params);
      if (result.success)
        return result.data;
      throw result.error;
    }
    async safeParseAsync(data, params) {
      const ctx = {
        common: {
          issues: [],
          contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
          async: true
        },
        path: (params === null || params === void 0 ? void 0 : params.path) || [],
        schemaErrorMap: this._def.errorMap,
        parent: null,
        data,
        parsedType: getParsedType(data)
      };
      const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
      const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
      return handleResult(ctx, result);
    }
    refine(check, message2) {
      const getIssueProperties = /* @__PURE__ */ __name((val) => {
        if (typeof message2 === "string" || typeof message2 === "undefined") {
          return { message: message2 };
        } else if (typeof message2 === "function") {
          return message2(val);
        } else {
          return message2;
        }
      }, "getIssueProperties");
      return this._refinement((val, ctx) => {
        const result = check(val);
        const setError = /* @__PURE__ */ __name(() => ctx.addIssue(__spreadValues({
          code: ZodIssueCode.custom
        }, getIssueProperties(val))), "setError");
        if (typeof Promise !== "undefined" && result instanceof Promise) {
          return result.then((data) => {
            if (!data) {
              setError();
              return false;
            } else {
              return true;
            }
          });
        }
        if (!result) {
          setError();
          return false;
        } else {
          return true;
        }
      });
    }
    refinement(check, refinementData) {
      return this._refinement((val, ctx) => {
        if (!check(val)) {
          ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
          return false;
        } else {
          return true;
        }
      });
    }
    _refinement(refinement) {
      return new ZodEffects({
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "refinement", refinement }
      });
    }
    superRefine(refinement) {
      return this._refinement(refinement);
    }
    constructor(def) {
      this.spa = this.safeParseAsync;
      this._def = def;
      this.parse = this.parse.bind(this);
      this.safeParse = this.safeParse.bind(this);
      this.parseAsync = this.parseAsync.bind(this);
      this.safeParseAsync = this.safeParseAsync.bind(this);
      this.spa = this.spa.bind(this);
      this.refine = this.refine.bind(this);
      this.refinement = this.refinement.bind(this);
      this.superRefine = this.superRefine.bind(this);
      this.optional = this.optional.bind(this);
      this.nullable = this.nullable.bind(this);
      this.nullish = this.nullish.bind(this);
      this.array = this.array.bind(this);
      this.promise = this.promise.bind(this);
      this.or = this.or.bind(this);
      this.and = this.and.bind(this);
      this.transform = this.transform.bind(this);
      this.brand = this.brand.bind(this);
      this.default = this.default.bind(this);
      this.catch = this.catch.bind(this);
      this.describe = this.describe.bind(this);
      this.pipe = this.pipe.bind(this);
      this.readonly = this.readonly.bind(this);
      this.isNullable = this.isNullable.bind(this);
      this.isOptional = this.isOptional.bind(this);
      this["~standard"] = {
        version: 1,
        vendor: "zod",
        validate: /* @__PURE__ */ __name((data) => this["~validate"](data), "validate")
      };
    }
    optional() {
      return ZodOptional.create(this, this._def);
    }
    nullable() {
      return ZodNullable.create(this, this._def);
    }
    nullish() {
      return this.nullable().optional();
    }
    array() {
      return ZodArray.create(this);
    }
    promise() {
      return ZodPromise.create(this, this._def);
    }
    or(option) {
      return ZodUnion.create([this, option], this._def);
    }
    and(incoming) {
      return ZodIntersection.create(this, incoming, this._def);
    }
    transform(transform) {
      return new ZodEffects(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
        schema: this,
        typeName: ZodFirstPartyTypeKind.ZodEffects,
        effect: { type: "transform", transform }
      }));
    }
    default(def) {
      const defaultValueFunc = typeof def === "function" ? def : () => def;
      return new ZodDefault(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
        innerType: this,
        defaultValue: defaultValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodDefault
      }));
    }
    brand() {
      return new ZodBranded(__spreadValues({
        typeName: ZodFirstPartyTypeKind.ZodBranded,
        type: this
      }, processCreateParams(this._def)));
    }
    catch(def) {
      const catchValueFunc = typeof def === "function" ? def : () => def;
      return new ZodCatch(__spreadProps(__spreadValues({}, processCreateParams(this._def)), {
        innerType: this,
        catchValue: catchValueFunc,
        typeName: ZodFirstPartyTypeKind.ZodCatch
      }));
    }
    describe(description) {
      const This = this.constructor;
      return new This(__spreadProps(__spreadValues({}, this._def), {
        description
      }));
    }
    pipe(target) {
      return ZodPipeline.create(this, target);
    }
    readonly() {
      return ZodReadonly.create(this);
    }
    isOptional() {
      return this.safeParse(void 0).success;
    }
    isNullable() {
      return this.safeParse(null).success;
    }
  };
  __name(_ZodType, "ZodType");
  var ZodType = _ZodType;
  var cuidRegex = /^c[^\s-]{8,}$/i;
  var cuid2Regex = /^[0-9a-z]+$/;
  var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
  var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
  var nanoidRegex = /^[a-z0-9_-]{21}$/i;
  var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
  var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
  var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
  var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
  var emojiRegex;
  var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
  var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
  var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
  var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
  var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
  var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
  var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
  var dateRegex = new RegExp(`^${dateRegexSource}$`);
  function timeRegexSource(args) {
    let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
    if (args.precision) {
      regex = `${regex}\\.\\d{${args.precision}}`;
    } else if (args.precision == null) {
      regex = `${regex}(\\.\\d+)?`;
    }
    return regex;
  }
  __name(timeRegexSource, "timeRegexSource");
  function timeRegex(args) {
    return new RegExp(`^${timeRegexSource(args)}$`);
  }
  __name(timeRegex, "timeRegex");
  function datetimeRegex(args) {
    let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
    const opts = [];
    opts.push(args.local ? `Z?` : `Z`);
    if (args.offset)
      opts.push(`([+-]\\d{2}:?\\d{2})`);
    regex = `${regex}(${opts.join("|")})`;
    return new RegExp(`^${regex}$`);
  }
  __name(datetimeRegex, "datetimeRegex");
  function isValidIP(ip, version2) {
    if ((version2 === "v4" || !version2) && ipv4Regex.test(ip)) {
      return true;
    }
    if ((version2 === "v6" || !version2) && ipv6Regex.test(ip)) {
      return true;
    }
    return false;
  }
  __name(isValidIP, "isValidIP");
  function isValidJWT(jwt, alg) {
    if (!jwtRegex.test(jwt))
      return false;
    try {
      const [header] = jwt.split(".");
      const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
      const decoded = JSON.parse(atob(base64));
      if (typeof decoded !== "object" || decoded === null)
        return false;
      if (!decoded.typ || !decoded.alg)
        return false;
      if (alg && decoded.alg !== alg)
        return false;
      return true;
    } catch (_a121) {
      return false;
    }
  }
  __name(isValidJWT, "isValidJWT");
  function isValidCidr(ip, version2) {
    if ((version2 === "v4" || !version2) && ipv4CidrRegex.test(ip)) {
      return true;
    }
    if ((version2 === "v6" || !version2) && ipv6CidrRegex.test(ip)) {
      return true;
    }
    return false;
  }
  __name(isValidCidr, "isValidCidr");
  var _ZodString = class _ZodString extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = String(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.string) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.string,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.length < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.length > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "length") {
          const tooBig = input.data.length > check.value;
          const tooSmall = input.data.length < check.value;
          if (tooBig || tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            if (tooBig) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            } else if (tooSmall) {
              addIssueToContext(ctx, {
                code: ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: true,
                message: check.message
              });
            }
            status.dirty();
          }
        } else if (check.kind === "email") {
          if (!emailRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "email",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "emoji") {
          if (!emojiRegex) {
            emojiRegex = new RegExp(_emojiRegex, "u");
          }
          if (!emojiRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "emoji",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "uuid") {
          if (!uuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "uuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "nanoid") {
          if (!nanoidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "nanoid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid") {
          if (!cuidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cuid2") {
          if (!cuid2Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cuid2",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ulid") {
          if (!ulidRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ulid",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "url") {
          try {
            new URL(input.data);
          } catch (_a121) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "regex") {
          check.regex.lastIndex = 0;
          const testResult = check.regex.test(input.data);
          if (!testResult) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "regex",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "trim") {
          input.data = input.data.trim();
        } else if (check.kind === "includes") {
          if (!input.data.includes(check.value, check.position)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { includes: check.value, position: check.position },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "toLowerCase") {
          input.data = input.data.toLowerCase();
        } else if (check.kind === "toUpperCase") {
          input.data = input.data.toUpperCase();
        } else if (check.kind === "startsWith") {
          if (!input.data.startsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { startsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "endsWith") {
          if (!input.data.endsWith(check.value)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: { endsWith: check.value },
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "datetime") {
          const regex = datetimeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "datetime",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "date") {
          const regex = dateRegex;
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "date",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "time") {
          const regex = timeRegex(check);
          if (!regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_string,
              validation: "time",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "duration") {
          if (!durationRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "duration",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "ip") {
          if (!isValidIP(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "ip",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "jwt") {
          if (!isValidJWT(input.data, check.alg)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "jwt",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "cidr") {
          if (!isValidCidr(input.data, check.version)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "cidr",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "base64") {
          if (!base64Regex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "base64",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "base64url") {
          if (!base64urlRegex.test(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              validation: "base64url",
              code: ZodIssueCode.invalid_string,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _regex(regex, validation, message2) {
      return this.refinement((data) => regex.test(data), __spreadValues({
        validation,
        code: ZodIssueCode.invalid_string
      }, errorUtil.errToObj(message2)));
    }
    _addCheck(check) {
      return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
        checks: [...this._def.checks, check]
      }));
    }
    email(message2) {
      return this._addCheck(__spreadValues({ kind: "email" }, errorUtil.errToObj(message2)));
    }
    url(message2) {
      return this._addCheck(__spreadValues({ kind: "url" }, errorUtil.errToObj(message2)));
    }
    emoji(message2) {
      return this._addCheck(__spreadValues({ kind: "emoji" }, errorUtil.errToObj(message2)));
    }
    uuid(message2) {
      return this._addCheck(__spreadValues({ kind: "uuid" }, errorUtil.errToObj(message2)));
    }
    nanoid(message2) {
      return this._addCheck(__spreadValues({ kind: "nanoid" }, errorUtil.errToObj(message2)));
    }
    cuid(message2) {
      return this._addCheck(__spreadValues({ kind: "cuid" }, errorUtil.errToObj(message2)));
    }
    cuid2(message2) {
      return this._addCheck(__spreadValues({ kind: "cuid2" }, errorUtil.errToObj(message2)));
    }
    ulid(message2) {
      return this._addCheck(__spreadValues({ kind: "ulid" }, errorUtil.errToObj(message2)));
    }
    base64(message2) {
      return this._addCheck(__spreadValues({ kind: "base64" }, errorUtil.errToObj(message2)));
    }
    base64url(message2) {
      return this._addCheck(__spreadValues({
        kind: "base64url"
      }, errorUtil.errToObj(message2)));
    }
    jwt(options) {
      return this._addCheck(__spreadValues({ kind: "jwt" }, errorUtil.errToObj(options)));
    }
    ip(options) {
      return this._addCheck(__spreadValues({ kind: "ip" }, errorUtil.errToObj(options)));
    }
    cidr(options) {
      return this._addCheck(__spreadValues({ kind: "cidr" }, errorUtil.errToObj(options)));
    }
    datetime(options) {
      var _a121, _b93;
      if (typeof options === "string") {
        return this._addCheck({
          kind: "datetime",
          precision: null,
          offset: false,
          local: false,
          message: options
        });
      }
      return this._addCheck(__spreadValues({
        kind: "datetime",
        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
        offset: (_a121 = options === null || options === void 0 ? void 0 : options.offset) !== null && _a121 !== void 0 ? _a121 : false,
        local: (_b93 = options === null || options === void 0 ? void 0 : options.local) !== null && _b93 !== void 0 ? _b93 : false
      }, errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)));
    }
    date(message2) {
      return this._addCheck({ kind: "date", message: message2 });
    }
    time(options) {
      if (typeof options === "string") {
        return this._addCheck({
          kind: "time",
          precision: null,
          message: options
        });
      }
      return this._addCheck(__spreadValues({
        kind: "time",
        precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision
      }, errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)));
    }
    duration(message2) {
      return this._addCheck(__spreadValues({ kind: "duration" }, errorUtil.errToObj(message2)));
    }
    regex(regex, message2) {
      return this._addCheck(__spreadValues({
        kind: "regex",
        regex
      }, errorUtil.errToObj(message2)));
    }
    includes(value, options) {
      return this._addCheck(__spreadValues({
        kind: "includes",
        value,
        position: options === null || options === void 0 ? void 0 : options.position
      }, errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)));
    }
    startsWith(value, message2) {
      return this._addCheck(__spreadValues({
        kind: "startsWith",
        value
      }, errorUtil.errToObj(message2)));
    }
    endsWith(value, message2) {
      return this._addCheck(__spreadValues({
        kind: "endsWith",
        value
      }, errorUtil.errToObj(message2)));
    }
    min(minLength, message2) {
      return this._addCheck(__spreadValues({
        kind: "min",
        value: minLength
      }, errorUtil.errToObj(message2)));
    }
    max(maxLength, message2) {
      return this._addCheck(__spreadValues({
        kind: "max",
        value: maxLength
      }, errorUtil.errToObj(message2)));
    }
    length(len, message2) {
      return this._addCheck(__spreadValues({
        kind: "length",
        value: len
      }, errorUtil.errToObj(message2)));
    }
    /**
     * Equivalent to `.min(1)`
     */
    nonempty(message2) {
      return this.min(1, errorUtil.errToObj(message2));
    }
    trim() {
      return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
        checks: [...this._def.checks, { kind: "trim" }]
      }));
    }
    toLowerCase() {
      return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
        checks: [...this._def.checks, { kind: "toLowerCase" }]
      }));
    }
    toUpperCase() {
      return new _ZodString(__spreadProps(__spreadValues({}, this._def), {
        checks: [...this._def.checks, { kind: "toUpperCase" }]
      }));
    }
    get isDatetime() {
      return !!this._def.checks.find((ch) => ch.kind === "datetime");
    }
    get isDate() {
      return !!this._def.checks.find((ch) => ch.kind === "date");
    }
    get isTime() {
      return !!this._def.checks.find((ch) => ch.kind === "time");
    }
    get isDuration() {
      return !!this._def.checks.find((ch) => ch.kind === "duration");
    }
    get isEmail() {
      return !!this._def.checks.find((ch) => ch.kind === "email");
    }
    get isURL() {
      return !!this._def.checks.find((ch) => ch.kind === "url");
    }
    get isEmoji() {
      return !!this._def.checks.find((ch) => ch.kind === "emoji");
    }
    get isUUID() {
      return !!this._def.checks.find((ch) => ch.kind === "uuid");
    }
    get isNANOID() {
      return !!this._def.checks.find((ch) => ch.kind === "nanoid");
    }
    get isCUID() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid");
    }
    get isCUID2() {
      return !!this._def.checks.find((ch) => ch.kind === "cuid2");
    }
    get isULID() {
      return !!this._def.checks.find((ch) => ch.kind === "ulid");
    }
    get isIP() {
      return !!this._def.checks.find((ch) => ch.kind === "ip");
    }
    get isCIDR() {
      return !!this._def.checks.find((ch) => ch.kind === "cidr");
    }
    get isBase64() {
      return !!this._def.checks.find((ch) => ch.kind === "base64");
    }
    get isBase64url() {
      return !!this._def.checks.find((ch) => ch.kind === "base64url");
    }
    get minLength() {
      let min2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min2 === null || ch.value > min2)
            min2 = ch.value;
        }
      }
      return min2;
    }
    get maxLength() {
      let max2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return max2;
    }
  };
  __name(_ZodString, "ZodString");
  var ZodString = _ZodString;
  ZodString.create = (params) => {
    var _a121;
    return new ZodString(__spreadValues({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodString,
      coerce: (_a121 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a121 !== void 0 ? _a121 : false
    }, processCreateParams(params)));
  };
  function floatSafeRemainder(val, step) {
    const valDecCount = (val.toString().split(".")[1] || "").length;
    const stepDecCount = (step.toString().split(".")[1] || "").length;
    const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
    const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
    const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
    return valInt % stepInt / Math.pow(10, decCount);
  }
  __name(floatSafeRemainder, "floatSafeRemainder");
  var _ZodNumber = class _ZodNumber extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
      this.step = this.multipleOf;
    }
    _parse(input) {
      if (this._def.coerce) {
        input.data = Number(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.number) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.number,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "int") {
          if (!util.isInteger(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.invalid_type,
              expected: "integer",
              received: "float",
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "number",
              inclusive: check.inclusive,
              exact: false,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (floatSafeRemainder(input.data, check.value) !== 0) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "finite") {
          if (!Number.isFinite(input.data)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_finite,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    gte(value, message2) {
      return this.setLimit("min", value, true, errorUtil.toString(message2));
    }
    gt(value, message2) {
      return this.setLimit("min", value, false, errorUtil.toString(message2));
    }
    lte(value, message2) {
      return this.setLimit("max", value, true, errorUtil.toString(message2));
    }
    lt(value, message2) {
      return this.setLimit("max", value, false, errorUtil.toString(message2));
    }
    setLimit(kind, value, inclusive, message2) {
      return new _ZodNumber(__spreadProps(__spreadValues({}, this._def), {
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message2)
          }
        ]
      }));
    }
    _addCheck(check) {
      return new _ZodNumber(__spreadProps(__spreadValues({}, this._def), {
        checks: [...this._def.checks, check]
      }));
    }
    int(message2) {
      return this._addCheck({
        kind: "int",
        message: errorUtil.toString(message2)
      });
    }
    positive(message2) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message2)
      });
    }
    negative(message2) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: false,
        message: errorUtil.toString(message2)
      });
    }
    nonpositive(message2) {
      return this._addCheck({
        kind: "max",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message2)
      });
    }
    nonnegative(message2) {
      return this._addCheck({
        kind: "min",
        value: 0,
        inclusive: true,
        message: errorUtil.toString(message2)
      });
    }
    multipleOf(value, message2) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message2)
      });
    }
    finite(message2) {
      return this._addCheck({
        kind: "finite",
        message: errorUtil.toString(message2)
      });
    }
    safe(message2) {
      return this._addCheck({
        kind: "min",
        inclusive: true,
        value: Number.MIN_SAFE_INTEGER,
        message: errorUtil.toString(message2)
      })._addCheck({
        kind: "max",
        inclusive: true,
        value: Number.MAX_SAFE_INTEGER,
        message: errorUtil.toString(message2)
      });
    }
    get minValue() {
      let min2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min2 === null || ch.value > min2)
            min2 = ch.value;
        }
      }
      return min2;
    }
    get maxValue() {
      let max2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return max2;
    }
    get isInt() {
      return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
    }
    get isFinite() {
      let max2 = null, min2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
          return true;
        } else if (ch.kind === "min") {
          if (min2 === null || ch.value > min2)
            min2 = ch.value;
        } else if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return Number.isFinite(min2) && Number.isFinite(max2);
    }
  };
  __name(_ZodNumber, "ZodNumber");
  var ZodNumber = _ZodNumber;
  ZodNumber.create = (params) => {
    return new ZodNumber(__spreadValues({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodNumber,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false
    }, processCreateParams(params)));
  };
  var _ZodBigInt = class _ZodBigInt extends ZodType {
    constructor() {
      super(...arguments);
      this.min = this.gte;
      this.max = this.lte;
    }
    _parse(input) {
      if (this._def.coerce) {
        try {
          input.data = BigInt(input.data);
        } catch (_a121) {
          return this._getInvalidInput(input);
        }
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.bigint) {
        return this._getInvalidInput(input);
      }
      let ctx = void 0;
      const status = new ParseStatus();
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
          if (tooSmall) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              type: "bigint",
              minimum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
          if (tooBig) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              type: "bigint",
              maximum: check.value,
              inclusive: check.inclusive,
              message: check.message
            });
            status.dirty();
          }
        } else if (check.kind === "multipleOf") {
          if (input.data % check.value !== BigInt(0)) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.not_multiple_of,
              multipleOf: check.value,
              message: check.message
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return { status: status.value, value: input.data };
    }
    _getInvalidInput(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.bigint,
        received: ctx.parsedType
      });
      return INVALID;
    }
    gte(value, message2) {
      return this.setLimit("min", value, true, errorUtil.toString(message2));
    }
    gt(value, message2) {
      return this.setLimit("min", value, false, errorUtil.toString(message2));
    }
    lte(value, message2) {
      return this.setLimit("max", value, true, errorUtil.toString(message2));
    }
    lt(value, message2) {
      return this.setLimit("max", value, false, errorUtil.toString(message2));
    }
    setLimit(kind, value, inclusive, message2) {
      return new _ZodBigInt(__spreadProps(__spreadValues({}, this._def), {
        checks: [
          ...this._def.checks,
          {
            kind,
            value,
            inclusive,
            message: errorUtil.toString(message2)
          }
        ]
      }));
    }
    _addCheck(check) {
      return new _ZodBigInt(__spreadProps(__spreadValues({}, this._def), {
        checks: [...this._def.checks, check]
      }));
    }
    positive(message2) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message2)
      });
    }
    negative(message2) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: false,
        message: errorUtil.toString(message2)
      });
    }
    nonpositive(message2) {
      return this._addCheck({
        kind: "max",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message2)
      });
    }
    nonnegative(message2) {
      return this._addCheck({
        kind: "min",
        value: BigInt(0),
        inclusive: true,
        message: errorUtil.toString(message2)
      });
    }
    multipleOf(value, message2) {
      return this._addCheck({
        kind: "multipleOf",
        value,
        message: errorUtil.toString(message2)
      });
    }
    get minValue() {
      let min2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min2 === null || ch.value > min2)
            min2 = ch.value;
        }
      }
      return min2;
    }
    get maxValue() {
      let max2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return max2;
    }
  };
  __name(_ZodBigInt, "ZodBigInt");
  var ZodBigInt = _ZodBigInt;
  ZodBigInt.create = (params) => {
    var _a121;
    return new ZodBigInt(__spreadValues({
      checks: [],
      typeName: ZodFirstPartyTypeKind.ZodBigInt,
      coerce: (_a121 = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a121 !== void 0 ? _a121 : false
    }, processCreateParams(params)));
  };
  var _ZodBoolean = class _ZodBoolean extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = Boolean(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.boolean) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.boolean,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  __name(_ZodBoolean, "ZodBoolean");
  var ZodBoolean = _ZodBoolean;
  ZodBoolean.create = (params) => {
    return new ZodBoolean(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodBoolean,
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false
    }, processCreateParams(params)));
  };
  var _ZodDate = class _ZodDate extends ZodType {
    _parse(input) {
      if (this._def.coerce) {
        input.data = new Date(input.data);
      }
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.date) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.date,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      if (isNaN(input.data.getTime())) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_date
        });
        return INVALID;
      }
      const status = new ParseStatus();
      let ctx = void 0;
      for (const check of this._def.checks) {
        if (check.kind === "min") {
          if (input.data.getTime() < check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              message: check.message,
              inclusive: true,
              exact: false,
              minimum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else if (check.kind === "max") {
          if (input.data.getTime() > check.value) {
            ctx = this._getOrReturnCtx(input, ctx);
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              message: check.message,
              inclusive: true,
              exact: false,
              maximum: check.value,
              type: "date"
            });
            status.dirty();
          }
        } else {
          util.assertNever(check);
        }
      }
      return {
        status: status.value,
        value: new Date(input.data.getTime())
      };
    }
    _addCheck(check) {
      return new _ZodDate(__spreadProps(__spreadValues({}, this._def), {
        checks: [...this._def.checks, check]
      }));
    }
    min(minDate, message2) {
      return this._addCheck({
        kind: "min",
        value: minDate.getTime(),
        message: errorUtil.toString(message2)
      });
    }
    max(maxDate, message2) {
      return this._addCheck({
        kind: "max",
        value: maxDate.getTime(),
        message: errorUtil.toString(message2)
      });
    }
    get minDate() {
      let min2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "min") {
          if (min2 === null || ch.value > min2)
            min2 = ch.value;
        }
      }
      return min2 != null ? new Date(min2) : null;
    }
    get maxDate() {
      let max2 = null;
      for (const ch of this._def.checks) {
        if (ch.kind === "max") {
          if (max2 === null || ch.value < max2)
            max2 = ch.value;
        }
      }
      return max2 != null ? new Date(max2) : null;
    }
  };
  __name(_ZodDate, "ZodDate");
  var ZodDate = _ZodDate;
  ZodDate.create = (params) => {
    return new ZodDate(__spreadValues({
      checks: [],
      coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
      typeName: ZodFirstPartyTypeKind.ZodDate
    }, processCreateParams(params)));
  };
  var _ZodSymbol = class _ZodSymbol extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.symbol) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.symbol,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  __name(_ZodSymbol, "ZodSymbol");
  var ZodSymbol = _ZodSymbol;
  ZodSymbol.create = (params) => {
    return new ZodSymbol(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodSymbol
    }, processCreateParams(params)));
  };
  var _ZodUndefined = class _ZodUndefined extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.undefined,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  __name(_ZodUndefined, "ZodUndefined");
  var ZodUndefined = _ZodUndefined;
  ZodUndefined.create = (params) => {
    return new ZodUndefined(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodUndefined
    }, processCreateParams(params)));
  };
  var _ZodNull = class _ZodNull extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.null) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.null,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  __name(_ZodNull, "ZodNull");
  var ZodNull = _ZodNull;
  ZodNull.create = (params) => {
    return new ZodNull(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodNull
    }, processCreateParams(params)));
  };
  var _ZodAny = class _ZodAny extends ZodType {
    constructor() {
      super(...arguments);
      this._any = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  __name(_ZodAny, "ZodAny");
  var ZodAny = _ZodAny;
  ZodAny.create = (params) => {
    return new ZodAny(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodAny
    }, processCreateParams(params)));
  };
  var _ZodUnknown = class _ZodUnknown extends ZodType {
    constructor() {
      super(...arguments);
      this._unknown = true;
    }
    _parse(input) {
      return OK(input.data);
    }
  };
  __name(_ZodUnknown, "ZodUnknown");
  var ZodUnknown = _ZodUnknown;
  ZodUnknown.create = (params) => {
    return new ZodUnknown(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodUnknown
    }, processCreateParams(params)));
  };
  var _ZodNever = class _ZodNever extends ZodType {
    _parse(input) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.never,
        received: ctx.parsedType
      });
      return INVALID;
    }
  };
  __name(_ZodNever, "ZodNever");
  var ZodNever = _ZodNever;
  ZodNever.create = (params) => {
    return new ZodNever(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodNever
    }, processCreateParams(params)));
  };
  var _ZodVoid = class _ZodVoid extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.undefined) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.void,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return OK(input.data);
    }
  };
  __name(_ZodVoid, "ZodVoid");
  var ZodVoid = _ZodVoid;
  ZodVoid.create = (params) => {
    return new ZodVoid(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodVoid
    }, processCreateParams(params)));
  };
  var _ZodArray = class _ZodArray extends ZodType {
    _parse(input) {
      const { ctx, status } = this._processInputParams(input);
      const def = this._def;
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (def.exactLength !== null) {
        const tooBig = ctx.data.length > def.exactLength.value;
        const tooSmall = ctx.data.length < def.exactLength.value;
        if (tooBig || tooSmall) {
          addIssueToContext(ctx, {
            code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
            minimum: tooSmall ? def.exactLength.value : void 0,
            maximum: tooBig ? def.exactLength.value : void 0,
            type: "array",
            inclusive: true,
            exact: true,
            message: def.exactLength.message
          });
          status.dirty();
        }
      }
      if (def.minLength !== null) {
        if (ctx.data.length < def.minLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.minLength.message
          });
          status.dirty();
        }
      }
      if (def.maxLength !== null) {
        if (ctx.data.length > def.maxLength.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxLength.value,
            type: "array",
            inclusive: true,
            exact: false,
            message: def.maxLength.message
          });
          status.dirty();
        }
      }
      if (ctx.common.async) {
        return Promise.all([...ctx.data].map((item, i2) => {
          return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
        })).then((result2) => {
          return ParseStatus.mergeArray(status, result2);
        });
      }
      const result = [...ctx.data].map((item, i2) => {
        return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i2));
      });
      return ParseStatus.mergeArray(status, result);
    }
    get element() {
      return this._def.type;
    }
    min(minLength, message2) {
      return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
        minLength: { value: minLength, message: errorUtil.toString(message2) }
      }));
    }
    max(maxLength, message2) {
      return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
        maxLength: { value: maxLength, message: errorUtil.toString(message2) }
      }));
    }
    length(len, message2) {
      return new _ZodArray(__spreadProps(__spreadValues({}, this._def), {
        exactLength: { value: len, message: errorUtil.toString(message2) }
      }));
    }
    nonempty(message2) {
      return this.min(1, message2);
    }
  };
  __name(_ZodArray, "ZodArray");
  var ZodArray = _ZodArray;
  ZodArray.create = (schema, params) => {
    return new ZodArray(__spreadValues({
      type: schema,
      minLength: null,
      maxLength: null,
      exactLength: null,
      typeName: ZodFirstPartyTypeKind.ZodArray
    }, processCreateParams(params)));
  };
  function deepPartialify(schema) {
    if (schema instanceof ZodObject) {
      const newShape = {};
      for (const key in schema.shape) {
        const fieldSchema = schema.shape[key];
        newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
      }
      return new ZodObject(__spreadProps(__spreadValues({}, schema._def), {
        shape: /* @__PURE__ */ __name(() => newShape, "shape")
      }));
    } else if (schema instanceof ZodArray) {
      return new ZodArray(__spreadProps(__spreadValues({}, schema._def), {
        type: deepPartialify(schema.element)
      }));
    } else if (schema instanceof ZodOptional) {
      return ZodOptional.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodNullable) {
      return ZodNullable.create(deepPartialify(schema.unwrap()));
    } else if (schema instanceof ZodTuple) {
      return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
    } else {
      return schema;
    }
  }
  __name(deepPartialify, "deepPartialify");
  var _ZodObject = class _ZodObject extends ZodType {
    constructor() {
      super(...arguments);
      this._cached = null;
      this.nonstrict = this.passthrough;
      this.augment = this.extend;
    }
    _getCached() {
      if (this._cached !== null)
        return this._cached;
      const shape = this._def.shape();
      const keys = util.objectKeys(shape);
      return this._cached = { shape, keys };
    }
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.object) {
        const ctx2 = this._getOrReturnCtx(input);
        addIssueToContext(ctx2, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx2.parsedType
        });
        return INVALID;
      }
      const { status, ctx } = this._processInputParams(input);
      const { shape, keys: shapeKeys } = this._getCached();
      const extraKeys = [];
      if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
        for (const key in ctx.data) {
          if (!shapeKeys.includes(key)) {
            extraKeys.push(key);
          }
        }
      }
      const pairs = [];
      for (const key of shapeKeys) {
        const keyValidator = shape[key];
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (this._def.catchall instanceof ZodNever) {
        const unknownKeys = this._def.unknownKeys;
        if (unknownKeys === "passthrough") {
          for (const key of extraKeys) {
            pairs.push({
              key: { status: "valid", value: key },
              value: { status: "valid", value: ctx.data[key] }
            });
          }
        } else if (unknownKeys === "strict") {
          if (extraKeys.length > 0) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.unrecognized_keys,
              keys: extraKeys
            });
            status.dirty();
          }
        } else if (unknownKeys === "strip") ;
        else {
          throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
        }
      } else {
        const catchall = this._def.catchall;
        for (const key of extraKeys) {
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: catchall._parse(
              new ParseInputLazyPath(ctx, value, ctx.path, key)
              //, ctx.child(key), value, getParsedType(value)
            ),
            alwaysSet: key in ctx.data
          });
        }
      }
      if (ctx.common.async) {
        return Promise.resolve().then(async () => {
          const syncPairs = [];
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            syncPairs.push({
              key,
              value,
              alwaysSet: pair.alwaysSet
            });
          }
          return syncPairs;
        }).then((syncPairs) => {
          return ParseStatus.mergeObjectSync(status, syncPairs);
        });
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get shape() {
      return this._def.shape();
    }
    strict(message2) {
      errorUtil.errToObj;
      return new _ZodObject(__spreadValues(__spreadProps(__spreadValues({}, this._def), {
        unknownKeys: "strict"
      }), message2 !== void 0 ? {
        errorMap: /* @__PURE__ */ __name((issue, ctx) => {
          var _a121, _b93, _c5, _d4;
          const defaultError = (_c5 = (_b93 = (_a121 = this._def).errorMap) === null || _b93 === void 0 ? void 0 : _b93.call(_a121, issue, ctx).message) !== null && _c5 !== void 0 ? _c5 : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d4 = errorUtil.errToObj(message2).message) !== null && _d4 !== void 0 ? _d4 : defaultError
            };
          return {
            message: defaultError
          };
        }, "errorMap")
      } : {}));
    }
    strip() {
      return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
        unknownKeys: "strip"
      }));
    }
    passthrough() {
      return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
        unknownKeys: "passthrough"
      }));
    }
    // const AugmentFactory =
    //   <Def extends ZodObjectDef>(def: Def) =>
    //   <Augmentation extends ZodRawShape>(
    //     augmentation: Augmentation
    //   ): ZodObject<
    //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
    //     Def["unknownKeys"],
    //     Def["catchall"]
    //   > => {
    //     return new ZodObject({
    //       ...def,
    //       shape: () => ({
    //         ...def.shape(),
    //         ...augmentation,
    //       }),
    //     }) as any;
    //   };
    extend(augmentation) {
      return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
        shape: /* @__PURE__ */ __name(() => __spreadValues(__spreadValues({}, this._def.shape()), augmentation), "shape")
      }));
    }
    /**
     * Prior to zod@1.0.12 there was a bug in the
     * inferred type of merged objects. Please
     * upgrade if you are experiencing issues.
     */
    merge(merging) {
      const merged = new _ZodObject({
        unknownKeys: merging._def.unknownKeys,
        catchall: merging._def.catchall,
        shape: /* @__PURE__ */ __name(() => __spreadValues(__spreadValues({}, this._def.shape()), merging._def.shape()), "shape"),
        typeName: ZodFirstPartyTypeKind.ZodObject
      });
      return merged;
    }
    // merge<
    //   Incoming extends AnyZodObject,
    //   Augmentation extends Incoming["shape"],
    //   NewOutput extends {
    //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
    //       ? Augmentation[k]["_output"]
    //       : k extends keyof Output
    //       ? Output[k]
    //       : never;
    //   },
    //   NewInput extends {
    //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
    //       ? Augmentation[k]["_input"]
    //       : k extends keyof Input
    //       ? Input[k]
    //       : never;
    //   }
    // >(
    //   merging: Incoming
    // ): ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"],
    //   NewOutput,
    //   NewInput
    // > {
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    setKey(key, schema) {
      return this.augment({ [key]: schema });
    }
    // merge<Incoming extends AnyZodObject>(
    //   merging: Incoming
    // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
    // ZodObject<
    //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
    //   Incoming["_def"]["unknownKeys"],
    //   Incoming["_def"]["catchall"]
    // > {
    //   // const mergedShape = objectUtil.mergeShapes(
    //   //   this._def.shape(),
    //   //   merging._def.shape()
    //   // );
    //   const merged: any = new ZodObject({
    //     unknownKeys: merging._def.unknownKeys,
    //     catchall: merging._def.catchall,
    //     shape: () =>
    //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
    //     typeName: ZodFirstPartyTypeKind.ZodObject,
    //   }) as any;
    //   return merged;
    // }
    catchall(index3) {
      return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
        catchall: index3
      }));
    }
    pick(mask) {
      const shape = {};
      util.objectKeys(mask).forEach((key) => {
        if (mask[key] && this.shape[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
        shape: /* @__PURE__ */ __name(() => shape, "shape")
      }));
    }
    omit(mask) {
      const shape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (!mask[key]) {
          shape[key] = this.shape[key];
        }
      });
      return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
        shape: /* @__PURE__ */ __name(() => shape, "shape")
      }));
    }
    /**
     * @deprecated
     */
    deepPartial() {
      return deepPartialify(this);
    }
    partial(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        const fieldSchema = this.shape[key];
        if (mask && !mask[key]) {
          newShape[key] = fieldSchema;
        } else {
          newShape[key] = fieldSchema.optional();
        }
      });
      return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
        shape: /* @__PURE__ */ __name(() => newShape, "shape")
      }));
    }
    required(mask) {
      const newShape = {};
      util.objectKeys(this.shape).forEach((key) => {
        if (mask && !mask[key]) {
          newShape[key] = this.shape[key];
        } else {
          const fieldSchema = this.shape[key];
          let newField = fieldSchema;
          while (newField instanceof ZodOptional) {
            newField = newField._def.innerType;
          }
          newShape[key] = newField;
        }
      });
      return new _ZodObject(__spreadProps(__spreadValues({}, this._def), {
        shape: /* @__PURE__ */ __name(() => newShape, "shape")
      }));
    }
    keyof() {
      return createZodEnum(util.objectKeys(this.shape));
    }
  };
  __name(_ZodObject, "ZodObject");
  var ZodObject = _ZodObject;
  ZodObject.create = (shape, params) => {
    return new ZodObject(__spreadValues({
      shape: /* @__PURE__ */ __name(() => shape, "shape"),
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject
    }, processCreateParams(params)));
  };
  ZodObject.strictCreate = (shape, params) => {
    return new ZodObject(__spreadValues({
      shape: /* @__PURE__ */ __name(() => shape, "shape"),
      unknownKeys: "strict",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject
    }, processCreateParams(params)));
  };
  ZodObject.lazycreate = (shape, params) => {
    return new ZodObject(__spreadValues({
      shape,
      unknownKeys: "strip",
      catchall: ZodNever.create(),
      typeName: ZodFirstPartyTypeKind.ZodObject
    }, processCreateParams(params)));
  };
  var _ZodUnion = class _ZodUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const options = this._def.options;
      function handleResults(results) {
        for (const result of results) {
          if (result.result.status === "valid") {
            return result.result;
          }
        }
        for (const result of results) {
          if (result.result.status === "dirty") {
            ctx.common.issues.push(...result.ctx.common.issues);
            return result.result;
          }
        }
        const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
      __name(handleResults, "handleResults");
      if (ctx.common.async) {
        return Promise.all(options.map(async (option) => {
          const childCtx = __spreadProps(__spreadValues({}, ctx), {
            common: __spreadProps(__spreadValues({}, ctx.common), {
              issues: []
            }),
            parent: null
          });
          return {
            result: await option._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            }),
            ctx: childCtx
          };
        })).then(handleResults);
      } else {
        let dirty = void 0;
        const issues = [];
        for (const option of options) {
          const childCtx = __spreadProps(__spreadValues({}, ctx), {
            common: __spreadProps(__spreadValues({}, ctx.common), {
              issues: []
            }),
            parent: null
          });
          const result = option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          });
          if (result.status === "valid") {
            return result;
          } else if (result.status === "dirty" && !dirty) {
            dirty = { result, ctx: childCtx };
          }
          if (childCtx.common.issues.length) {
            issues.push(childCtx.common.issues);
          }
        }
        if (dirty) {
          ctx.common.issues.push(...dirty.ctx.common.issues);
          return dirty.result;
        }
        const unionErrors = issues.map((issues2) => new ZodError(issues2));
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union,
          unionErrors
        });
        return INVALID;
      }
    }
    get options() {
      return this._def.options;
    }
  };
  __name(_ZodUnion, "ZodUnion");
  var ZodUnion = _ZodUnion;
  ZodUnion.create = (types, params) => {
    return new ZodUnion(__spreadValues({
      options: types,
      typeName: ZodFirstPartyTypeKind.ZodUnion
    }, processCreateParams(params)));
  };
  var getDiscriminator = /* @__PURE__ */ __name((type) => {
    if (type instanceof ZodLazy) {
      return getDiscriminator(type.schema);
    } else if (type instanceof ZodEffects) {
      return getDiscriminator(type.innerType());
    } else if (type instanceof ZodLiteral) {
      return [type.value];
    } else if (type instanceof ZodEnum) {
      return type.options;
    } else if (type instanceof ZodNativeEnum) {
      return util.objectValues(type.enum);
    } else if (type instanceof ZodDefault) {
      return getDiscriminator(type._def.innerType);
    } else if (type instanceof ZodUndefined) {
      return [void 0];
    } else if (type instanceof ZodNull) {
      return [null];
    } else if (type instanceof ZodOptional) {
      return [void 0, ...getDiscriminator(type.unwrap())];
    } else if (type instanceof ZodNullable) {
      return [null, ...getDiscriminator(type.unwrap())];
    } else if (type instanceof ZodBranded) {
      return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodReadonly) {
      return getDiscriminator(type.unwrap());
    } else if (type instanceof ZodCatch) {
      return getDiscriminator(type._def.innerType);
    } else {
      return [];
    }
  }, "getDiscriminator");
  var _ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const discriminator = this.discriminator;
      const discriminatorValue = ctx.data[discriminator];
      const option = this.optionsMap.get(discriminatorValue);
      if (!option) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_union_discriminator,
          options: Array.from(this.optionsMap.keys()),
          path: [discriminator]
        });
        return INVALID;
      }
      if (ctx.common.async) {
        return option._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      } else {
        return option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
      }
    }
    get discriminator() {
      return this._def.discriminator;
    }
    get options() {
      return this._def.options;
    }
    get optionsMap() {
      return this._def.optionsMap;
    }
    /**
     * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
     * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
     * have a different value for each object in the union.
     * @param discriminator the name of the discriminator property
     * @param types an array of object schemas
     * @param params
     */
    static create(discriminator, options, params) {
      const optionsMap = /* @__PURE__ */ new Map();
      for (const type of options) {
        const discriminatorValues = getDiscriminator(type.shape[discriminator]);
        if (!discriminatorValues.length) {
          throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
        }
        for (const value of discriminatorValues) {
          if (optionsMap.has(value)) {
            throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
          }
          optionsMap.set(value, type);
        }
      }
      return new _ZodDiscriminatedUnion(__spreadValues({
        typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
        discriminator,
        options,
        optionsMap
      }, processCreateParams(params)));
    }
  };
  __name(_ZodDiscriminatedUnion, "ZodDiscriminatedUnion");
  var ZodDiscriminatedUnion = _ZodDiscriminatedUnion;
  function mergeValues(a, b) {
    const aType = getParsedType(a);
    const bType = getParsedType(b);
    if (a === b) {
      return { valid: true, data: a };
    } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
      const bKeys = util.objectKeys(b);
      const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
      const newObj = __spreadValues(__spreadValues({}, a), b);
      for (const key of sharedKeys) {
        const sharedValue = mergeValues(a[key], b[key]);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newObj[key] = sharedValue.data;
      }
      return { valid: true, data: newObj };
    } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
      if (a.length !== b.length) {
        return { valid: false };
      }
      const newArray = [];
      for (let index3 = 0; index3 < a.length; index3++) {
        const itemA = a[index3];
        const itemB = b[index3];
        const sharedValue = mergeValues(itemA, itemB);
        if (!sharedValue.valid) {
          return { valid: false };
        }
        newArray.push(sharedValue.data);
      }
      return { valid: true, data: newArray };
    } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
      return { valid: true, data: a };
    } else {
      return { valid: false };
    }
  }
  __name(mergeValues, "mergeValues");
  var _ZodIntersection = class _ZodIntersection extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const handleParsed = /* @__PURE__ */ __name((parsedLeft, parsedRight) => {
        if (isAborted(parsedLeft) || isAborted(parsedRight)) {
          return INVALID;
        }
        const merged = mergeValues(parsedLeft.value, parsedRight.value);
        if (!merged.valid) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_intersection_types
          });
          return INVALID;
        }
        if (isDirty(parsedLeft) || isDirty(parsedRight)) {
          status.dirty();
        }
        return { status: status.value, value: merged.data };
      }, "handleParsed");
      if (ctx.common.async) {
        return Promise.all([
          this._def.left._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }),
          this._def.right._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          })
        ]).then(([left, right]) => handleParsed(left, right));
      } else {
        return handleParsed(this._def.left._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }), this._def.right._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }));
      }
    }
  };
  __name(_ZodIntersection, "ZodIntersection");
  var ZodIntersection = _ZodIntersection;
  ZodIntersection.create = (left, right, params) => {
    return new ZodIntersection(__spreadValues({
      left,
      right,
      typeName: ZodFirstPartyTypeKind.ZodIntersection
    }, processCreateParams(params)));
  };
  var _ZodTuple = class _ZodTuple extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.array) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.array,
          received: ctx.parsedType
        });
        return INVALID;
      }
      if (ctx.data.length < this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        return INVALID;
      }
      const rest = this._def.rest;
      if (!rest && ctx.data.length > this._def.items.length) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: this._def.items.length,
          inclusive: true,
          exact: false,
          type: "array"
        });
        status.dirty();
      }
      const items = [...ctx.data].map((item, itemIndex) => {
        const schema = this._def.items[itemIndex] || this._def.rest;
        if (!schema)
          return null;
        return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
      }).filter((x) => !!x);
      if (ctx.common.async) {
        return Promise.all(items).then((results) => {
          return ParseStatus.mergeArray(status, results);
        });
      } else {
        return ParseStatus.mergeArray(status, items);
      }
    }
    get items() {
      return this._def.items;
    }
    rest(rest) {
      return new _ZodTuple(__spreadProps(__spreadValues({}, this._def), {
        rest
      }));
    }
  };
  __name(_ZodTuple, "ZodTuple");
  var ZodTuple = _ZodTuple;
  ZodTuple.create = (schemas, params) => {
    if (!Array.isArray(schemas)) {
      throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
    }
    return new ZodTuple(__spreadValues({
      items: schemas,
      typeName: ZodFirstPartyTypeKind.ZodTuple,
      rest: null
    }, processCreateParams(params)));
  };
  var _ZodRecord = class _ZodRecord extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.object) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.object,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const pairs = [];
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      for (const key in ctx.data) {
        pairs.push({
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
          value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
      if (ctx.common.async) {
        return ParseStatus.mergeObjectAsync(status, pairs);
      } else {
        return ParseStatus.mergeObjectSync(status, pairs);
      }
    }
    get element() {
      return this._def.valueType;
    }
    static create(first, second, third) {
      if (second instanceof ZodType) {
        return new _ZodRecord(__spreadValues({
          keyType: first,
          valueType: second,
          typeName: ZodFirstPartyTypeKind.ZodRecord
        }, processCreateParams(third)));
      }
      return new _ZodRecord(__spreadValues({
        keyType: ZodString.create(),
        valueType: first,
        typeName: ZodFirstPartyTypeKind.ZodRecord
      }, processCreateParams(second)));
    }
  };
  __name(_ZodRecord, "ZodRecord");
  var ZodRecord = _ZodRecord;
  var _ZodMap = class _ZodMap extends ZodType {
    get keySchema() {
      return this._def.keyType;
    }
    get valueSchema() {
      return this._def.valueType;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.map) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.map,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const keyType = this._def.keyType;
      const valueType = this._def.valueType;
      const pairs = [...ctx.data.entries()].map(([key, value], index3) => {
        return {
          key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index3, "key"])),
          value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index3, "value"]))
        };
      });
      if (ctx.common.async) {
        const finalMap = /* @__PURE__ */ new Map();
        return Promise.resolve().then(async () => {
          for (const pair of pairs) {
            const key = await pair.key;
            const value = await pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        });
      } else {
        const finalMap = /* @__PURE__ */ new Map();
        for (const pair of pairs) {
          const key = pair.key;
          const value = pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      }
    }
  };
  __name(_ZodMap, "ZodMap");
  var ZodMap = _ZodMap;
  ZodMap.create = (keyType, valueType, params) => {
    return new ZodMap(__spreadValues({
      valueType,
      keyType,
      typeName: ZodFirstPartyTypeKind.ZodMap
    }, processCreateParams(params)));
  };
  var _ZodSet = class _ZodSet extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.set) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.set,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const def = this._def;
      if (def.minSize !== null) {
        if (ctx.data.size < def.minSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: def.minSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.minSize.message
          });
          status.dirty();
        }
      }
      if (def.maxSize !== null) {
        if (ctx.data.size > def.maxSize.value) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: def.maxSize.value,
            type: "set",
            inclusive: true,
            exact: false,
            message: def.maxSize.message
          });
          status.dirty();
        }
      }
      const valueType = this._def.valueType;
      function finalizeSet(elements2) {
        const parsedSet = /* @__PURE__ */ new Set();
        for (const element of elements2) {
          if (element.status === "aborted")
            return INVALID;
          if (element.status === "dirty")
            status.dirty();
          parsedSet.add(element.value);
        }
        return { status: status.value, value: parsedSet };
      }
      __name(finalizeSet, "finalizeSet");
      const elements = [...ctx.data.values()].map((item, i2) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i2)));
      if (ctx.common.async) {
        return Promise.all(elements).then((elements2) => finalizeSet(elements2));
      } else {
        return finalizeSet(elements);
      }
    }
    min(minSize, message2) {
      return new _ZodSet(__spreadProps(__spreadValues({}, this._def), {
        minSize: { value: minSize, message: errorUtil.toString(message2) }
      }));
    }
    max(maxSize, message2) {
      return new _ZodSet(__spreadProps(__spreadValues({}, this._def), {
        maxSize: { value: maxSize, message: errorUtil.toString(message2) }
      }));
    }
    size(size4, message2) {
      return this.min(size4, message2).max(size4, message2);
    }
    nonempty(message2) {
      return this.min(1, message2);
    }
  };
  __name(_ZodSet, "ZodSet");
  var ZodSet = _ZodSet;
  ZodSet.create = (valueType, params) => {
    return new ZodSet(__spreadValues({
      valueType,
      minSize: null,
      maxSize: null,
      typeName: ZodFirstPartyTypeKind.ZodSet
    }, processCreateParams(params)));
  };
  var _ZodFunction = class _ZodFunction extends ZodType {
    constructor() {
      super(...arguments);
      this.validate = this.implement;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.function) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.function,
          received: ctx.parsedType
        });
        return INVALID;
      }
      function makeArgsIssue(args, error) {
        return makeIssue({
          data: args,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_arguments,
            argumentsError: error
          }
        });
      }
      __name(makeArgsIssue, "makeArgsIssue");
      function makeReturnsIssue(returns, error) {
        return makeIssue({
          data: returns,
          path: ctx.path,
          errorMaps: [
            ctx.common.contextualErrorMap,
            ctx.schemaErrorMap,
            getErrorMap(),
            errorMap
          ].filter((x) => !!x),
          issueData: {
            code: ZodIssueCode.invalid_return_type,
            returnTypeError: error
          }
        });
      }
      __name(makeReturnsIssue, "makeReturnsIssue");
      const params = { errorMap: ctx.common.contextualErrorMap };
      const fn = ctx.data;
      if (this._def.returns instanceof ZodPromise) {
        const me2 = this;
        return OK(async function(...args) {
          const error = new ZodError([]);
          const parsedArgs = await me2._def.args.parseAsync(args, params).catch((e) => {
            error.addIssue(makeArgsIssue(args, e));
            throw error;
          });
          const result = await Reflect.apply(fn, this, parsedArgs);
          const parsedReturns = await me2._def.returns._def.type.parseAsync(result, params).catch((e) => {
            error.addIssue(makeReturnsIssue(result, e));
            throw error;
          });
          return parsedReturns;
        });
      } else {
        const me2 = this;
        return OK(function(...args) {
          const parsedArgs = me2._def.args.safeParse(args, params);
          if (!parsedArgs.success) {
            throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
          }
          const result = Reflect.apply(fn, this, parsedArgs.data);
          const parsedReturns = me2._def.returns.safeParse(result, params);
          if (!parsedReturns.success) {
            throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
          }
          return parsedReturns.data;
        });
      }
    }
    parameters() {
      return this._def.args;
    }
    returnType() {
      return this._def.returns;
    }
    args(...items) {
      return new _ZodFunction(__spreadProps(__spreadValues({}, this._def), {
        args: ZodTuple.create(items).rest(ZodUnknown.create())
      }));
    }
    returns(returnType) {
      return new _ZodFunction(__spreadProps(__spreadValues({}, this._def), {
        returns: returnType
      }));
    }
    implement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    strictImplement(func) {
      const validatedFunc = this.parse(func);
      return validatedFunc;
    }
    static create(args, returns, params) {
      return new _ZodFunction(__spreadValues({
        args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
        returns: returns || ZodUnknown.create(),
        typeName: ZodFirstPartyTypeKind.ZodFunction
      }, processCreateParams(params)));
    }
  };
  __name(_ZodFunction, "ZodFunction");
  var ZodFunction = _ZodFunction;
  var _ZodLazy = class _ZodLazy extends ZodType {
    get schema() {
      return this._def.getter();
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const lazySchema = this._def.getter();
      return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
    }
  };
  __name(_ZodLazy, "ZodLazy");
  var ZodLazy = _ZodLazy;
  ZodLazy.create = (getter, params) => {
    return new ZodLazy(__spreadValues({
      getter,
      typeName: ZodFirstPartyTypeKind.ZodLazy
    }, processCreateParams(params)));
  };
  var _ZodLiteral = class _ZodLiteral extends ZodType {
    _parse(input) {
      if (input.data !== this._def.value) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_literal,
          expected: this._def.value
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
    get value() {
      return this._def.value;
    }
  };
  __name(_ZodLiteral, "ZodLiteral");
  var ZodLiteral = _ZodLiteral;
  ZodLiteral.create = (value, params) => {
    return new ZodLiteral(__spreadValues({
      value,
      typeName: ZodFirstPartyTypeKind.ZodLiteral
    }, processCreateParams(params)));
  };
  function createZodEnum(values, params) {
    return new ZodEnum(__spreadValues({
      values,
      typeName: ZodFirstPartyTypeKind.ZodEnum
    }, processCreateParams(params)));
  }
  __name(createZodEnum, "createZodEnum");
  var _ZodEnum = class _ZodEnum extends ZodType {
    constructor() {
      super(...arguments);
      _ZodEnum_cache.set(this, void 0);
    }
    _parse(input) {
      if (typeof input.data !== "string") {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
        __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
      }
      if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
        const ctx = this._getOrReturnCtx(input);
        const expectedValues = this._def.values;
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get options() {
      return this._def.values;
    }
    get enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Values() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    get Enum() {
      const enumValues = {};
      for (const val of this._def.values) {
        enumValues[val] = val;
      }
      return enumValues;
    }
    extract(values, newDef = this._def) {
      return _ZodEnum.create(values, __spreadValues(__spreadValues({}, this._def), newDef));
    }
    exclude(values, newDef = this._def) {
      return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), __spreadValues(__spreadValues({}, this._def), newDef));
    }
  };
  __name(_ZodEnum, "ZodEnum");
  var ZodEnum = _ZodEnum;
  _ZodEnum_cache = /* @__PURE__ */ new WeakMap();
  ZodEnum.create = createZodEnum;
  var _ZodNativeEnum = class _ZodNativeEnum extends ZodType {
    constructor() {
      super(...arguments);
      _ZodNativeEnum_cache.set(this, void 0);
    }
    _parse(input) {
      const nativeEnumValues = util.getValidEnumValues(this._def.values);
      const ctx = this._getOrReturnCtx(input);
      if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          expected: util.joinValues(expectedValues),
          received: ctx.parsedType,
          code: ZodIssueCode.invalid_type
        });
        return INVALID;
      }
      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
        __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
      }
      if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
        const expectedValues = util.objectValues(nativeEnumValues);
        addIssueToContext(ctx, {
          received: ctx.data,
          code: ZodIssueCode.invalid_enum_value,
          options: expectedValues
        });
        return INVALID;
      }
      return OK(input.data);
    }
    get enum() {
      return this._def.values;
    }
  };
  __name(_ZodNativeEnum, "ZodNativeEnum");
  var ZodNativeEnum = _ZodNativeEnum;
  _ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
  ZodNativeEnum.create = (values, params) => {
    return new ZodNativeEnum(__spreadValues({
      values,
      typeName: ZodFirstPartyTypeKind.ZodNativeEnum
    }, processCreateParams(params)));
  };
  var _ZodPromise = class _ZodPromise extends ZodType {
    unwrap() {
      return this._def.type;
    }
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.promise,
          received: ctx.parsedType
        });
        return INVALID;
      }
      const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
      return OK(promisified.then((data) => {
        return this._def.type.parseAsync(data, {
          path: ctx.path,
          errorMap: ctx.common.contextualErrorMap
        });
      }));
    }
  };
  __name(_ZodPromise, "ZodPromise");
  var ZodPromise = _ZodPromise;
  ZodPromise.create = (schema, params) => {
    return new ZodPromise(__spreadValues({
      type: schema,
      typeName: ZodFirstPartyTypeKind.ZodPromise
    }, processCreateParams(params)));
  };
  var _ZodEffects = class _ZodEffects extends ZodType {
    innerType() {
      return this._def.schema;
    }
    sourceType() {
      return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
    }
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      const effect = this._def.effect || null;
      const checkCtx = {
        addIssue: /* @__PURE__ */ __name((arg) => {
          addIssueToContext(ctx, arg);
          if (arg.fatal) {
            status.abort();
          } else {
            status.dirty();
          }
        }, "addIssue"),
        get path() {
          return ctx.path;
        }
      };
      checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
      if (effect.type === "preprocess") {
        const processed = effect.transform(ctx.data, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(processed).then(async (processed2) => {
            if (status.value === "aborted")
              return INVALID;
            const result = await this._def.schema._parseAsync({
              data: processed2,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return INVALID;
            if (result.status === "dirty")
              return DIRTY(result.value);
            if (status.value === "dirty")
              return DIRTY(result.value);
            return result;
          });
        } else {
          if (status.value === "aborted")
            return INVALID;
          const result = this._def.schema._parseSync({
            data: processed,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        }
      }
      if (effect.type === "refinement") {
        const executeRefinement = /* @__PURE__ */ __name((acc) => {
          const result = effect.refinement(acc, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(result);
          }
          if (result instanceof Promise) {
            throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
          }
          return acc;
        }, "executeRefinement");
        if (ctx.common.async === false) {
          const inner = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          executeRefinement(inner.value);
          return { status: status.value, value: inner.value };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
            if (inner.status === "aborted")
              return INVALID;
            if (inner.status === "dirty")
              status.dirty();
            return executeRefinement(inner.value).then(() => {
              return { status: status.value, value: inner.value };
            });
          });
        }
      }
      if (effect.type === "transform") {
        if (ctx.common.async === false) {
          const base = this._def.schema._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (!isValid2(base))
            return base;
          const result = effect.transform(base.value, checkCtx);
          if (result instanceof Promise) {
            throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
          }
          return { status: status.value, value: result };
        } else {
          return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
            if (!isValid2(base))
              return base;
            return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
          });
        }
      }
      util.assertNever(effect);
    }
  };
  __name(_ZodEffects, "ZodEffects");
  var ZodEffects = _ZodEffects;
  ZodEffects.create = (schema, effect, params) => {
    return new ZodEffects(__spreadValues({
      schema,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect
    }, processCreateParams(params)));
  };
  ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
    return new ZodEffects(__spreadValues({
      schema,
      effect: { type: "preprocess", transform: preprocess },
      typeName: ZodFirstPartyTypeKind.ZodEffects
    }, processCreateParams(params)));
  };
  var _ZodOptional = class _ZodOptional extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.undefined) {
        return OK(void 0);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  __name(_ZodOptional, "ZodOptional");
  var ZodOptional = _ZodOptional;
  ZodOptional.create = (type, params) => {
    return new ZodOptional(__spreadValues({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodOptional
    }, processCreateParams(params)));
  };
  var _ZodNullable = class _ZodNullable extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType === ZodParsedType.null) {
        return OK(null);
      }
      return this._def.innerType._parse(input);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  __name(_ZodNullable, "ZodNullable");
  var ZodNullable = _ZodNullable;
  ZodNullable.create = (type, params) => {
    return new ZodNullable(__spreadValues({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodNullable
    }, processCreateParams(params)));
  };
  var _ZodDefault = class _ZodDefault extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      let data = ctx.data;
      if (ctx.parsedType === ZodParsedType.undefined) {
        data = this._def.defaultValue();
      }
      return this._def.innerType._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    removeDefault() {
      return this._def.innerType;
    }
  };
  __name(_ZodDefault, "ZodDefault");
  var ZodDefault = _ZodDefault;
  ZodDefault.create = (type, params) => {
    return new ZodDefault(__spreadValues({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodDefault,
      defaultValue: typeof params.default === "function" ? params.default : () => params.default
    }, processCreateParams(params)));
  };
  var _ZodCatch = class _ZodCatch extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const newCtx = __spreadProps(__spreadValues({}, ctx), {
        common: __spreadProps(__spreadValues({}, ctx.common), {
          issues: []
        })
      });
      const result = this._def.innerType._parse({
        data: newCtx.data,
        path: newCtx.path,
        parent: __spreadValues({}, newCtx)
      });
      if (isAsync(result)) {
        return result.then((result2) => {
          return {
            status: "valid",
            value: result2.status === "valid" ? result2.value : this._def.catchValue({
              get error() {
                return new ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        });
      } else {
        return {
          status: "valid",
          value: result.status === "valid" ? result.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      }
    }
    removeCatch() {
      return this._def.innerType;
    }
  };
  __name(_ZodCatch, "ZodCatch");
  var ZodCatch = _ZodCatch;
  ZodCatch.create = (type, params) => {
    return new ZodCatch(__spreadValues({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodCatch,
      catchValue: typeof params.catch === "function" ? params.catch : () => params.catch
    }, processCreateParams(params)));
  };
  var _ZodNaN = class _ZodNaN extends ZodType {
    _parse(input) {
      const parsedType = this._getType(input);
      if (parsedType !== ZodParsedType.nan) {
        const ctx = this._getOrReturnCtx(input);
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_type,
          expected: ZodParsedType.nan,
          received: ctx.parsedType
        });
        return INVALID;
      }
      return { status: "valid", value: input.data };
    }
  };
  __name(_ZodNaN, "ZodNaN");
  var ZodNaN = _ZodNaN;
  ZodNaN.create = (params) => {
    return new ZodNaN(__spreadValues({
      typeName: ZodFirstPartyTypeKind.ZodNaN
    }, processCreateParams(params)));
  };
  var BRAND = Symbol("zod_brand");
  var _ZodBranded = class _ZodBranded extends ZodType {
    _parse(input) {
      const { ctx } = this._processInputParams(input);
      const data = ctx.data;
      return this._def.type._parse({
        data,
        path: ctx.path,
        parent: ctx
      });
    }
    unwrap() {
      return this._def.type;
    }
  };
  __name(_ZodBranded, "ZodBranded");
  var ZodBranded = _ZodBranded;
  var _ZodPipeline = class _ZodPipeline extends ZodType {
    _parse(input) {
      const { status, ctx } = this._processInputParams(input);
      if (ctx.common.async) {
        const handleAsync = /* @__PURE__ */ __name(async () => {
          const inResult = await this._def.in._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return DIRTY(inResult.value);
          } else {
            return this._def.out._parseAsync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }, "handleAsync");
        return handleAsync();
      } else {
        const inResult = this._def.in._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return {
            status: "dirty",
            value: inResult.value
          };
        } else {
          return this._def.out._parseSync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      }
    }
    static create(a, b) {
      return new _ZodPipeline({
        in: a,
        out: b,
        typeName: ZodFirstPartyTypeKind.ZodPipeline
      });
    }
  };
  __name(_ZodPipeline, "ZodPipeline");
  var ZodPipeline = _ZodPipeline;
  var _ZodReadonly = class _ZodReadonly extends ZodType {
    _parse(input) {
      const result = this._def.innerType._parse(input);
      const freeze = /* @__PURE__ */ __name((data) => {
        if (isValid2(data)) {
          data.value = Object.freeze(data.value);
        }
        return data;
      }, "freeze");
      return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
    }
    unwrap() {
      return this._def.innerType;
    }
  };
  __name(_ZodReadonly, "ZodReadonly");
  var ZodReadonly = _ZodReadonly;
  ZodReadonly.create = (type, params) => {
    return new ZodReadonly(__spreadValues({
      innerType: type,
      typeName: ZodFirstPartyTypeKind.ZodReadonly
    }, processCreateParams(params)));
  };
  function cleanParams(params, data) {
    const p2 = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
    const p22 = typeof p2 === "string" ? { message: p2 } : p2;
    return p22;
  }
  __name(cleanParams, "cleanParams");
  function custom(check, _params = {}, fatal) {
    if (check)
      return ZodAny.create().superRefine((data, ctx) => {
        var _a121, _b93;
        const r3 = check(data);
        if (r3 instanceof Promise) {
          return r3.then((r4) => {
            var _a122, _b94;
            if (!r4) {
              const params = cleanParams(_params, data);
              const _fatal = (_b94 = (_a122 = params.fatal) !== null && _a122 !== void 0 ? _a122 : fatal) !== null && _b94 !== void 0 ? _b94 : true;
              ctx.addIssue(__spreadProps(__spreadValues({ code: "custom" }, params), { fatal: _fatal }));
            }
          });
        }
        if (!r3) {
          const params = cleanParams(_params, data);
          const _fatal = (_b93 = (_a121 = params.fatal) !== null && _a121 !== void 0 ? _a121 : fatal) !== null && _b93 !== void 0 ? _b93 : true;
          ctx.addIssue(__spreadProps(__spreadValues({ code: "custom" }, params), { fatal: _fatal }));
        }
        return;
      });
    return ZodAny.create();
  }
  __name(custom, "custom");
  var late = {
    object: ZodObject.lazycreate
  };
  var ZodFirstPartyTypeKind;
  (function(ZodFirstPartyTypeKind2) {
    ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
    ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
    ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
    ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
    ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
    ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
    ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
    ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
    ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
    ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
    ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
    ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
    ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
    ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
    ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
    ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
    ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
    ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
    ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
    ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
    ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
    ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
    ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
    ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
    ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
    ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
    ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
    ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
    ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
    ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
    ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
    ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
    ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
    ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
    ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
    ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
  })(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
  var instanceOfType = /* @__PURE__ */ __name((cls, params = {
    message: `Input not instance of ${cls.name}`
  }) => custom((data) => data instanceof cls, params), "instanceOfType");
  var stringType = ZodString.create;
  var numberType = ZodNumber.create;
  var nanType = ZodNaN.create;
  var bigIntType = ZodBigInt.create;
  var booleanType = ZodBoolean.create;
  var dateType = ZodDate.create;
  var symbolType = ZodSymbol.create;
  var undefinedType = ZodUndefined.create;
  var nullType = ZodNull.create;
  var anyType = ZodAny.create;
  var unknownType = ZodUnknown.create;
  var neverType = ZodNever.create;
  var voidType = ZodVoid.create;
  var arrayType = ZodArray.create;
  var objectType = ZodObject.create;
  var strictObjectType = ZodObject.strictCreate;
  var unionType = ZodUnion.create;
  var discriminatedUnionType = ZodDiscriminatedUnion.create;
  var intersectionType = ZodIntersection.create;
  var tupleType = ZodTuple.create;
  var recordType = ZodRecord.create;
  var mapType = ZodMap.create;
  var setType = ZodSet.create;
  var functionType = ZodFunction.create;
  var lazyType = ZodLazy.create;
  var literalType = ZodLiteral.create;
  var enumType = ZodEnum.create;
  var nativeEnumType = ZodNativeEnum.create;
  var promiseType = ZodPromise.create;
  var effectsType = ZodEffects.create;
  var optionalType = ZodOptional.create;
  var nullableType = ZodNullable.create;
  var preprocessType = ZodEffects.createWithPreprocess;
  var pipelineType = ZodPipeline.create;
  var ostring = /* @__PURE__ */ __name(() => stringType().optional(), "ostring");
  var onumber = /* @__PURE__ */ __name(() => numberType().optional(), "onumber");
  var oboolean = /* @__PURE__ */ __name(() => booleanType().optional(), "oboolean");
  var coerce = {
    string: /* @__PURE__ */ __name((arg) => ZodString.create(__spreadProps(__spreadValues({}, arg), { coerce: true })), "string"),
    number: /* @__PURE__ */ __name((arg) => ZodNumber.create(__spreadProps(__spreadValues({}, arg), { coerce: true })), "number"),
    boolean: /* @__PURE__ */ __name((arg) => ZodBoolean.create(__spreadProps(__spreadValues({}, arg), {
      coerce: true
    })), "boolean"),
    bigint: /* @__PURE__ */ __name((arg) => ZodBigInt.create(__spreadProps(__spreadValues({}, arg), { coerce: true })), "bigint"),
    date: /* @__PURE__ */ __name((arg) => ZodDate.create(__spreadProps(__spreadValues({}, arg), { coerce: true })), "date")
  };
  var NEVER = INVALID;
  var z = /* @__PURE__ */ Object.freeze({
    __proto__: null,
    defaultErrorMap: errorMap,
    setErrorMap,
    getErrorMap,
    makeIssue,
    EMPTY_PATH,
    addIssueToContext,
    ParseStatus,
    INVALID,
    DIRTY,
    OK,
    isAborted,
    isDirty,
    isValid: isValid2,
    isAsync,
    get util() {
      return util;
    },
    get objectUtil() {
      return objectUtil;
    },
    ZodParsedType,
    getParsedType,
    ZodType,
    datetimeRegex,
    ZodString,
    ZodNumber,
    ZodBigInt,
    ZodBoolean,
    ZodDate,
    ZodSymbol,
    ZodUndefined,
    ZodNull,
    ZodAny,
    ZodUnknown,
    ZodNever,
    ZodVoid,
    ZodArray,
    ZodObject,
    ZodUnion,
    ZodDiscriminatedUnion,
    ZodIntersection,
    ZodTuple,
    ZodRecord,
    ZodMap,
    ZodSet,
    ZodFunction,
    ZodLazy,
    ZodLiteral,
    ZodEnum,
    ZodNativeEnum,
    ZodPromise,
    ZodEffects,
    ZodTransformer: ZodEffects,
    ZodOptional,
    ZodNullable,
    ZodDefault,
    ZodCatch,
    ZodNaN,
    BRAND,
    ZodBranded,
    ZodPipeline,
    ZodReadonly,
    custom,
    Schema: ZodType,
    ZodSchema: ZodType,
    late,
    get ZodFirstPartyTypeKind() {
      return ZodFirstPartyTypeKind;
    },
    coerce,
    any: anyType,
    array: arrayType,
    bigint: bigIntType,
    boolean: booleanType,
    date: dateType,
    discriminatedUnion: discriminatedUnionType,
    effect: effectsType,
    "enum": enumType,
    "function": functionType,
    "instanceof": instanceOfType,
    intersection: intersectionType,
    lazy: lazyType,
    literal: literalType,
    map: mapType,
    nan: nanType,
    nativeEnum: nativeEnumType,
    never: neverType,
    "null": nullType,
    nullable: nullableType,
    number: numberType,
    object: objectType,
    oboolean,
    onumber,
    optional: optionalType,
    ostring,
    pipeline: pipelineType,
    preprocess: preprocessType,
    promise: promiseType,
    record: recordType,
    set: setType,
    strictObject: strictObjectType,
    string: stringType,
    symbol: symbolType,
    transformer: effectsType,
    tuple: tupleType,
    "undefined": undefinedType,
    union: unionType,
    unknown: unknownType,
    "void": voidType,
    NEVER,
    ZodIssueCode,
    quotelessJson,
    ZodError
  });

  // node_modules/drizzle-zod/index.mjs
  var CONSTANTS = {
    INT8_MIN: -128,
    INT8_MAX: 127,
    INT8_UNSIGNED_MAX: 255,
    INT16_MIN: -32768,
    INT16_MAX: 32767,
    INT16_UNSIGNED_MAX: 65535,
    INT24_MIN: -8388608,
    INT24_MAX: 8388607,
    INT24_UNSIGNED_MAX: 16777215,
    INT32_MIN: -2147483648,
    INT32_MAX: 2147483647,
    INT32_UNSIGNED_MAX: 4294967295,
    INT48_MIN: -140737488355328,
    INT48_MAX: 140737488355327,
    INT48_UNSIGNED_MAX: 281474976710655,
    INT64_MIN: -/* @__PURE__ */ BigInt("9223372036854775808"),
    INT64_MAX: /* @__PURE__ */ BigInt("9223372036854775807"),
    INT64_UNSIGNED_MAX: /* @__PURE__ */ BigInt("18446744073709551615")
  };
  function isColumnType(column, columnTypes) {
    return columnTypes.includes(column.columnType);
  }
  __name(isColumnType, "isColumnType");
  function isWithEnum(column) {
    return "enumValues" in column && Array.isArray(column.enumValues) && column.enumValues.length > 0;
  }
  __name(isWithEnum, "isWithEnum");
  var literalSchema = z.union([z.string(), z.number(), z.boolean(), z.null()]);
  var jsonSchema = z.union([literalSchema, z.record(z.any()), z.array(z.any())]);
  var bufferSchema = z.custom((v) => v instanceof Buffer);
  function columnToSchema(column, factory) {
    var _a121, _b93;
    const z$1 = (_a121 = factory == null ? void 0 : factory.zodInstance) != null ? _a121 : z;
    const coerce2 = (_b93 = factory == null ? void 0 : factory.coerce) != null ? _b93 : {};
    let schema;
    if (isWithEnum(column)) {
      schema = column.enumValues.length ? z$1.enum(column.enumValues) : z$1.string();
    }
    if (!schema) {
      if (isColumnType(column, ["PgGeometry", "PgPointTuple"])) {
        schema = z$1.tuple([z$1.number(), z$1.number()]);
      } else if (isColumnType(column, ["PgGeometryObject", "PgPointObject"])) {
        schema = z$1.object({ x: z$1.number(), y: z$1.number() });
      } else if (isColumnType(column, ["PgHalfVector", "PgVector"])) {
        schema = z$1.array(z$1.number());
        schema = column.dimensions ? schema.length(column.dimensions) : schema;
      } else if (isColumnType(column, ["PgLine"])) {
        schema = z$1.tuple([z$1.number(), z$1.number(), z$1.number()]);
      } else if (isColumnType(column, ["PgLineABC"])) {
        schema = z$1.object({
          a: z$1.number(),
          b: z$1.number(),
          c: z$1.number()
        });
      } else if (isColumnType(column, ["PgArray"])) {
        schema = z$1.array(columnToSchema(column.baseColumn, z$1));
        schema = column.size ? schema.length(column.size) : schema;
      } else if (column.dataType === "array") {
        schema = z$1.array(z$1.any());
      } else if (column.dataType === "number") {
        schema = numberColumnToSchema(column, z$1, coerce2);
      } else if (column.dataType === "bigint") {
        schema = bigintColumnToSchema(column, z$1, coerce2);
      } else if (column.dataType === "boolean") {
        schema = coerce2 === true || coerce2.boolean ? z$1.coerce.boolean() : z$1.boolean();
      } else if (column.dataType === "date") {
        schema = coerce2 === true || coerce2.date ? z$1.coerce.date() : z$1.date();
      } else if (column.dataType === "string") {
        schema = stringColumnToSchema(column, z$1, coerce2);
      } else if (column.dataType === "json") {
        schema = jsonSchema;
      } else if (column.dataType === "custom") {
        schema = z$1.any();
      } else if (column.dataType === "buffer") {
        schema = bufferSchema;
      }
    }
    if (!schema) {
      schema = z$1.any();
    }
    return schema;
  }
  __name(columnToSchema, "columnToSchema");
  function numberColumnToSchema(column, z2, coerce2) {
    let unsigned = column.getSQLType().includes("unsigned");
    let min2;
    let max2;
    let integer2 = false;
    if (isColumnType(column, ["MySqlTinyInt", "SingleStoreTinyInt"])) {
      min2 = unsigned ? 0 : CONSTANTS.INT8_MIN;
      max2 = unsigned ? CONSTANTS.INT8_UNSIGNED_MAX : CONSTANTS.INT8_MAX;
      integer2 = true;
    } else if (isColumnType(column, [
      "PgSmallInt",
      "PgSmallSerial",
      "MySqlSmallInt",
      "SingleStoreSmallInt"
    ])) {
      min2 = unsigned ? 0 : CONSTANTS.INT16_MIN;
      max2 = unsigned ? CONSTANTS.INT16_UNSIGNED_MAX : CONSTANTS.INT16_MAX;
      integer2 = true;
    } else if (isColumnType(column, [
      "PgReal",
      "MySqlFloat",
      "MySqlMediumInt",
      "SingleStoreMediumInt",
      "SingleStoreFloat"
    ])) {
      min2 = unsigned ? 0 : CONSTANTS.INT24_MIN;
      max2 = unsigned ? CONSTANTS.INT24_UNSIGNED_MAX : CONSTANTS.INT24_MAX;
      integer2 = isColumnType(column, ["MySqlMediumInt", "SingleStoreMediumInt"]);
    } else if (isColumnType(column, [
      "PgInteger",
      "PgSerial",
      "MySqlInt",
      "SingleStoreInt"
    ])) {
      min2 = unsigned ? 0 : CONSTANTS.INT32_MIN;
      max2 = unsigned ? CONSTANTS.INT32_UNSIGNED_MAX : CONSTANTS.INT32_MAX;
      integer2 = true;
    } else if (isColumnType(column, [
      "PgDoublePrecision",
      "MySqlReal",
      "MySqlDouble",
      "SingleStoreReal",
      "SingleStoreDouble",
      "SQLiteReal"
    ])) {
      min2 = unsigned ? 0 : CONSTANTS.INT48_MIN;
      max2 = unsigned ? CONSTANTS.INT48_UNSIGNED_MAX : CONSTANTS.INT48_MAX;
    } else if (isColumnType(column, [
      "PgBigInt53",
      "PgBigSerial53",
      "MySqlBigInt53",
      "MySqlSerial",
      "SingleStoreBigInt53",
      "SingleStoreSerial",
      "SQLiteInteger"
    ])) {
      unsigned = unsigned || isColumnType(column, ["MySqlSerial", "SingleStoreSerial"]);
      min2 = unsigned ? 0 : Number.MIN_SAFE_INTEGER;
      max2 = Number.MAX_SAFE_INTEGER;
      integer2 = true;
    } else if (isColumnType(column, ["MySqlYear", "SingleStoreYear"])) {
      min2 = 1901;
      max2 = 2155;
      integer2 = true;
    } else {
      min2 = Number.MIN_SAFE_INTEGER;
      max2 = Number.MAX_SAFE_INTEGER;
    }
    let schema = coerce2 === true || (coerce2 == null ? void 0 : coerce2.number) ? z2.coerce.number() : z2.number();
    schema = schema.min(min2).max(max2);
    return integer2 ? schema.int() : schema;
  }
  __name(numberColumnToSchema, "numberColumnToSchema");
  function bigintColumnToSchema(column, z2, coerce2) {
    const unsigned = column.getSQLType().includes("unsigned");
    const min2 = unsigned ? /* @__PURE__ */ BigInt("0") : CONSTANTS.INT64_MIN;
    const max2 = unsigned ? CONSTANTS.INT64_UNSIGNED_MAX : CONSTANTS.INT64_MAX;
    const schema = coerce2 === true || (coerce2 == null ? void 0 : coerce2.bigint) ? z2.coerce.bigint() : z2.bigint();
    return schema.min(min2).max(max2);
  }
  __name(bigintColumnToSchema, "bigintColumnToSchema");
  function stringColumnToSchema(column, z2, coerce2) {
    var _a121;
    if (isColumnType(column, ["PgUUID"])) {
      return z2.string().uuid();
    }
    let max2;
    let regex;
    let fixed = false;
    if (isColumnType(column, ["PgVarchar", "SQLiteText"])) {
      max2 = column.length;
    } else if (isColumnType(column, ["MySqlVarChar", "SingleStoreVarChar"])) {
      max2 = (_a121 = column.length) != null ? _a121 : CONSTANTS.INT16_UNSIGNED_MAX;
    } else if (isColumnType(column, ["MySqlText", "SingleStoreText"])) {
      if (column.textType === "longtext") {
        max2 = CONSTANTS.INT32_UNSIGNED_MAX;
      } else if (column.textType === "mediumtext") {
        max2 = CONSTANTS.INT24_UNSIGNED_MAX;
      } else if (column.textType === "text") {
        max2 = CONSTANTS.INT16_UNSIGNED_MAX;
      } else {
        max2 = CONSTANTS.INT8_UNSIGNED_MAX;
      }
    }
    if (isColumnType(column, [
      "PgChar",
      "MySqlChar",
      "SingleStoreChar"
    ])) {
      max2 = column.length;
      fixed = true;
    }
    if (isColumnType(column, ["PgBinaryVector"])) {
      regex = /^[01]+$/;
      max2 = column.dimensions;
    }
    let schema = coerce2 === true || (coerce2 == null ? void 0 : coerce2.string) ? z2.coerce.string() : z2.string();
    schema = regex ? schema.regex(regex) : schema;
    return max2 && fixed ? schema.length(max2) : max2 ? schema.max(max2) : schema;
  }
  __name(stringColumnToSchema, "stringColumnToSchema");
  function getColumns(tableLike) {
    return isTable(tableLike) ? getTableColumns(tableLike) : getViewSelectedFields(tableLike);
  }
  __name(getColumns, "getColumns");
  function handleColumns(columns, refinements, conditions, factory) {
    var _a121;
    const columnSchemas = {};
    for (const [key, selected] of Object.entries(columns)) {
      if (!is(selected, Column) && !is(selected, SQL) && !is(selected, SQL.Aliased) && typeof selected === "object") {
        const columns2 = isTable(selected) || isView(selected) ? getColumns(selected) : selected;
        columnSchemas[key] = handleColumns(columns2, (_a121 = refinements[key]) != null ? _a121 : {}, conditions, factory);
        continue;
      }
      const refinement = refinements[key];
      if (refinement !== void 0 && typeof refinement !== "function") {
        columnSchemas[key] = refinement;
        continue;
      }
      const column = is(selected, Column) ? selected : void 0;
      const schema = column ? columnToSchema(column, factory) : z.any();
      const refined = typeof refinement === "function" ? refinement(schema) : schema;
      if (conditions.never(column)) {
        continue;
      } else {
        columnSchemas[key] = refined;
      }
      if (column) {
        if (conditions.nullable(column)) {
          columnSchemas[key] = columnSchemas[key].nullable();
        }
        if (conditions.optional(column)) {
          columnSchemas[key] = columnSchemas[key].optional();
        }
      }
    }
    return z.object(columnSchemas);
  }
  __name(handleColumns, "handleColumns");
  var insertConditions = {
    never: /* @__PURE__ */ __name((column) => {
      var _a121, _b93;
      return ((_a121 = column == null ? void 0 : column.generated) == null ? void 0 : _a121.type) === "always" || ((_b93 = column == null ? void 0 : column.generatedIdentity) == null ? void 0 : _b93.type) === "always";
    }, "never"),
    optional: /* @__PURE__ */ __name((column) => !column.notNull || column.notNull && column.hasDefault, "optional"),
    nullable: /* @__PURE__ */ __name((column) => !column.notNull, "nullable")
  };
  var createInsertSchema = /* @__PURE__ */ __name((entity, refine) => {
    const columns = getColumns(entity);
    return handleColumns(columns, refine != null ? refine : {}, insertConditions);
  }, "createInsertSchema");

  // shared/schema.ts
  var sessions = pgTable(
    "sessions",
    {
      sid: varchar("sid").primaryKey(),
      sess: jsonb("sess").notNull(),
      expire: timestamp("expire").notNull()
    },
    (table) => [index2("IDX_session_expire").on(table.expire)]
  );
  var users = pgTable("users", {
    id: serial("id").primaryKey(),
    oktaId: text("okta_id").unique(),
    firstName: text("first_name").notNull(),
    lastName: text("last_name").notNull(),
    email: text("email").notNull().unique(),
    login: text("login").notNull().unique(),
    mobilePhone: text("mobile_phone"),
    department: text("department"),
    title: text("title"),
    employeeType: text("employee_type"),
    profileImageUrl: text("profile_image_url"),
    managerId: integer("manager_id").references(() => users.id),
    manager: text("manager"),
    // Manager's name from OKTA
    status: text("status").notNull().default("ACTIVE"),
    // ACTIVE, SUSPENDED, DEPROVISIONED
    groups: text("groups").array().default([]),
    applications: text("applications").array().default([]),
    created: timestamp("created").defaultNow(),
    lastUpdated: timestamp("last_updated").defaultNow(),
    lastLogin: timestamp("last_login"),
    passwordChanged: timestamp("password_changed")
  });
  var insertUserSchema = createInsertSchema(users).omit({
    id: true,
    oktaId: true,
    created: true,
    lastUpdated: true,
    lastLogin: true,
    passwordChanged: true
  }).extend({
    firstName: z.string().min(1, "First name is required"),
    lastName: z.string().min(1, "Last name is required"),
    email: z.string().email("Invalid email address"),
    login: z.string().min(1, "Login is required"),
    sendActivationEmail: z.boolean().optional()
  });
  var updateUserSchema = insertUserSchema.partial().omit({
    sendActivationEmail: true
  });

  // client/src/components/create-user-modal.tsx
  function CreateUserModal({ open, onClose, onSuccess }) {
    const { toast: toast2 } = useToast();
    const [selectedGroups, setSelectedGroups] = (0, import_react16.useState)([]);
    const [managerSearch, setManagerSearch] = (0, import_react16.useState)("");
    const [selectedManager, setSelectedManager] = (0, import_react16.useState)(null);
    const [showManagerDropdown, setShowManagerDropdown] = (0, import_react16.useState)(false);
    const { data: usersData } = useQuery({
      queryKey: ["/api/users"],
      enabled: open
    });
    const availableManagers = (usersData == null ? void 0 : usersData.users) || [];
    const filteredManagers = (0, import_react16.useMemo)(() => {
      if (!managerSearch || managerSearch.length < 2) return [];
      const searchTerm = managerSearch.toLowerCase().trim();
      return availableManagers.filter((user) => {
        var _a121, _b93, _c5, _d4, _e4;
        const firstName = ((_a121 = user.firstName) == null ? void 0 : _a121.toLowerCase()) || "";
        const lastName = ((_b93 = user.lastName) == null ? void 0 : _b93.toLowerCase()) || "";
        const email = ((_c5 = user.email) == null ? void 0 : _c5.toLowerCase()) || "";
        const title = ((_d4 = user.title) == null ? void 0 : _d4.toLowerCase()) || "";
        const department = ((_e4 = user.department) == null ? void 0 : _e4.toLowerCase()) || "";
        const fullName = `${firstName} ${lastName}`;
        return firstName.includes(searchTerm) || lastName.includes(searchTerm) || fullName.includes(searchTerm) || email.includes(searchTerm) || title.includes(searchTerm) || department.includes(searchTerm);
      }).sort((a, b) => {
        var _a121, _b93, _c5, _d4;
        const aFullName = `${a.firstName} ${a.lastName}`.toLowerCase();
        const bFullName = `${b.firstName} ${b.lastName}`.toLowerCase();
        const aFirstName = ((_a121 = a.firstName) == null ? void 0 : _a121.toLowerCase()) || "";
        const bFirstName = ((_b93 = b.firstName) == null ? void 0 : _b93.toLowerCase()) || "";
        const aLastName = ((_c5 = a.lastName) == null ? void 0 : _c5.toLowerCase()) || "";
        const bLastName = ((_d4 = b.lastName) == null ? void 0 : _d4.toLowerCase()) || "";
        if (aFirstName.startsWith(searchTerm) && !bFirstName.startsWith(searchTerm)) return -1;
        if (bFirstName.startsWith(searchTerm) && !aFirstName.startsWith(searchTerm)) return 1;
        if (aLastName.startsWith(searchTerm) && !bLastName.startsWith(searchTerm)) return -1;
        if (bLastName.startsWith(searchTerm) && !aLastName.startsWith(searchTerm)) return 1;
        if (aFullName.startsWith(searchTerm) && !bFullName.startsWith(searchTerm)) return -1;
        if (bFullName.startsWith(searchTerm) && !aFullName.startsWith(searchTerm)) return 1;
        return aFullName.localeCompare(bFullName);
      }).slice(0, 25);
    }, [availableManagers, managerSearch]);
    const form = useForm({
      resolver: t2(insertUserSchema),
      defaultValues: {
        firstName: "",
        lastName: "",
        email: "",
        login: "",
        mobilePhone: "",
        department: "",
        title: "",
        employeeType: "",
        managerId: void 0,
        status: "ACTIVE",
        groups: [],
        applications: [],
        sendActivationEmail: true
      }
    });
    const createUserMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async (userData) => {
        return apiRequest("POST", "/api/users", userData);
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name(() => {
        queryClient.invalidateQueries({ queryKey: ["/api/users"] });
        toast2({
          title: "Success",
          description: "User created successfully"
        });
        form.reset();
        setSelectedGroups([]);
        onSuccess();
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error) => {
        toast2({
          title: "Error",
          description: error.message || "Failed to create user",
          variant: "destructive"
        });
      }, "onError")
    });
    const onSubmit = /* @__PURE__ */ __name((data) => {
      const autoGroups = [];
      if (data.employeeType) {
        switch (data.employeeType) {
          case "Employee":
            autoGroups.push("MTX-ET-Employee");
            break;
          case "Contractor":
            autoGroups.push("MTX-ET-Contractor");
            break;
          case "Intern":
            autoGroups.push("MTX-ET-Intern");
            break;
          case "Part Time":
            autoGroups.push("MTX-ET-Part_Time");
            break;
        }
      }
      createUserMutation.mutate(__spreadProps(__spreadValues({}, data), {
        managerId: (selectedManager == null ? void 0 : selectedManager.id) || void 0,
        groups: [...autoGroups, ...selectedGroups]
      }));
    }, "onSubmit");
    const handleGroupToggle = /* @__PURE__ */ __name((groupName, checked) => {
      if (checked) {
        setSelectedGroups([...selectedGroups, groupName]);
      } else {
        setSelectedGroups(selectedGroups.filter((g) => g !== groupName));
      }
    }, "handleGroupToggle");
    const handleManagerSelect = /* @__PURE__ */ __name((user) => {
      setSelectedManager(user);
      const fullName = `${user.firstName} ${user.lastName}`;
      setManagerSearch(fullName);
      form.setValue("manager", fullName);
      setShowManagerDropdown(false);
    }, "handleManagerSelect");
    const handleManagerSearchChange = /* @__PURE__ */ __name((value) => {
      setManagerSearch(value);
      setShowManagerDropdown(value.length > 0);
      if (value === "") {
        setSelectedManager(null);
      }
    }, "handleManagerSearchChange");
    const handleClose = /* @__PURE__ */ __name(() => {
      form.reset();
      setSelectedGroups([]);
      setManagerSearch("");
      setSelectedManager(null);
      setShowManagerDropdown(false);
      onClose();
    }, "handleClose");
    const availableGroups = [
      "All Employees",
      "Engineering Team",
      "Marketing Team",
      "Sales Team",
      "HR Team",
      "Finance Team",
      "Managers"
    ];
    return /* @__PURE__ */ React.createElement(Dialog2, { open, onOpenChange: handleClose }, /* @__PURE__ */ React.createElement(DialogContent2, { className: "max-w-2xl max-h-screen overflow-y-auto" }, /* @__PURE__ */ React.createElement(DialogHeader, null, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement(DialogTitle2, { className: "text-lg font-semibold text-gray-900" }, "Create New User"), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "ghost",
        size: "icon",
        onClick: handleClose,
        className: "text-gray-400 hover:text-gray-600"
      },
      /* @__PURE__ */ React.createElement(X, { className: "w-4 h-4" })
    ))), /* @__PURE__ */ React.createElement(Form, __spreadValues({}, form), /* @__PURE__ */ React.createElement("form", { onSubmit: form.handleSubmit(onSubmit), className: "space-y-6" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4" }, /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "firstName",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "First Name *"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({ placeholder: "Enter first name" }, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "lastName",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Last Name *"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({ placeholder: "Enter last name" }, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    )), /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4" }, /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "email",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Email Username *"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement("div", { className: "flex" }, /* @__PURE__ */ React.createElement(
          Input,
          {
            placeholder: "username",
            value: field.value ? field.value.replace("@mazetx.com", "") : "",
            onChange: (e) => {
              const username = e.target.value;
              const fullEmail = username ? `${username}@mazetx.com` : "";
              field.onChange(fullEmail);
              form.setValue("login", fullEmail);
            },
            className: "rounded-r-none"
          }
        ), /* @__PURE__ */ React.createElement("div", { className: "flex items-center px-3 bg-gray-50 border border-l-0 border-gray-300 rounded-r-md text-sm text-gray-500" }, "@mazetx.com"))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "login",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Login *"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(
          Input,
          __spreadProps(__spreadValues({
            placeholder: "Login will auto-populate"
          }, field), {
            className: "bg-gray-50",
            readOnly: true
          })
        )), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    )), /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-4" }, /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "mobilePhone",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Mobile Phone"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({ type: "tel", placeholder: "Enter mobile phone" }, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "department",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Department"), /* @__PURE__ */ React.createElement(Select2, { onValueChange: field.onChange, value: field.value || "" }, /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(SelectTrigger2, null, /* @__PURE__ */ React.createElement(SelectValue2, { placeholder: "Select Department" }))), /* @__PURE__ */ React.createElement(SelectContent2, null, /* @__PURE__ */ React.createElement(SelectItem2, { value: "none" }, "Select Department"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Engineering" }, "Engineering"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Marketing" }, "Marketing"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Sales" }, "Sales"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "HR" }, "Human Resources"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Finance" }, "Finance"))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    )), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "title",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Job Title"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({ placeholder: "Enter job title" }, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "employeeType",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Employee Type"), /* @__PURE__ */ React.createElement(Select2, { onValueChange: field.onChange, value: field.value || "" }, /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(SelectTrigger2, null, /* @__PURE__ */ React.createElement(SelectValue2, { placeholder: "Select Employee Type" }))), /* @__PURE__ */ React.createElement(SelectContent2, null, /* @__PURE__ */ React.createElement(SelectItem2, { value: "Employee" }, "Employee"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Contractor" }, "Contractor"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Intern" }, "Intern"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Part Time" }, "Part Time"))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "manager",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Manager"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement("div", { className: "relative" }, /* @__PURE__ */ React.createElement(
          Input,
          __spreadProps(__spreadValues({}, field), {
            onChange: (e) => {
              field.onChange(e);
              setManagerSearch(e.target.value);
              setShowManagerDropdown(e.target.value.length > 0);
              if (e.target.value === "") {
                setSelectedManager(null);
              }
            },
            placeholder: "Type to search for manager..."
          })
        ), managerSearch && filteredManagers.length > 0 && /* @__PURE__ */ React.createElement("div", { className: "absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto" }, filteredManagers.map((manager) => /* @__PURE__ */ React.createElement(
          "div",
          {
            key: manager.id,
            className: "px-3 py-2 cursor-pointer hover:bg-gray-100",
            onClick: () => {
              const fullName = `${manager.firstName} ${manager.lastName}`;
              field.onChange(fullName);
              setSelectedManager(manager);
              setManagerSearch("");
              setShowManagerDropdown(false);
            }
          },
          /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, manager.firstName, " ", manager.lastName),
          /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, manager.email),
          manager.title && /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-400" }, manager.title)
        ))))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { className: "text-sm font-medium text-gray-700 mb-2 block" }, "Groups"), /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, availableGroups.map((group) => /* @__PURE__ */ React.createElement("div", { key: group, className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
      Checkbox2,
      {
        id: `group-${group}`,
        checked: selectedGroups.includes(group),
        onCheckedChange: (checked) => handleGroupToggle(group, checked)
      }
    ), /* @__PURE__ */ React.createElement(Label2, { htmlFor: `group-${group}`, className: "text-sm text-gray-700" }, group))))), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "sendActivationEmail",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, { className: "flex flex-row items-start space-x-3 space-y-0" }, /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(
          Checkbox2,
          {
            checked: field.value,
            onCheckedChange: field.onChange
          }
        )), /* @__PURE__ */ React.createElement("div", { className: "space-y-1 leading-none" }, /* @__PURE__ */ React.createElement(FormLabel, null, "Send activation email to user")))
      }
    ), /* @__PURE__ */ React.createElement("div", { className: "flex justify-end space-x-3 pt-4 border-t border-gray-200" }, /* @__PURE__ */ React.createElement(Button, { type: "button", variant: "outline", onClick: handleClose }, "Cancel"), /* @__PURE__ */ React.createElement(
      Button,
      {
        type: "submit",
        className: "bg-blue-600 hover:bg-blue-700 text-white",
        disabled: createUserMutation.isPending
      },
      createUserMutation.isPending ? "Creating..." : "Create User"
    ))))));
  }
  __name(CreateUserModal, "CreateUserModal");

  // client/src/pages/dashboard.tsx
  function Dashboard() {
    var _a121, _b93;
    const [, setLocation] = useLocation();
    const [searchQuery, setSearchQuery] = (0, import_react17.useState)("");
    const [statusFilter, setStatusFilter] = (0, import_react17.useState)("all");
    const [departmentFilter, setDepartmentFilter] = (0, import_react17.useState)("all");
    const [currentPage, setCurrentPage] = (0, import_react17.useState)(1);
    const [usersPerPage, setUsersPerPage] = (0, import_react17.useState)(25);
    const [isCreateModalOpen, setIsCreateModalOpen] = (0, import_react17.useState)(false);
    const { data: currentUser } = useQuery({
      queryKey: ["/api/auth/user"]
    });
    const { data, isLoading, refetch } = useQuery({
      queryKey: ["/api/users", currentPage, usersPerPage, searchQuery, statusFilter, departmentFilter]
    });
    const handleUserClick = /* @__PURE__ */ __name((userId) => {
      setLocation(`/users/${userId}`);
    }, "handleUserClick");
    const handleRefresh = /* @__PURE__ */ __name(() => {
      refetch();
    }, "handleRefresh");
    const totalPages = Math.ceil(((data == null ? void 0 : data.total) || 0) / usersPerPage);
    return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex flex-col" }, /* @__PURE__ */ React.createElement("header", { className: "bg-white border-b border-gray-200 px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("nav", { className: "flex text-sm text-gray-500 mb-1" }, /* @__PURE__ */ React.createElement("span", null, "Directory"), /* @__PURE__ */ React.createElement("span", { className: "mx-2" }, "/"), /* @__PURE__ */ React.createElement("span", { className: "text-gray-900 font-medium" }, "Users")), /* @__PURE__ */ React.createElement("h2", { className: "text-2xl font-semibold text-gray-900" }, "User Management")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-3" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        onClick: () => setIsCreateModalOpen(true),
        className: "bg-blue-600 hover:bg-blue-700 text-white"
      },
      /* @__PURE__ */ React.createElement(Plus, { className: "w-4 h-4 mr-2" }),
      "Add User"
    ), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2 px-3 py-2 bg-gray-50 rounded-lg border" }, /* @__PURE__ */ React.createElement("div", { className: "w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center" }, /* @__PURE__ */ React.createElement("span", { className: "text-white text-sm font-medium" }, (_a121 = currentUser == null ? void 0 : currentUser.firstName) == null ? void 0 : _a121[0], (_b93 = currentUser == null ? void 0 : currentUser.lastName) == null ? void 0 : _b93[0])), /* @__PURE__ */ React.createElement("div", { className: "text-sm" }, /* @__PURE__ */ React.createElement("p", { className: "font-medium text-gray-900" }, currentUser == null ? void 0 : currentUser.firstName, " ", currentUser == null ? void 0 : currentUser.lastName), /* @__PURE__ */ React.createElement("p", { className: "text-gray-500" }, currentUser == null ? void 0 : currentUser.email)))))), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-auto p-6" }, /* @__PURE__ */ React.createElement("div", { className: "mb-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-col sm:flex-row gap-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex-1 relative" }, /* @__PURE__ */ React.createElement(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }), /* @__PURE__ */ React.createElement(
      Input,
      {
        type: "text",
        placeholder: "Search users...",
        value: searchQuery,
        onChange: (e) => setSearchQuery(e.target.value),
        className: "pl-10"
      }
    )), /* @__PURE__ */ React.createElement("div", { className: "flex gap-3" }, /* @__PURE__ */ React.createElement(Select2, { value: statusFilter, onValueChange: setStatusFilter }, /* @__PURE__ */ React.createElement(SelectTrigger2, { className: "w-40" }, /* @__PURE__ */ React.createElement(SelectValue2, { placeholder: "All Status" })), /* @__PURE__ */ React.createElement(SelectContent2, null, /* @__PURE__ */ React.createElement(SelectItem2, { value: "all" }, "All Status"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "ACTIVE" }, "Active"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "SUSPENDED" }, "Suspended"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "DEPROVISIONED" }, "Deprovisioned"))), /* @__PURE__ */ React.createElement(Select2, { value: departmentFilter, onValueChange: setDepartmentFilter }, /* @__PURE__ */ React.createElement(SelectTrigger2, { className: "w-40" }, /* @__PURE__ */ React.createElement(SelectValue2, { placeholder: "All Departments" })), /* @__PURE__ */ React.createElement(SelectContent2, null, /* @__PURE__ */ React.createElement(SelectItem2, { value: "all" }, "All Departments"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Information Technology" }, "IT"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Human Resources" }, "HR"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Marketing" }, "Marketing"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Sales" }, "Sales"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "Finance" }, "Finance"))), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        onClick: handleRefresh,
        disabled: isLoading
      },
      /* @__PURE__ */ React.createElement(RotateCcw, { className: "w-4 h-4 mr-2" }),
      "Refresh"
    )))), /* @__PURE__ */ React.createElement(
      UserTable,
      {
        users: (data == null ? void 0 : data.users) || [],
        total: (data == null ? void 0 : data.total) || 0,
        currentPage,
        totalPages,
        usersPerPage,
        isLoading,
        onUserClick: handleUserClick,
        onPageChange: setCurrentPage,
        onPerPageChange: setUsersPerPage
      }
    )), /* @__PURE__ */ React.createElement(
      CreateUserModal,
      {
        open: isCreateModalOpen,
        onClose: () => setIsCreateModalOpen(false),
        onSuccess: () => {
          setIsCreateModalOpen(false);
          refetch();
        }
      }
    ));
  }
  __name(Dashboard, "Dashboard");

  // client/src/pages/users.tsx
  var import_react19 = __toESM(require_react(), 1);

  // client/src/components/ui/sheet.tsx
  var React65 = __toESM(require_react(), 1);
  var Sheet = Root5;
  var SheetTrigger = Trigger4;
  var SheetPortal = Portal4;
  var SheetOverlay = React65.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React65.createElement(
      Overlay,
      __spreadProps(__spreadValues({
        className: cn(
          "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
          className
        )
      }, props), {
        ref
      })
    );
  });
  SheetOverlay.displayName = Overlay.displayName;
  var sheetVariants = cva(
    "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
    {
      variants: {
        side: {
          top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
          bottom: "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
          left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
          right: "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm"
        }
      },
      defaultVariants: {
        side: "right"
      }
    }
  );
  var SheetContent = React65.forwardRef((_a121, ref) => {
    var _b93 = _a121, { side = "right", className, children } = _b93, props = __objRest(_b93, ["side", "className", "children"]);
    return /* @__PURE__ */ React65.createElement(SheetPortal, null, /* @__PURE__ */ React65.createElement(SheetOverlay, null), /* @__PURE__ */ React65.createElement(
      Content3,
      __spreadValues({
        ref,
        className: cn(sheetVariants({ side }), className)
      }, props),
      children,
      /* @__PURE__ */ React65.createElement(Close2, { className: "absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary" }, /* @__PURE__ */ React65.createElement(X, { className: "h-4 w-4" }), /* @__PURE__ */ React65.createElement("span", { className: "sr-only" }, "Close"))
    ));
  });
  SheetContent.displayName = Content3.displayName;
  var SheetHeader = /* @__PURE__ */ __name((_a121) => {
    var _b93 = _a121, {
      className
    } = _b93, props = __objRest(_b93, [
      "className"
    ]);
    return /* @__PURE__ */ React65.createElement(
      "div",
      __spreadValues({
        className: cn(
          "flex flex-col space-y-2 text-center sm:text-left",
          className
        )
      }, props)
    );
  }, "SheetHeader");
  SheetHeader.displayName = "SheetHeader";
  var SheetFooter = /* @__PURE__ */ __name((_a121) => {
    var _b93 = _a121, {
      className
    } = _b93, props = __objRest(_b93, [
      "className"
    ]);
    return /* @__PURE__ */ React65.createElement(
      "div",
      __spreadValues({
        className: cn(
          "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
          className
        )
      }, props)
    );
  }, "SheetFooter");
  SheetFooter.displayName = "SheetFooter";
  var SheetTitle = React65.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React65.createElement(
      Title2,
      __spreadValues({
        ref,
        className: cn("text-lg font-semibold text-foreground", className)
      }, props)
    );
  });
  SheetTitle.displayName = Title2.displayName;
  var SheetDescription = React65.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React65.createElement(
      Description2,
      __spreadValues({
        ref,
        className: cn("text-sm text-muted-foreground", className)
      }, props)
    );
  });
  SheetDescription.displayName = Description2.displayName;

  // client/src/components/column-manager.tsx
  var AVAILABLE_COLUMNS = [
    { id: "name", label: "Name", type: "text", hasFilter: false },
    { id: "login", label: "Login", type: "text", hasFilter: false },
    { id: "title", label: "Title", type: "text", hasFilter: false },
    { id: "department", label: "Department", type: "text", hasFilter: false },
    { id: "employeeType", label: "Employee Type", type: "select", hasFilter: true, options: ["EMPLOYEE", "CONTRACTOR", "INTERN", "PART_TIME", "CONSULTANT"] },
    { id: "manager", label: "Manager", type: "autocomplete", hasFilter: true },
    { id: "mobilePhone", label: "Mobile Phone", type: "text", hasFilter: true },
    { id: "status", label: "Status", type: "select", hasFilter: false, options: ["ACTIVE", "SUSPENDED", "DEPROVISIONED"] },
    { id: "disabled", label: "Disabled On", type: "date", hasFilter: false },
    { id: "activated", label: "Account Created", type: "date", hasFilter: true },
    { id: "lastLogin", label: "Last Login", type: "date", hasFilter: true },
    { id: "lastUpdated", label: "Last Updated", type: "date", hasFilter: true },
    { id: "passwordChanged", label: "Password Changed", type: "date", hasFilter: true }
  ];
  function SortableColumnItem({ column, onToggle }) {
    const {
      attributes,
      listeners: listeners2,
      setNodeRef,
      transform,
      transition,
      isDragging
    } = useSortable({ id: column.id });
    const style = {
      transform: CSS2.Transform.toString(transform),
      transition
    };
    const availableColumn = AVAILABLE_COLUMNS.find((col) => col.id === column.id);
    return /* @__PURE__ */ React.createElement(
      "div",
      {
        ref: setNodeRef,
        style,
        className: "flex items-center justify-between p-2 border rounded-md bg-card transition-all hover:shadow-sm"
      },
      /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
        "div",
        __spreadProps(__spreadValues(__spreadValues({}, attributes), listeners2), {
          className: "cursor-grab active:cursor-grabbing text-muted-foreground hover:text-foreground p-0.5 hover:bg-muted/50 rounded transition-colors touch-none",
          style: { touchAction: "none" }
        }),
        /* @__PURE__ */ React.createElement(GripVertical, { className: "h-3 w-3" })
      ), /* @__PURE__ */ React.createElement(
        Checkbox2,
        {
          checked: column.visible,
          onCheckedChange: () => onToggle(column.id),
          className: "h-4 w-4"
        }
      ), /* @__PURE__ */ React.createElement(Label2, { className: "text-sm font-medium flex-1" }, (availableColumn == null ? void 0 : availableColumn.label) || column.id), (availableColumn == null ? void 0 : availableColumn.hasFilter) && /* @__PURE__ */ React.createElement(Badge, { variant: "secondary", className: "text-xs px-1 py-0" }, /* @__PURE__ */ React.createElement(Filter, { className: "h-2 w-2" })))
    );
  }
  __name(SortableColumnItem, "SortableColumnItem");
  function ColumnManager({ columns, onColumnsChange }) {
    const sensors = useSensors(
      useSensor(PointerSensor, {
        activationConstraint: {
          distance: 3
        }
      }),
      useSensor(KeyboardSensor, {
        coordinateGetter: sortableKeyboardCoordinates
      })
    );
    const handleDragEnd = /* @__PURE__ */ __name((event) => {
      const { active, over } = event;
      if (active.id !== (over == null ? void 0 : over.id)) {
        const oldIndex = columns.findIndex((column) => column.id === active.id);
        const newIndex = columns.findIndex((column) => column.id === (over == null ? void 0 : over.id));
        const newColumns = arrayMove(columns, oldIndex, newIndex).map((col, index3) => __spreadProps(__spreadValues({}, col), {
          order: index3
        }));
        onColumnsChange(newColumns);
      }
    }, "handleDragEnd");
    const toggleColumn = /* @__PURE__ */ __name((columnId) => {
      const updatedColumns = columns.map(
        (col) => col.id === columnId ? __spreadProps(__spreadValues({}, col), { visible: !col.visible }) : col
      );
      onColumnsChange(updatedColumns);
    }, "toggleColumn");
    const sortedColumns = [...columns].sort((a, b) => a.order - b.order);
    return /* @__PURE__ */ React.createElement(Sheet, null, /* @__PURE__ */ React.createElement(SheetTrigger, { asChild: true }, /* @__PURE__ */ React.createElement(Button, { variant: "outline", className: "gap-2" }, /* @__PURE__ */ React.createElement(Settings, { className: "w-4 h-4" }), "Columns")), /* @__PURE__ */ React.createElement(SheetContent, { className: "w-[450px] sm:w-[500px]" }, /* @__PURE__ */ React.createElement(SheetHeader, null, /* @__PURE__ */ React.createElement(SheetTitle, null, "Manage Columns"), /* @__PURE__ */ React.createElement(SheetDescription, null, "Customize which columns are visible and drag to reorder them")), /* @__PURE__ */ React.createElement("div", { className: "space-y-6 mt-6" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "text-sm" }, "Visible Columns")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-2 max-h-[500px] overflow-y-auto scrollbar-thin scrollbar-thumb-muted-foreground/20 scrollbar-track-transparent" }, /* @__PURE__ */ React.createElement(
      DndContext,
      {
        sensors,
        collisionDetection: closestCenter,
        onDragEnd: handleDragEnd
      },
      /* @__PURE__ */ React.createElement(
        SortableContext,
        {
          items: sortedColumns.map((col) => col.id),
          strategy: verticalListSortingStrategy
        },
        /* @__PURE__ */ React.createElement("div", { className: "space-y-1" }, sortedColumns.map((columnConfig) => /* @__PURE__ */ React.createElement(
          SortableColumnItem,
          {
            key: columnConfig.id,
            column: columnConfig,
            onToggle: toggleColumn
          }
        )))
      )
    ))))));
  }
  __name(ColumnManager, "ColumnManager");

  // client/src/components/export-modal.tsx
  var import_react18 = __toESM(require_react(), 1);
  function ExportModal({ users: users2, currentColumns, totalUsers, onExport }) {
    const [open, setOpen] = (0, import_react18.useState)(false);
    const [exportType, setExportType] = (0, import_react18.useState)("current");
    const [selectedColumns, setSelectedColumns] = (0, import_react18.useState)(
      () => currentColumns.filter((col) => col.visible).map((col) => col.id)
    );
    const handleExport = /* @__PURE__ */ __name(() => {
      if (exportType === "current") {
        const visibleColumns = currentColumns.filter((col) => col.visible).map((col) => col.id);
        onExport(visibleColumns, "current");
      } else {
        onExport(selectedColumns, "custom");
      }
      setOpen(false);
    }, "handleExport");
    const toggleColumn = /* @__PURE__ */ __name((columnId) => {
      setSelectedColumns(
        (prev) => prev.includes(columnId) ? prev.filter((id) => id !== columnId) : [...prev, columnId]
      );
    }, "toggleColumn");
    return /* @__PURE__ */ React.createElement(Dialog2, { open, onOpenChange: setOpen }, /* @__PURE__ */ React.createElement(DialogTrigger2, { asChild: true }, /* @__PURE__ */ React.createElement(Button, { variant: "outline", className: "gap-2" }, /* @__PURE__ */ React.createElement(Download, { className: "w-4 h-4" }), "Export")), /* @__PURE__ */ React.createElement(DialogContent2, { className: "max-w-md" }, /* @__PURE__ */ React.createElement(DialogHeader, null, /* @__PURE__ */ React.createElement(DialogTitle2, null, "Export Users"), /* @__PURE__ */ React.createElement(DialogDescription2, null, "Choose your export options and download user data as CSV")), /* @__PURE__ */ React.createElement("div", { className: "space-y-4" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, { className: "pb-3" }, /* @__PURE__ */ React.createElement(CardTitle, { className: "text-sm" }, "Export Options")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
      Checkbox2,
      {
        id: "current-view",
        checked: exportType === "current",
        onCheckedChange: () => setExportType("current")
      }
    ), /* @__PURE__ */ React.createElement(Label2, { htmlFor: "current-view", className: "text-sm font-medium" }, "Export with current view (", currentColumns.filter((col) => col.visible).length, " columns)")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
      Checkbox2,
      {
        id: "custom-columns",
        checked: exportType === "custom",
        onCheckedChange: () => setExportType("custom")
      }
    ), /* @__PURE__ */ React.createElement(Label2, { htmlFor: "custom-columns", className: "text-sm font-medium" }, "Select columns to export")))), exportType === "custom" && /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, { className: "pb-3" }, /* @__PURE__ */ React.createElement(CardTitle, { className: "text-sm" }, "Select Columns")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-2 max-h-60 overflow-y-auto scrollbar-thin" }, AVAILABLE_COLUMNS.map((column) => /* @__PURE__ */ React.createElement("div", { key: column.id, className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
      Checkbox2,
      {
        id: `export-${column.id}`,
        checked: selectedColumns.includes(column.id),
        onCheckedChange: () => toggleColumn(column.id),
        className: "h-4 w-4"
      }
    ), /* @__PURE__ */ React.createElement(Label2, { htmlFor: `export-${column.id}`, className: "text-sm font-medium flex-1" }, column.label))))), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-muted-foreground" }, totalUsers, " users will be exported with", " ", exportType === "current" ? currentColumns.filter((col) => col.visible).length : selectedColumns.length, " columns"), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2" }, /* @__PURE__ */ React.createElement(Button, { onClick: handleExport, className: "flex-1" }, /* @__PURE__ */ React.createElement(Download, { className: "w-4 h-4 mr-2" }), "Export CSV"), /* @__PURE__ */ React.createElement(Button, { variant: "outline", onClick: () => setOpen(false) }, "Cancel")))));
  }
  __name(ExportModal, "ExportModal");

  // client/src/pages/users.tsx
  function Users2() {
    var _a121, _b93, _c5, _d4;
    const [searchQuery, setSearchQuery] = (0, import_react19.useState)("");
    const [currentPage, setCurrentPage] = (0, import_react19.useState)(1);
    const [usersPerPage, setUsersPerPage] = (0, import_react19.useState)(10);
    const [showCreateModal, setShowCreateModal] = (0, import_react19.useState)(false);
    const [sortBy, setSortBy] = (0, import_react19.useState)("firstName");
    const [sortOrder, setSortOrder] = (0, import_react19.useState)("asc");
    const [employeeTypeFilter, setEmployeeTypeFilter] = (0, import_react19.useState)("");
    const [filters, setFilters] = (0, import_react19.useState)({
      employeeType: [],
      mobilePhone: "",
      manager: "",
      status: [],
      lastLogin: ""
    });
    const { toast: toast2 } = useToast();
    const [columns, setColumns] = (0, import_react19.useState)(
      () => AVAILABLE_COLUMNS.map((col, index3) => ({
        id: col.id,
        visible: ["name", "login", "title", "department", "manager", "status", "lastLogin"].includes(col.id),
        order: index3
      }))
    );
    const oktaSyncMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async () => {
        const response = await apiRequest("GET", "/api/okta/sync-all");
        return await response.json();
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name((data) => {
        toast2({
          title: "OKTA Sync Completed",
          description: `${data.message}. Total: ${data.totalUsers}, New: ${data.newUsers}, Updated: ${data.updatedUsers}`
        });
        queryClient.invalidateQueries({ queryKey: ["/api/users"] });
        refetch();
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error) => {
        toast2({
          title: "OKTA Sync Failed",
          description: error.message,
          variant: "destructive"
        });
      }, "onError")
    });
    const { data: employeeTypeCounts } = useQuery({
      queryKey: ["/api/employee-type-counts"],
      queryFn: /* @__PURE__ */ __name(async () => {
        const response = await fetch("/api/employee-type-counts", {
          credentials: "include"
        });
        if (!response.ok) {
          throw new Error("Failed to fetch employee type counts");
        }
        return response.json();
      }, "queryFn")
    });
    const { data: totalUsersData } = useQuery({
      queryKey: ["/api/users/total"],
      queryFn: /* @__PURE__ */ __name(async () => {
        const response = await fetch("/api/users?limit=1&page=1", {
          credentials: "include"
        });
        if (!response.ok) {
          throw new Error("Failed to fetch total user count");
        }
        return response.json();
      }, "queryFn")
    });
    const { data: allUsersData } = useQuery({
      queryKey: ["/api/users/stats"],
      queryFn: /* @__PURE__ */ __name(async () => {
        const response = await fetch(`/api/users?limit=500&statsOnly=true`, {
          credentials: "include"
        });
        if (!response.ok) {
          throw new Error("Failed to fetch user stats");
        }
        return response.json();
      }, "queryFn"),
      enabled: !employeeTypeCounts,
      staleTime: 10 * 60 * 1e3,
      // 10 minutes cache
      gcTime: 30 * 60 * 1e3
      // 30 minutes garbage collection
    });
    const [debouncedSearchQuery, setDebouncedSearchQuery] = (0, import_react19.useState)(searchQuery);
    (0, import_react19.useEffect)(() => {
      const timer = setTimeout(() => {
        setDebouncedSearchQuery(searchQuery);
      }, 300);
      return () => clearTimeout(timer);
    }, [searchQuery]);
    const { data: usersData, isLoading, refetch, isFetching } = useQuery({
      queryKey: ["/api/users", currentPage, usersPerPage, debouncedSearchQuery, sortBy, sortOrder, employeeTypeFilter, filters],
      queryFn: /* @__PURE__ */ __name(async () => {
        const params = new URLSearchParams(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues(__spreadValues({
          page: currentPage.toString(),
          limit: usersPerPage.toString(),
          sortBy,
          sortOrder
        }, debouncedSearchQuery && { search: debouncedSearchQuery }), employeeTypeFilter && employeeTypeFilter !== "all" && { employeeType: employeeTypeFilter }), filters.employeeType.length > 0 && { employeeTypes: filters.employeeType.join(",") }), filters.mobilePhone && { mobilePhone: filters.mobilePhone }), filters.manager && { manager: filters.manager }), filters.status.length > 0 && { statuses: filters.status.join(",") }), filters.lastLogin && { lastLoginDays: filters.lastLogin }));
        const response = await fetch(`/api/users?${params}`, {
          credentials: "include"
        });
        if (!response.ok) {
          throw new Error("Failed to fetch users");
        }
        return response.json();
      }, "queryFn"),
      staleTime: 2 * 60 * 1e3,
      // 2 minutes
      gcTime: 10 * 60 * 1e3,
      // 10 minutes
      placeholderData: /* @__PURE__ */ __name((previousData) => previousData, "placeholderData"),
      // Keep previous data while fetching new data
      refetchOnWindowFocus: false,
      // Prevent unnecessary refetches
      retry: 2
      // Reduce retry attempts for faster failure feedback
    });
    const users2 = (usersData == null ? void 0 : usersData.users) || [];
    const allUsers = (allUsersData == null ? void 0 : allUsersData.users) || [];
    const total = (totalUsersData == null ? void 0 : totalUsersData.total) || (usersData == null ? void 0 : usersData.total) || 0;
    const totalPages = (usersData == null ? void 0 : usersData.totalPages) || 1;
    const dataSource = (usersData == null ? void 0 : usersData.source) || "unknown";
    const handleUserClick = /* @__PURE__ */ __name((userId) => {
      window.location.href = `/users/${userId}`;
    }, "handleUserClick");
    const handleRefresh = /* @__PURE__ */ __name(() => {
      refetch();
    }, "handleRefresh");
    const handleCreateSuccess = /* @__PURE__ */ __name(() => {
      setShowCreateModal(false);
      refetch();
    }, "handleCreateSuccess");
    const handleEmployeeTypeFilter = /* @__PURE__ */ __name((employeeType) => {
      if (employeeTypeFilter === employeeType) {
        setEmployeeTypeFilter("");
      } else {
        setEmployeeTypeFilter(employeeType);
      }
      setCurrentPage(1);
    }, "handleEmployeeTypeFilter");
    const clearFilters = /* @__PURE__ */ __name(() => {
      setEmployeeTypeFilter("");
      setSearchQuery("");
      setCurrentPage(1);
    }, "clearFilters");
    const handlePerPageChange = /* @__PURE__ */ __name((perPage) => {
      setUsersPerPage(perPage);
      setCurrentPage(1);
    }, "handlePerPageChange");
    const handleSearch = /* @__PURE__ */ __name((e) => {
      e.preventDefault();
      setCurrentPage(1);
    }, "handleSearch");
    const resetFilters = /* @__PURE__ */ __name(() => {
      setSearchQuery("");
      setCurrentPage(1);
    }, "resetFilters");
    const handleSort = /* @__PURE__ */ __name((column) => {
      if (sortBy === column) {
        setSortOrder(sortOrder === "asc" ? "desc" : "asc");
      } else {
        setSortBy(column);
        setSortOrder("asc");
      }
      setCurrentPage(1);
    }, "handleSort");
    const getStatusColor = /* @__PURE__ */ __name((status) => {
      switch (status == null ? void 0 : status.toUpperCase()) {
        case "ACTIVE":
          return "bg-green-100 text-green-800";
        case "STAGED":
          return "bg-yellow-100 text-yellow-800";
        case "SUSPENDED":
          return "bg-red-100 text-red-800";
        case "DEPROVISIONED":
          return "bg-gray-100 text-gray-800";
        default:
          return "bg-gray-100 text-gray-800";
      }
    }, "getStatusColor");
    const handleExport = /* @__PURE__ */ __name(async (selectedColumns, exportType) => {
      try {
        toast2({
          title: "Preparing export...",
          description: "Fetching all user data for export (this may take a moment)"
        });
        let allUsers2 = [];
        let currentPage2 = 1;
        const limit = 500;
        let hasMorePages = true;
        while (hasMorePages) {
          const queryParams = new URLSearchParams({
            limit: limit.toString(),
            page: currentPage2.toString(),
            search: searchQuery,
            employeeType: employeeTypeFilter,
            sortBy,
            sortOrder
          });
          console.log(`Export: Fetching page ${currentPage2} - /api/users?${queryParams}`);
          const response = await apiRequest("GET", `/api/users?${queryParams}`);
          if (!response.ok) {
            throw new Error(`API request failed with status ${response.status}`);
          }
          const responseData = await response.json();
          const { users: pageUsers, totalPages: totalPages2 } = responseData;
          allUsers2 = [...allUsers2, ...pageUsers];
          console.log(`Export: Page ${currentPage2} - fetched ${pageUsers.length} users, total so far: ${allUsers2.length}`);
          hasMorePages = currentPage2 < totalPages2;
          currentPage2++;
        }
        console.log(`Export: Completed fetching all ${allUsers2.length} users`);
        const columnMap = AVAILABLE_COLUMNS.reduce((acc, col) => {
          acc[col.id] = col.label;
          return acc;
        }, {});
        const headers = selectedColumns.map((col) => columnMap[col] || col);
        const csvData = allUsers2.map((user) => {
          return selectedColumns.map((column) => {
            let value = "";
            switch (column) {
              case "name":
                value = `${user.firstName || ""} ${user.lastName || ""}`.trim();
                break;
              case "email":
                value = user.email || "";
                break;
              case "login":
                value = user.login || "";
                break;
              case "title":
                value = user.title || "";
                break;
              case "department":
                value = user.department || "";
                break;
              case "manager":
                value = user.manager || "";
                break;
              case "mobilePhone":
                value = user.mobilePhone || "";
                break;
              case "status":
                value = user.status || "";
                break;
              case "employeeType":
                value = user.employeeType || "";
                break;
              case "lastLogin":
                value = user.lastLogin ? new Date(user.lastLogin).toLocaleDateString() : "";
                break;
              case "created":
              case "activated":
                value = user.created ? new Date(user.created).toLocaleDateString() : "";
                break;
              case "lastUpdated":
                value = user.lastUpdated ? new Date(user.lastUpdated).toLocaleDateString() : "";
                break;
              case "passwordChanged":
                value = user.passwordChanged ? new Date(user.passwordChanged).toLocaleDateString() : "";
                break;
              default:
                value = "";
            }
            if (value.includes(",") || value.includes('"') || value.includes("\n")) {
              value = `"${value.replace(/"/g, '""')}"`;
            }
            return value;
          });
        });
        const csvContent = [headers, ...csvData].map((row) => row.join(",")).join("\n");
        const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
        const link = document.createElement("a");
        const url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute("download", `users_export_${(/* @__PURE__ */ new Date()).toISOString().split("T")[0]}.csv`);
        link.style.visibility = "hidden";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        toast2({
          title: "Export successful",
          description: `Exported ${allUsers2.length} users with ${selectedColumns.length} columns`
        });
      } catch (error) {
        console.error("Export error:", error);
        const errorMessage = error instanceof Error ? error.message : "Unknown error occurred";
        console.error("Export error details:", errorMessage);
        toast2({
          title: "Export failed",
          description: `Error: ${errorMessage}. Please try again.`,
          variant: "destructive"
        });
      }
    }, "handleExport");
    return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex flex-col overflow-hidden" }, /* @__PURE__ */ React.createElement("div", { className: "bg-background px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-5 gap-3" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-col items-center text-center" }, /* @__PURE__ */ React.createElement(Users, { className: "w-6 h-6 text-blue-600 mb-1" }), /* @__PURE__ */ React.createElement("p", { className: "text-xs font-medium text-muted-foreground" }, "Total Users"), /* @__PURE__ */ React.createElement("p", { className: "text-xl font-bold text-gray-900 dark:text-gray-100" }, total)))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-col items-center text-center" }, /* @__PURE__ */ React.createElement(Users, { className: `w-6 h-6 mb-1 ${employeeTypeFilter === "EMPLOYEE" ? "text-blue-700" : "text-blue-600"}` }), /* @__PURE__ */ React.createElement("p", { className: "text-xs font-medium text-muted-foreground" }, "Employees"), /* @__PURE__ */ React.createElement("p", { className: "text-xl font-bold text-gray-900 dark:text-gray-100" }, (_a121 = employeeTypeCounts == null ? void 0 : employeeTypeCounts.EMPLOYEE) != null ? _a121 : allUsers.filter((u2) => u2.employeeType === "EMPLOYEE").length)))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-col items-center text-center" }, /* @__PURE__ */ React.createElement(Building, { className: `w-6 h-6 mb-1 ${employeeTypeFilter === "CONTRACTOR" ? "text-green-700" : "text-green-600"}` }), /* @__PURE__ */ React.createElement("p", { className: "text-xs font-medium text-muted-foreground" }, "Contractors"), /* @__PURE__ */ React.createElement("p", { className: "text-xl font-bold text-gray-900 dark:text-gray-100" }, (_b93 = employeeTypeCounts == null ? void 0 : employeeTypeCounts.CONTRACTOR) != null ? _b93 : allUsers.filter((u2) => u2.employeeType === "CONTRACTOR").length)))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-col items-center text-center" }, /* @__PURE__ */ React.createElement(Calendar, { className: "w-6 h-6 mb-1 text-purple-600" }), /* @__PURE__ */ React.createElement("p", { className: "text-xs font-medium text-muted-foreground" }, "Part Time"), /* @__PURE__ */ React.createElement("p", { className: "text-xl font-bold text-gray-900 dark:text-gray-100" }, (_c5 = employeeTypeCounts == null ? void 0 : employeeTypeCounts.PART_TIME) != null ? _c5 : allUsers.filter((u2) => u2.employeeType === "PART_TIME").length)))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex flex-col items-center text-center" }, /* @__PURE__ */ React.createElement(Eye, { className: "w-6 h-6 mb-1 text-orange-600" }), /* @__PURE__ */ React.createElement("p", { className: "text-xs font-medium text-muted-foreground" }, "Interns"), /* @__PURE__ */ React.createElement("p", { className: "text-xl font-bold text-gray-900 dark:text-gray-100" }, (_d4 = employeeTypeCounts == null ? void 0 : employeeTypeCounts.INTERN) != null ? _d4 : allUsers.filter((u2) => u2.employeeType === "INTERN").length)))))), /* @__PURE__ */ React.createElement("div", { className: "bg-background border-b border-border px-6 py-4" }, /* @__PURE__ */ React.createElement("form", { onSubmit: handleSearch, className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-4" }, /* @__PURE__ */ React.createElement("div", { className: "w-96 relative" }, /* @__PURE__ */ React.createElement(Search, { className: "w-5 h-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground" }), /* @__PURE__ */ React.createElement(
      Input,
      {
        type: "text",
        placeholder: "Search users by name, email, or login...",
        value: searchQuery,
        onChange: (e) => setSearchQuery(e.target.value),
        className: "pl-10 border-blue-500 ring-1 ring-blue-500 focus:border-blue-600 focus:ring-blue-600"
      }
    )), /* @__PURE__ */ React.createElement(Button, { onClick: () => setShowCreateModal(true), className: "bg-blue-600 hover:bg-blue-700 text-white" }, /* @__PURE__ */ React.createElement(UserPlus, { className: "w-4 h-4 mr-2" }), "Add User")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-4" }, (searchQuery || employeeTypeFilter) && /* @__PURE__ */ React.createElement(Button, { type: "button", variant: "outline", onClick: clearFilters }, "Clear Filters"), /* @__PURE__ */ React.createElement(
      ExportModal,
      {
        users: users2,
        currentColumns: columns,
        totalUsers: total,
        onExport: handleExport
      }
    ), /* @__PURE__ */ React.createElement(
      ColumnManager,
      {
        columns,
        onColumnsChange: setColumns
      }
    )))), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-auto bg-background" }, /* @__PURE__ */ React.createElement(
      UserTable,
      {
        users: users2,
        total,
        currentPage,
        totalPages,
        usersPerPage,
        isLoading: isLoading || isFetching,
        onUserClick: handleUserClick,
        onPageChange: setCurrentPage,
        onPerPageChange: handlePerPageChange,
        onRefresh: handleRefresh,
        sortBy,
        sortOrder,
        onSort: handleSort,
        visibleColumns: columns.filter((col) => col.visible).map((col) => col.id),
        columnConfig: columns,
        onColumnReorder: setColumns,
        filters,
        onFiltersChange: setFilters
      }
    )), /* @__PURE__ */ React.createElement(
      CreateUserModal,
      {
        open: showCreateModal,
        onClose: () => setShowCreateModal(false),
        onSuccess: handleCreateSuccess
      }
    ));
  }
  __name(Users2, "Users");

  // client/src/components/ui/tabs.tsx
  var React68 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-tabs/dist/index.mjs
  var React67 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-roving-focus/dist/index.mjs
  var React66 = __toESM(require_react(), 1);
  var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
  var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
  var EVENT_OPTIONS2 = { bubbles: false, cancelable: true };
  var GROUP_NAME2 = "RovingFocusGroup";
  var [Collection3, useCollection3, createCollectionScope3] = createCollection(GROUP_NAME2);
  var [createRovingFocusGroupContext, createRovingFocusGroupScope] = createContextScope(
    GROUP_NAME2,
    [createCollectionScope3]
  );
  var [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME2);
  var RovingFocusGroup = React66.forwardRef(
    (props, forwardedRef) => {
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Collection3.Provider, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(Collection3.Slot, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(RovingFocusGroupImpl, __spreadProps(__spreadValues({}, props), { ref: forwardedRef })) }) });
    }
  );
  RovingFocusGroup.displayName = GROUP_NAME2;
  var RovingFocusGroupImpl = React66.forwardRef((props, forwardedRef) => {
    const _a121 = props, {
      __scopeRovingFocusGroup,
      orientation,
      loop = false,
      dir,
      currentTabStopId: currentTabStopIdProp,
      defaultCurrentTabStopId,
      onCurrentTabStopIdChange,
      onEntryFocus,
      preventScrollOnEntryFocus = false
    } = _a121, groupProps = __objRest(_a121, [
      "__scopeRovingFocusGroup",
      "orientation",
      "loop",
      "dir",
      "currentTabStopId",
      "defaultCurrentTabStopId",
      "onCurrentTabStopIdChange",
      "onEntryFocus",
      "preventScrollOnEntryFocus"
    ]);
    const ref = React66.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const direction = useDirection(dir);
    const [currentTabStopId = null, setCurrentTabStopId] = useControllableState({
      prop: currentTabStopIdProp,
      defaultProp: defaultCurrentTabStopId,
      onChange: onCurrentTabStopIdChange
    });
    const [isTabbingBackOut, setIsTabbingBackOut] = React66.useState(false);
    const handleEntryFocus = useCallbackRef(onEntryFocus);
    const getItems = useCollection3(__scopeRovingFocusGroup);
    const isClickFocusRef = React66.useRef(false);
    const [focusableItemsCount, setFocusableItemsCount] = React66.useState(0);
    React66.useEffect(() => {
      const node = ref.current;
      if (node) {
        node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
        return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
      }
    }, [handleEntryFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
      RovingFocusProvider,
      {
        scope: __scopeRovingFocusGroup,
        orientation,
        dir: direction,
        loop,
        currentTabStopId,
        onItemFocus: React66.useCallback(
          (tabStopId) => setCurrentTabStopId(tabStopId),
          [setCurrentTabStopId]
        ),
        onItemShiftTab: React66.useCallback(() => setIsTabbingBackOut(true), []),
        onFocusableItemAdd: React66.useCallback(
          () => setFocusableItemsCount((prevCount) => prevCount + 1),
          []
        ),
        onFocusableItemRemove: React66.useCallback(
          () => setFocusableItemsCount((prevCount) => prevCount - 1),
          []
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
          Primitive.div,
          __spreadProps(__spreadValues({
            tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
            "data-orientation": orientation
          }, groupProps), {
            ref: composedRefs,
            style: __spreadValues({ outline: "none" }, props.style),
            onMouseDown: composeEventHandlers(props.onMouseDown, () => {
              isClickFocusRef.current = true;
            }),
            onFocus: composeEventHandlers(props.onFocus, (event) => {
              const isKeyboardFocus = !isClickFocusRef.current;
              if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
                const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS2);
                event.currentTarget.dispatchEvent(entryFocusEvent);
                if (!entryFocusEvent.defaultPrevented) {
                  const items = getItems().filter((item) => item.focusable);
                  const activeItem = items.find((item) => item.active);
                  const currentItem = items.find((item) => item.id === currentTabStopId);
                  const candidateItems = [activeItem, currentItem, ...items].filter(
                    Boolean
                  );
                  const candidateNodes = candidateItems.map((item) => item.ref.current);
                  focusFirst3(candidateNodes, preventScrollOnEntryFocus);
                }
              }
              isClickFocusRef.current = false;
            }),
            onBlur: composeEventHandlers(props.onBlur, () => setIsTabbingBackOut(false))
          })
        )
      }
    );
  });
  var ITEM_NAME2 = "RovingFocusGroupItem";
  var RovingFocusGroupItem = React66.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeRovingFocusGroup,
        focusable = true,
        active = false,
        tabStopId
      } = _a121, itemProps = __objRest(_a121, [
        "__scopeRovingFocusGroup",
        "focusable",
        "active",
        "tabStopId"
      ]);
      const autoId = useId();
      const id = tabStopId || autoId;
      const context = useRovingFocusContext(ITEM_NAME2, __scopeRovingFocusGroup);
      const isCurrentTabStop = context.currentTabStopId === id;
      const getItems = useCollection3(__scopeRovingFocusGroup);
      const { onFocusableItemAdd, onFocusableItemRemove } = context;
      React66.useEffect(() => {
        if (focusable) {
          onFocusableItemAdd();
          return () => onFocusableItemRemove();
        }
      }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
        Collection3.ItemSlot,
        {
          scope: __scopeRovingFocusGroup,
          id,
          focusable,
          active,
          children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(
            Primitive.span,
            __spreadProps(__spreadValues({
              tabIndex: isCurrentTabStop ? 0 : -1,
              "data-orientation": context.orientation
            }, itemProps), {
              ref: forwardedRef,
              onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
                if (!focusable) event.preventDefault();
                else context.onItemFocus(id);
              }),
              onFocus: composeEventHandlers(props.onFocus, () => context.onItemFocus(id)),
              onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
                if (event.key === "Tab" && event.shiftKey) {
                  context.onItemShiftTab();
                  return;
                }
                if (event.target !== event.currentTarget) return;
                const focusIntent = getFocusIntent(event, context.orientation, context.dir);
                if (focusIntent !== void 0) {
                  if (event.metaKey || event.ctrlKey || event.altKey || event.shiftKey) return;
                  event.preventDefault();
                  const items = getItems().filter((item) => item.focusable);
                  let candidateNodes = items.map((item) => item.ref.current);
                  if (focusIntent === "last") candidateNodes.reverse();
                  else if (focusIntent === "prev" || focusIntent === "next") {
                    if (focusIntent === "prev") candidateNodes.reverse();
                    const currentIndex = candidateNodes.indexOf(event.currentTarget);
                    candidateNodes = context.loop ? wrapArray2(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                  }
                  setTimeout(() => focusFirst3(candidateNodes));
                }
              })
            })
          )
        }
      );
    }
  );
  RovingFocusGroupItem.displayName = ITEM_NAME2;
  var MAP_KEY_TO_FOCUS_INTENT = {
    ArrowLeft: "prev",
    ArrowUp: "prev",
    ArrowRight: "next",
    ArrowDown: "next",
    PageUp: "first",
    Home: "first",
    PageDown: "last",
    End: "last"
  };
  function getDirectionAwareKey(key, dir) {
    if (dir !== "rtl") return key;
    return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
  }
  __name(getDirectionAwareKey, "getDirectionAwareKey");
  function getFocusIntent(event, orientation, dir) {
    const key = getDirectionAwareKey(event.key, dir);
    if (orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key)) return void 0;
    if (orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key)) return void 0;
    return MAP_KEY_TO_FOCUS_INTENT[key];
  }
  __name(getFocusIntent, "getFocusIntent");
  function focusFirst3(candidates, preventScroll = false) {
    const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
    for (const candidate of candidates) {
      if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;
      candidate.focus({ preventScroll });
      if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;
    }
  }
  __name(focusFirst3, "focusFirst");
  function wrapArray2(array, startIndex) {
    return array.map((_, index3) => array[(startIndex + index3) % array.length]);
  }
  __name(wrapArray2, "wrapArray");
  var Root7 = RovingFocusGroup;
  var Item2 = RovingFocusGroupItem;

  // node_modules/@radix-ui/react-tabs/dist/index.mjs
  var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
  var TABS_NAME = "Tabs";
  var [createTabsContext, createTabsScope] = createContextScope(TABS_NAME, [
    createRovingFocusGroupScope
  ]);
  var useRovingFocusGroupScope = createRovingFocusGroupScope();
  var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
  var Tabs = React67.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeTabs,
        value: valueProp,
        onValueChange,
        defaultValue: defaultValue2,
        orientation = "horizontal",
        dir,
        activationMode = "automatic"
      } = _a121, tabsProps = __objRest(_a121, [
        "__scopeTabs",
        "value",
        "onValueChange",
        "defaultValue",
        "orientation",
        "dir",
        "activationMode"
      ]);
      const direction = useDirection(dir);
      const [value, setValue] = useControllableState({
        prop: valueProp,
        onChange: onValueChange,
        defaultProp: defaultValue2
      });
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
        TabsProvider,
        {
          scope: __scopeTabs,
          baseId: useId(),
          value,
          onValueChange: setValue,
          orientation,
          dir: direction,
          activationMode,
          children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            Primitive.div,
            __spreadProps(__spreadValues({
              dir: direction,
              "data-orientation": orientation
            }, tabsProps), {
              ref: forwardedRef
            })
          )
        }
      );
    }
  );
  Tabs.displayName = TABS_NAME;
  var TAB_LIST_NAME = "TabsList";
  var TabsList = React67.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeTabs, loop = true } = _a121, listProps = __objRest(_a121, ["__scopeTabs", "loop"]);
      const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
        Root7,
        __spreadProps(__spreadValues({
          asChild: true
        }, rovingFocusGroupScope), {
          orientation: context.orientation,
          dir: context.dir,
          loop,
          children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            Primitive.div,
            __spreadProps(__spreadValues({
              role: "tablist",
              "aria-orientation": context.orientation
            }, listProps), {
              ref: forwardedRef
            })
          )
        })
      );
    }
  );
  TabsList.displayName = TAB_LIST_NAME;
  var TRIGGER_NAME5 = "TabsTrigger";
  var TabsTrigger = React67.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeTabs, value, disabled = false } = _a121, triggerProps = __objRest(_a121, ["__scopeTabs", "value", "disabled"]);
      const context = useTabsContext(TRIGGER_NAME5, __scopeTabs);
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
      const triggerId = makeTriggerId(context.baseId, value);
      const contentId = makeContentId(context.baseId, value);
      const isSelected = value === context.value;
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
        Item2,
        __spreadProps(__spreadValues({
          asChild: true
        }, rovingFocusGroupScope), {
          focusable: !disabled,
          active: isSelected,
          children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
            Primitive.button,
            __spreadProps(__spreadValues({
              type: "button",
              role: "tab",
              "aria-selected": isSelected,
              "aria-controls": contentId,
              "data-state": isSelected ? "active" : "inactive",
              "data-disabled": disabled ? "" : void 0,
              disabled,
              id: triggerId
            }, triggerProps), {
              ref: forwardedRef,
              onMouseDown: composeEventHandlers(props.onMouseDown, (event) => {
                if (!disabled && event.button === 0 && event.ctrlKey === false) {
                  context.onValueChange(value);
                } else {
                  event.preventDefault();
                }
              }),
              onKeyDown: composeEventHandlers(props.onKeyDown, (event) => {
                if ([" ", "Enter"].includes(event.key)) context.onValueChange(value);
              }),
              onFocus: composeEventHandlers(props.onFocus, () => {
                const isAutomaticActivation = context.activationMode !== "manual";
                if (!isSelected && !disabled && isAutomaticActivation) {
                  context.onValueChange(value);
                }
              })
            })
          )
        })
      );
    }
  );
  TabsTrigger.displayName = TRIGGER_NAME5;
  var CONTENT_NAME6 = "TabsContent";
  var TabsContent = React67.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeTabs, value, forceMount, children } = _a121, contentProps = __objRest(_a121, ["__scopeTabs", "value", "forceMount", "children"]);
      const context = useTabsContext(CONTENT_NAME6, __scopeTabs);
      const triggerId = makeTriggerId(context.baseId, value);
      const contentId = makeContentId(context.baseId, value);
      const isSelected = value === context.value;
      const isMountAnimationPreventedRef = React67.useRef(isSelected);
      React67.useEffect(() => {
        const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
        return () => cancelAnimationFrame(rAF);
      }, []);
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Presence, { present: forceMount || isSelected, children: /* @__PURE__ */ __name(({ present }) => /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
        Primitive.div,
        __spreadProps(__spreadValues({
          "data-state": isSelected ? "active" : "inactive",
          "data-orientation": context.orientation,
          role: "tabpanel",
          "aria-labelledby": triggerId,
          hidden: !present,
          id: contentId,
          tabIndex: 0
        }, contentProps), {
          ref: forwardedRef,
          style: __spreadProps(__spreadValues({}, props.style), {
            animationDuration: isMountAnimationPreventedRef.current ? "0s" : void 0
          }),
          children: present && children
        })
      ), "children") });
    }
  );
  TabsContent.displayName = CONTENT_NAME6;
  function makeTriggerId(baseId, value) {
    return `${baseId}-trigger-${value}`;
  }
  __name(makeTriggerId, "makeTriggerId");
  function makeContentId(baseId, value) {
    return `${baseId}-content-${value}`;
  }
  __name(makeContentId, "makeContentId");
  var Root26 = Tabs;
  var List = TabsList;
  var Trigger5 = TabsTrigger;
  var Content4 = TabsContent;

  // client/src/components/ui/tabs.tsx
  var Tabs2 = Root26;
  var TabsList2 = React68.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React68.createElement(
      List,
      __spreadValues({
        ref,
        className: cn(
          "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
          className
        )
      }, props)
    );
  });
  TabsList2.displayName = List.displayName;
  var TabsTrigger2 = React68.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React68.createElement(
      Trigger5,
      __spreadValues({
        ref,
        className: cn(
          "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
          className
        )
      }, props)
    );
  });
  TabsTrigger2.displayName = Trigger5.displayName;
  var TabsContent2 = React68.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React68.createElement(
      Content4,
      __spreadValues({
        ref,
        className: cn(
          "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
          className
        )
      }, props)
    );
  });
  TabsContent2.displayName = Content4.displayName;

  // client/src/components/assign-app-modal.tsx
  var import_react20 = __toESM(require_react(), 1);
  function AssignAppModal({ open, onClose, userId, userApps }) {
    const [searchTerm, setSearchTerm] = (0, import_react20.useState)("");
    const [selectedApps, setSelectedApps] = (0, import_react20.useState)(/* @__PURE__ */ new Set());
    const { toast: toast2 } = useToast();
    const queryClient2 = useQueryClient();
    const { data: allApplications = [], isLoading } = useQuery({
      queryKey: ["/api/applications"],
      queryFn: getQueryFn({ on401: "throw" }),
      enabled: open
    });
    (0, import_react20.useEffect)(() => {
      if (open && allApplications.length > 0) {
        const currentAppIds = userApps.map((app) => app.id);
        const allAppIds = allApplications.map((app) => app.id);
        const exactMatches = currentAppIds.filter((id) => allAppIds.includes(id));
        const selectedAppIds = new Set(exactMatches);
        userApps.forEach((userApp) => {
          if (!exactMatches.includes(userApp.id)) {
            const matchingApp = allApplications.find((allApp) => {
              const allAppName = (allApp.name || allApp.label || "").toLowerCase().trim();
              const userAppName = userApp.name.toLowerCase().trim();
              return allAppName === userAppName || allAppName.includes(userAppName) || userAppName.includes(allAppName);
            });
            if (matchingApp) {
              selectedAppIds.add(matchingApp.id);
            }
          }
        });
        setSelectedApps(selectedAppIds);
      }
    }, [open, userApps, allApplications]);
    const filteredApplications = allApplications.filter((app) => {
      const appName = app.label || app.name || "";
      return appName.toLowerCase().includes(searchTerm.toLowerCase());
    }).sort((a, b) => {
      const nameA = (a.label || a.name || "").toLowerCase();
      const nameB = (b.label || b.name || "").toLowerCase();
      return nameA.localeCompare(nameB);
    });
    const handleAppToggle = /* @__PURE__ */ __name((appId) => {
      const newSelected = new Set(selectedApps);
      if (newSelected.has(appId)) {
        newSelected.delete(appId);
      } else {
        newSelected.add(appId);
      }
      setSelectedApps(newSelected);
    }, "handleAppToggle");
    const saveMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async () => {
        const currentAppIds = new Set(userApps.map((app) => app.id));
        const appsToAdd = Array.from(selectedApps).filter((id) => !currentAppIds.has(id));
        const appsToRemove = Array.from(currentAppIds).filter((id) => !selectedApps.has(id));
        console.log("Apps to add:", appsToAdd);
        console.log("Apps to remove:", appsToRemove);
        return { appsToAdd, appsToRemove };
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name(() => {
        toast2({
          title: "Applications Updated",
          description: "User application assignments have been updated."
        });
        queryClient2.invalidateQueries({ queryKey: [`/api/users/${userId}/applications`] });
        onClose();
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error) => {
        toast2({
          title: "Update Failed",
          description: error.message,
          variant: "destructive"
        });
      }, "onError")
    });
    const handleSave = /* @__PURE__ */ __name(() => {
      saveMutation.mutate();
    }, "handleSave");
    return /* @__PURE__ */ React.createElement(Dialog2, { open, onOpenChange: onClose }, /* @__PURE__ */ React.createElement(DialogContent2, { className: "max-w-2xl max-h-[80vh] flex flex-col" }, /* @__PURE__ */ React.createElement(DialogHeader, null, /* @__PURE__ */ React.createElement(DialogTitle2, null, "Assign Applications"), /* @__PURE__ */ React.createElement(DialogDescription2, null, "Select applications to assign to this user. Checked applications are currently assigned.")), /* @__PURE__ */ React.createElement("div", { className: "flex flex-col flex-1 min-h-0" }, /* @__PURE__ */ React.createElement("div", { className: "relative mb-4" }, /* @__PURE__ */ React.createElement(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }), /* @__PURE__ */ React.createElement(
      Input,
      {
        placeholder: "Search applications...",
        value: searchTerm,
        onChange: (e) => setSearchTerm(e.target.value),
        className: "pl-10"
      }
    )), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-y-auto border rounded-lg" }, isLoading ? /* @__PURE__ */ React.createElement("div", { className: "p-4 text-center text-gray-500" }, "Loading applications...") : filteredApplications.length === 0 ? /* @__PURE__ */ React.createElement("div", { className: "p-4 text-center text-gray-500" }, searchTerm ? `No applications found matching "${searchTerm}"` : "No applications available") : /* @__PURE__ */ React.createElement("div", { className: "space-y-1 p-2" }, filteredApplications.map((app) => /* @__PURE__ */ React.createElement("div", { key: app.id, className: "flex items-center space-x-3 p-3 hover:bg-gray-50 rounded-lg" }, /* @__PURE__ */ React.createElement(
      Checkbox2,
      {
        id: app.id,
        checked: selectedApps.has(app.id),
        onCheckedChange: () => handleAppToggle(app.id)
      }
    ), /* @__PURE__ */ React.createElement("label", { htmlFor: app.id, className: "flex-1 cursor-pointer" }, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, app.label || app.name), app.description && /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, app.description))))))), /* @__PURE__ */ React.createElement(DialogFooter, { className: "mt-4" }, /* @__PURE__ */ React.createElement(Button, { variant: "outline", onClick: onClose }, "Cancel"), /* @__PURE__ */ React.createElement(
      Button,
      {
        onClick: handleSave,
        disabled: saveMutation.isPending
      },
      saveMutation.isPending ? "Saving..." : "Save"
    ))));
  }
  __name(AssignAppModal, "AssignAppModal");

  // client/src/components/knowbe4-user-display.tsx
  var import_react21 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-collapsible/dist/index.mjs
  var React69 = __toESM(require_react(), 1);
  var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
  var COLLAPSIBLE_NAME = "Collapsible";
  var [createCollapsibleContext, createCollapsibleScope] = createContextScope(COLLAPSIBLE_NAME);
  var [CollapsibleProvider, useCollapsibleContext] = createCollapsibleContext(COLLAPSIBLE_NAME);
  var Collapsible = React69.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeCollapsible,
        open: openProp,
        defaultOpen,
        disabled,
        onOpenChange
      } = _a121, collapsibleProps = __objRest(_a121, [
        "__scopeCollapsible",
        "open",
        "defaultOpen",
        "disabled",
        "onOpenChange"
      ]);
      const [open = false, setOpen] = useControllableState({
        prop: openProp,
        defaultProp: defaultOpen,
        onChange: onOpenChange
      });
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
        CollapsibleProvider,
        {
          scope: __scopeCollapsible,
          disabled,
          contentId: useId(),
          open,
          onOpenToggle: React69.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen]),
          children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
            Primitive.div,
            __spreadProps(__spreadValues({
              "data-state": getState4(open),
              "data-disabled": disabled ? "" : void 0
            }, collapsibleProps), {
              ref: forwardedRef
            })
          )
        }
      );
    }
  );
  Collapsible.displayName = COLLAPSIBLE_NAME;
  var TRIGGER_NAME6 = "CollapsibleTrigger";
  var CollapsibleTrigger = React69.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeCollapsible } = _a121, triggerProps = __objRest(_a121, ["__scopeCollapsible"]);
      const context = useCollapsibleContext(TRIGGER_NAME6, __scopeCollapsible);
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
        Primitive.button,
        __spreadProps(__spreadValues({
          type: "button",
          "aria-controls": context.contentId,
          "aria-expanded": context.open || false,
          "data-state": getState4(context.open),
          "data-disabled": context.disabled ? "" : void 0,
          disabled: context.disabled
        }, triggerProps), {
          ref: forwardedRef,
          onClick: composeEventHandlers(props.onClick, context.onOpenToggle)
        })
      );
    }
  );
  CollapsibleTrigger.displayName = TRIGGER_NAME6;
  var CONTENT_NAME7 = "CollapsibleContent";
  var CollapsibleContent = React69.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { forceMount } = _a121, contentProps = __objRest(_a121, ["forceMount"]);
      const context = useCollapsibleContext(CONTENT_NAME7, props.__scopeCollapsible);
      return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(Presence, { present: forceMount || context.open, children: /* @__PURE__ */ __name(({ present }) => /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(CollapsibleContentImpl, __spreadProps(__spreadValues({}, contentProps), { ref: forwardedRef, present })), "children") });
    }
  );
  CollapsibleContent.displayName = CONTENT_NAME7;
  var CollapsibleContentImpl = React69.forwardRef((props, forwardedRef) => {
    const _a121 = props, { __scopeCollapsible, present, children } = _a121, contentProps = __objRest(_a121, ["__scopeCollapsible", "present", "children"]);
    const context = useCollapsibleContext(CONTENT_NAME7, __scopeCollapsible);
    const [isPresent, setIsPresent] = React69.useState(present);
    const ref = React69.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const heightRef = React69.useRef(0);
    const height = heightRef.current;
    const widthRef = React69.useRef(0);
    const width = widthRef.current;
    const isOpen = context.open || isPresent;
    const isMountAnimationPreventedRef = React69.useRef(isOpen);
    const originalStylesRef = React69.useRef(void 0);
    React69.useEffect(() => {
      const rAF = requestAnimationFrame(() => isMountAnimationPreventedRef.current = false);
      return () => cancelAnimationFrame(rAF);
    }, []);
    useLayoutEffect22(() => {
      const node = ref.current;
      if (node) {
        originalStylesRef.current = originalStylesRef.current || {
          transitionDuration: node.style.transitionDuration,
          animationName: node.style.animationName
        };
        node.style.transitionDuration = "0s";
        node.style.animationName = "none";
        const rect = node.getBoundingClientRect();
        heightRef.current = rect.height;
        widthRef.current = rect.width;
        if (!isMountAnimationPreventedRef.current) {
          node.style.transitionDuration = originalStylesRef.current.transitionDuration;
          node.style.animationName = originalStylesRef.current.animationName;
        }
        setIsPresent(present);
      }
    }, [context.open, present]);
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
      Primitive.div,
      __spreadProps(__spreadValues({
        "data-state": getState4(context.open),
        "data-disabled": context.disabled ? "" : void 0,
        id: context.contentId,
        hidden: !isOpen
      }, contentProps), {
        ref: composedRefs,
        style: __spreadValues({
          [`--radix-collapsible-content-height`]: height ? `${height}px` : void 0,
          [`--radix-collapsible-content-width`]: width ? `${width}px` : void 0
        }, props.style),
        children: isOpen && children
      })
    );
  });
  function getState4(open) {
    return open ? "open" : "closed";
  }
  __name(getState4, "getState");
  var Root8 = Collapsible;

  // client/src/components/ui/collapsible.tsx
  var Collapsible2 = Root8;
  var CollapsibleTrigger2 = CollapsibleTrigger;
  var CollapsibleContent2 = CollapsibleContent;

  // client/src/components/ui/alert.tsx
  var React70 = __toESM(require_react(), 1);
  var alertVariants = cva(
    "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
    {
      variants: {
        variant: {
          default: "bg-background text-foreground",
          destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive"
        }
      },
      defaultVariants: {
        variant: "default"
      }
    }
  );
  var Alert = React70.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, variant } = _b93, props = __objRest(_b93, ["className", "variant"]);
    return /* @__PURE__ */ React70.createElement(
      "div",
      __spreadValues({
        ref,
        role: "alert",
        className: cn(alertVariants({ variant }), className)
      }, props)
    );
  });
  Alert.displayName = "Alert";
  var AlertTitle = React70.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React70.createElement(
      "h5",
      __spreadValues({
        ref,
        className: cn("mb-1 font-medium leading-none tracking-tight", className)
      }, props)
    );
  });
  AlertTitle.displayName = "AlertTitle";
  var AlertDescription = React70.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React70.createElement(
      "div",
      __spreadValues({
        ref,
        className: cn("text-sm [&_p]:leading-relaxed", className)
      }, props)
    );
  });
  AlertDescription.displayName = "AlertDescription";

  // client/src/components/knowbe4-user-display.tsx
  function formatDate(dateString) {
    if (!dateString) return "Never";
    return new Date(dateString).toLocaleDateString();
  }
  __name(formatDate, "formatDate");
  function getRiskLevel(score) {
    if (score >= 70) return { level: "High", color: "bg-red-500", textColor: "text-red-700" };
    if (score >= 40) return { level: "Medium", color: "bg-yellow-500", textColor: "text-yellow-700" };
    return { level: "Low", color: "bg-green-500", textColor: "text-green-700" };
  }
  __name(getRiskLevel, "getRiskLevel");
  function getPhishProneLevel(percentage) {
    if (percentage >= 30) return { level: "High Risk", color: "destructive" };
    if (percentage >= 15) return { level: "Medium Risk", color: "secondary" };
    return { level: "Low Risk", color: "default" };
  }
  __name(getPhishProneLevel, "getPhishProneLevel");
  function KnowBe4UserDisplay({ userEmail }) {
    var _a121, _b93, _c5, _d4, _e4, _f2, _g2;
    const [enrollmentsExpanded, setEnrollmentsExpanded] = (0, import_react21.useState)(false);
    const { data: connectionTest, isLoading: connectionLoading } = useQuery({
      queryKey: ["/api/knowbe4/test-connection"],
      staleTime: 5 * 60 * 1e3
    });
    const { data: knowbe4User, isLoading: userLoading, error: userError } = useQuery({
      queryKey: [`/api/knowbe4/user/${userEmail}`],
      enabled: !!userEmail && !!(connectionTest == null ? void 0 : connectionTest.success)
    });
    const { data: allCampaigns } = useQuery({
      queryKey: ["/api/knowbe4/campaigns"],
      enabled: !!(connectionTest == null ? void 0 : connectionTest.success)
    });
    const { data: baselineCampaigns } = useQuery({
      queryKey: ["baseline-campaigns", "Baseline"],
      queryFn: /* @__PURE__ */ __name(async () => {
        const response = await fetch("/api/knowbe4/campaigns/search?q=Baseline");
        if (!response.ok) {
          throw new Error("Failed to search campaigns");
        }
        return response.json();
      }, "queryFn"),
      enabled: !!(connectionTest == null ? void 0 : connectionTest.success)
    });
    const { data: userTrainingStats = [] } = useQuery({
      queryKey: [`/api/knowbe4/user/${knowbe4User == null ? void 0 : knowbe4User.id}/training`],
      enabled: !!(knowbe4User == null ? void 0 : knowbe4User.id)
    });
    const { data: phishingResults = [] } = useQuery({
      queryKey: [`/api/knowbe4/user/${knowbe4User == null ? void 0 : knowbe4User.id}/phishing`],
      enabled: !!(knowbe4User == null ? void 0 : knowbe4User.id)
    });
    const campaignEnrollments = import_react21.default.useMemo(() => {
      if (userTrainingStats && Array.isArray(userTrainingStats) && userTrainingStats.length > 0) {
        return userTrainingStats;
      }
      if (!allCampaigns || !userEmail || !knowbe4User) return [];
      const userEnrollments = [];
      allCampaigns.forEach((campaign) => {
        var _a122;
        const userEnrollment = (_a122 = campaign.enrollments) == null ? void 0 : _a122.find(
          (enrollment) => {
            var _a123, _b94, _c6, _d5, _e5;
            return ((_b94 = (_a123 = enrollment.user) == null ? void 0 : _a123.email) == null ? void 0 : _b94.toLowerCase()) === userEmail.toLowerCase() || ((_c6 = enrollment.email) == null ? void 0 : _c6.toLowerCase()) === userEmail.toLowerCase() || ((_d5 = enrollment.user_email) == null ? void 0 : _d5.toLowerCase()) === userEmail.toLowerCase() || ((_e5 = enrollment.recipient_email) == null ? void 0 : _e5.toLowerCase()) === userEmail.toLowerCase();
          }
        );
        if (userEnrollment) {
          userEnrollments.push(__spreadProps(__spreadValues({}, userEnrollment), {
            campaign_name: campaign.name,
            campaign_id: campaign.campaign_id,
            status: userEnrollment.status || userEnrollment.completion_status || "Unknown"
          }));
        }
      });
      return userEnrollments;
    }, [userTrainingStats, allCampaigns, userEmail, knowbe4User]);
    console.log("=== KNOWBE4 DEBUG DATA ===");
    console.log("KnowBe4 User Data:", knowbe4User);
    console.log("All Campaigns:", allCampaigns);
    console.log("User Email:", userEmail);
    if (allCampaigns && Array.isArray(allCampaigns) && allCampaigns.length > 0) {
      console.log("First Campaign Enrollments Structure:", (_a121 = allCampaigns[0]) == null ? void 0 : _a121.enrollments);
      console.log("First Campaign Enrollment Sample:", (_c5 = (_b93 = allCampaigns[0]) == null ? void 0 : _b93.enrollments) == null ? void 0 : _c5[0]);
    }
    console.log("Found User Enrollments:", campaignEnrollments);
    console.log("Enrollment Count:", campaignEnrollments == null ? void 0 : campaignEnrollments.length);
    console.log("=== END DEBUG DATA ===");
    if (connectionLoading) {
      return /* @__PURE__ */ import_react21.default.createElement(Card, null, /* @__PURE__ */ import_react21.default.createElement(CardHeader, null, /* @__PURE__ */ import_react21.default.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ import_react21.default.createElement(Shield, { className: "h-5 w-5" }), "KnowBe4 Security Training")), /* @__PURE__ */ import_react21.default.createElement(CardContent, null, /* @__PURE__ */ import_react21.default.createElement("div", { className: "animate-pulse space-y-4" }, /* @__PURE__ */ import_react21.default.createElement("div", { className: "h-4 bg-gray-200 rounded w-3/4" }), /* @__PURE__ */ import_react21.default.createElement("div", { className: "h-4 bg-gray-200 rounded w-1/2" }))));
    }
    if (!(connectionTest == null ? void 0 : connectionTest.success)) {
      return /* @__PURE__ */ import_react21.default.createElement(Card, null, /* @__PURE__ */ import_react21.default.createElement(CardHeader, null, /* @__PURE__ */ import_react21.default.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ import_react21.default.createElement(Shield, { className: "h-5 w-5" }), "KnowBe4 Security Training")), /* @__PURE__ */ import_react21.default.createElement(CardContent, null, /* @__PURE__ */ import_react21.default.createElement(Alert, null, /* @__PURE__ */ import_react21.default.createElement(TriangleAlert, { className: "h-4 w-4" }), /* @__PURE__ */ import_react21.default.createElement(AlertDescription, null, /* @__PURE__ */ import_react21.default.createElement("div", { className: "space-y-2" }, /* @__PURE__ */ import_react21.default.createElement("p", { className: "font-medium" }, "KnowBe4 API Not Available"), /* @__PURE__ */ import_react21.default.createElement("p", { className: "text-sm text-gray-600" }, (connectionTest == null ? void 0 : connectionTest.message) || "Unable to connect to KnowBe4 API"), /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-xs text-gray-500 mt-2" }, /* @__PURE__ */ import_react21.default.createElement("p", null, "Account Details:"), /* @__PURE__ */ import_react21.default.createElement("p", null, "\u2022 Organization: ", ((_d4 = connectionTest == null ? void 0 : connectionTest.details) == null ? void 0 : _d4.account_name) || "Unknown"), /* @__PURE__ */ import_react21.default.createElement("p", null, "\u2022 Subscription: ", ((_e4 = connectionTest == null ? void 0 : connectionTest.details) == null ? void 0 : _e4.subscription_level) || "Unknown"), /* @__PURE__ */ import_react21.default.createElement("p", null, "\u2022 Seats: ", ((_f2 = connectionTest == null ? void 0 : connectionTest.details) == null ? void 0 : _f2.number_of_seats) || "Unknown"), /* @__PURE__ */ import_react21.default.createElement("p", null, "\u2022 Risk Score: ", ((_g2 = connectionTest == null ? void 0 : connectionTest.details) == null ? void 0 : _g2.current_risk_score) || "Unknown")))))));
    }
    if (userLoading) {
      return /* @__PURE__ */ import_react21.default.createElement(Card, null, /* @__PURE__ */ import_react21.default.createElement(CardHeader, null, /* @__PURE__ */ import_react21.default.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ import_react21.default.createElement(Shield, { className: "h-5 w-5" }), "KnowBe4 Security Training")), /* @__PURE__ */ import_react21.default.createElement(CardContent, null, /* @__PURE__ */ import_react21.default.createElement("div", { className: "animate-pulse space-y-4" }, /* @__PURE__ */ import_react21.default.createElement("div", { className: "h-4 bg-gray-200 rounded w-3/4" }), /* @__PURE__ */ import_react21.default.createElement("div", { className: "h-4 bg-gray-200 rounded w-1/2" }), /* @__PURE__ */ import_react21.default.createElement("div", { className: "h-4 bg-gray-200 rounded w-2/3" }))));
    }
    if (userError || !knowbe4User) {
      return /* @__PURE__ */ import_react21.default.createElement(Card, null, /* @__PURE__ */ import_react21.default.createElement(CardHeader, null, /* @__PURE__ */ import_react21.default.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ import_react21.default.createElement(Shield, { className: "h-5 w-5" }), "KnowBe4 Security Training")), /* @__PURE__ */ import_react21.default.createElement(CardContent, null, /* @__PURE__ */ import_react21.default.createElement(Alert, null, /* @__PURE__ */ import_react21.default.createElement(TriangleAlert, { className: "h-4 w-4" }), /* @__PURE__ */ import_react21.default.createElement(AlertDescription, null, "User not found in KnowBe4 system or no training data available."))));
    }
    const riskLevel = knowbe4User ? getRiskLevel(knowbe4User.current_risk_score) : null;
    const phishProneLevel = knowbe4User ? getPhishProneLevel(knowbe4User.phish_prone_percentage) : null;
    const phishingStats = (knowbe4User == null ? void 0 : knowbe4User.phishing_campaign_stats) || [];
    const emailsClicked = phishingStats.filter((p2) => p2.last_clicked_date && p2.last_clicked_date !== null).length;
    const emailsReported = phishingStats.filter((p2) => p2.last_reported_date && p2.last_reported_date !== null).length;
    const totalPhishingCampaigns = phishingStats.length;
    const finalTrainingData = campaignEnrollments || [];
    console.log("Using campaign enrollments as training stats:", finalTrainingData);
    const completed = finalTrainingData.filter(
      (enrollment) => enrollment.status === "Completed" || enrollment.status === "completed" || enrollment.status === "Passed" || enrollment.status === "passed"
    ).length;
    const inProgress = finalTrainingData.filter(
      (enrollment) => enrollment.status === "In Progress" || enrollment.status === "in_progress" || enrollment.status === "Active" || enrollment.status === "active"
    ).length;
    const notStarted = finalTrainingData.filter(
      (enrollment) => enrollment.status === "Not Started" || enrollment.status === "not_started" || !enrollment.completion_date
    ).length;
    const total = finalTrainingData.length;
    const completionPercentage = total > 0 ? Math.round(completed / total * 100) : 0;
    console.log("User-specific training completion calculation:");
    console.log("Completed enrollments:", completed);
    console.log("In Progress enrollments:", inProgress);
    console.log("Not Started enrollments:", notStarted);
    console.log("Total enrollments:", total);
    console.log("Completion percentage:", completionPercentage);
    return /* @__PURE__ */ import_react21.default.createElement(Card, null, /* @__PURE__ */ import_react21.default.createElement(CardHeader, null, /* @__PURE__ */ import_react21.default.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ import_react21.default.createElement(Shield, { className: "h-5 w-5" }), "KnowBe4 Security Training"), /* @__PURE__ */ import_react21.default.createElement(CardDescription, null, "Security awareness and phishing simulation data from KnowBe4")), /* @__PURE__ */ import_react21.default.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-sm" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium" }, "Last Sign In: "), /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-gray-600 dark:text-gray-300" }, formatDate(knowbe4User.last_sign_in))), /* @__PURE__ */ import_react21.default.createElement("div", { className: "grid grid-cols-2 gap-4" }, /* @__PURE__ */ import_react21.default.createElement("div", null, /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex items-center gap-2 mb-3" }, /* @__PURE__ */ import_react21.default.createElement(Shield, { className: "w-4 h-4 text-blue-500" }), /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-sm font-medium" }, "Phishing Results")), /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-3xl font-bold text-blue-600 dark:text-blue-400 mb-1" }, knowbe4User.phish_prone_percentage, "%"), /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-xs text-gray-500 dark:text-gray-400 mb-3" }, "Phish-prone Percentage"), /* @__PURE__ */ import_react21.default.createElement("div", { className: "space-y-1 text-xs" }, /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex justify-between" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-gray-600 dark:text-gray-400" }, "Emails Delivered"), /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium" }, totalPhishingCampaigns)), /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex justify-between" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-gray-600 dark:text-gray-400" }, "Failures"), /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium" }, emailsClicked)), /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex justify-between" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-gray-600 dark:text-gray-400" }, "Emails Reported"), /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium" }, emailsReported)))), /* @__PURE__ */ import_react21.default.createElement("div", null, /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex items-center gap-2 mb-3" }, /* @__PURE__ */ import_react21.default.createElement(GraduationCap, { className: "w-4 h-4 text-green-500" }), /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-sm font-medium" }, "Security Training")), finalTrainingData.length > 0 ? /* @__PURE__ */ import_react21.default.createElement(import_react21.default.Fragment, null, /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-3xl font-bold text-green-600 dark:text-green-400 mb-1" }, completionPercentage, "%"), /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-xs text-gray-500 dark:text-gray-400 mb-3" }, "Completion Rate"), /* @__PURE__ */ import_react21.default.createElement("div", { className: "space-y-1 text-xs" }, /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex justify-between" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-gray-600 dark:text-gray-400" }, "Total Enrollments"), /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium" }, total)), /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex justify-between" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-gray-600 dark:text-gray-400" }, "Completed"), /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium text-green-600" }, completed)), /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex justify-between" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-gray-600 dark:text-gray-400" }, "In Progress"), /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium text-yellow-600" }, inProgress)), /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex justify-between" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "text-gray-600 dark:text-gray-400" }, "Not Started"), /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium text-gray-600" }, notStarted)))) : /* @__PURE__ */ import_react21.default.createElement(import_react21.default.Fragment, null, /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-3xl font-bold text-gray-400 mb-1" }, "0%"), /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-xs text-gray-500 dark:text-gray-400 mb-3" }, "No training data"), /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-xs text-gray-500" }, "User not enrolled in any training campaigns")))), finalTrainingData.length > 0 && /* @__PURE__ */ import_react21.default.createElement("div", { className: "mt-6" }, /* @__PURE__ */ import_react21.default.createElement(Collapsible2, { open: enrollmentsExpanded, onOpenChange: setEnrollmentsExpanded }, /* @__PURE__ */ import_react21.default.createElement(CollapsibleTrigger2, { asChild: true }, /* @__PURE__ */ import_react21.default.createElement(Button, { variant: "ghost", className: "flex items-center justify-between w-full p-3 text-left hover:bg-gray-100 rounded-lg" }, /* @__PURE__ */ import_react21.default.createElement("span", { className: "font-medium text-sm text-gray-700" }, "Training Enrollments (", finalTrainingData.length, ")"), enrollmentsExpanded ? /* @__PURE__ */ import_react21.default.createElement(ChevronDown, { className: "h-4 w-4" }) : /* @__PURE__ */ import_react21.default.createElement(ChevronRight, { className: "h-4 w-4" }))), /* @__PURE__ */ import_react21.default.createElement(CollapsibleContent2, { className: "space-y-2 mt-2 max-h-96 overflow-y-auto" }, finalTrainingData.map((enrollment, index3) => /* @__PURE__ */ import_react21.default.createElement("div", { key: index3, className: "flex items-center justify-between p-3 bg-gray-50 rounded-lg" }, /* @__PURE__ */ import_react21.default.createElement("div", { className: "flex-1" }, /* @__PURE__ */ import_react21.default.createElement("div", { className: "font-medium text-sm text-gray-900" }, enrollment.module_name || enrollment.name), /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-xs text-gray-600" }, enrollment.campaign_name), /* @__PURE__ */ import_react21.default.createElement("div", { className: "text-xs text-gray-500 mt-1" }, "Enrolled: ", formatDate(enrollment.enrollment_date), enrollment.completion_date && /* @__PURE__ */ import_react21.default.createElement("span", null, " \u2022 Completed: ", formatDate(enrollment.completion_date)))), /* @__PURE__ */ import_react21.default.createElement("div", { className: "ml-4" }, /* @__PURE__ */ import_react21.default.createElement(
      Badge,
      {
        variant: enrollment.status === "Completed" ? "default" : enrollment.status === "In Progress" ? "secondary" : "outline",
        className: enrollment.status === "Completed" ? "bg-green-100 text-green-800" : enrollment.status === "In Progress" ? "bg-yellow-100 text-yellow-800" : "bg-gray-100 text-gray-800"
      },
      enrollment.status || "Not Started"
    )))))))));
  }
  __name(KnowBe4UserDisplay, "KnowBe4UserDisplay");

  // client/src/pages/user-detail.tsx
  var import_react22 = __toESM(require_react(), 1);
  var editUserSchema = z.object({
    firstName: z.string().min(1, "First name is required"),
    lastName: z.string().min(1, "Last name is required"),
    email: z.string().email("Invalid email address"),
    login: z.string().min(1, "Login is required"),
    title: z.string().optional(),
    department: z.string().optional(),
    mobilePhone: z.string().optional(),
    manager: z.string().optional(),
    employeeType: z.enum(["EMPLOYEE", "CONTRACTOR", "PART_TIME", "INTERN", ""]).optional()
  });
  function UserDetail() {
    const [, params] = useRoute("/users/:id");
    const [, setLocation] = useLocation();
    const { toast: toast2 } = useToast();
    const [isEditing, setIsEditing] = (0, import_react22.useState)(false);
    const [managerSearch, setManagerSearch] = (0, import_react22.useState)("");
    const [profileSubTab, setProfileSubTab] = (0, import_react22.useState)("okta");
    const [expandedSections, setExpandedSections] = (0, import_react22.useState)({});
    const [showPasswordModal, setShowPasswordModal] = (0, import_react22.useState)(null);
    const [newPassword, setNewPassword] = (0, import_react22.useState)("");
    const [generatedPassword, setGeneratedPassword] = (0, import_react22.useState)("");
    const userId = (params == null ? void 0 : params.id) ? parseInt(params.id) : null;
    const { data: allUsersData } = useQuery({
      queryKey: ["/api/users/all"],
      queryFn: /* @__PURE__ */ __name(async () => {
        const response = await fetch("/api/users?limit=1000", {
          credentials: "include"
        });
        if (!response.ok) {
          throw new Error("Failed to fetch users for manager selection");
        }
        return response.json();
      }, "queryFn"),
      enabled: isEditing
    });
    const availableManagers = (0, import_react22.useMemo)(() => {
      if (!(allUsersData == null ? void 0 : allUsersData.users) || !managerSearch) return [];
      const searchTerm = managerSearch.toLowerCase().trim();
      if (searchTerm.length < 1) return [];
      return allUsersData.users.filter((u2) => {
        var _a121, _b93, _c5, _d4, _e4;
        if (u2.id === userId) return false;
        const firstName = ((_a121 = u2.firstName) == null ? void 0 : _a121.toLowerCase()) || "";
        const lastName = ((_b93 = u2.lastName) == null ? void 0 : _b93.toLowerCase()) || "";
        const email = ((_c5 = u2.email) == null ? void 0 : _c5.toLowerCase()) || "";
        const title = ((_d4 = u2.title) == null ? void 0 : _d4.toLowerCase()) || "";
        const department = ((_e4 = u2.department) == null ? void 0 : _e4.toLowerCase()) || "";
        const fullName = `${firstName} ${lastName}`;
        return firstName.includes(searchTerm) || lastName.includes(searchTerm) || fullName.includes(searchTerm) || email.includes(searchTerm) || title.includes(searchTerm) || department.includes(searchTerm);
      }).sort((a, b) => {
        var _a121, _b93, _c5, _d4;
        const aFullName = `${a.firstName} ${a.lastName}`.toLowerCase();
        const bFullName = `${b.firstName} ${b.lastName}`.toLowerCase();
        const aFirstName = ((_a121 = a.firstName) == null ? void 0 : _a121.toLowerCase()) || "";
        const bFirstName = ((_b93 = b.firstName) == null ? void 0 : _b93.toLowerCase()) || "";
        const aLastName = ((_c5 = a.lastName) == null ? void 0 : _c5.toLowerCase()) || "";
        const bLastName = ((_d4 = b.lastName) == null ? void 0 : _d4.toLowerCase()) || "";
        if (aFirstName.startsWith(searchTerm) && !bFirstName.startsWith(searchTerm)) return -1;
        if (bFirstName.startsWith(searchTerm) && !aFirstName.startsWith(searchTerm)) return 1;
        if (aLastName.startsWith(searchTerm) && !bLastName.startsWith(searchTerm)) return -1;
        if (bLastName.startsWith(searchTerm) && !aLastName.startsWith(searchTerm)) return 1;
        if (aFullName.startsWith(searchTerm) && !bFullName.startsWith(searchTerm)) return -1;
        if (bFullName.startsWith(searchTerm) && !aFullName.startsWith(searchTerm)) return 1;
        return aFullName.localeCompare(bFullName);
      }).slice(0, 25);
    }, [allUsersData, managerSearch, userId]);
    const form = useForm({
      resolver: t2(editUserSchema),
      defaultValues: {
        firstName: "",
        lastName: "",
        email: "",
        login: "",
        title: "",
        department: "",
        mobilePhone: "",
        manager: "",
        employeeType: ""
      }
    });
    const [activeTab, setActiveTab] = (0, import_react22.useState)("profile");
    const [appSearchTerm, setAppSearchTerm] = (0, import_react22.useState)("");
    const [showAssignAppModal, setShowAssignAppModal] = (0, import_react22.useState)(false);
    (0, import_react22.useEffect)(() => {
      if (userId) {
        queryClient.removeQueries({
          queryKey: ["/api/users"],
          exact: false
        });
      }
    }, [userId]);
    const { data: user, isLoading, error } = useQuery({
      queryKey: [`/api/users/${userId}`],
      enabled: !!userId,
      retry: 1,
      staleTime: 0,
      gcTime: 0
      // Prevent caching issues
    });
    console.log("User ID:", userId);
    console.log("User data:", user);
    console.log("Loading:", isLoading);
    console.log("Error:", error);
    const { data: userGroups = [] } = useQuery({
      queryKey: [`/api/users/${userId}/groups`],
      enabled: !!userId
    });
    const { data: userApps = [] } = useQuery({
      queryKey: [`/api/users/${userId}/applications`],
      enabled: !!userId
    });
    const { data: userDevices = [] } = useQuery({
      queryKey: [`/api/users/${userId}/devices`],
      enabled: !!userId
    });
    const { data: userLogs = [] } = useQuery({
      queryKey: [`/api/users/${userId}/logs`],
      enabled: !!userId && activeTab === "activity"
    });
    const { data: knowBe4Data } = useQuery({
      queryKey: [`/api/knowbe4/user/${user == null ? void 0 : user.email}`],
      enabled: !!(user == null ? void 0 : user.email) && activeTab === "monitoring"
    });
    const { data: userTrainingData } = useQuery({
      queryKey: [`/api/knowbe4/user/${knowBe4Data == null ? void 0 : knowBe4Data.id}/training`],
      enabled: !!(knowBe4Data == null ? void 0 : knowBe4Data.id) && activeTab === "monitoring"
    });
    const { data: userPhishingData } = useQuery({
      queryKey: [`/api/knowbe4/user/${knowBe4Data == null ? void 0 : knowBe4Data.id}/phishing`],
      enabled: !!(knowBe4Data == null ? void 0 : knowBe4Data.id) && activeTab === "monitoring"
    });
    const [expandedLogs, setExpandedLogs] = (0, import_react22.useState)(/* @__PURE__ */ new Set());
    const toggleLogExpansion = /* @__PURE__ */ __name((logId) => {
      const newExpanded = new Set(expandedLogs);
      if (newExpanded.has(logId)) {
        newExpanded.delete(logId);
      } else {
        newExpanded.add(logId);
      }
      setExpandedLogs(newExpanded);
    }, "toggleLogExpansion");
    const getEventIcon = /* @__PURE__ */ __name((eventType) => {
      if (eventType.includes("user.authentication")) return "\u{1F510}";
      if (eventType.includes("user.session")) return "\u{1F517}";
      if (eventType.includes("app.oauth2")) return "\u{1F511}";
      if (eventType.includes("user.account")) return "\u{1F464}";
      if (eventType.includes("application")) return "\u{1F4F1}";
      return "\u{1F4CB}";
    }, "getEventIcon");
    const getOutcomeColor = /* @__PURE__ */ __name((outcome) => {
      switch (outcome.toUpperCase()) {
        case "SUCCESS":
          return "text-green-600";
        case "FAILURE":
          return "text-red-600";
        case "UNKNOWN":
          return "text-gray-600";
        default:
          return "text-blue-600";
      }
    }, "getOutcomeColor");
    const formatEventTime = /* @__PURE__ */ __name((timestamp2) => {
      try {
        const date2 = new Date(timestamp2);
        return format(date2, "MMM dd HH:mm:ss");
      } catch (e) {
        return timestamp2;
      }
    }, "formatEventTime");
    const formatTimestampWithPST = /* @__PURE__ */ __name((timestamp2) => {
      if (!timestamp2) return null;
      try {
        const date2 = new Date(timestamp2);
        return format(date2, "MMM d, yyyy 'at' h:mm a") + " PST";
      } catch (e) {
        return "Invalid date";
      }
    }, "formatTimestampWithPST");
    (0, import_react22.useEffect)(() => {
      if (user && !isEditing) {
        form.reset({
          firstName: user.firstName || "",
          lastName: user.lastName || "",
          email: user.email || "",
          login: user.login || "",
          title: user.title || "",
          department: user.department || "",
          mobilePhone: user.mobilePhone || "",
          manager: user.manager || "",
          employeeType: user.employeeType || ""
        });
      }
    }, [user, form, isEditing]);
    const updateStatusMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async ({ status }) => {
        return apiRequest("PATCH", `/api/users/${userId}`, { status });
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name(() => {
        toast2({
          title: "Success",
          description: "User status updated successfully"
        });
        queryClient.invalidateQueries({ queryKey: ["/api/users", userId] });
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error2) => {
        toast2({
          title: "Error",
          description: error2.message,
          variant: "destructive"
        });
      }, "onError")
    });
    const syncStatusMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async () => {
        return apiRequest("POST", `/api/users/${userId}/reset-status`, {});
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name(() => {
        toast2({
          title: "Success",
          description: "Status synced with OKTA successfully"
        });
        queryClient.invalidateQueries({ queryKey: ["/api/users", userId] });
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error2) => {
        toast2({
          title: "Error",
          description: error2.message,
          variant: "destructive"
        });
      }, "onError")
    });
    const updateUserMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async (userData) => {
        const response = await apiRequest("PATCH", `/api/users/${userId}`, userData);
        return response.json();
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name((updatedUser) => {
        const hasOktaId = updatedUser == null ? void 0 : updatedUser.oktaId;
        const syncStatus = updatedUser == null ? void 0 : updatedUser.syncStatus;
        let syncMessage = "User profile updated successfully";
        let syncDetails = [];
        if (hasOktaId) {
          syncDetails.push("\u2713 Profile synced to OKTA");
          if ((syncStatus == null ? void 0 : syncStatus.employeeTypeGroupSync) === "failed_insufficient_permissions") {
            syncDetails.push("\u26A0 Employee type group change failed:");
            syncDetails.push("  Requires elevated OKTA API permissions");
          } else if ((syncStatus == null ? void 0 : syncStatus.employeeTypeGroupSync) === "attempted_with_limitations") {
            syncDetails.push("\u26A0 Employee type group change attempted (limited permissions)");
          }
        } else {
          syncDetails.push("\u2022 Local update only (no OKTA ID)");
        }
        const fullMessage = syncDetails.length > 0 ? `${syncMessage}
${syncDetails.join("\n")}` : syncMessage;
        toast2({
          title: "Success",
          description: fullMessage,
          duration: 5e3
          // Show for 5 seconds for detailed info
        });
        setTimeout(() => {
          window.location.reload();
        }, 2e3);
        setIsEditing(false);
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error2) => {
        toast2({
          title: "Error",
          description: error2.message,
          variant: "destructive",
          duration: 5e3
        });
      }, "onError")
    });
    const deleteUserMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async () => {
        return apiRequest("DELETE", `/api/users/${userId}`, void 0);
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name(() => {
        toast2({
          title: "Success",
          description: "User deleted successfully"
        });
        setLocation("/");
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error2) => {
        toast2({
          title: "Error",
          description: error2.message,
          variant: "destructive"
        });
      }, "onError")
    });
    const passwordResetMutation = useMutation({
      mutationFn: /* @__PURE__ */ __name(async (action) => {
        const endpoint = action === "reset" ? "reset" : "expire";
        return apiRequest("POST", `/api/users/${userId}/password/${endpoint}`, {});
      }, "mutationFn"),
      onSuccess: /* @__PURE__ */ __name((_, action) => {
        const actionText = action === "reset" ? "Password reset email sent" : "Password expired successfully";
        toast2({
          title: "Success",
          description: actionText
        });
        queryClient.invalidateQueries({ queryKey: ["/api/users", userId] });
      }, "onSuccess"),
      onError: /* @__PURE__ */ __name((error2) => {
        toast2({
          title: "Error",
          description: error2.message,
          variant: "destructive"
        });
      }, "onError")
    });
    const handleStatusChange = /* @__PURE__ */ __name((status) => {
      updateStatusMutation.mutate({ status });
    }, "handleStatusChange");
    const handleDeleteUser = /* @__PURE__ */ __name(() => {
      deleteUserMutation.mutate();
    }, "handleDeleteUser");
    const handleEditSubmit = /* @__PURE__ */ __name((data) => {
      updateUserMutation.mutate(data);
    }, "handleEditSubmit");
    const handleCancelEdit = /* @__PURE__ */ __name(() => {
      setIsEditing(false);
      form.reset();
    }, "handleCancelEdit");
    const toggleSection = /* @__PURE__ */ __name((logId, section) => {
      setExpandedSections((prev) => {
        var _a121;
        return __spreadProps(__spreadValues({}, prev), {
          [logId]: __spreadProps(__spreadValues({}, prev[logId]), {
            [section]: !((_a121 = prev[logId]) == null ? void 0 : _a121[section])
          })
        });
      });
    }, "toggleSection");
    const expandAllSections = /* @__PURE__ */ __name((logId) => {
      setExpandedSections((prev) => __spreadProps(__spreadValues({}, prev), {
        [logId]: {
          actor: true,
          client: true,
          event: true,
          target: true
        }
      }));
    }, "expandAllSections");
    const collapseAllSections = /* @__PURE__ */ __name((logId) => {
      setExpandedSections((prev) => __spreadProps(__spreadValues({}, prev), {
        [logId]: {
          actor: false,
          client: false,
          event: false,
          target: false
        }
      }));
    }, "collapseAllSections");
    const isSectionExpanded = /* @__PURE__ */ __name((logId, section) => {
      var _a121;
      return ((_a121 = expandedSections[logId]) == null ? void 0 : _a121[section]) || false;
    }, "isSectionExpanded");
    const areAllSectionsExpanded = /* @__PURE__ */ __name((logId) => {
      const sections = expandedSections[logId];
      return (sections == null ? void 0 : sections.actor) && (sections == null ? void 0 : sections.client) && (sections == null ? void 0 : sections.event) && (sections == null ? void 0 : sections.target);
    }, "areAllSectionsExpanded");
    const generatePassword = /* @__PURE__ */ __name(() => {
      const words = [
        "blue",
        "red",
        "green",
        "cat",
        "dog",
        "sun",
        "moon",
        "star",
        "tree",
        "bird",
        "fish",
        "car",
        "book",
        "key",
        "box",
        "cup",
        "pen",
        "hat",
        "bag",
        "run",
        "jump",
        "fast",
        "slow",
        "big",
        "small",
        "hot",
        "cold",
        "new",
        "old",
        "good",
        "bad",
        "easy",
        "hard",
        "soft",
        "loud",
        "quiet",
        "dark",
        "light",
        "win",
        "lose",
        "open",
        "close",
        "start",
        "stop",
        "home",
        "work",
        "play",
        "rest",
        "love",
        "hope"
      ];
      const symbols = ["!", "@", "#", "$", "%", "^", "&", "*"];
      const numbers = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"];
      const wordCount = Math.random() < 0.5 ? 2 : 3;
      const selectedWords = [];
      const usedIndices = /* @__PURE__ */ new Set();
      for (let i2 = 0; i2 < wordCount; i2++) {
        let randomIndex;
        do {
          randomIndex = Math.floor(Math.random() * words.length);
        } while (usedIndices.has(randomIndex));
        usedIndices.add(randomIndex);
        selectedWords.push(words[randomIndex]);
      }
      const capitalizedWords = selectedWords.map(
        (word) => word.charAt(0).toUpperCase() + word.slice(1)
      );
      const randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
      const randomNumbers = [
        numbers[Math.floor(Math.random() * numbers.length)],
        numbers[Math.floor(Math.random() * numbers.length)]
      ];
      const password = capitalizedWords.join("") + randomSymbol + randomNumbers.join("");
      if (password.length >= 8 && password.length <= 12) {
        setGeneratedPassword(password);
        setNewPassword(password);
      } else {
        generatePassword();
      }
    }, "generatePassword");
    const handlePasswordReset = /* @__PURE__ */ __name(() => {
      if (!newPassword) {
        toast2({
          title: "Error",
          description: "Please enter a password or generate one",
          variant: "destructive"
        });
        return;
      }
      passwordResetMutation.mutate("reset");
      setShowPasswordModal(null);
      setNewPassword("");
      setGeneratedPassword("");
    }, "handlePasswordReset");
    const handlePasswordExpire = /* @__PURE__ */ __name(() => {
      passwordResetMutation.mutate("expire");
      setShowPasswordModal(null);
    }, "handlePasswordExpire");
    const getStatusBadge = /* @__PURE__ */ __name((status) => {
      switch (status) {
        case "ACTIVE":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-green-600 text-white" }, "Active");
        case "SUSPENDED":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-yellow-100 text-yellow-800" }, "Suspended");
        case "DEPROVISIONED":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-red-100 text-red-800" }, "Deprovisioned");
        default:
          return /* @__PURE__ */ React.createElement(Badge, { variant: "secondary" }, status);
      }
    }, "getStatusBadge");
    if (isLoading) {
      return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex items-center justify-center" }, /* @__PURE__ */ React.createElement("div", { className: "text-center" }, /* @__PURE__ */ React.createElement("div", { className: "animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900 mx-auto mb-4" }), /* @__PURE__ */ React.createElement("p", { className: "text-gray-600" }, "Loading user details...")));
    }
    if (error) {
      return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex items-center justify-center" }, /* @__PURE__ */ React.createElement("div", { className: "text-center" }, /* @__PURE__ */ React.createElement("h1", { className: "text-2xl font-bold text-gray-900 mb-2" }, "Error Loading User"), /* @__PURE__ */ React.createElement("p", { className: "text-gray-600 mb-6" }, "Failed to load user data: ", error.message), /* @__PURE__ */ React.createElement(Button, { onClick: () => setLocation("/"), variant: "outline" }, /* @__PURE__ */ React.createElement(ArrowLeft, { className: "w-4 h-4 mr-2" }), "Back to Users")));
    }
    if (!user) {
      return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex items-center justify-center" }, /* @__PURE__ */ React.createElement("div", { className: "text-center" }, /* @__PURE__ */ React.createElement("h1", { className: "text-2xl font-bold text-gray-900 mb-2" }, "User Not Found"), /* @__PURE__ */ React.createElement("p", { className: "text-gray-600 mb-6" }, "The user you're looking for doesn't exist or has been removed."), /* @__PURE__ */ React.createElement(Button, { onClick: () => setLocation("/"), variant: "outline" }, /* @__PURE__ */ React.createElement(ArrowLeft, { className: "w-4 h-4 mr-2" }), "Back to Users")));
    }
    const getEmployeeType = /* @__PURE__ */ __name((groups) => {
      if (!groups || groups.length === 0) return "Not specified";
      const etGroup = groups.find((group) => group.profile && group.profile.name && group.profile.name.startsWith("MTX-ET-"));
      return etGroup ? etGroup.profile.name.replace("MTX-ET-", "").replace("_", " ") : "Not specified";
    }, "getEmployeeType");
    const filteredApps = (userApps || []).filter((app) => {
      if (!app) return false;
      const appName = app.label || app.name || "";
      return appName.toLowerCase().includes(appSearchTerm.toLowerCase());
    });
    return /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-hidden" }, /* @__PURE__ */ React.createElement("div", { className: "h-full flex flex-col" }, /* @__PURE__ */ React.createElement("div", { className: "flex-shrink-0 bg-background border-b border-border px-4 py-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-4" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "ghost",
        size: "sm",
        onClick: () => setLocation("/"),
        className: "flex items-center gap-2"
      },
      /* @__PURE__ */ React.createElement(ArrowLeft, { className: "w-4 h-4" }),
      "Back to Users"
    ), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-4" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h1", { className: "text-xl font-bold text-foreground leading-tight" }, user.firstName || "Unknown", " ", user.lastName || "User"), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement("span", { className: "text-sm text-muted-foreground" }, user.email || "No email"), /* @__PURE__ */ React.createElement("span", { className: "text-sm text-muted-foreground" }, "\u2022"), getStatusBadge(user.status || "UNKNOWN"))), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => setShowPasswordModal("reset"),
        className: "flex items-center gap-2 text-blue-600 dark:text-blue-400 border-blue-300 dark:border-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900"
      },
      /* @__PURE__ */ React.createElement(Key, { className: "w-4 h-4" }),
      "Reset Password"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => setShowPasswordModal("expire"),
        className: "flex items-center gap-2 text-purple-600 dark:text-purple-400 border-purple-300 dark:border-purple-600 hover:bg-purple-50 dark:hover:bg-purple-900"
      },
      /* @__PURE__ */ React.createElement(KeyRound, { className: "w-4 h-4" }),
      "Expire Password"
    ), user.status === "ACTIVE" ? /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => handleStatusChange("SUSPENDED"),
        className: "flex items-center gap-2 text-orange-600 dark:text-orange-400 border-orange-300 dark:border-orange-600 hover:bg-orange-50 dark:hover:bg-orange-900"
      },
      /* @__PURE__ */ React.createElement(UserX, { className: "w-4 h-4" }),
      "Suspend"
    ) : user.status === "LOCKED_OUT" ? /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => handleStatusChange("ACTIVE"),
        className: "flex items-center gap-2 text-blue-600 dark:text-blue-400 border-blue-300 dark:border-blue-600 hover:bg-blue-50 dark:hover:bg-blue-900"
      },
      /* @__PURE__ */ React.createElement(UserCheck, { className: "w-4 h-4" }),
      "Unlock User"
    ) : /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => handleStatusChange("ACTIVE"),
        className: "flex items-center gap-2 text-green-600 dark:text-green-400 border-green-300 dark:border-green-600 hover:bg-green-50 dark:hover:bg-green-900"
      },
      /* @__PURE__ */ React.createElement(UserCheck, { className: "w-4 h-4" }),
      "Activate"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: handleDeleteUser,
        className: "flex items-center gap-2 text-red-600 dark:text-red-400 border-red-300 dark:border-red-600 hover:bg-red-50 dark:hover:bg-red-900"
      },
      /* @__PURE__ */ React.createElement(Trash2, { className: "w-4 h-4" }),
      "Delete"
    )))), /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, !isEditing && /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => setIsEditing(true),
        className: "flex items-center gap-2"
      },
      /* @__PURE__ */ React.createElement(SquarePen, { className: "w-4 h-4" }),
      "Edit Profile"
    )))), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-auto" }, /* @__PURE__ */ React.createElement(Tabs2, { value: activeTab, onValueChange: setActiveTab, className: "h-full flex flex-col" }, /* @__PURE__ */ React.createElement("div", { className: "flex-shrink-0 px-6 pt-4" }, /* @__PURE__ */ React.createElement(TabsList2, { className: "grid w-full grid-cols-5" }, /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "profile" }, "Profile"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "monitoring" }, "Monitoring"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "applications" }, "Applications (", userApps.length, ")"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "devices" }, "Devices (", userDevices.length, ")"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "activity" }, "Recent Activity"))), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-auto px-6 py-4" }, /* @__PURE__ */ React.createElement(TabsContent2, { value: "profile", className: "space-y-6 mt-0" }, isEditing ? /* @__PURE__ */ React.createElement(Form, __spreadValues({}, form), /* @__PURE__ */ React.createElement("form", { onSubmit: form.handleSubmit(handleEditSubmit), className: "space-y-6" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, { className: "flex flex-row items-center justify-between" }, /* @__PURE__ */ React.createElement(CardTitle, null, "Edit Profile Information"), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        type: "button",
        variant: "outline",
        size: "sm",
        onClick: handleCancelEdit
      },
      /* @__PURE__ */ React.createElement(X, { className: "w-4 h-4 mr-2" }),
      "Cancel"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        type: "submit",
        size: "sm",
        disabled: updateUserMutation.isPending
      },
      /* @__PURE__ */ React.createElement(Save, { className: "w-4 h-4 mr-2" }),
      "Save Changes"
    ))), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-2 gap-4" }, /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "firstName",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "First Name"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({}, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "lastName",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Last Name"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({}, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    )), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "email",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Email"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadProps(__spreadValues({}, field), { type: "email" }))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-2 gap-4" }, /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "title",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Job Title"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({}, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "department",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Department"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({}, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    )), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "login",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Login"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadValues({}, field))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "mobilePhone",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Mobile Phone"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(Input, __spreadProps(__spreadValues({}, field), { type: "tel" }))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-2 gap-4" }, /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "manager",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Manager"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement("div", { className: "relative" }, /* @__PURE__ */ React.createElement(
          Input,
          __spreadProps(__spreadValues({}, field), {
            onChange: (e) => {
              field.onChange(e);
              setManagerSearch(e.target.value);
            },
            placeholder: "Type to search for manager..."
          })
        ), managerSearch && availableManagers.length > 0 && /* @__PURE__ */ React.createElement("div", { className: "absolute z-10 w-full mt-1 bg-white border border-gray-300 rounded-md shadow-lg max-h-60 overflow-auto" }, availableManagers.map((manager) => /* @__PURE__ */ React.createElement(
          "div",
          {
            key: manager.id,
            className: "px-3 py-2 cursor-pointer hover:bg-gray-100",
            onClick: () => {
              const fullName = `${manager.firstName} ${manager.lastName}`;
              field.onChange(fullName);
              setManagerSearch("");
            }
          },
          /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, manager.firstName, " ", manager.lastName),
          /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, manager.email),
          manager.title && /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-400" }, manager.title)
        ))))), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    ), /* @__PURE__ */ React.createElement(
      FormField,
      {
        control: form.control,
        name: "employeeType",
        render: ({ field }) => /* @__PURE__ */ React.createElement(FormItem, null, /* @__PURE__ */ React.createElement(FormLabel, null, "Employee Type"), /* @__PURE__ */ React.createElement(FormControl, null, /* @__PURE__ */ React.createElement(
          "select",
          __spreadProps(__spreadValues({}, field), {
            className: "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
          }),
          /* @__PURE__ */ React.createElement("option", { value: "" }, "Select Employee Type"),
          /* @__PURE__ */ React.createElement("option", { value: "EMPLOYEE" }, "Employee"),
          /* @__PURE__ */ React.createElement("option", { value: "CONTRACTOR" }, "Contractor"),
          /* @__PURE__ */ React.createElement("option", { value: "PART_TIME" }, "Part Time"),
          /* @__PURE__ */ React.createElement("option", { value: "INTERN" }, "Intern")
        )), /* @__PURE__ */ React.createElement(FormMessage, null))
      }
    )))))) : /* @__PURE__ */ React.createElement("div", { className: "space-y-4" }, /* @__PURE__ */ React.createElement(Tabs2, { value: profileSubTab, onValueChange: setProfileSubTab, className: "w-full" }, /* @__PURE__ */ React.createElement(TabsList2, { className: "grid w-full grid-cols-2" }, /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "okta" }, "OKTA"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "microsoft" }, "Microsoft")), /* @__PURE__ */ React.createElement(TabsContent2, { value: "okta", className: "space-y-6 mt-4" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Personal Information")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "First Name"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.firstName)), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Last Name"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.lastName)), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Email"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.email)), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Login"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.login)), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Mobile Phone"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.mobilePhone || "Not specified")))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Work Information")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Title"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.title || "Not specified")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Department"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.department || "Not specified")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Manager"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.manager || "Not specified")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Employee Type"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, user.employeeType || "Not specified")))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Account Information")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Account Created"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, formatTimestampWithPST(user.created) || "Not available")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Last Update"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, formatTimestampWithPST(user.lastUpdated) || "Not available")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Last Password Change"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, formatTimestampWithPST(user.passwordChanged) || "Never changed")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Last Login"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, formatTimestampWithPST(user.lastLogin) || "Never logged in")))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "microsoft", className: "space-y-6 mt-4" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Monitor, { className: "w-5 h-5 text-blue-600" }), "Microsoft Account")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Azure AD User ID"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Office 365 License"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Teams Status"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        className: "w-full",
        onClick: () => {
          console.log("Fetching Microsoft data...");
        }
      },
      /* @__PURE__ */ React.createElement(RefreshCw, { className: "w-4 h-4 mr-2" }),
      "Refresh Data"
    ))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Microsoft Graph API")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Quick Actions"), /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 gap-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => {
          console.log("Resetting MFA for user...");
        }
      },
      "Reset MFA"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => {
          console.log("Revoking all sessions...");
        }
      },
      "Revoke Sessions"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => {
          console.log("Fetching sign-in logs...");
        }
      },
      "Get Sign-in Logs"
    ))), /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Custom Query"), /* @__PURE__ */ React.createElement(
      Input,
      {
        placeholder: "Enter Graph API endpoint...",
        className: "text-sm"
      }
    ), /* @__PURE__ */ React.createElement(Button, { variant: "default", size: "sm", className: "w-full" }, "Execute Query"))))))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "monitoring", className: "space-y-6 mt-0" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6" }, /* @__PURE__ */ React.createElement(KnowBe4UserDisplay, { userEmail: user.email || "" }), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Eye, { className: "w-5 h-5 text-purple-600" }), "SentinelOne")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Agent Status"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Last Check-in"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Threats Detected"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Policy Compliance"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2 pt-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        className: "flex-1",
        onClick: () => {
          console.log("Fetching SentinelOne data...");
        }
      },
      /* @__PURE__ */ React.createElement(RefreshCw, { className: "w-4 h-4 mr-1" }),
      "Refresh"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "default",
        size: "sm",
        className: "flex-1",
        onClick: () => {
          console.log("Initiating SentinelOne scan...");
        }
      },
      "Full Scan"
    )))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Monitor, { className: "w-5 h-5 text-orange-600" }), "Device Management")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-6" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-2 gap-4" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-3" }, /* @__PURE__ */ React.createElement("h4", { className: "font-medium text-sm text-orange-600 border-b pb-1" }, "Addigy"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-xs font-medium text-muted-foreground" }, "Status"), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Badge, { className: "bg-green-600 text-white text-xs" }, "Managed"))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-xs font-medium text-muted-foreground" }, "Last Sync"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground text-sm" }, "5 min ago")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-xs font-medium text-muted-foreground" }, "Updates"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground text-sm" }, "Up to Date"))), /* @__PURE__ */ React.createElement("div", { className: "space-y-3" }, /* @__PURE__ */ React.createElement("h4", { className: "font-medium text-sm text-blue-500 border-b pb-1" }, "Intune"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-xs font-medium text-muted-foreground" }, "Enrollment"), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Badge, { className: "bg-green-600 text-white text-xs" }, "Enrolled"))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-xs font-medium text-muted-foreground" }, "Check-in"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground text-sm" }, "1 hour ago")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-xs font-medium text-muted-foreground" }, "Policies"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground text-sm" }, "5/5 Applied")))), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2 pt-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        className: "flex-1",
        onClick: () => {
          console.log("Fetching Addigy data...");
        }
      },
      /* @__PURE__ */ React.createElement(RefreshCw, { className: "w-3 h-3 mr-1" }),
      "Sync Addigy"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        className: "flex-1",
        onClick: () => {
          console.log("Fetching Intune data...");
        }
      },
      /* @__PURE__ */ React.createElement(RefreshCw, { className: "w-3 h-3 mr-1" }),
      "Sync Intune"
    )))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Search, { className: "w-5 h-5 text-blue-700" }), "Jira Service Management")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Open Tickets"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Recent Activity"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium text-muted-foreground" }, "Priority Issues"), /* @__PURE__ */ React.createElement("p", { className: "text-foreground" }, "Loading...")), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2 pt-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        className: "flex-1",
        onClick: () => {
          console.log("Fetching Jira tickets...");
        }
      },
      /* @__PURE__ */ React.createElement(RefreshCw, { className: "w-4 h-4 mr-1" }),
      "Refresh"
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "default",
        size: "sm",
        className: "flex-1",
        onClick: () => {
          console.log("Creating new Jira ticket...");
        }
      },
      "Create Ticket"
    )))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "applications", className: "space-y-4 mt-0" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, { className: "flex flex-row items-center justify-between" }, /* @__PURE__ */ React.createElement(CardTitle, null, "Applications (", userApps.length, ")"), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-3" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        size: "sm",
        onClick: () => setShowAssignAppModal(true)
      },
      "Assign App"
    ), /* @__PURE__ */ React.createElement("div", { className: "relative w-64" }, /* @__PURE__ */ React.createElement(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }), /* @__PURE__ */ React.createElement(
      Input,
      {
        placeholder: "Search applications...",
        value: appSearchTerm,
        onChange: (e) => setAppSearchTerm(e.target.value),
        className: "pl-10"
      }
    )))), /* @__PURE__ */ React.createElement(CardContent, null, filteredApps.length === 0 ? /* @__PURE__ */ React.createElement("p", { className: "text-gray-500 text-center py-8" }, appSearchTerm ? `No applications found matching "${appSearchTerm}"` : "No applications assigned") : /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, filteredApps.map((app) => {
      var _a121, _b93;
      return /* @__PURE__ */ React.createElement("div", { key: app.id, className: "flex items-center justify-between p-2 border rounded-lg" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-3" }, app.logo && /* @__PURE__ */ React.createElement("img", { src: app.logo, alt: app.label, className: "w-8 h-8 rounded" }), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h4", { className: "font-medium" }, app.label || app.name || "Unknown Application"), /* @__PURE__ */ React.createElement("p", { className: "text-sm text-gray-500" }, app.description || ((_b93 = (_a121 = app.settings) == null ? void 0 : _a121.app) == null ? void 0 : _b93.authURL) || ""))), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Badge, { variant: app.status === "ACTIVE" ? "default" : "secondary" }, app.status), /* @__PURE__ */ React.createElement(Badge, { variant: "outline" }, app.signOnMode)));
    }))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "devices", className: "space-y-4 mt-0" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Registered Devices")), /* @__PURE__ */ React.createElement(CardContent, null, userDevices.length === 0 ? /* @__PURE__ */ React.createElement("p", { className: "text-gray-500 text-center py-8" }, "No devices registered") : /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, userDevices.map((device, index3) => {
      var _a121, _b93, _c5, _d4, _e4, _f2, _g2;
      return /* @__PURE__ */ React.createElement("div", { key: device.id || index3, className: "flex items-center justify-between p-2 border rounded-lg" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-3" }, /* @__PURE__ */ React.createElement("div", { className: "w-10 h-10 bg-gray-100 rounded-lg flex items-center justify-center" }, /* @__PURE__ */ React.createElement("span", { className: "text-lg" }, "\u{1F4F1}")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("h4", { className: "font-medium" }, ((_a121 = device.profile) == null ? void 0 : _a121.deviceName) || ((_b93 = device.profile) == null ? void 0 : _b93.name) || ((_c5 = device.profile) == null ? void 0 : _c5.displayName) || device.displayName || device.name || `${device.factorType || "Device"} Factor` || "Unknown Device"), /* @__PURE__ */ React.createElement("p", { className: "text-sm text-gray-500" }, ((_d4 = device.profile) == null ? void 0 : _d4.platform) || ((_e4 = device.profile) == null ? void 0 : _e4.deviceType) || device.platform || device.deviceType || device.provider || "Unknown Platform"), (((_f2 = device.profile) == null ? void 0 : _f2.serialNumber) || device.serialNumber) && /* @__PURE__ */ React.createElement("p", { className: "text-xs text-gray-400" }, "Serial: ", ((_g2 = device.profile) == null ? void 0 : _g2.serialNumber) || device.serialNumber), device.factorType && /* @__PURE__ */ React.createElement("p", { className: "text-xs text-gray-400" }, "Type: ", device.factorType))), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Badge, { variant: device.status === "ACTIVE" ? "default" : "secondary" }, device.status || "UNKNOWN"), (device.lastUpdated || device.created) && /* @__PURE__ */ React.createElement("span", { className: "text-xs text-gray-500" }, "Last seen: ", new Date(device.lastUpdated || device.created).toLocaleDateString())));
    }))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "activity", className: "space-y-4 mt-0" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, { className: "flex flex-row items-center justify-between" }, /* @__PURE__ */ React.createElement(CardTitle, null, "Events: ", userLogs.length), /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement(Button, { variant: "outline", size: "sm" }, /* @__PURE__ */ React.createElement(Download, { className: "w-4 h-4 mr-2" }), "Download CSV"))), /* @__PURE__ */ React.createElement(CardContent, null, userLogs.length === 0 ? /* @__PURE__ */ React.createElement("p", { className: "text-gray-500 text-center py-8" }, "No recent activity found") : /* @__PURE__ */ React.createElement("div", { className: "space-y-0 border rounded-lg" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-12 gap-4 p-3 bg-gray-50 dark:bg-gray-800 border-b text-sm font-medium text-gray-700 dark:text-gray-300" }, /* @__PURE__ */ React.createElement("div", { className: "col-span-2" }, "Time"), /* @__PURE__ */ React.createElement("div", { className: "col-span-3" }, "Actor"), /* @__PURE__ */ React.createElement("div", { className: "col-span-4" }, "Event Info"), /* @__PURE__ */ React.createElement("div", { className: "col-span-2" }, "Targets"), /* @__PURE__ */ React.createElement("div", { className: "col-span-1" })), userLogs.map((log, index3) => {
      var _a121, _b93, _c5, _d4, _e4, _f2, _g2, _h2, _i2, _j2;
      return /* @__PURE__ */ React.createElement("div", { key: log.id, className: `${index3 % 2 === 0 ? "bg-white dark:bg-gray-900" : "bg-gray-50 dark:bg-gray-800"}` }, /* @__PURE__ */ React.createElement(
        "div",
        {
          className: "grid grid-cols-12 gap-4 p-3 border-b border-gray-200 dark:border-gray-700 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-colors cursor-pointer",
          onClick: () => {
            toggleLogExpansion(log.id);
            if (!expandedLogs.has(log.id)) {
              expandAllSections(log.id);
            }
          }
        },
        /* @__PURE__ */ React.createElement("div", { className: "col-span-2 text-sm" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2" }, /* @__PURE__ */ React.createElement("span", { className: "text-lg" }, getEventIcon(log.eventType)), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, formatEventTime(log.published))))),
        /* @__PURE__ */ React.createElement("div", { className: "col-span-3 text-sm" }, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, ((_a121 = log.actor) == null ? void 0 : _a121.displayName) || "Unknown Actor"), /* @__PURE__ */ React.createElement("div", { className: "text-gray-500" }, ((_b93 = log.client) == null ? void 0 : _b93.ipAddress) || "Unknown IP")),
        /* @__PURE__ */ React.createElement("div", { className: "col-span-4 text-sm" }, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, log.displayMessage || log.eventType), /* @__PURE__ */ React.createElement("div", { className: `${getOutcomeColor(log.outcome)} font-medium` }, log.outcome)),
        /* @__PURE__ */ React.createElement("div", { className: "col-span-2 text-sm" }, log.target && log.target.length > 0 && /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, log.target[0].displayName), /* @__PURE__ */ React.createElement("div", { className: "text-gray-500" }, "(", log.target[0].type, ")"))),
        /* @__PURE__ */ React.createElement("div", { className: "col-span-1 flex items-center justify-end" }, /* @__PURE__ */ React.createElement(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: (e) => {
              e.stopPropagation();
              toggleLogExpansion(log.id);
            },
            className: "h-8 w-8 p-0"
          },
          expandedLogs.has(log.id) ? /* @__PURE__ */ React.createElement(ChevronUp, { className: "w-4 h-4" }) : /* @__PURE__ */ React.createElement(ChevronDown, { className: "w-4 h-4" })
        ), /* @__PURE__ */ React.createElement(
          Button,
          {
            variant: "ghost",
            size: "sm",
            onClick: (e) => e.stopPropagation(),
            className: "h-8 w-8 p-0 ml-1"
          },
          /* @__PURE__ */ React.createElement(Copy, { className: "w-4 h-4" })
        ))
      ), expandedLogs.has(log.id) && /* @__PURE__ */ React.createElement("div", { className: "bg-gray-100 dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700" }, /* @__PURE__ */ React.createElement("div", { className: "p-4 space-y-4" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2 mb-2" }, /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "p-0 h-auto",
          onClick: () => toggleSection(log.id, "actor")
        },
        isSectionExpanded(log.id, "actor") ? /* @__PURE__ */ React.createElement(ChevronDown, { className: "w-4 h-4 text-foreground" }) : /* @__PURE__ */ React.createElement(ChevronRight, { className: "w-4 h-4 text-foreground" })
      ), /* @__PURE__ */ React.createElement("span", { className: "font-semibold text-foreground" }, "Actor"), /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "outline",
          size: "sm",
          className: "ml-auto h-6 text-xs",
          onClick: () => areAllSectionsExpanded(log.id) ? collapseAllSections(log.id) : expandAllSections(log.id)
        },
        areAllSectionsExpanded(log.id) ? "Collapse All" : "Expand All"
      )), isSectionExpanded(log.id, "actor") && /* @__PURE__ */ React.createElement("div", { className: "bg-white dark:bg-gray-900 p-3 rounded border border-border space-y-2 text-sm text-foreground" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "ID:"), " ", ((_c5 = log.actor) == null ? void 0 : _c5.id) || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Display Name:"), " ", ((_d4 = log.actor) == null ? void 0 : _d4.displayName) || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Type:"), " ", ((_e4 = log.actor) == null ? void 0 : _e4.type) || "N/A"))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2 mb-2" }, /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "p-0 h-auto",
          onClick: () => toggleSection(log.id, "client")
        },
        isSectionExpanded(log.id, "client") ? /* @__PURE__ */ React.createElement(ChevronDown, { className: "w-4 h-4 text-foreground" }) : /* @__PURE__ */ React.createElement(ChevronRight, { className: "w-4 h-4 text-foreground" })
      ), /* @__PURE__ */ React.createElement("span", { className: "font-semibold text-foreground" }, "Client")), isSectionExpanded(log.id, "client") && /* @__PURE__ */ React.createElement("div", { className: "bg-white dark:bg-gray-900 p-3 rounded border border-border space-y-2 text-sm text-foreground" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "IP Address:"), " ", ((_f2 = log.client) == null ? void 0 : _f2.ipAddress) || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "User Agent:"), /* @__PURE__ */ React.createElement("div", { className: "mt-1 text-xs text-muted-foreground break-all" }, ((_g2 = log.client) == null ? void 0 : _g2.userAgent) || "N/A")), ((_h2 = log.client) == null ? void 0 : _h2.geographicalContext) && /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Location:"), log.client.geographicalContext.city, ", ", log.client.geographicalContext.state, ", ", log.client.geographicalContext.country), ((_i2 = log.client) == null ? void 0 : _i2.device) && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", { className: "pt-2 border-t border-border" }, /* @__PURE__ */ React.createElement("span", { className: "font-medium text-blue-600 dark:text-blue-400" }, "Device Information")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Device ID:"), " ", log.client.device.id || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "UDID:"), " ", log.client.device.udid || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Device Name:"), " ", log.client.device.name || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "OS Platform:"), " ", log.client.device.os_platform || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "OS Version:"), " ", log.client.device.os_version || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Managed:"), /* @__PURE__ */ React.createElement("span", { className: `ml-1 ${log.client.device.managed ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"}` }, log.client.device.managed ? "Yes" : "No")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Verified:"), /* @__PURE__ */ React.createElement("span", { className: `ml-1 ${log.client.device.registered ? "text-green-600 dark:text-green-400" : "text-red-600 dark:text-red-400"}` }, log.client.device.registered ? "Yes" : "No")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Screen Lock Type:"), " ", log.client.device.screen_lock_type || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Disk Encryption Type:"), " ", log.client.device.disk_encryption_type || "N/A")), log.request && /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("div", { className: "pt-2 border-t border-border" }, /* @__PURE__ */ React.createElement("span", { className: "font-medium text-purple-600 dark:text-purple-400" }, "Request Information")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "IP Chain:"), /* @__PURE__ */ React.createElement("div", { className: "mt-1 text-xs text-muted-foreground" }, ((_j2 = log.request.ipChain) == null ? void 0 : _j2.map((ip, idx) => {
        var _a122;
        return /* @__PURE__ */ React.createElement("div", { key: idx, className: "ml-2" }, "\u2022 ", ip.ip, " (", ip.source || "Unknown", ") - ", ((_a122 = ip.geographicalContext) == null ? void 0 : _a122.city) || "Unknown location");
      })) || "N/A"))))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2 mb-2" }, /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "p-0 h-auto",
          onClick: () => toggleSection(log.id, "event")
        },
        isSectionExpanded(log.id, "event") ? /* @__PURE__ */ React.createElement(ChevronDown, { className: "w-4 h-4 text-foreground" }) : /* @__PURE__ */ React.createElement(ChevronRight, { className: "w-4 h-4 text-foreground" })
      ), /* @__PURE__ */ React.createElement("span", { className: "font-semibold text-foreground" }, "Event")), isSectionExpanded(log.id, "event") && /* @__PURE__ */ React.createElement("div", { className: "bg-white dark:bg-gray-900 p-3 rounded border border-border space-y-2 text-sm text-foreground" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Event Type:"), " ", log.eventType), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Display Message:"), " ", log.displayMessage || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Outcome:"), /* @__PURE__ */ React.createElement("span", { className: `ml-1 ${getOutcomeColor(log.outcome)}` }, log.outcome)), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Event ID:"), " ", log.id))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "flex items-center gap-2 mb-2" }, /* @__PURE__ */ React.createElement(
        Button,
        {
          variant: "ghost",
          size: "sm",
          className: "p-0 h-auto",
          onClick: () => toggleSection(log.id, "target")
        },
        isSectionExpanded(log.id, "target") ? /* @__PURE__ */ React.createElement(ChevronDown, { className: "w-4 h-4 text-foreground" }) : /* @__PURE__ */ React.createElement(ChevronRight, { className: "w-4 h-4 text-foreground" })
      ), /* @__PURE__ */ React.createElement("span", { className: "font-semibold text-foreground" }, "Target")), isSectionExpanded(log.id, "target") && /* @__PURE__ */ React.createElement("div", { className: "bg-white dark:bg-gray-900 p-3 rounded border border-border space-y-2 text-sm text-foreground" }, log.target && log.target.length > 0 ? log.target.map((target, idx) => /* @__PURE__ */ React.createElement("div", { key: idx, className: idx > 0 ? "pt-2 border-t border-border" : "" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "ID:"), " ", target.id || "N/A"), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Type:"), /* @__PURE__ */ React.createElement("span", { className: "ml-1 text-green-600 dark:text-green-400" }, target.type || "N/A")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("span", { className: "font-medium" }, "Display Name:"), /* @__PURE__ */ React.createElement("span", { className: "ml-1 text-blue-600 dark:text-blue-400" }, target.displayName || "N/A")))) : /* @__PURE__ */ React.createElement("div", null, "No target information available")))))));
    }))))))))), /* @__PURE__ */ React.createElement(
      AssignAppModal,
      {
        open: showAssignAppModal,
        onClose: () => setShowAssignAppModal(false),
        userId: (userId == null ? void 0 : userId.toString()) || "",
        userApps
      }
    ), /* @__PURE__ */ React.createElement(Dialog2, { open: showPasswordModal === "reset", onOpenChange: () => setShowPasswordModal(null) }, /* @__PURE__ */ React.createElement(DialogContent2, { className: "sm:max-w-md" }, /* @__PURE__ */ React.createElement(DialogHeader, null, /* @__PURE__ */ React.createElement(DialogTitle2, null, "Reset Password"), /* @__PURE__ */ React.createElement(DialogDescription2, null, "Set a new password for ", user == null ? void 0 : user.firstName, " ", user == null ? void 0 : user.lastName, ". The user will be notified and can use this password to log in immediately.")), /* @__PURE__ */ React.createElement("div", { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", { className: "space-y-2" }, /* @__PURE__ */ React.createElement("label", { className: "text-sm font-medium" }, "New Password"), /* @__PURE__ */ React.createElement("div", { className: "flex gap-2" }, /* @__PURE__ */ React.createElement(
      Input,
      {
        type: "text",
        value: newPassword,
        onChange: (e) => setNewPassword(e.target.value),
        placeholder: "Enter new password",
        className: "flex-1"
      }
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "outline",
        onClick: generatePassword,
        className: "px-3"
      },
      "Generate"
    )), generatedPassword && /* @__PURE__ */ React.createElement("div", { className: "text-xs text-muted-foreground" }, "Generated: ", generatedPassword))), /* @__PURE__ */ React.createElement(DialogFooter, null, /* @__PURE__ */ React.createElement(Button, { variant: "outline", onClick: () => setShowPasswordModal(null) }, "Cancel"), /* @__PURE__ */ React.createElement(Button, { onClick: handlePasswordReset, disabled: !newPassword }, "Reset Password")))), /* @__PURE__ */ React.createElement(Dialog2, { open: showPasswordModal === "expire", onOpenChange: () => setShowPasswordModal(null) }, /* @__PURE__ */ React.createElement(DialogContent2, { className: "sm:max-w-md" }, /* @__PURE__ */ React.createElement(DialogHeader, null, /* @__PURE__ */ React.createElement(DialogTitle2, null, "Expire Password"), /* @__PURE__ */ React.createElement(DialogDescription2, null, "This action will expire ", user == null ? void 0 : user.firstName, " ", user == null ? void 0 : user.lastName, "'s current password. Here's what will happen:")), /* @__PURE__ */ React.createElement("div", { className: "space-y-3 text-sm" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-start gap-2" }, /* @__PURE__ */ React.createElement("div", { className: "w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0" }), /* @__PURE__ */ React.createElement("span", null, "User will be forced to change their password on next login")), /* @__PURE__ */ React.createElement("div", { className: "flex items-start gap-2" }, /* @__PURE__ */ React.createElement("div", { className: "w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0" }), /* @__PURE__ */ React.createElement("span", null, "Current password will become invalid immediately")), /* @__PURE__ */ React.createElement("div", { className: "flex items-start gap-2" }, /* @__PURE__ */ React.createElement("div", { className: "w-1.5 h-1.5 rounded-full bg-blue-500 mt-2 flex-shrink-0" }), /* @__PURE__ */ React.createElement("span", null, "User will receive an email notification")), /* @__PURE__ */ React.createElement("div", { className: "flex items-start gap-2" }, /* @__PURE__ */ React.createElement("div", { className: "w-1.5 h-1.5 rounded-full bg-orange-500 mt-2 flex-shrink-0" }), /* @__PURE__ */ React.createElement("span", { className: "text-orange-600 dark:text-orange-400" }, "User cannot access any applications until password is changed"))), /* @__PURE__ */ React.createElement(DialogFooter, null, /* @__PURE__ */ React.createElement(Button, { variant: "outline", onClick: () => setShowPasswordModal(null) }, "Cancel"), /* @__PURE__ */ React.createElement(Button, { onClick: handlePasswordExpire, variant: "destructive" }, "Expire Password")))));
  }
  __name(UserDetail, "UserDetail");

  // client/src/pages/groups.tsx
  var import_react24 = __toESM(require_react(), 1);

  // client/src/hooks/use-auth.tsx
  var import_react23 = __toESM(require_react(), 1);
  var AuthContext = (0, import_react23.createContext)(null);
  function useAuth2() {
    const context = (0, import_react23.useContext)(AuthContext);
    if (!context) {
      throw new Error("useAuth must be used within an AuthProvider");
    }
    return context;
  }
  __name(useAuth2, "useAuth");

  // client/src/pages/groups.tsx
  function Groups() {
    var _a121, _b93;
    const [searchQuery, setSearchQuery] = (0, import_react24.useState)("");
    const { user: currentUser } = useAuth2();
    const { data: groups = [], isLoading } = useQuery({
      queryKey: ["/api/groups", searchQuery],
      queryFn: /* @__PURE__ */ __name(async () => {
        return [
          {
            id: "00g1abc2def3ghi4jkl5",
            name: "All Employees",
            description: "Default group for all company employees",
            type: "BUILT_IN",
            memberCount: 156,
            created: "2023-01-15T10:00:00Z",
            lastUpdated: "2024-11-28T15:30:00Z"
          },
          {
            id: "00g2def3ghi4jkl5mno6",
            name: "Engineering Team",
            description: "Software engineers and developers",
            type: "OKTA_GROUP",
            memberCount: 42,
            created: "2023-02-01T09:00:00Z",
            lastUpdated: "2024-11-25T14:20:00Z"
          },
          {
            id: "00g3ghi4jkl5mno6pqr7",
            name: "Marketing Team",
            description: "Marketing and communications staff",
            type: "OKTA_GROUP",
            memberCount: 18,
            created: "2023-02-10T11:00:00Z",
            lastUpdated: "2024-11-20T16:45:00Z"
          },
          {
            id: "00g4jkl5mno6pqr7stu8",
            name: "Managers",
            description: "Team leads and department managers",
            type: "OKTA_GROUP",
            memberCount: 12,
            created: "2023-02-15T14:00:00Z",
            lastUpdated: "2024-11-22T13:30:00Z"
          },
          {
            id: "00g5mno6pqr7stu8vwx9",
            name: "Microsoft 365 Users",
            description: "Users with access to Microsoft 365 applications",
            type: "APP_GROUP",
            memberCount: 145,
            created: "2023-03-01T08:00:00Z",
            lastUpdated: "2024-11-26T10:15:00Z"
          }
        ].filter(
          (group) => group.name.toLowerCase().includes(searchQuery.toLowerCase()) || group.description.toLowerCase().includes(searchQuery.toLowerCase())
        );
      }, "queryFn")
    });
    const getGroupTypeBadge = /* @__PURE__ */ __name((type) => {
      switch (type) {
        case "BUILT_IN":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-blue-100 text-blue-800 hover:bg-blue-100" }, "Built-in");
        case "OKTA_GROUP":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-green-100 text-green-800 hover:bg-green-100" }, "OKTA Group");
        case "APP_GROUP":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-purple-100 text-purple-800 hover:bg-purple-100" }, "App Group");
        default:
          return /* @__PURE__ */ React.createElement(Badge, { variant: "secondary" }, type);
      }
    }, "getGroupTypeBadge");
    const formatDate2 = /* @__PURE__ */ __name((dateString) => {
      return new Date(dateString).toLocaleDateString();
    }, "formatDate");
    return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex flex-col overflow-hidden" }, /* @__PURE__ */ React.createElement("header", { className: "bg-white border-b border-gray-200 px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("nav", { className: "flex text-sm text-gray-500 mb-1" }, /* @__PURE__ */ React.createElement("span", null, "Directory"), /* @__PURE__ */ React.createElement("span", { className: "mx-2" }, "/"), /* @__PURE__ */ React.createElement("span", { className: "text-gray-900 font-medium" }, "Groups")), /* @__PURE__ */ React.createElement("h2", { className: "text-2xl font-semibold text-gray-900" }, "Group Management")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-3" }, /* @__PURE__ */ React.createElement(Button, { className: "bg-blue-600 hover:bg-blue-700 text-white" }, /* @__PURE__ */ React.createElement(Plus, { className: "w-4 h-4 mr-2" }), "Create Group"), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2 px-3 py-2 bg-gray-50 rounded-lg border" }, /* @__PURE__ */ React.createElement("div", { className: "w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center" }, /* @__PURE__ */ React.createElement("span", { className: "text-white text-sm font-medium" }, (_a121 = currentUser == null ? void 0 : currentUser.firstName) == null ? void 0 : _a121[0], (_b93 = currentUser == null ? void 0 : currentUser.lastName) == null ? void 0 : _b93[0])), /* @__PURE__ */ React.createElement("div", { className: "text-sm" }, /* @__PURE__ */ React.createElement("p", { className: "font-medium text-gray-900" }, currentUser == null ? void 0 : currentUser.firstName, " ", currentUser == null ? void 0 : currentUser.lastName), /* @__PURE__ */ React.createElement("p", { className: "text-gray-500" }, currentUser == null ? void 0 : currentUser.email)))))), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-auto p-6" }, /* @__PURE__ */ React.createElement("div", { className: "mb-6" }, /* @__PURE__ */ React.createElement("div", { className: "relative max-w-md" }, /* @__PURE__ */ React.createElement(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }), /* @__PURE__ */ React.createElement(
      Input,
      {
        type: "text",
        placeholder: "Search groups...",
        value: searchQuery,
        onChange: (e) => setSearchQuery(e.target.value),
        className: "pl-10"
      }
    ))), /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6 mb-6" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Users, { className: "w-8 h-8 text-blue-600" }), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "Total Groups"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, groups.length))))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Users, { className: "w-8 h-8 text-green-600" }), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "OKTA Groups"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, groups.filter((g) => g.type === "OKTA_GROUP").length))))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Users, { className: "w-8 h-8 text-purple-600" }), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "App Groups"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, groups.filter((g) => g.type === "APP_GROUP").length))))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Users, { className: "w-8 h-8 text-gray-600" }), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "Total Members"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, groups.reduce((sum, g) => sum + g.memberCount, 0))))))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement("div", { className: "overflow-x-auto" }, /* @__PURE__ */ React.createElement(Table, null, /* @__PURE__ */ React.createElement(TableHeader, null, /* @__PURE__ */ React.createElement(TableRow, { className: "bg-gray-50" }, /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Group Name"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Type"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Members"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Created"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Actions"))), /* @__PURE__ */ React.createElement(TableBody, null, groups.map((group) => /* @__PURE__ */ React.createElement(TableRow, { key: group.id, className: "hover:bg-gray-50" }, /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "text-sm font-medium text-gray-900" }, group.name), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, group.description))), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4" }, getGroupTypeBadge(group.type)), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4 text-sm text-gray-900" }, group.memberCount), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4 text-sm text-gray-500" }, formatDate2(group.created)), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "ghost",
        size: "icon",
        className: "h-8 w-8 text-blue-600 hover:text-blue-700 hover:bg-blue-50"
      },
      /* @__PURE__ */ React.createElement(Eye, { className: "w-4 h-4" })
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "ghost",
        size: "icon",
        className: "h-8 w-8 text-gray-500 hover:text-gray-700 hover:bg-gray-50"
      },
      /* @__PURE__ */ React.createElement(Settings, { className: "w-4 h-4" })
    )))))))))));
  }
  __name(Groups, "Groups");

  // client/src/pages/applications.tsx
  var import_react25 = __toESM(require_react(), 1);
  function Applications() {
    var _a121, _b93;
    const [searchQuery, setSearchQuery] = (0, import_react25.useState)("");
    const { user: currentUser } = useAuth2();
    const { data: applications = [], isLoading } = useQuery({
      queryKey: ["/api/applications", searchQuery],
      queryFn: /* @__PURE__ */ __name(async () => {
        return [
          {
            id: "0oa1abc2def3ghi4jkl5",
            name: "Microsoft 365",
            label: "Office 365",
            status: "ACTIVE",
            signOnMode: "SAML_2_0",
            userCount: 156,
            created: "2023-01-15T10:00:00Z",
            lastUpdated: "2024-11-28T15:30:00Z"
          },
          {
            id: "0oa2def3ghi4jkl5mno6",
            name: "Slack",
            label: "Slack Workspace",
            status: "ACTIVE",
            signOnMode: "OPENID_CONNECT",
            userCount: 89,
            created: "2023-02-01T09:00:00Z",
            lastUpdated: "2024-11-25T14:20:00Z"
          },
          {
            id: "0oa3ghi4jkl5mno6pqr7",
            name: "GitHub",
            label: "GitHub Enterprise",
            status: "ACTIVE",
            signOnMode: "SAML_2_0",
            userCount: 42,
            created: "2023-02-10T11:00:00Z",
            lastUpdated: "2024-11-20T16:45:00Z"
          },
          {
            id: "0oa4jkl5mno6pqr7stu8",
            name: "Zoom",
            label: "Zoom Meetings",
            status: "INACTIVE",
            signOnMode: "AUTO_LOGIN",
            userCount: 25,
            created: "2023-03-01T08:00:00Z",
            lastUpdated: "2024-10-15T12:30:00Z"
          }
        ].filter(
          (app) => app.name.toLowerCase().includes(searchQuery.toLowerCase()) || app.label.toLowerCase().includes(searchQuery.toLowerCase())
        );
      }, "queryFn")
    });
    const getStatusBadge = /* @__PURE__ */ __name((status) => {
      switch (status) {
        case "ACTIVE":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-green-100 text-green-800 hover:bg-green-100" }, "Active");
        case "INACTIVE":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-red-100 text-red-800 hover:bg-red-100" }, "Inactive");
        default:
          return /* @__PURE__ */ React.createElement(Badge, { variant: "secondary" }, status);
      }
    }, "getStatusBadge");
    const getSignOnModeBadge = /* @__PURE__ */ __name((mode) => {
      const modeMap = {
        "SAML_2_0": "SAML 2.0",
        "OPENID_CONNECT": "OpenID Connect",
        "SECURE_WEB_AUTHENTICATION": "SWA",
        "AUTO_LOGIN": "Auto Login"
      };
      return /* @__PURE__ */ React.createElement(Badge, { variant: "outline" }, modeMap[mode] || mode);
    }, "getSignOnModeBadge");
    const formatDate2 = /* @__PURE__ */ __name((dateString) => {
      return new Date(dateString).toLocaleDateString();
    }, "formatDate");
    const activeApps = applications.filter((app) => app.status === "ACTIVE");
    const totalUsers = applications.reduce((sum, app) => sum + app.userCount, 0);
    return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex flex-col overflow-hidden" }, /* @__PURE__ */ React.createElement("header", { className: "bg-white border-b border-gray-200 px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("nav", { className: "flex text-sm text-gray-500 mb-1" }, /* @__PURE__ */ React.createElement("span", null, "Directory"), /* @__PURE__ */ React.createElement("span", { className: "mx-2" }, "/"), /* @__PURE__ */ React.createElement("span", { className: "text-gray-900 font-medium" }, "Applications")), /* @__PURE__ */ React.createElement("h2", { className: "text-2xl font-semibold text-gray-900" }, "Application Management")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-3" }, /* @__PURE__ */ React.createElement(Button, { className: "bg-blue-600 hover:bg-blue-700 text-white" }, /* @__PURE__ */ React.createElement(Plus, { className: "w-4 h-4 mr-2" }), "Add Application"), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2 px-3 py-2 bg-gray-50 rounded-lg border" }, /* @__PURE__ */ React.createElement("div", { className: "w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center" }, /* @__PURE__ */ React.createElement("span", { className: "text-white text-sm font-medium" }, (_a121 = currentUser == null ? void 0 : currentUser.firstName) == null ? void 0 : _a121[0], (_b93 = currentUser == null ? void 0 : currentUser.lastName) == null ? void 0 : _b93[0])), /* @__PURE__ */ React.createElement("div", { className: "text-sm" }, /* @__PURE__ */ React.createElement("p", { className: "font-medium text-gray-900" }, currentUser == null ? void 0 : currentUser.firstName, " ", currentUser == null ? void 0 : currentUser.lastName), /* @__PURE__ */ React.createElement("p", { className: "text-gray-500" }, currentUser == null ? void 0 : currentUser.email)))))), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-auto p-6" }, /* @__PURE__ */ React.createElement("div", { className: "mb-6" }, /* @__PURE__ */ React.createElement("div", { className: "relative max-w-md" }, /* @__PURE__ */ React.createElement(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }), /* @__PURE__ */ React.createElement(
      Input,
      {
        type: "text",
        placeholder: "Search applications...",
        value: searchQuery,
        onChange: (e) => setSearchQuery(e.target.value),
        className: "pl-10"
      }
    ))), /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6 mb-6" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Grid3x3, { className: "w-8 h-8 text-blue-600" }), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "Total Applications"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, applications.length))))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Grid3x3, { className: "w-8 h-8 text-green-600" }), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "Active Apps"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, activeApps.length))))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Grid3x3, { className: "w-8 h-8 text-gray-600" }), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "Total Users"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, totalUsers))))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Grid3x3, { className: "w-8 h-8 text-purple-600" }), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "SSO Apps"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, applications.filter((app) => app.signOnMode === "SAML_2_0" || app.signOnMode === "OPENID_CONNECT").length)))))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement("div", { className: "overflow-x-auto" }, /* @__PURE__ */ React.createElement(Table, null, /* @__PURE__ */ React.createElement(TableHeader, null, /* @__PURE__ */ React.createElement(TableRow, { className: "bg-gray-50" }, /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Application"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Status"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Sign-On Mode"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Users"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Last Updated"), /* @__PURE__ */ React.createElement(TableHead, { className: "px-6 py-4 text-xs font-medium text-gray-500 uppercase tracking-wider" }, "Actions"))), /* @__PURE__ */ React.createElement(TableBody, null, applications.map((app) => /* @__PURE__ */ React.createElement(TableRow, { key: app.id, className: "hover:bg-gray-50" }, /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center" }, /* @__PURE__ */ React.createElement("div", { className: "flex-shrink-0 h-10 w-10" }, /* @__PURE__ */ React.createElement("div", { className: "h-10 w-10 rounded-lg bg-blue-100 flex items-center justify-center" }, /* @__PURE__ */ React.createElement(Grid3x3, { className: "w-6 h-6 text-blue-600" }))), /* @__PURE__ */ React.createElement("div", { className: "ml-4" }, /* @__PURE__ */ React.createElement("div", { className: "text-sm font-medium text-gray-900" }, app.name), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, app.label)))), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4" }, getStatusBadge(app.status)), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4" }, getSignOnModeBadge(app.signOnMode)), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4 text-sm text-gray-900" }, app.userCount), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4 text-sm text-gray-500" }, formatDate2(app.lastUpdated)), /* @__PURE__ */ React.createElement(TableCell, { className: "px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "ghost",
        size: "icon",
        className: "h-8 w-8 text-blue-600 hover:text-blue-700 hover:bg-blue-50"
      },
      /* @__PURE__ */ React.createElement(Eye, { className: "w-4 h-4" })
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "ghost",
        size: "icon",
        className: "h-8 w-8 text-gray-500 hover:text-gray-700 hover:bg-gray-50"
      },
      /* @__PURE__ */ React.createElement(Settings, { className: "w-4 h-4" })
    ), /* @__PURE__ */ React.createElement(
      Button,
      {
        variant: "ghost",
        size: "icon",
        className: "h-8 w-8 text-gray-500 hover:text-gray-700 hover:bg-gray-50"
      },
      /* @__PURE__ */ React.createElement(ExternalLink, { className: "w-4 h-4" })
    )))))))))));
  }
  __name(Applications, "Applications");

  // client/src/components/ui/progress.tsx
  var React73 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-progress/dist/index.mjs
  var React72 = __toESM(require_react(), 1);
  var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
  var PROGRESS_NAME = "Progress";
  var DEFAULT_MAX = 100;
  var [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);
  var [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME);
  var Progress = React72.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeProgress,
        value: valueProp = null,
        max: maxProp,
        getValueLabel = defaultGetValueLabel
      } = _a121, progressProps = __objRest(_a121, [
        "__scopeProgress",
        "value",
        "max",
        "getValueLabel"
      ]);
      if ((maxProp || maxProp === 0) && !isValidMaxNumber(maxProp)) {
        console.error(getInvalidMaxError(`${maxProp}`, "Progress"));
      }
      const max2 = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;
      if (valueProp !== null && !isValidValueNumber(valueProp, max2)) {
        console.error(getInvalidValueError(`${valueProp}`, "Progress"));
      }
      const value = isValidValueNumber(valueProp, max2) ? valueProp : null;
      const valueLabel = isNumber2(value) ? getValueLabel(value, max2) : void 0;
      return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(ProgressProvider, { scope: __scopeProgress, value, max: max2, children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
        Primitive.div,
        __spreadProps(__spreadValues({
          "aria-valuemax": max2,
          "aria-valuemin": 0,
          "aria-valuenow": isNumber2(value) ? value : void 0,
          "aria-valuetext": valueLabel,
          role: "progressbar",
          "data-state": getProgressState(value, max2),
          "data-value": value != null ? value : void 0,
          "data-max": max2
        }, progressProps), {
          ref: forwardedRef
        })
      ) });
    }
  );
  Progress.displayName = PROGRESS_NAME;
  var INDICATOR_NAME2 = "ProgressIndicator";
  var ProgressIndicator = React72.forwardRef(
    (props, forwardedRef) => {
      var _b93;
      const _a121 = props, { __scopeProgress } = _a121, indicatorProps = __objRest(_a121, ["__scopeProgress"]);
      const context = useProgressContext(INDICATOR_NAME2, __scopeProgress);
      return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(
        Primitive.div,
        __spreadProps(__spreadValues({
          "data-state": getProgressState(context.value, context.max),
          "data-value": (_b93 = context.value) != null ? _b93 : void 0,
          "data-max": context.max
        }, indicatorProps), {
          ref: forwardedRef
        })
      );
    }
  );
  ProgressIndicator.displayName = INDICATOR_NAME2;
  function defaultGetValueLabel(value, max2) {
    return `${Math.round(value / max2 * 100)}%`;
  }
  __name(defaultGetValueLabel, "defaultGetValueLabel");
  function getProgressState(value, maxValue) {
    return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
  }
  __name(getProgressState, "getProgressState");
  function isNumber2(value) {
    return typeof value === "number";
  }
  __name(isNumber2, "isNumber");
  function isValidMaxNumber(max2) {
    return isNumber2(max2) && !isNaN(max2) && max2 > 0;
  }
  __name(isValidMaxNumber, "isValidMaxNumber");
  function isValidValueNumber(value, max2) {
    return isNumber2(value) && !isNaN(value) && value <= max2 && value >= 0;
  }
  __name(isValidValueNumber, "isValidValueNumber");
  function getInvalidMaxError(propValue, componentName) {
    return `Invalid prop \`max\` of value \`${propValue}\` supplied to \`${componentName}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${DEFAULT_MAX}\`.`;
  }
  __name(getInvalidMaxError, "getInvalidMaxError");
  function getInvalidValueError(propValue, componentName) {
    return `Invalid prop \`value\` of value \`${propValue}\` supplied to \`${componentName}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${DEFAULT_MAX} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`;
  }
  __name(getInvalidValueError, "getInvalidValueError");
  var Root9 = Progress;
  var Indicator2 = ProgressIndicator;

  // client/src/components/ui/progress.tsx
  var Progress2 = React73.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className, value } = _b93, props = __objRest(_b93, ["className", "value"]);
    return /* @__PURE__ */ React73.createElement(
      Root9,
      __spreadValues({
        ref,
        className: cn(
          "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
          className
        )
      }, props),
      /* @__PURE__ */ React73.createElement(
        Indicator2,
        {
          className: "h-full w-full flex-1 bg-primary transition-all",
          style: { transform: `translateX(-${100 - (value || 0)}%)` }
        }
      )
    );
  });
  Progress2.displayName = Root9.displayName;

  // client/src/pages/security.tsx
  function Security() {
    const { data: metrics } = useQuery({
      queryKey: ["/api/security/metrics"],
      queryFn: /* @__PURE__ */ __name(async () => ({
        mfaAdoption: 78.5,
        totalUsers: 156,
        mfaEnabledUsers: 122,
        riskEvents: 5,
        suspiciousLogins: 3,
        passwordPolicyCompliance: 94.2
      }), "queryFn")
    });
    const { data: events3 = [] } = useQuery({
      queryKey: ["/api/security/events"],
      queryFn: /* @__PURE__ */ __name(async () => [
        {
          id: "evt_001",
          type: "SUSPICIOUS_LOGIN",
          user: "john.doe@company.com",
          timestamp: "2024-11-28T14:30:00Z",
          location: "Unknown Location (192.168.1.1)",
          riskLevel: "HIGH",
          status: "INVESTIGATING"
        },
        {
          id: "evt_002",
          type: "MFA_FAILURE",
          user: "jane.smith@company.com",
          timestamp: "2024-11-28T13:15:00Z",
          location: "San Francisco, CA",
          riskLevel: "MEDIUM",
          status: "OPEN"
        },
        {
          id: "evt_003",
          type: "PASSWORD_BREACH",
          user: "mike.brown@company.com",
          timestamp: "2024-11-28T10:45:00Z",
          location: "New York, NY",
          riskLevel: "HIGH",
          status: "RESOLVED"
        }
      ], "queryFn")
    });
    const getRiskBadge = /* @__PURE__ */ __name((level) => {
      switch (level) {
        case "HIGH":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-red-100 text-red-800 hover:bg-red-100" }, "High Risk");
        case "MEDIUM":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-yellow-100 text-yellow-800 hover:bg-yellow-100" }, "Medium Risk");
        case "LOW":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-green-100 text-green-800 hover:bg-green-100" }, "Low Risk");
        default:
          return /* @__PURE__ */ React.createElement(Badge, { variant: "secondary" }, level);
      }
    }, "getRiskBadge");
    const getStatusBadge = /* @__PURE__ */ __name((status) => {
      switch (status) {
        case "OPEN":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-red-100 text-red-800 hover:bg-red-100" }, "Open");
        case "INVESTIGATING":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-yellow-100 text-yellow-800 hover:bg-yellow-100" }, "Investigating");
        case "RESOLVED":
          return /* @__PURE__ */ React.createElement(Badge, { className: "bg-green-100 text-green-800 hover:bg-green-100" }, "Resolved");
        default:
          return /* @__PURE__ */ React.createElement(Badge, { variant: "secondary" }, status);
      }
    }, "getStatusBadge");
    const getEventIcon = /* @__PURE__ */ __name((type) => {
      switch (type) {
        case "SUSPICIOUS_LOGIN":
          return /* @__PURE__ */ React.createElement(TriangleAlert, { className: "w-4 h-4 text-red-500" });
        case "MFA_FAILURE":
          return /* @__PURE__ */ React.createElement(Smartphone, { className: "w-4 h-4 text-yellow-500" });
        case "PASSWORD_BREACH":
          return /* @__PURE__ */ React.createElement(Key, { className: "w-4 h-4 text-red-500" });
        case "DEVICE_TRUST":
          return /* @__PURE__ */ React.createElement(Shield, { className: "w-4 h-4 text-blue-500" });
        default:
          return /* @__PURE__ */ React.createElement(Activity, { className: "w-4 h-4 text-gray-500" });
      }
    }, "getEventIcon");
    const formatEventType = /* @__PURE__ */ __name((type) => {
      return type.split("_").map(
        (word) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
      ).join(" ");
    }, "formatEventType");
    const formatTimestamp = /* @__PURE__ */ __name((timestamp2) => {
      return new Date(timestamp2).toLocaleString();
    }, "formatTimestamp");
    return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex flex-col overflow-hidden" }, /* @__PURE__ */ React.createElement("header", { className: "bg-white border-b border-gray-200 px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("nav", { className: "flex text-sm text-gray-500 mb-1" }, /* @__PURE__ */ React.createElement("span", null, "Security"), /* @__PURE__ */ React.createElement("span", { className: "mx-2" }, "/"), /* @__PURE__ */ React.createElement("span", { className: "text-gray-900 font-medium" }, "Overview")), /* @__PURE__ */ React.createElement("h2", { className: "text-2xl font-semibold text-gray-900" }, "Security Dashboard")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-3" }, /* @__PURE__ */ React.createElement(Button, { variant: "outline" }, "Security Report"), /* @__PURE__ */ React.createElement(Button, { className: "bg-blue-600 hover:bg-blue-700 text-white" }, /* @__PURE__ */ React.createElement(Shield, { className: "w-4 h-4 mr-2" }), "Configure Policies")))), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-auto p-6" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-4 gap-6 mb-6" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "MFA Adoption"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, metrics == null ? void 0 : metrics.mfaAdoption, "%"), /* @__PURE__ */ React.createElement("p", { className: "text-xs text-gray-500" }, metrics == null ? void 0 : metrics.mfaEnabledUsers, " of ", metrics == null ? void 0 : metrics.totalUsers, " users")), /* @__PURE__ */ React.createElement(Smartphone, { className: "w-8 h-8 text-green-600" })), /* @__PURE__ */ React.createElement(Progress2, { value: (metrics == null ? void 0 : metrics.mfaAdoption) || 0, className: "mt-3" }))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "Risk Events"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-red-600" }, metrics == null ? void 0 : metrics.riskEvents), /* @__PURE__ */ React.createElement("p", { className: "text-xs text-gray-500" }, "Last 24 hours")), /* @__PURE__ */ React.createElement(TriangleAlert, { className: "w-8 h-8 text-red-600" })))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "Password Compliance"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-gray-900" }, metrics == null ? void 0 : metrics.passwordPolicyCompliance, "%"), /* @__PURE__ */ React.createElement("p", { className: "text-xs text-gray-500" }, "Policy adherence")), /* @__PURE__ */ React.createElement(Key, { className: "w-8 h-8 text-blue-600" })), /* @__PURE__ */ React.createElement(Progress2, { value: (metrics == null ? void 0 : metrics.passwordPolicyCompliance) || 0, className: "mt-3" }))), /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardContent, { className: "p-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("p", { className: "text-sm font-medium text-gray-600" }, "Suspicious Logins"), /* @__PURE__ */ React.createElement("p", { className: "text-2xl font-bold text-yellow-600" }, metrics == null ? void 0 : metrics.suspiciousLogins), /* @__PURE__ */ React.createElement("p", { className: "text-xs text-gray-500" }, "Under investigation")), /* @__PURE__ */ React.createElement(Shield, { className: "w-8 h-8 text-yellow-600" }))))), /* @__PURE__ */ React.createElement(Tabs2, { defaultValue: "events", className: "space-y-6" }, /* @__PURE__ */ React.createElement(TabsList2, null, /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "events" }, "Security Events"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "policies" }, "Security Policies"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "reports" }, "Reports")), /* @__PURE__ */ React.createElement(TabsContent2, { value: "events" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Recent Security Events")), /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement("div", { className: "space-y-4" }, events3.map((event) => /* @__PURE__ */ React.createElement("div", { key: event.id, className: "flex items-center justify-between p-4 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-3" }, getEventIcon(event.type), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "text-sm font-medium text-gray-900" }, formatEventType(event.type)), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, event.user, " \u2022 ", event.location), /* @__PURE__ */ React.createElement("div", { className: "text-xs text-gray-400" }, formatTimestamp(event.timestamp)))), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, getRiskBadge(event.riskLevel), getStatusBadge(event.status), /* @__PURE__ */ React.createElement(Button, { variant: "outline", size: "sm" }, "Investigate")))))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "policies" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Security Policies")), /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement("div", { className: "space-y-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-4 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "text-sm font-medium text-gray-900" }, "Password Policy"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "Minimum 12 characters, complexity required")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(CircleCheckBig, { className: "w-5 h-5 text-green-500" }), /* @__PURE__ */ React.createElement("span", { className: "text-sm text-green-600" }, "Active"))), /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-4 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "text-sm font-medium text-gray-900" }, "MFA Enforcement"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "Required for all admin users")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(CircleCheckBig, { className: "w-5 h-5 text-green-500" }), /* @__PURE__ */ React.createElement("span", { className: "text-sm text-green-600" }, "Active"))), /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-4 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "text-sm font-medium text-gray-900" }, "Session Timeout"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "8 hours of inactivity")), /* @__PURE__ */ React.createElement("div", { className: "flex items-center space-x-2" }, /* @__PURE__ */ React.createElement(CircleCheckBig, { className: "w-5 h-5 text-green-500" }), /* @__PURE__ */ React.createElement("span", { className: "text-sm text-green-600" }, "Active"))))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "reports" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, null, "Security Reports")), /* @__PURE__ */ React.createElement(CardContent, null, /* @__PURE__ */ React.createElement("div", { className: "text-center py-8" }, /* @__PURE__ */ React.createElement(Shield, { className: "w-12 h-12 text-gray-400 mx-auto mb-4" }), /* @__PURE__ */ React.createElement("p", { className: "text-gray-500" }, "Security reports and analytics coming soon"), /* @__PURE__ */ React.createElement(Button, { variant: "outline", className: "mt-4" }, "Generate Report"))))))));
  }
  __name(Security, "Security");

  // client/src/pages/settings.tsx
  var import_react26 = __toESM(require_react(), 1);

  // client/src/components/ui/switch.tsx
  var React75 = __toESM(require_react(), 1);

  // node_modules/@radix-ui/react-switch/dist/index.mjs
  var React74 = __toESM(require_react(), 1);
  var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
  var SWITCH_NAME = "Switch";
  var [createSwitchContext, createSwitchScope] = createContextScope(SWITCH_NAME);
  var [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);
  var Switch2 = React74.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, {
        __scopeSwitch,
        name,
        checked: checkedProp,
        defaultChecked,
        required,
        disabled,
        value = "on",
        onCheckedChange,
        form
      } = _a121, switchProps = __objRest(_a121, [
        "__scopeSwitch",
        "name",
        "checked",
        "defaultChecked",
        "required",
        "disabled",
        "value",
        "onCheckedChange",
        "form"
      ]);
      const [button, setButton] = React74.useState(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node));
      const hasConsumerStoppedPropagationRef = React74.useRef(false);
      const isFormControl = button ? form || !!button.closest("form") : true;
      const [checked = false, setChecked] = useControllableState({
        prop: checkedProp,
        defaultProp: defaultChecked,
        onChange: onCheckedChange
      });
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)(SwitchProvider, { scope: __scopeSwitch, checked, disabled, children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          Primitive.button,
          __spreadProps(__spreadValues({
            type: "button",
            role: "switch",
            "aria-checked": checked,
            "aria-required": required,
            "data-state": getState5(checked),
            "data-disabled": disabled ? "" : void 0,
            disabled,
            value
          }, switchProps), {
            ref: composedRefs,
            onClick: composeEventHandlers(props.onClick, (event) => {
              setChecked((prevChecked) => !prevChecked);
              if (isFormControl) {
                hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();
              }
            })
          })
        ),
        isFormControl && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
          BubbleInput2,
          {
            control: button,
            bubbles: !hasConsumerStoppedPropagationRef.current,
            name,
            value,
            checked,
            required,
            disabled,
            form,
            style: { transform: "translateX(-100%)" }
          }
        )
      ] });
    }
  );
  Switch2.displayName = SWITCH_NAME;
  var THUMB_NAME = "SwitchThumb";
  var SwitchThumb = React74.forwardRef(
    (props, forwardedRef) => {
      const _a121 = props, { __scopeSwitch } = _a121, thumbProps = __objRest(_a121, ["__scopeSwitch"]);
      const context = useSwitchContext(THUMB_NAME, __scopeSwitch);
      return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
        Primitive.span,
        __spreadProps(__spreadValues({
          "data-state": getState5(context.checked),
          "data-disabled": context.disabled ? "" : void 0
        }, thumbProps), {
          ref: forwardedRef
        })
      );
    }
  );
  SwitchThumb.displayName = THUMB_NAME;
  var BubbleInput2 = /* @__PURE__ */ __name((props) => {
    const _a121 = props, { control, checked, bubbles = true } = _a121, inputProps = __objRest(_a121, ["control", "checked", "bubbles"]);
    const ref = React74.useRef(null);
    const prevChecked = usePrevious(checked);
    const controlSize = useSize(control);
    React74.useEffect(() => {
      const input = ref.current;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(inputProto, "checked");
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        setChecked.call(input, checked);
        input.dispatchEvent(event);
      }
    }, [prevChecked, checked, bubbles]);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(
      "input",
      __spreadProps(__spreadValues({
        type: "checkbox",
        "aria-hidden": true,
        defaultChecked: checked
      }, inputProps), {
        tabIndex: -1,
        ref,
        style: __spreadProps(__spreadValues(__spreadValues({}, props.style), controlSize), {
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        })
      })
    );
  }, "BubbleInput");
  function getState5(checked) {
    return checked ? "checked" : "unchecked";
  }
  __name(getState5, "getState");
  var Root10 = Switch2;
  var Thumb = SwitchThumb;

  // client/src/components/ui/switch.tsx
  var Switch3 = React75.forwardRef((_a121, ref) => {
    var _b93 = _a121, { className } = _b93, props = __objRest(_b93, ["className"]);
    return /* @__PURE__ */ React75.createElement(
      Root10,
      __spreadProps(__spreadValues({
        className: cn(
          "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
          className
        )
      }, props), {
        ref
      }),
      /* @__PURE__ */ React75.createElement(
        Thumb,
        {
          className: cn(
            "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
          )
        }
      )
    );
  });
  Switch3.displayName = Root10.displayName;

  // client/src/pages/settings.tsx
  function Settings3() {
    const [orgName, setOrgName] = (0, import_react26.useState)("Maze Therapeutics");
    const [domain, setDomain] = (0, import_react26.useState)("company.okta.com");
    const [mfaRequired, setMfaRequired] = (0, import_react26.useState)(true);
    const [sessionTimeout, setSessionTimeout] = (0, import_react26.useState)("8");
    const [emailNotifications, setEmailNotifications] = (0, import_react26.useState)(true);
    const handleSave = /* @__PURE__ */ __name(() => {
      console.log("Saving settings...");
    }, "handleSave");
    return /* @__PURE__ */ React.createElement("div", { className: "flex-1 flex flex-col overflow-hidden" }, /* @__PURE__ */ React.createElement("header", { className: "bg-white border-b border-gray-200 px-6 py-4" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("nav", { className: "flex text-sm text-gray-500 mb-1" }, /* @__PURE__ */ React.createElement("span", null, "Settings"), /* @__PURE__ */ React.createElement("span", { className: "mx-2" }, "/"), /* @__PURE__ */ React.createElement("span", { className: "text-gray-900 font-medium" }, "General")), /* @__PURE__ */ React.createElement("h2", { className: "text-2xl font-semibold text-gray-900" }, "Organization Settings")), /* @__PURE__ */ React.createElement(Button, { onClick: handleSave, className: "bg-blue-600 hover:bg-blue-700 text-white" }, /* @__PURE__ */ React.createElement(Save, { className: "w-4 h-4 mr-2" }), "Save Changes"))), /* @__PURE__ */ React.createElement("div", { className: "flex-1 overflow-auto p-6" }, /* @__PURE__ */ React.createElement("div", { className: "max-w-4xl mx-auto" }, /* @__PURE__ */ React.createElement(Tabs2, { defaultValue: "general", className: "space-y-6" }, /* @__PURE__ */ React.createElement(TabsList2, null, /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "general" }, "General"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "security" }, "Security"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "authentication" }, "Authentication"), /* @__PURE__ */ React.createElement(TabsTrigger2, { value: "notifications" }, "Notifications")), /* @__PURE__ */ React.createElement(TabsContent2, { value: "general" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Globe, { className: "w-5 h-5 mr-2" }), "Organization Information")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-6" }, /* @__PURE__ */ React.createElement("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "orgName" }, "Organization Name"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "orgName",
        value: orgName,
        onChange: (e) => setOrgName(e.target.value),
        className: "mt-1"
      }
    )), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "domain" }, "OKTA Domain"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "domain",
        value: domain,
        onChange: (e) => setDomain(e.target.value),
        className: "mt-1",
        disabled: true
      }
    ))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "subdomain" }, "Subdomain"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "subdomain",
        value: "company",
        className: "mt-1",
        disabled: true
      }
    ), /* @__PURE__ */ React.createElement("p", { className: "text-sm text-gray-500 mt-1" }, "Contact OKTA support to change your subdomain")), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "timezone" }, "Timezone"), /* @__PURE__ */ React.createElement(Select2, { defaultValue: "america/los_angeles" }, /* @__PURE__ */ React.createElement(SelectTrigger2, { className: "mt-1" }, /* @__PURE__ */ React.createElement(SelectValue2, null)), /* @__PURE__ */ React.createElement(SelectContent2, null, /* @__PURE__ */ React.createElement(SelectItem2, { value: "america/los_angeles" }, "America/Los Angeles (PST)"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "america/new_york" }, "America/New York (EST)"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "america/chicago" }, "America/Chicago (CST)"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "europe/london" }, "Europe/London (GMT)"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "asia/tokyo" }, "Asia/Tokyo (JST)"))))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "security" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Shield, { className: "w-5 h-5 mr-2" }), "Security Settings")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "mfa-required" }, "Require MFA for all users"), /* @__PURE__ */ React.createElement("p", { className: "text-sm text-gray-500" }, "Enforce multi-factor authentication for enhanced security")), /* @__PURE__ */ React.createElement(
      Switch3,
      {
        id: "mfa-required",
        checked: mfaRequired,
        onCheckedChange: setMfaRequired
      }
    )), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "session-timeout" }, "Session Timeout (hours)"), /* @__PURE__ */ React.createElement(Select2, { value: sessionTimeout, onValueChange: setSessionTimeout }, /* @__PURE__ */ React.createElement(SelectTrigger2, { className: "mt-1 max-w-xs" }, /* @__PURE__ */ React.createElement(SelectValue2, null)), /* @__PURE__ */ React.createElement(SelectContent2, null, /* @__PURE__ */ React.createElement(SelectItem2, { value: "1" }, "1 hour"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "2" }, "2 hours"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "4" }, "4 hours"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "8" }, "8 hours"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "12" }, "12 hours"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "24" }, "24 hours")))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, null, "Password Policy"), /* @__PURE__ */ React.createElement("div", { className: "mt-2 p-4 bg-gray-50 rounded-lg" }, /* @__PURE__ */ React.createElement("ul", { className: "text-sm text-gray-600 space-y-1" }, /* @__PURE__ */ React.createElement("li", null, "\u2022 Minimum 12 characters"), /* @__PURE__ */ React.createElement("li", null, "\u2022 At least one uppercase letter"), /* @__PURE__ */ React.createElement("li", null, "\u2022 At least one lowercase letter"), /* @__PURE__ */ React.createElement("li", null, "\u2022 At least one number"), /* @__PURE__ */ React.createElement("li", null, "\u2022 At least one special character"))))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "authentication" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Key, { className: "w-5 h-5 mr-2" }), "Authentication Settings")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-6" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, null, "Supported MFA Methods"), /* @__PURE__ */ React.createElement("div", { className: "mt-2 space-y-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-3 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, "OKTA Verify"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "Push notifications and TOTP")), /* @__PURE__ */ React.createElement(Switch3, { defaultChecked: true })), /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-3 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, "SMS Authentication"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "Text message verification codes")), /* @__PURE__ */ React.createElement(Switch3, { defaultChecked: true })), /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-3 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, "Security Questions"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "Backup authentication method")), /* @__PURE__ */ React.createElement(Switch3, null)))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, null, "Sign-On Policy"), /* @__PURE__ */ React.createElement(Select2, { defaultValue: "balanced" }, /* @__PURE__ */ React.createElement(SelectTrigger2, { className: "mt-1" }, /* @__PURE__ */ React.createElement(SelectValue2, null)), /* @__PURE__ */ React.createElement(SelectContent2, null, /* @__PURE__ */ React.createElement(SelectItem2, { value: "lenient" }, "Lenient - Faster access, lower security"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "balanced" }, "Balanced - Default security settings"), /* @__PURE__ */ React.createElement(SelectItem2, { value: "strict" }, "Strict - Maximum security, slower access"))))))), /* @__PURE__ */ React.createElement(TabsContent2, { value: "notifications" }, /* @__PURE__ */ React.createElement(Card, null, /* @__PURE__ */ React.createElement(CardHeader, null, /* @__PURE__ */ React.createElement(CardTitle, { className: "flex items-center" }, /* @__PURE__ */ React.createElement(Bell, { className: "w-5 h-5 mr-2" }), "Notification Settings")), /* @__PURE__ */ React.createElement(CardContent, { className: "space-y-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "email-notifications" }, "Email Notifications"), /* @__PURE__ */ React.createElement("p", { className: "text-sm text-gray-500" }, "Receive email alerts for security events and admin activities")), /* @__PURE__ */ React.createElement(
      Switch3,
      {
        id: "email-notifications",
        checked: emailNotifications,
        onCheckedChange: setEmailNotifications
      }
    )), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, null, "Notification Types"), /* @__PURE__ */ React.createElement("div", { className: "mt-2 space-y-3" }, /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-3 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, "Security Events"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "Suspicious logins, failed authentications")), /* @__PURE__ */ React.createElement(Switch3, { defaultChecked: true })), /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-3 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, "User Management"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "User creation, suspension, deletion")), /* @__PURE__ */ React.createElement(Switch3, { defaultChecked: true })), /* @__PURE__ */ React.createElement("div", { className: "flex items-center justify-between p-3 border border-gray-200 rounded-lg" }, /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement("div", { className: "font-medium" }, "System Updates"), /* @__PURE__ */ React.createElement("div", { className: "text-sm text-gray-500" }, "Maintenance, feature updates")), /* @__PURE__ */ React.createElement(Switch3, null)))), /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(Label2, { htmlFor: "admin-email" }, "Admin Email"), /* @__PURE__ */ React.createElement(
      Input,
      {
        id: "admin-email",
        type: "email",
        value: "admin@company.com",
        className: "mt-1"
      }
    )))))))));
  }
  __name(Settings3, "Settings");

  // client/src/pages/not-found.tsx
  function NotFound() {
    return /* @__PURE__ */ React.createElement("div", { className: "min-h-screen w-full flex items-center justify-center bg-gray-50" }, /* @__PURE__ */ React.createElement(Card, { className: "w-full max-w-md mx-4" }, /* @__PURE__ */ React.createElement(CardContent, { className: "pt-6" }, /* @__PURE__ */ React.createElement("div", { className: "flex mb-4 gap-2" }, /* @__PURE__ */ React.createElement(CircleAlert, { className: "h-8 w-8 text-red-500" }), /* @__PURE__ */ React.createElement("h1", { className: "text-2xl font-bold text-gray-900" }, "404 Page Not Found")), /* @__PURE__ */ React.createElement("p", { className: "mt-4 text-sm text-gray-600" }, "Did you forget to add the page to the router?"))));
  }
  __name(NotFound, "NotFound");

  // client/src/App.tsx
  function Router2() {
    const { user, isLoading } = useAuth();
    if (isLoading) {
      return /* @__PURE__ */ React.createElement("div", { className: "min-h-screen flex items-center justify-center" }, /* @__PURE__ */ React.createElement("div", { className: "text-center" }, /* @__PURE__ */ React.createElement("div", { className: "animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4" }), /* @__PURE__ */ React.createElement("p", { className: "text-gray-600" }, "Loading...")));
    }
    if (!user) {
      return /* @__PURE__ */ React.createElement(Switch, null, /* @__PURE__ */ React.createElement(Route, { path: "/login", component: Login }), /* @__PURE__ */ React.createElement(Route, { path: "*", component: Login }));
    }
    return /* @__PURE__ */ React.createElement(SSOLayout, null, /* @__PURE__ */ React.createElement(Switch, null, /* @__PURE__ */ React.createElement(Route, { path: "/", component: Users2 }), /* @__PURE__ */ React.createElement(Route, { path: "/dashboard", component: Dashboard }), /* @__PURE__ */ React.createElement(Route, { path: "/users", component: Users2 }), /* @__PURE__ */ React.createElement(Route, { path: "/users/:id", component: UserDetail }), /* @__PURE__ */ React.createElement(Route, { path: "/groups", component: Groups }), /* @__PURE__ */ React.createElement(Route, { path: "/applications", component: Applications }), /* @__PURE__ */ React.createElement(Route, { path: "/security", component: Security }), /* @__PURE__ */ React.createElement(Route, { path: "/settings", component: Settings3 }), /* @__PURE__ */ React.createElement(Route, { component: NotFound })));
  }
  __name(Router2, "Router");
  function App() {
    return /* @__PURE__ */ React.createElement(QueryClientProvider, { client: queryClient }, /* @__PURE__ */ React.createElement(TooltipProvider2, null, /* @__PURE__ */ React.createElement(Toaster, null), /* @__PURE__ */ React.createElement(Router2, null)));
  }
  __name(App, "App");
  var App_default = App;

  // client/src/main-production.tsx
  function initApp() {
    console.log("\u{1F680} initApp() called");
    console.log("\u{1F4CB} Document ready state:", document.readyState);
    const rootElement = document.getElementById("root");
    console.log("\u{1F3AF} Root element found:", !!rootElement);
    if (rootElement) {
      console.log("\u{1F9F9} Clearing root element...");
      rootElement.innerHTML = "";
      try {
        console.log("\u269B\uFE0F Creating React root...");
        const root = (0, import_client.createRoot)(rootElement);
        console.log("\u{1F3A8} Rendering app...");
        root.render(
          /* @__PURE__ */ React.createElement(ThemeProvider, { defaultTheme: "dark", storageKey: "ui-theme" }, /* @__PURE__ */ React.createElement(App_default, null))
        );
        console.log("\u2705 React app rendered successfully");
      } catch (error) {
        console.error("\u274C Error rendering React app:", error);
        const errorMessage = error instanceof Error ? error.message : String(error);
        rootElement.innerHTML = `<div style="color: red; padding: 20px;">Error: ${errorMessage}</div>`;
      }
    } else {
      console.error("\u274C Root element not found");
    }
  }
  __name(initApp, "initApp");
  console.log("\u{1F527} Script loaded, document state:", document.readyState);
  if (document.readyState === "loading") {
    console.log("\u23F3 Waiting for DOM to load...");
    document.addEventListener("DOMContentLoaded", () => {
      console.log("\u{1F4C4} DOM loaded, calling initApp");
      initApp();
    });
  } else {
    console.log("\u{1F4C4} DOM already loaded, calling initApp immediately");
    initApp();
  }
})();
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.min.js:
  (**
   * @license React
   * scheduler.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.min.js:
  (**
   * @license React
   * react-dom.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js:
  (**
   * @license React
   * use-sync-external-store-shim.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/shared/src/utils.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/defaultAttributes.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/Icon.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/createLucideIcon.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/activity.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/arrow-left.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/arrow-up-down.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/bell.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/building.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/calendar.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/check.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/chevron-down.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/chevron-left.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/chevron-right.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/chevron-up.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/circle-alert.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/circle-check-big.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/copy.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/download.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/external-link.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/eye.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/filter.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/globe.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/graduation-cap.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/grid-3x3.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/grip-vertical.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/key-round.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/key.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/monitor.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/moon.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/plus.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/refresh-cw.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/rotate-ccw.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/save.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/search.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/settings.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/shield.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/smartphone.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/square-pen.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/sun.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/trash-2.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/triangle-alert.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/user-check.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/user-plus.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/user-x.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/users.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/icons/x.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)

lucide-react/dist/esm/lucide-react.js:
  (**
   * @license lucide-react v0.453.0 - ISC
   *
   * This source code is licensed under the ISC license.
   * See the LICENSE file in the root directory of this source tree.
   *)
*/
